package com.mobiversa.payment.dao;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.joda.time.DateTime;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.BizAppSettlement;
import com.mobiversa.common.bo.BnplTxnDetails;
import com.mobiversa.common.bo.BoostDailyRecon;
import com.mobiversa.common.bo.CommonStatus;
import com.mobiversa.common.bo.CountryCurPhone;
import com.mobiversa.common.bo.EwalletTxnDetails;
import com.mobiversa.common.bo.ForSettlement;
import com.mobiversa.common.bo.FpxTransaction;
import com.mobiversa.common.bo.GrabPayFile;
import com.mobiversa.common.bo.HolidayHistory;
import com.mobiversa.common.bo.JustSettle;
import com.mobiversa.common.bo.MID;
import com.mobiversa.common.bo.MasterMerchant;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.MobiMDR;
import com.mobiversa.common.bo.MobileUser;
import com.mobiversa.common.bo.MotoVCDetails;
import com.mobiversa.common.bo.PayoutBankBalance;
import com.mobiversa.common.bo.PayoutDetail;
import com.mobiversa.common.bo.PreAuthorization;
import com.mobiversa.common.bo.Receipt;
import com.mobiversa.common.bo.RefundRequest;
import com.mobiversa.common.bo.SettlementDetails;
import com.mobiversa.common.bo.SettlementMDR;
import com.mobiversa.common.bo.SubAgent;
import com.mobiversa.common.bo.TID;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.common.bo.Transaction;
import com.mobiversa.common.bo.TransactionRequest;
import com.mobiversa.common.bo.TransactionResponse;
import com.mobiversa.common.bo.UMEcomTxnRequest;
import com.mobiversa.common.bo.UMEcomTxnResponse;
import com.mobiversa.common.dto.AgentResponseDTO;
import com.mobiversa.common.dto.MerchantSettlementDTO;
import com.mobiversa.common.dto.TerminalDTO;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.controller.bean.Settlementbalance;
import com.mobiversa.payment.dto.AgentVolumeData;
import com.mobiversa.payment.dto.FinanceReport;
import com.mobiversa.payment.dto.HostResponse;
import com.mobiversa.payment.dto.MerchantComparator;
import com.mobiversa.payment.dto.MerchantVolumeData;
import com.mobiversa.payment.dto.SettlementDetailsList;
import com.mobiversa.payment.dto.TempletFields;
import com.mobiversa.payment.dto.WithdrawDeposit;
import com.mobiversa.payment.exception.MobiException;
import com.mobiversa.payment.exception.Status;
import com.mobiversa.payment.util.AESencrp;
import com.mobiversa.payment.util.AmountFormatter;
import com.mobiversa.payment.util.DBConnection;
import com.mobiversa.payment.util.PayoutModel;
import com.mobiversa.payment.util.PreauthModel;
import com.mobiversa.payment.util.PropertyLoad;
import com.mobiversa.payment.util.SettlementModel;
import com.mobiversa.payment.util.ThalesControl;
import com.mobiversa.payment.util.UMEzyway;
import com.mobiversa.payment.util.Utils;
import com.mobiversa.payment.util.forsettlement;

@Component
@Repository
@Transactional(readOnly = true, rollbackFor = Exception.class)
public class TransactionDaoImpl extends BaseDAOImpl implements TransactionDao {
	private NumberFormat dateFormat;

	@Override
	@Transactional(readOnly = true)

	public void listAllTransaction(final PaginationBean<ForSettlement> paginationBean, final ArrayList<Criterion> props,
			final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		/*
		 * if(txnType.isEmpty() || txnType == null){ txnType = "ALL"; }
		 */
		/*
		 * if(date != null){// || !date.equals("1")){
		 * 
		 * //logger.info(" DD else data:" + date); logger.info("DD else data: " +
		 * date1); dat = date; SimpleDateFormat dateFormat = new
		 * SimpleDateFormat("yyyy-MM-dd"); try { dat = dateFormat.format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(dat)); } catch (ParseException e) { //
		 * TODO Auto-generated catch block e.printStackTrace(); }
		 * 
		 * //logger.info("date1: " + dat );
		 * 
		 * //SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); //dat =
		 * dateFormat.format(date); }
		 * 
		 * if(date1 != null){// || !date1.equals("1")){ dat1 = date1; SimpleDateFormat
		 * dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); try { dat1 =
		 * dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1)); } catch
		 * (ParseException e) { // TODO Auto-generated catch block e.printStackTrace();
		 * }
		 * 
		 * 
		 * }
		 */

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			// logger.info("Inside listAllTransaction 12131313: " + date + " " + date1);
			/*
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM"); from =
			 * dateFormat.format(dt); from = from + "-01"; logger.info("change date format:"
			 * + from);
			 */

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.ag_name "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and DATE between '" + dat + "' and '" + dat1 +
		 * "' and txn_year between '"
		 * +year1+"' and '"+year2+"' group by a.MID,a.DATE order by a.DATE desc" ;
		 */

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME,f.ACTIVATE_DATE "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("inside ALL" + txnType);
			sql = "(select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST  t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID = m.BOOST_MID "
					+ "or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where  a.STATUS in "
					+ "('A','S','CT','C','R','CV','P','BPS','BPA','BPC') and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ) " + "UNION "
					+ " (select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID, "
					+ " '' AS LOCATION , '' AS TRX_ID , '' AS STAN , 'FPX' As TXN_TYPE , '' AS HOST_TYPE , '' AS RRN , '' AS AID_RESPONSE ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND " + "f.TIME_STAMP between "
					+ ":from and  :to order by f.TIME_STAMP desc ) " + "UNION "
					+ " (select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS, '' AS TID ,  '' AS MID,"
					+ " a.LOCATION AS LOCATION , a.TRX_ID AS TRX_ID , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.HOST_TYPE AS HOST_TYPE ,a.RRN AS RRN ,a.AID_RESPONSE AS AID_RESPONSE ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND  a.TIME_STAMP BETWEEN "
					+ ":from and  :to order by a.TIME_STAMP desc ) ";

		} else if (txnType.equals("EZYWIRE")) {
			logger.info("inside CARD" + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE is NULL and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("BOOST")) {
			logger.info("inside BOOST TYPE" + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID = m.BOOST_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "( 'A','S','BPC','BPA','BPS') and a.TXN_TYPE='BOOST' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		}

		else if (txnType.equals("EZYCASH")) {
			logger.info("inside cash: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('CT') and a.TXN_TYPE='CASH' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("EZYMOTO")) {
			logger.info("inside MOTO: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='MOTO' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("EZYLINK")) {
			logger.info("inside MOTO: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='EZYLINK' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("EZYWAY")) {
			logger.info("inside EZYWAY: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.EZYWAY_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='EZYWAY' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("EZYREC")) {
			logger.info("inside EZYREC: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.EZYREC_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='EZYREC' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("EZYRECPLUS")) {
			logger.info("inside EZYRECPLUS: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.EZYREC_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='RECPLUS' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("GRABPAY")) {
			logger.info("inside GRABPAY: " + txnType);
			sql = "select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS, '' AS TID ,  '' AS MID,"
					+ " a.LOCATION AS LOCATION , a.TRX_ID AS TRX_ID , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.HOST_TYPE AS HOST_TYPE ,a.RRN AS RRN ,a.AID_RESPONSE AS AID_RESPONSE ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND a.TXN_TYPE='GRABPAY' AND  a.TIME_STAMP BETWEEN "
					+ ":from and  :to order by a.TIME_STAMP desc ";
		} else if (txnType.equals("FPX")) {
			logger.info("inside FPX: " + txnType);
			sql = "select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID, "
					+ " '' AS LOCATION , '' AS TRX_ID , '' AS STAN , 'FPX' As TXN_TYPE , '' AS HOST_TYPE , '' AS RRN , '' AS AID_RESPONSE ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID OR f.MID = m.FPX_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND " + "f.TIME_STAMP between "
					+ ":from and  :to order by f.TIME_STAMP desc ";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				if (rec[2].toString().contains(".")) {
					fs.setAmount(rec[2].toString());
				} else {

					// set amount
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					fs.setAmount(output);
				}
			} else {
				fs.setAmount("0.00");
			}

			if (rec[4] != null) {
				// status
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GPS")) {
					fs.setStatus("GRABPAY COMPLETED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GRF")) {
					fs.setStatus("GRABPAY REFUND");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GBC")) {
					fs.setStatus("GRABPAY CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}

				// fs.setStatus(rec[4].toString());
			}
			// SET TIME
			if (rec[3] != null || rec[3] != "") {
				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
					// logger.info("time for normal trans: "+fs.getTime());
				} catch (ParseException e) {
				}
			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				/*
				 * if (fs.getStatus() != null || !fs.getStatus().isEmpty()) { if
				 * (!fs.getStatus().equals("CASH SALE") &&
				 * !fs.getStatus().equals("CASH CANCELLED")) { //
				 * logger.info("TID : "+rec[5].toString()); TerminalDetails td =
				 * getTerminalDetailsByTid(rec[5].toString()); if (td != null) { //
				 * logger.info("TID : "+td.getTid()); if (td.getContactName() != null) { //
				 * logger.info("TID : "+td.getContactName());
				 * fs.setMerchantName(td.getContactName()); } else { fs.setMerchantName(""); } }
				 * } }
				 */

			} else {
				fs.setTid("");
			}

			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());

			}

//		         if (rec[8] != null) {
//		                BigInteger number = new BigInteger(rec[8].toString());
//		                // logger.info("trid: "+number);
//		                fs.setTrxId(number);
			//
//		         }
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					}

					else if (fs.getTxnType().equals("FPX")) {
						fs.setTxnType("FPX");
					} else if (fs.getTxnType().equals("BOOST")) {
						fs.setTxnType("BOOST");
					} else if (fs.getTxnType().equals("GRABPAY")) {
						fs.setTxnType("GRABPAY");
					}

				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					} else if (fs.getTxnType().equals("FPX")) {
						fs.setTxnType("FPX");
					}

					else if (fs.getTxnType().equals("BOOST")) {
						fs.setTxnType("BOOST");
					} else if (fs.getTxnType().equals("GRABPAY")) {
						fs.setTxnType("GRABPAY");
					}

				} else {
					fs.setTxnType("EZYWIRE");
				}
			}

			if (rec[12] != null) {

				fs.setRrn(rec[12].toString());
			}
			if (rec[13] != null) {

				fs.setAidResponse(rec[13].toString());
			}
			if (rec[14] != null) {

				fs.setInvoiceId(rec[14].toString());
			}

			// card holder name

			if (rec[15] != null) {
				fs.setNumOfRefund(rec[15].toString());
			} else {
				fs.setNumOfRefund("");

			}

			// card number

			if (rec[16] != null) {
				fs.setPan(rec[16].toString());
			} else {
				fs.setPan("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public List<TerminalDetails> getGpayTid(Merchant merchant) {
		String gPayMid = null;
		if (merchant.getMid().getGpayMid() != null) {
			gPayMid = merchant.getMid().getGpayMid();
		}
		List<TerminalDetails> td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { gPayMid })).list();
		return td;

	}

	@Override
	public List<MobileUser> getGpayTidbyFK(Merchant merchant) {
		/*
		 * String gPayMid=null; if(merchant.getMid().getGpayMid()!=null) {
		 * gPayMid=merchant.getMid().getGpayMid(); }
		 */
		List<MobileUser> td = (List<MobileUser>) super.getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("merchant.id", merchant.getId())).list();
		return td;

	}

	@Override
	public List<MobileUser> getAllGpayTid() {
		/*
		 * String gPayMid=null; if(merchant.getMid().getGpayMid()!=null) {
		 * gPayMid=merchant.getMid().getGpayMid(); }
		 */
		List<MobileUser> td = (List<MobileUser>) super.getSessionFactory().createCriteria(MobileUser.class).list();
		/* .add(Restrictions.eq("merchant.id", merchant.getId())).list(); */
		return td;

	}

	@Override
	public List<TerminalDetails> getAllTid(Merchant merchant) {
		@SuppressWarnings("unchecked")
		String mid = null, motoMid = null, ezypassMid = null, ezywayMid = null, ezyrecMid = null, gPayMid = null;
		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		} else if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getGpayMid() != null) {
			gPayMid = merchant.getMid().getGpayMid();
		}
		List<TerminalDetails> td = super.getSessionFactory().createCriteria(TerminalDetails.class).add(
				Restrictions.in("merchantId", new String[] { mid, motoMid, ezypassMid, ezyrecMid, ezywayMid, gPayMid }))
				.list();
		return td;
	}

	@Override
	public List<CountryCurPhone> loadCountryData() {
		@SuppressWarnings("unchecked")
		List<CountryCurPhone> countryPhCode = sessionFactory.getCurrentSession().createCriteria(CountryCurPhone.class)
				.add(Restrictions.eq("status", "ACTIVE")).list();
		// .add(Restrictions.eq("tid",
		// tid)).add(orExp).addOrder(Order.desc("timeStamp")).list();

		return countryPhCode;
	}

	@Override
	public TID getTID(final Transaction transaction) {
		TID tid = (TID) super.getSessionFactory().createCriteria(TID.class)
				.add(Restrictions.eq("transaction", transaction)).setMaxResults(1).uniqueResult();
		return tid;
	}

	@Override
	@Transactional(readOnly = true)
	public void listTransactionTIDUsers(final PaginationBean<Transaction> paginationBean,
			final ArrayList<Criterion> mobileUser) {
		super.getPaginationItemsByPage(paginationBean, Transaction.class, mobileUser, Order.asc("id"));

	}

	@Override
	public ArrayList<ForSettlement> listTransaction(final PaginationBean<ForSettlement> paginationBean,
			final String mid) {

		ArrayList<ForSettlement> transactionList = new ArrayList<ForSettlement>();
		if (mid != null) {
			// logger.info("teste IF");
			paginationBean.setItemList(transactionList);
			paginationBean.setTotalRowCount(transactionList.size());
		} else {
			// logger.info("teste ELSE");
			/*
			 * String sql =
			 * "select treq.TXN_ID,treq.MID,treq.TID,treq.TERMINAL_DEVICE,treq.AMOUNT,tres.LOCAL_DATE,tres.LOCAL_TIME,tres.RESPONSE_CODE"
			 * +
			 * " from transaction_request treq left join transaction_response tres on treq.TXN_ID=tres.TXN_ID"
			 * + " where treq.MID=:mid";
			 * 
			 * 
			 * String sql =
			 * "select a.date , a.batchno AS BatchNO, f.BUSINESS_NAME AS MerchantName , a.mid AS MID,sum(a.AMOUNT) TotalAmount "
			 * +
			 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
			 * +
			 * "ON f.MID_FK=m.ID where a.status='S' group by a.MID,a.BATCHNO,a.DATE order by a.DATE desc"
			 * ;
			 */
			String sql1 = "select a.date , a.batchno AS BatchNO,  a.mid , sum(a.AMOUNT) TotalAmount "
					+ "from FOR_SETTLEMENT a  where a.status='S' and a.DATE like '%03' group by a.MID,a.BATCHNO,a.DATE order by a.DATE desc";

			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql1).addEntity(ForSettlement.class);// .setParameter("mid",
																											// mid);

			List<ForSettlement> resultSet = sqlQuery.list();
			for (ForSettlement record : resultSet) {
				ForSettlement row = record;
				transactionList.add(row);

			}
			paginationBean.setItemList(transactionList);
			paginationBean.setTotalRowCount(transactionList.size());
		}
		return transactionList;
	}

	@Override
	public void getForSettlement(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	// grab pay qr
	@Override
	public void getForSettlementgrabpayqr(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	// grab pay ecom
	@Override
	public void getForSettlementgrabpayecom(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	public void getCardTransForSettlement(PaginationBean<forsettlement> paginationBean, Merchant merchant,
			String txnType) {
		logger.info("In dao impl******* " + merchant.getMid().getMid() + " " + merchant.getMid().getUmMid());
		logger.info("TXN TYPE******* " + txnType);

		ArrayList<forsettlement> fsList = new ArrayList<forsettlement>();
		String sql2 = null;
		String umMid = null, mid = null;
		String boostmid = null, fpxmid = null, grabmid = null, tngMid = null, shoppyMid = null;

		String bnplMid = null;

		if (txnType != null) {
			if (txnType.equals("EZYMOTO")) {
				if (merchant.getMid().getMotoMid() != null) {
					mid = merchant.getMid().getMotoMid();
				}

			} else if (txnType.equals("EZYLINK")) {
				if (merchant.getMid().getMotoMid() != null) {
					mid = merchant.getMid().getMotoMid();
				}
				/*
				 * if(merchant.getMid().getUmMotoMid()!=null) {
				 * umMid=merchant.getMid().getUmMotoMid(); }
				 */
			} else if (txnType.equals("EZYREC")) {
				if (merchant.getMid().getEzyrecMid() != null) {
					TerminalDetails termDetails = loadTerminalDetailsByMid(merchant.getMid().getEzyrecMid());
					/*
					 * if((termDetails.getDeviceType() ==
					 * "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
					 * mid=merchant.getMid().getEzyrecMid(); }else {
					 * mid=merchant.getMid().getEzyrecMid(); }
					 */

					mid = merchant.getMid().getEzyrecMid();
				}
				/*
				 * if(merchant.getMid().getUmEzyrecMid()!=null) {
				 * umMid=merchant.getMid().getUmEzyrecMid(); }
				 */
			} else if (txnType.equals("EZYPASS")) {
				if (merchant.getMid().getEzypassMid() != null) {
					mid = merchant.getMid().getEzypassMid();
				}
				/*
				 * if(merchant.getMid().getUmEzypassMid()!=null) {
				 * umMid=merchant.getMid().getUmEzypassMid(); }
				 */
			} else if (txnType.equals("EZYWAY")) {
				if (merchant.getMid().getEzywayMid() != null) {
					mid = merchant.getMid().getEzywayMid();
				}
				/*
				 * if(merchant.getMid().getUmEzywayMid()!=null) {
				 * umMid=merchant.getMid().getUmEzywayMid(); }
				 */
			} else if (txnType.equals("RECPLUS")) {
				if (merchant.getMid().getEzyrecMid() != null) {
					mid = merchant.getMid().getEzyrecMid();
				}
				/*
				 * if(merchant.getMid().getUmEzyrecMid()!=null) {
				 * umMid=merchant.getMid().getUmEzyrecMid(); }
				 */
			}
		} else {
			if (merchant.getMid().getMid() != null) {
				mid = merchant.getMid().getMid();
			}

		}

		Date dt = new Date();

		String from = null;
		String to = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		from = dateFormat.format(dt);
		String from1 = from.substring(0, from.length() - 2);
		from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
		logger.info("change date format:" + from);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		to = dateFormat1.format(dt1);
		String to1 = to.substring(0, to.length() - 2);
		to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
		logger.info("date format:" + to);

		Query sqlQuery = null;
		if (txnType != null) {

			if (txnType.equals("EZYMOTO")) {
				if (merchant.getMid().getMotoMid() != null) {
					mid = merchant.getMid().getMotoMid();
				}

				logger.info("BNPL MID  " + bnplMid);
				logger.info("txn type: " + txnType + "mid: " + mid);

				sql2 = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
						+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE IN ('MOTO','EZYLINK','EZYMOTO') And "
						+ " a.TIME_STAMP BETWEEN :from and :to ) as temp order by TIME_STAMP desc";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);

				sqlQuery.setString("mid", mid);
				sqlQuery.setString("from", from);
				sqlQuery.setString("to", to);

				String FromDate = paginationBean.setDateFromBackend(from);
				String From1Date = paginationBean.setDate1FromBackend(to);
				String TXNTYPE = paginationBean.setTXNtype(txnType);

				// Dynamic changes for pagination count

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			} else if (txnType.equals("EZYLINK")) {

				if (merchant.getMid().getMotoMid() != null) {
					mid = merchant.getMid().getMotoMid();
				}

				logger.info("txn type: " + txnType + "mid: " + mid + "BNPL MID " + bnplMid);

				sql2 = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
						+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE IN ('MOTO','EZYLINK','EZYMOTO') And "
						+ " a.TIME_STAMP BETWEEN :from and :to) as temp order by TIME_STAMP desc";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);

				sqlQuery.setString("mid", mid);
				sqlQuery.setString("from", from);
				sqlQuery.setString("to", to);

				String FromDate = paginationBean.setDateFromBackend(from);
				String From1Date = paginationBean.setDate1FromBackend(to);
				String TXNTYPE = paginationBean.setTXNtype(txnType);

				// Dynamic changes for pagination count

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			} else if (txnType.equals("EZYREC")) {

				if (merchant.getMid().getEzyrecMid() != null) {
					mid = merchant.getMid().getEzyrecMid();
				}
				if (merchant.getMid().getBoostMid() != null) {
					boostmid = merchant.getMid().getBoostMid();
				}
				if (merchant.getMid().getGpayMid() != null) {
					grabmid = merchant.getMid().getGpayMid();
				}

				if (merchant.getMid().getFpxMid() != null) {
					fpxmid = merchant.getMid().getFpxMid();
				}
				if (merchant.getMid().getTngMid() != null) {
					tngMid = merchant.getMid().getTngMid();
				}
				if (merchant.getMid().getShoppyMid() != null) {
					shoppyMid = merchant.getMid().getShoppyMid();
				}
				// bnplpaydeeEZYREC
				if (merchant.getMid().getBnplMid() != null) {
					bnplMid = merchant.getMid().getBnplMid();
				}

				sql2 = "select * from ((select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'' AS NETAMOUNT,'' AS MDRAMT ,'' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
						+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE IN ('EZYREC','RECURRING') and "
						+ " a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
						+ "(select a.MID AS MID  , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN , 'BOOST' AS CARD_SCHEME  ,'' AS CARD_TYPE, "
						+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
						+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
						+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE , a.TIME_STAMP AS TIME_STAMP ,'' AS TRX_ID , 'NULL' AS BANK_NAME "
						+ "from mobiversa.FOR_SETTLEMENT a " + "WHERE a.STATUS in ('BPS','BPA','BPC') AND "
						+ "(a.MID = :mid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN :from and :to) " + "UNION "
						+ "(select '' AS MID, '' AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN ,'GRABPAY'  AS CARD_SCHEME,'' AS CARD_TYPE ,'' AS NETAMOUNT  ,'' AS MDRAMT ,'' AS SETTLE_DATE ,  a.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , 'NULL' AS BANK_NAME "
						+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
						+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
						+ "WHERE (m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.GRAB_MID = :grabmid) and a.STATUS in ('GPS','GRF','GBC','GPT') and "
						+ "a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
						+ "(select f.MID AS MID,f.TID AS TID ,f.TXNAMOUNT AS AMOUNT,f.STATUS AS STATUS ,f.SELLERORDERNO AS INVOICE_ID,f.FPXTXNID AS AID_RESPONSE, "
						+ " '' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'FPX' AS CARD_SCHEME,'' AS CARD_TYPE,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , f.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , f.BANK_NAME AS BANK_NAME "
						+ "from mobiversa.FPX_TRANSACTION f "
						+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
						+ "(f.MID = :mid OR f.MID = :fpxmid)  And f.TIME_STAMP BETWEEN " + " :from and :to ) "
						+ "UNION "
						+ "(select f.MID AS MID,f.TID AS TID ,f.AMOUNT AS AMOUNT,f.STATUS AS STATUS ,f.INVOICE_ID AS INVOICE_ID,f.TNG_TXN_ID AS AID_RESPONSE, "
						+ " '' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,f.TXN_TYPE AS CARD_SCHEME,'' AS CARD_TYPE,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , f.TIME_STAMP AS TIME_STAMP,f.MOBI_TXN_ID AS TRX_ID , 'NULL' AS BANK_NAME "
						+ "from mobiversa.EWALLET_TXN_DETAILS f " + "WHERE f.STATUS IN ('TPS','SPS','TPA','SPA') AND "
						+ " (f.MID = :tngMid OR f.MID = :shoppyMid OR f.MID = :mid)  And f.TIME_STAMP BETWEEN "
						+ " :from and :to )" + "UNION"
						+ "(SELECT b.MID as MID,b.TID,b.AMOUNT AS AMOUNT,b.STATUS AS STATUS,b.INVOICE_ID AS INVOICE_ID,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'BNPL' AS TXN_TYPE,'' AS CARD_TYPE,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,b.TIME_STAMP AS TIME_STAMP,b.MOBI_TXN_ID AS TRX_ID,'NULL' AS BANK_NAME"
						+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNS','BNA','H') AND (b.MID = :bnplMid OR b.MID = :mid) AND b.TIME_STAMP BETWEEN :from and :to)) as temp order by TIME_STAMP desc";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);

				sqlQuery.setString("mid", mid);
				sqlQuery.setString("from", from);
				sqlQuery.setString("to", to);
				sqlQuery.setString("boostmid", boostmid);
				sqlQuery.setString("grabmid", grabmid);
				sqlQuery.setString("fpxmid", fpxmid);
				sqlQuery.setString("tngMid", tngMid);
				sqlQuery.setString("shoppyMid", shoppyMid);
				sqlQuery.setString("bnplMid", bnplMid);

				String FromDate = paginationBean.setDateFromBackend(from);
				String From1Date = paginationBean.setDate1FromBackend(to);
				String TXNTYPE = paginationBean.setTXNtype(txnType);

				// Dynamic changes for pagination count

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			} else if (txnType.equals("RECPLUS")) {

				if (merchant.getMid().getEzyrecMid() != null) {
					mid = merchant.getMid().getEzyrecMid();
				}
				if (merchant.getMid().getBoostMid() != null) {
					boostmid = merchant.getMid().getBoostMid();
				}
				if (merchant.getMid().getGpayMid() != null) {
					grabmid = merchant.getMid().getGpayMid();
				}

				if (merchant.getMid().getFpxMid() != null) {
					fpxmid = merchant.getMid().getFpxMid();
				}
				if (merchant.getMid().getTngMid() != null) {
					tngMid = merchant.getMid().getTngMid();
				}
				if (merchant.getMid().getShoppyMid() != null) {
					shoppyMid = merchant.getMid().getShoppyMid();
				}

				sql2 = "select * from ((select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'' AS NETAMOUNT,'' AS MDRAMT ,'' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
						+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE='RECPLUS' And "
						+ " a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
						+ "(select a.MID AS MID  , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN , 'BOOST' AS CARD_SCHEME  ,'' AS CARD_TYPE, "
						+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
						+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
						+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE , a.TIME_STAMP AS TIME_STAMP ,'' AS TRX_ID , 'NULL' AS BANK_NAME "
						+ "from mobiversa.FOR_SETTLEMENT a " + "WHERE a.STATUS in ('BPS','BPA','BPC') AND "
						+ "(a.MID = :mid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN :from and :to) " + "UNION "
						+ "(select '' AS MID, '' AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN ,'GRABPAY'  AS CARD_SCHEME,'' AS CARD_TYPE ,'' AS NETAMOUNT  ,'' AS MDRAMT ,'' AS SETTLE_DATE ,  a.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , 'NULL' AS BANK_NAME "
						+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
						+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
						+ "WHERE (m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.GRAB_MID = :grabmid ) and a.STATUS in ('GPS','GRF','GBC','GPT') and "
						+ "a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
						+ "(select f.MID AS MID,f.TID AS TID ,f.TXNAMOUNT AS AMOUNT,f.STATUS AS STATUS ,f.SELLERORDERNO AS INVOICE_ID,f.FPXTXNID AS AID_RESPONSE, "
						+ " '' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'FPX' AS CARD_SCHEME,'' AS CARD_TYPE,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , f.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , f.BANK_NAME AS BANK_NAME "
						+ "from mobiversa.FPX_TRANSACTION f "
						+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
						+ "(f.MID = :mid OR f.MID = :fpxmid)  And f.TIME_STAMP BETWEEN " + " :from and :to ) "
						+ "UNION "
						+ "(select f.MID AS MID,f.TID AS TID ,f.AMOUNT AS AMOUNT,f.STATUS AS STATUS ,f.INVOICE_ID AS INVOICE_ID,f.TNG_TXN_ID AS AID_RESPONSE, "
						+ " '' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,f.TXN_TYPE AS CARD_SCHEME,'' AS CARD_TYPE,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , f.TIME_STAMP AS TIME_STAMP,f.MOBI_TXN_ID AS TRX_ID , 'NULL' AS BANK_NAME "
						+ "from mobiversa.EWALLET_TXN_DETAILS f " + "WHERE f.STATUS IN ('TPS','SPS','TPA','SPA') AND "
						+ " (f.MID = :tngMid OR f.MID = :shoppyMid OR f.MID = :mid)  And f.TIME_STAMP BETWEEN "
						+ " :from and :to )) as temp order by TIME_STAMP desc";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);

				sqlQuery.setString("mid", mid);
				sqlQuery.setString("from", from);
				sqlQuery.setString("to", to);
				sqlQuery.setString("boostmid", boostmid);
				sqlQuery.setString("grabmid", grabmid);
				sqlQuery.setString("fpxmid", fpxmid);
				sqlQuery.setString("tngMid", tngMid);
				sqlQuery.setString("shoppyMid", shoppyMid);

				String FromDate = paginationBean.setDateFromBackend(from);
				String From1Date = paginationBean.setDate1FromBackend(to);
				String TXNTYPE = paginationBean.setTXNtype(txnType);

				// Dynamic changes for pagination count

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			} else if (txnType.equals("EZYWAY")) {
				if (merchant.getMid().getEzywayMid() != null) {
					mid = merchant.getMid().getEzywayMid();
				}

				// bnplpaydeeEzyway

				sql2 = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
						+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE='EZYWAY' and "
						+ " a.TIME_STAMP BETWEEN :from and :to ) as temp order by TIME_STAMP desc";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);

				sqlQuery.setString("mid", mid);
				sqlQuery.setString("from", from);
				sqlQuery.setString("to", to);

				String FromDate = paginationBean.setDateFromBackend(from);
				String From1Date = paginationBean.setDate1FromBackend(to);
				String TXNTYPE = paginationBean.setTXNtype(txnType);

				// Dynamic changes for pagination count

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			}

			// EZYWIRE
		}

		else {

			if (merchant.getMid().getMid() != null) {
				mid = merchant.getMid().getMid();
			}

			logger.info("from date: " + from + "toDate: " + to);

			sql2 = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
					+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
					+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And"
					+ " a.TXN_TYPE is NULL  and a.TIME_STAMP BETWEEN :from and :to) as temp order by TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			logger.info("MID is :" + mid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}
		logger.info("Query : " + sql2);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			forsettlement fs = new forsettlement();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setMid("");
			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[1] != null) {

				fs.setTid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setStatus("");
			} else if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setStatus("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("TPA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("SPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("TPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("SPS")) {
					fs.setStatus("SETTLED");
				}

				else if (rec[3].toString().equals("BNA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BNS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("BNC")) {
					fs.setStatus("VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[4] != null) {

				fs.setReference(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setAidresponse("");
			} else if (rec[5] != null) {

				fs.setAidresponse(rec[5].toString());
			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setRrn("");
			} else if (rec[6] != null) {

				fs.setRrn(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNameoncard("");
			} else if (rec[7] != null) {

				fs.setNameoncard(rec[7].toString());
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardnumber("");
			} else if (rec[8] != null) {

				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setCardnumber(lasteightDigits);
				}

			} else {
				fs.setCardnumber("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[9] != null) {
				if (rec[16].toString().equals("NULL")) {

					fs.setCardscheme(rec[9].toString());
				} else if (rec[16] != null && !rec[16].toString().isEmpty()) {
					fs.setCardscheme(rec[9].toString() + " - " + rec[16].toString());
				} else {
					fs.setCardscheme(rec[9].toString());
				}

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setCardtype("");
			} else if (rec[10] != null) {

				fs.setCardtype(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty() || rec[11].toString().equals("NULL")) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty() || rec[12].toString().equals("NULL")) {
				fs.setMdrAmount("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmount(output);
			}

			if (rec[13] == null || rec[13].toString().isEmpty() || rec[13].toString().equals("NULL")) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[13].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[13].toString());
				}

				else if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				} else {

					String rn = null;
					try {
						rn = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[13].toString()));
					} catch (ParseException e) {

						e.printStackTrace();
					}

					fs.setSettlementDate(rn);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");

			} else if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger bi = new BigInteger(rec[15].toString());
				fs.setTrxid(bi);
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// getEzyPODTransForSettlement

	public void getUMMidTransForSettlement(PaginationBean<ForSettlement> paginationBean, String umMid, String txnType) {
		logger.info("In dao impl******* " + umMid);

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String sql2 = null;

		Query sqlQuery = null;
		if (txnType != null) {
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.MID= :umMid and "
					+ "f.TXN_TYPE = :txnType and f.HOST_TYPE='U' and f.TIME_STAMP between DATE_SUB(now(),INTERVAL 20 DAY) and now() "
					+ "order by f.TIME_STAMP desc";

			sqlQuery.setString("txnType", txnType);
		} else {
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.MID= :umMid and "
					+ "f.TXN_TYPE is NULL and f.HOST_TYPE='U' and f.TIME_STAMP between DATE_SUB(now(),INTERVAL 20 DAY) and now()"
					+ "order by f.TIME_STAMP desc";

		}
		logger.info("Query : " + sql2);
		sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("umMid", umMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT
				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setPan(rec[7].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// trxid
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setTxnType(rec[10].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("EZYPASS")) {
					fs.setTxnType("EZYPASS");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				}
			} else {
				fs.setTxnType("UMOBILE");
			}
			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void getForSettlementnonmerchant(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl non merchant*******");
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchForSettlement(String fromDate, String toDate, String tid, final String status,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data : " + fromDate + " " + toDate + " " + tid + " " + status);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@Override
	public void searchAllForSettlement(PaginationBean<forsettlement> paginationBean, String fromDate, String toDate,
			Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + " toDate: " + toDate);
		String mid = null, motoMid = null, ezywayMid = null, ezyrecMid = null, ezypassMid = null;
		String umMid = null;
		String boostmid = null;
		String fpxmid = null;
		String grabmid = null;
		String from = null;
		String to = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}

		if (fromDate != null && toDate != null) {

			from = fromDate;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));

			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = toDate;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		ArrayList<forsettlement> fsList = new ArrayList<forsettlement>();
		String sql = null;
		Query sqlQuery = null;
//		String num = null;
		List num = null;

		logger.info("from date: " + from + "toDate: " + to);

		sql = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID  from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
				+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And"
				+ "  a.TIME_STAMP BETWEEN :from and :to ) as temp order by TIME_STAMP desc ";
//		sql="select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,"+
//			"a.RRN AS RRN ,'' AS CARD_HOLDER_NAME , '' AS MASKED_PAN ,'' AS CARD_SCHEME ,'' AS CARD_TYPE,'' AS NETAMOUNT,'' AS MDRAMT ,'' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID  from FOR_SETTLEMENT a "+
//				"where  a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE is NULL  and a.TIME_STAMP BETWEEN :from AND :to";
//				

		logger.info("Query : " + sql);
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("mid", mid);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		logger.info("MID is :" + mid);
//		num = sqlQuery.list();

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);

		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
//		List<Object[]> resultSet = sqlQuery.list();
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			forsettlement fs = new forsettlement();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setMid("");
			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[1] != null) {

				fs.setTid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setStatus("");
			} else if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setStatus("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setStatus("VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[4] != null) {

				fs.setReference(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setAidresponse("");
			} else if (rec[5] != null) {

				fs.setAidresponse(rec[5].toString());
			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setRrn("");
			} else if (rec[6] != null) {

				fs.setRrn(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNameoncard("");
			} else if (rec[7] != null) {

				fs.setNameoncard(rec[7].toString());
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardnumber("");
			} else if (rec[8] != null) {

				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setCardnumber(lasteightDigits);
				}

			} else {
				fs.setCardnumber("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[9] != null) {

				fs.setCardscheme(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setCardtype("");
			} else if (rec[10] != null) {

				fs.setCardtype(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty() || rec[11].toString().equalsIgnoreCase("NULL")) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty() || rec[12].toString().equalsIgnoreCase("NULL")) {
				fs.setMdrAmount("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmount(output);
			}

			if (rec[13] == null || rec[13].toString().isEmpty() || rec[13].toString().equalsIgnoreCase("NULL")) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[13].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[13].toString());
				}

				else if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");

			} else if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {
				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger bi = new BigInteger(rec[15].toString());
				fs.setTrxid(bi);
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void searchUMForSettlement(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, Merchant merchant, String txnType) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status + "Txn type :  " + txnType);
		String ummid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;
		String boostmid = null;
		String grabmid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}
		/*
		 * if(merchant.getMid().getMotoMid()!=null){
		 * motoMid=merchant.getMid().getMotoMid(); }
		 * if(merchant.getMid().getMotoMid()!=null){
		 * ezywayMid=merchant.getMid().getEzywayMid(); }
		 * if(merchant.getMid().getMotoMid()!=null){
		 * ezyrecMid=merchant.getMid().getEzyrecMid(); }
		 * if(merchant.getMid().getMotoMid()!=null){
		 * ezypassMid=merchant.getMid().getEzypassMid(); }
		 */

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		if (txnType.equals("CARD")) {
			logger.info("inside card: " + "from date: " + fromDate + "toDate: " + toDate + "txntype: " + txnType);
			logger.info(ummid + "middd");

			sql = " select * from ((select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE , a.TIME_STAMP , a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from "
					+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP between "
					+ ":fromDate and :toDate )" + "UNION "
					+ "(select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,'','','',a.TIME_STAMP , a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE  from "
					+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','C') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP between "
					+ ":fromDate and :toDate )) as temp order by TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("ummid", ummid);
			logger.info(ummid + "midddb");

			/*
			 * String FromDate= paginationBean.setDateFromBackend(fromDate); String
			 * From1Date= paginationBean.setDate1FromBackend(toDate); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 */
			/* String devID2 = paginationBean.setDeviceID(); */

			/*
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 */
		}

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF354_TID(rec[1].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[3].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF270_ORN(rec[4].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[5] != null) {
				fs.setF011_AUTHIDRESP(rec[5].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[6] != null) {
				fs.setF023_RRN(rec[6].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[7] != null) {
				fs.setF268_CHNAME(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[8] != null || rec[8] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else {
				fs.setCardscheme(rec[9].toString());
			}

			if (rec[10] != null) {

				fs.setCardType(rec[10].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[13].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}
			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger number = new BigInteger(rec[15].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setTxnType("");
			}

			else if (rec[16] == "NULL") {
				fs.setTxnType("No");

			}

			else if (rec[16].toString().equalsIgnoreCase("Yes")) {
				logger.info("inside preauth sale");

				fs.setTxnType("Yes");

			}

			if (rec[17] == null || rec[17].toString().isEmpty() || rec[17].toString().equalsIgnoreCase("NULL")) {
				fs.setPreauthfee("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setPreauthfee(output);
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void getAllTransactionbyMerchant(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			Merchant merchant) {

		// logger.info("mid for all transaction: "+merchant.getMid().getMid()+" :
		// "+merchant.getMid().getMotoMid());
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		String mid = null, motoMid = null, ezywayMid = null, ezyrecMid = null, ezypassMid = null;
		String umMid = null;
		String splitMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}

		if (merchant.getMid().getEzywayMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}

		// new date condition - 29/12/2020

		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);
		logger.info("mid" + mid);
		logger.info("motoMid" + motoMid);
		logger.info("ezywayMid" + ezywayMid);
		logger.info("ezyrecMid" + ezyrecMid);
		logger.info("ezypassMid" + ezypassMid);
		logger.info("umMid" + umMid);

		// original
//		sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,"
//				+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID , t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID INNER JOIN MID m on "
//				+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID "
//				+ "or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
//				+ "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC','B') and a.MID in "
//				+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between "
//				+ ":fromDate and :toDate order by a.TIME_STAMP desc limit 100";

		sql = "(select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
				+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN  TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
				+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where  a.STATUS in "
				+ "('A','S','CT','C','R','CV','P','BPS','BPA','BPC') and a.MID in "
				+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between "
				+ ":fromDate and :toDate order by a.TIME_STAMP desc limit 100) " + "UNION "
				+ " (select  mr.BUSINESS_NAME AS BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID, "
				+ " '' AS LOCATION , '' AS TRX_ID , '' AS STAN , 'FPX' As TXN_TYPE , '' AS HOST_TYPE , '' AS RRN , '' AS AID_RESPONSE ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
				+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
				+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
				+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND "
				+ "f.MID IN (:ezywayMid,:motoMid,:splitMid ,:ezyrecMid) And f.TIME_STAMP between "
				+ ":fromDate and  :toDate order by f.TIME_STAMP desc limit 100) " + "UNION "
				+ " (select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS, '' AS TID ,  '' AS MID,"
				+ " a.LOCATION AS LOCATION , a.TRX_ID AS TRX_ID , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.HOST_TYPE AS HOST_TYPE ,a.RRN AS RRN ,a.AID_RESPONSE AS AID_RESPONSE ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
				+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
				+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
				+ "WHERE (m.MID=:mid or m.EZYWAY_MID=:ezywayMid or m.EZYREC_MID=:ezyrecMid or m.EZYPASS_MID=:ezypassMid or m.MOTO_MID =:motoMid) and c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND  a.TIME_STAMP BETWEEN "
				+ ":fromDate and  :toDate order by a.TIME_STAMP desc limit 100) ";

		/*
		 * sql =
		 * "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','CT','C','R','CV','P') order by a.TIME_STAMP desc limit 1000"
		 * ;
		 */
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("mid", mid);
		sqlQuery.setString("motoMid", motoMid);
		sqlQuery.setString("ezywayMid", ezywayMid);
		sqlQuery.setString("ezyrecMid", ezyrecMid);
		sqlQuery.setString("ezypassMid", ezypassMid);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);
		sqlQuery.setString("splitMid", splitMid);

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());
				if (rec[2].toString().contains(".")) {
					fs.setAmount(rec[2].toString());
				} else {
					// set amount
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					fs.setAmount(output);
				}
			} else {
				fs.setAmount("0.00");
			}

			if (rec[4] != null) {
				// status
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GPS")) {
					fs.setStatus("GRABPAY COMPLETED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GRF")) {
					fs.setStatus("GRABPAY REFUND");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GBC")) {
					fs.setStatus("GRABPAY CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}

				// fs.setStatus(rec[4].toString());
			}
			// SET TIME
			if (rec[3] != null || rec[3] != "") {
				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
					// logger.info("time for normal trans: "+fs.getTime());
				} catch (ParseException e) {
				}
			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				/*
				 * if (fs.getStatus() != null || !fs.getStatus().isEmpty()) { if
				 * (!fs.getStatus().equals("CASH SALE") &&
				 * !fs.getStatus().equals("CASH CANCELLED")) { //
				 * logger.info("TID : "+rec[5].toString()); TerminalDetails td =
				 * getTerminalDetailsByTid(rec[5].toString()); if (td != null) { //
				 * logger.info("TID : "+td.getTid()); if (td.getContactName() != null) { //
				 * logger.info("TID : "+td.getContactName());
				 * fs.setMerchantName(td.getContactName()); } else { fs.setMerchantName(""); } }
				 * } }
				 */

			} else {
				fs.setTid("");
			}

			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());

			}

			if (rec[8] != null) {
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("BOOST")) {
						fs.setTxnType("BOOST");
					} else if (fs.getTxnType().equals("GRABPAY")) {
						fs.setTxnType("GRABPAY");
					} else if (fs.getTxnType().equals("FPX")) {
						fs.setTxnType("FPX");
					}

				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					}

					else if (fs.getTxnType().equals("BOOST")) {
						fs.setTxnType("BOOST");
					} else if (fs.getTxnType().equals("GRABPAY")) {
						fs.setTxnType("GRABPAY");
					} else if (fs.getTxnType().equals("FPX")) {
						fs.setTxnType("FPX");
					}

				} else {
					fs.setTxnType("EZYWIRE");
				}
			}

			if (rec[12] != null) {

				fs.setRrn(rec[12].toString());
			}
			if (rec[13] != null) {

				fs.setAidResponse(rec[13].toString());
			}
			if (rec[14] != null) {

				fs.setInvoiceId(rec[14].toString());
			}

			// card holder name

			if (rec[15] != null) {
				fs.setNumOfRefund(rec[15].toString());
			} else {
				fs.setNumOfRefund("");

			}

			// card number

			if (rec[16] != null) {
				fs.setPan(rec[16].toString());
			} else {
				fs.setPan("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void boostTransactionbyMerchant(String fromDate, String toDate, String tid, String status,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "  toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		String mid = null;
		String motoMid = null;
		String ezypassMid = null;
		String ezyrecMid = null;
		String ezywayMid = null;
		String umezywayMid = null;
		String ummid = null;
		String ummotoMid = null;

		if (merchant.getMid().getMid() != null) {
			System.out.println("mid: " + merchant.getMid().getMid().toString());
			mid = merchant.getMid().getMid();

		}
		if (merchant.getMid().getMotoMid() != null) {
			System.out.println("moto mid: " + merchant.getMid().getMotoMid().toString());
			motoMid = merchant.getMid().getMotoMid();
		}

		if (merchant.getMid().getUmMid() != null) {
			System.out.println("um mid: " + merchant.getMid().getUmMid().toString());
			ummid = merchant.getMid().getUmMid();
		}

		if (merchant.getMid().getUmEzywayMid() != null) {
			System.out.println("um mid: " + merchant.getMid().getUmEzywayMid().toString());
			umezywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			System.out.println("um mid: " + merchant.getMid().getUmMotoMid().toString());
			ummotoMid = merchant.getMid().getUmMotoMid();
		}

		if (merchant.getMid().getEzypassMid() != null) {
			System.out.println("ezypass mid: " + merchant.getMid().getEzypassMid().toString());
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			System.out.println("ezyrec mid: " + merchant.getMid().getEzyrecMid().toString());
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			System.out.println("ezyway mid: " + merchant.getMid().getEzywayMid().toString());
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "  toDate: " + toDate
					+ "status: " + status);
			/*
			 * if(status=="BP" || status.equals("BP")) {
			 * logger.info("checking status bp and bpa"); sql =
			 * "select a.DATE,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID "
			 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
			 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
			 * "where a.STATUS in ('BPA','BP') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
			 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			 * //sqlQuery.setString("status", status); sqlQuery.setString("fromDate",
			 * fromDate); sqlQuery.setString("toDate", toDate); } else {
			 * logger.info("else checking all status: "+status);
			 */
			sql = "select a.DATE,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN , a.INVOICE_ID , a.AID_RESPONSE , a.RRN , a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.UM_MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID or a.MID=m.UM_EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.MID in ('" + mid + "'" + ",'" + motoMid + "'"
					+ ",'" + ummotoMid + "'" + ",'" + ummid + "'" + ",'" + umezywayMid + "'" + ",'" + ezywayMid + "'"
					+ ",'" + ezyrecMid + "') and "
					// + "where a.MID in (:mid,:motoMid) and "
					+ "a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			/*
			 * sqlQuery.setString("mid", mid); sqlQuery.setString("motoMid", motoMid);
			 */
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			// }
		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select a.DATE,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN , a.INVOICE_ID , a.AID_RESPONSE , a.RRN , a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.UM_MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID or a.MID=m.UM_EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.MID in ('" + mid + "'" + ",'" + motoMid + "'"
					+ ",'" + ummotoMid + "'" + ",'" + ummid + "'" + ",'" + umezywayMid + "'" + ",'" + ezywayMid + "'"
					+ ",'" + ezyrecMid + "') and "
					+ "a.STATUS in ('BPS','BPA','BPC') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}

		else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN , a.INVOICE_ID , a.AID_RESPONSE , a.RRN , a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or  "
					+ "a.MID=m.UM_MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID or a.MID=m.UM_EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.MID in ('" + mid + "'" + ",'" + motoMid + "'"
					+ ",'" + ummotoMid + "'" + ",'" + ummid + "'" + ",'" + umezywayMid + "'" + ",'" + ezywayMid + "'"
					+ ",'" + ezyrecMid + "') and "
					+ "a.STATUS in ('BPS','BPA','BPC') order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}
		/*
		 * m.activateDate, m.
		 * activateDate"select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null)

			{
				// businessname
				fs.setDate(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {
				// a.TIME
				fs.setTime(rec[3].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			// logger.info("check status: "+fs.getStatus());
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				/*
				 * if(fs.getStatus().equals("BOOST PENDING")
				 * ||fs.getStatus().equals("BOOST PAYMENT") ||
				 * fs.getStatus().equals("BOOST SETTLED") || fs.getStatus().equals("BOOST VOID")
				 * || fs.getStatus()=="BOOST PENDING" || fs.getStatus()=="BOOST PAYMENT" ||
				 * fs.getStatus()=="BOOST SETTLED" || fs.getStatus()=="BOOST CANCELLED" ) {
				 */
				// logger.info("inside if status: "+fs.getStatus()+rec[2].toString());
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
				// }

			}
			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					// if(!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH
					// CANCELLED")){
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
					// }
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
				logger.info("location: " + fs.getLocation());
			} else {
				// fs.setLocation("NIL");
			}

			if (rec[8] != null) {
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}
			if (rec[9] != null) {

				fs.setStan(rec[9].toString());
				// logger.info("stan: "+fs.getStan());
			}

			if (rec[10] != null) {
				fs.setInvoiceId(rec[10].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[11] != null) {
				fs.setAidResponse(rec[11].toString());
			}

			if (rec[12] != null) {
				fs.setRrn(rec[12].toString());
			}
			if (rec[13] != null) {
				fs.setTxnType(rec[13].toString());
			} else {
				fs.setTxnType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchForSettlementnew(String fromDate, String toDate, PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data : " + fromDate + " " + toDate);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchForSettlementcash(String fromDate, String toDate, PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data : " + fromDate + " " + toDate);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchcardDetails(String fromDate, String toDate, String tid, final String status,
			PaginationBean<ForSettlement> paginationBean, Merchant merchant) {
		String sql2 = null;
		Query sqlQuery = null;
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);
		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		String mid = null, umMid = null;
		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (fromDate == null || fromDate.equals("")) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			fromDate = dateFormat.format(dt);
			fromDate = fromDate + "-01";

		} else {
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				fromDate = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (toDate == null || toDate.equals("")) {
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			toDate = dateFormat1.format(dt1);

		} else {

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				toDate = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
				&& !(status.isEmpty())) {
			logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t "
					+ "where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
					+ "between :fromDate and :toDate and f.MID in (:mid,:umMid) and f.TXN_TYPE is Null "
					+ "order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("umMid", umMid);
			sqlQuery.setString("status", status);
		} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
			logger.info("else if: ");
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN,"
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
					+ "where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.TIME_STAMP "
					+ "between :fromDate and :toDate and f.MID in (:mid,:umMid) and f.TXN_TYPE is Null "
					+ "order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("umMid", umMid);

		} else {
			logger.info("inside else:");
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN,"
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
					+ "where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') "
					+ "and f.MID in (:mid,:umMid) and f.TXN_TYPE is Null order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("umMid", umMid);

		}
		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			if (rec[10] != null) {
				// stan
				fs.setAidResponse(rec[10].toString());
			}

			if (rec[11] != null) {
				// stan
				fs.setCardType(rec[11].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@SuppressWarnings("unchecked")
	public void searchnonmerchantForSettlement(String fromDate, String toDate,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data searchnonmerchantForSettlement: " + fromDate + " " + toDate);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@Override
	public List<TerminalDetails> getTerminalDetails(final String merchantId) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.eq("merchantId", merchantId)).list();
		return td;
	}

	@Override
	public List<TerminalDetails> getTerminalDetails(final Merchant merchant) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = null;
		if (merchant.getMerchantType() != null) {
			td = super.getSessionFactory().createCriteria(TerminalDetails.class)
					.add(Restrictions.in("merchantId", new String[] { merchant.getMid().getUmMid() })).list();
		} else {
			td = super.getSessionFactory().createCriteria(TerminalDetails.class).add(Restrictions.in("merchantId",
					new String[] { merchant.getMid().getMid(), merchant.getMid().getUmMid() })).list();

		}

		return td;
	}

	// getEzywireTerminalDetails

	@Override
	public List<TerminalDetails> getEzywireTerminalDetails(final Merchant merchant) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = null;
		// if(merchant.getMerchantType()!=null) {
		td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { merchant.getMid().getMid() })).list();
		/*
		 * }else { td = super.getSessionFactory() .createCriteria(TerminalDetails.class)
		 * .add(Restrictions.in("merchantId", new String[]
		 * {merchant.getMid().getMid(),merchant.getMid().getUmMid()})).list();
		 * 
		 * }
		 */

		return td;
	}

	@Override
	public List<TerminalDetails> getGpayTerminalDetails(final Merchant merchant) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = null;
		// if(merchant.getMerchantType()!=null) {
		td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { merchant.getMid().getGpayMid() })).list();
		/*
		 * }else { td = super.getSessionFactory() .createCriteria(TerminalDetails.class)
		 * .add(Restrictions.in("merchantId", new String[]
		 * {merchant.getMid().getMid(),merchant.getMid().getUmMid()})).list();
		 * 
		 * }
		 */

		return td;
	}

	@Override
	public List<TerminalDetails> getTerminalDetails(final String merchantId, String motoMid, String ezyrecMid) {

		return super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { merchantId, motoMid, ezyrecMid })).list();
	}

	@Override
	public List<MobileUser> getMobileUser(final String motoTid) {

		// logger.info("check tid: "+motoTid);
		List<MobileUser> td = super.getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("motoTid", motoTid)).list();
		return td;
	}

	@Override
	public MobileUser getMobileUserByMotoTid(final String motoTid) {

		// logger.info("check tid: "+motoTid);

		return (MobileUser) getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("motoTid", motoTid)).setMaxResults(1).uniqueResult();
	}

	public MobileUser getMobileUserByAuthTid(final String motoTid) {

		// logger.info("check tid: "+motoTid);

		return (MobileUser) getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("motoTid", motoTid)).add(Restrictions.eq("preAuth", "Yes")).setMaxResults(1)
				.uniqueResult();
	}

	@Override
	public TransactionResponse loadTransactionResponse(String trx_id) {
		// TODO Auto-generated method stub
		BigInteger txId = new BigInteger(trx_id);
		return (TransactionResponse) sessionFactory.getCurrentSession().createCriteria(TransactionResponse.class)
				.add(Restrictions.eq("txnId", txId)).setMaxResults(1).uniqueResult();
	}

	@Override
	public TransactionRequest loadTransactionRequest(String trx_id) {
		BigInteger txnId = new BigInteger(trx_id);
		return (TransactionRequest) sessionFactory.getCurrentSession().createCriteria(TransactionRequest.class)
				.add(Restrictions.eq("txnId", txnId)).setMaxResults(1).uniqueResult();
	}

	@Override
	public ForSettlement getForSettlement(String trxId) {
		BigInteger trx = new BigInteger(trxId);
		ForSettlement fSettlement = (ForSettlement) sessionFactory.getCurrentSession()
				.createCriteria(ForSettlement.class).add(Restrictions.eq("trxId", trx)).setMaxResults(1).uniqueResult();
		return fSettlement;

	}

	@Override
	public AgentResponseDTO loadAgentByName(String agentName) {
		System.out.println(agentName);

		ArrayList<MerchantSettlementDTO> merList = new ArrayList<MerchantSettlementDTO>();
		AgentResponseDTO agent = new AgentResponseDTO();
		// MerchantSettlementDTO merchant = new MerchantSettlementDTO();

		/*
		 * String sql2 = "select a.FIRST_NAME,a.ag_code, a.ag_city, a.ag_phoneno " +
		 * "from AGENT a  where a.FIRST_NAME='" + agentName + "'";
		 */

		String sql2 = "select a.FIRST_NAME,a.ag_code, a.ag_city, a.ag_phoneno "
				+ "from AGENT a  where a.FIRST_NAME= :agentName";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			// Agent ags = new Agent();
			agent.setAgName(rec[0].toString());
			agent.setAgCode(rec[1].toString());
			agent.setAgCity(rec[2].toString());
			agent.setAgPhoneNo(rec[3].toString());

		}
		/*
		 * String sql3 =
		 * "select m.business_name,m.business_address1,m.business_address2,m.city,m.postcode"
		 * + " from MERCHANT m, AGENT a  where a.id = m.agid_fk and a.FIRST_NAME='" +
		 * agentName + "'";
		 */
		String sql3 = "select m.business_name,m.business_address1,m.business_address2,m.city,m.postcode"
				+ " from MERCHANT m, AGENT a  where a.id = m.agid_fk and a.FIRST_NAME= :agentName";
		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql3);// .addEntity(ForSettlement.class);
		sqlQuery1.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet1 = sqlQuery1.list();
		for (Object[] rec : resultSet1) {
			MerchantSettlementDTO msd = new MerchantSettlementDTO();
			if (rec[0] != null) {
				msd.setMerchantName(rec[0].toString().toUpperCase());
			}
			// logger.info("MerchantName:" + rec[0].toString().toUpperCase());
			if (rec[1] != null) {
				msd.setMerchantAddr1(rec[1].toString());
			}
			// logger.info("Merchantaddr1:" + rec[1].toString());
			if (rec[2] != null) {
				msd.setMerchantAddr2(rec[2].toString());
			}
			// logger.info("MerchantAddr2:" + rec[2].toString());
			if (rec[3] != null) {
				msd.setMerchantCity(rec[3].toString());
			}
			// logger.info("Merchantcity:" + rec[3].toString());
			if (rec[4] != null) {
				msd.setMerchantPostcode(rec[4].toString());
			}
			// logger.info("MerchantPostcode:" + rec[4].toString());

			/*
			 * String sqlterminal =
			 * "select count(*) from TERMINAL_DETAILS where merchant_id in (select mid from MID where id in (select mid_fk from MERCHANT"
			 * + " where business_name='" + rec[0].toString() + "'))";
			 */
			String sqlterminal = "select count(*) from TERMINAL_DETAILS where merchant_id in "
					+ "(select mid from MID where id in (select mid_fk from MERCHANT" + " where business_name= :name))";
			Query queryTerminal = super.getSessionFactory().createSQLQuery(sqlterminal);// .addEntity(ForSettlement.class);
			queryTerminal.setString("name", rec[0].toString());
			@SuppressWarnings({ "unchecked", "rawtypes" })
			List resultSetTerminal = queryTerminal.list();// list();

			msd.setNoOfTid(resultSetTerminal.get(0).toString());

			merList.add(msd);

		}

		agent.setMerSettle(merList);
		return agent;
		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());
	}

	@Override
	public void loadTerminalByName(final PaginationBean<TerminalDTO> paginationBean, String businessName) {
		// logger.info(businessName);
		ArrayList<TerminalDTO> tdtoList = new ArrayList<TerminalDTO>();

		/*
		 * String sql =
		 * "select device_id, device_name, device_type,tid from TERMINAL_DETAILS " +
		 * "where merchant_id in (select merchant_id from MERCHANT where business_name='"
		 * + businessName + "')";
		 */
		String sql = "select device_id, device_name, device_type,tid from TERMINAL_DETAILS "
				+ "where merchant_id in (select merchant_id from MERCHANT where business_name=" + ":businessName )";
		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery1.setString("businessName", businessName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet1 = sqlQuery1.list();
		for (Object[] rec : resultSet1) {
			TerminalDTO tdto = new TerminalDTO();
			tdto.setDeviceId(rec[0].toString());
			if (rec[1] != null) {
				tdto.setDeviceName(rec[1].toString());
			} else {
				tdto.setDeviceName("");
			}
			// System.out.println("DeviceName:" + rec[1].toString());
			if (rec[2] != null) {
				tdto.setDeviceType(rec[2].toString());
			} else {
				tdto.setDeviceType("");
			}
			// System.out.println("DeviceType:" + rec[2].toString());
			if (rec[3] != null) {
				tdto.setTid(rec[3].toString());
			} else {
				tdto.setTid("");
			}

			// System.out.println("Tid:" + rec[3].toString());
			tdtoList.add(tdto);
		}

		paginationBean.setItemList(tdtoList);
		paginationBean.setTotalRowCount(tdtoList.size());

	}

	@Override
	public List<ForSettlement> exportAllTransaction(final ArrayList<Criterion> props, final String date,
			final String date1, final String txnType) {
		// logger.info("Inside listAllTransaction");
		String dat = null;
		String dat1 = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if (date == null || date.equals("")) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			dat = dateFormat.format(dt);
			dat = dat + "-01";

		} else {

			dat = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (date1 == null || date1.equals("")) {
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			dat1 = dateFormat1.format(dt1);

		} else {

			dat1 = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("check date: " + dat + " : " + dat1);
		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date ,a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.ag_name "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and DATE between '" + dat + "' and '" + dat1 +
		 * "' and a.txn_year between '"
		 * +year1+"' and '"+year2+"' group by a.MID,a.DATE order by a.DATE desc" ;
		 */

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date ,a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "' group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("inside ALL" + txnType);
			sql = "(select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID = m.BOOST_MID "
					+ "or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where  a.STATUS in "
					+ "('A','S','CT','C','R','CV','P','BPS','BPA','BPC') and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100) " + "UNION "
					+ " (select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID, "
					+ " '' AS LOCATION , '' AS TRX_ID , '' AS STAN , 'FPX' As TXN_TYPE , '' AS HOST_TYPE , '' AS RRN , '' AS AID_RESPONSE ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND " + "f.TIME_STAMP between "
					+ ":from and  :to order by f.TIME_STAMP desc limit 100) " + "UNION "
					+ " (select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS, '' AS TID ,  '' AS MID,"
					+ " a.LOCATION AS LOCATION , a.TRX_ID AS TRX_ID , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.HOST_TYPE AS HOST_TYPE ,a.RRN AS RRN ,a.AID_RESPONSE AS AID_RESPONSE ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND  a.TIME_STAMP BETWEEN "
					+ ":from and  :to order by a.TIME_STAMP desc limit 100) ";

		} else if (txnType.equals("EZYWIRE")) {
			logger.info("inside CARD" + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE is NULL and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";

		} else if (txnType.equals("BOOST")) {
			logger.info("inside BOOST TYPE" + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID = m.BOOST_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('BPA','BPS','A','S','BPC') and a.TXN_TYPE='BOOST' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";

		} else if (txnType.equals("EZYCASH")) {
			logger.info("inside cash: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('CT') and a.TXN_TYPE='CASH' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";
		} else if (txnType.equals("EZYMOTO")) {
			logger.info("inside MOTO: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='MOTO' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";
		} else if (txnType.equals("EZYLINK")) {
			logger.info("inside MOTO: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='EZYLINK' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";
		} else if (txnType.equals("EZYWAY")) {
			logger.info("inside EZYWAY: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.EZYWAY_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='EZYWAY' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";
		} else if (txnType.equals("EZYREC")) {
			logger.info("inside EZYREC: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.EZYREC_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='EZYREC' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";
		} else if (txnType.equals("EZYRECPLUS")) {
			logger.info("inside EZYRECPLUS: " + txnType);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID, "
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID ,t.CARD_HOLDER_NAME , t.MASKED_PAN from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t on a.TRX_ID=t.TXN_ID  INNER JOIN MID m on "
					+ "a.MID=m.EZYREC_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S') and a.TXN_TYPE='RECPLUS' and " + "a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc limit 100";
		} else if (txnType.equals("GRABPAY")) {
			logger.info("inside GRABPAY: " + txnType);
			sql = "select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS, '' AS TID ,  '' AS MID,"
					+ " a.LOCATION AS LOCATION , a.TRX_ID AS TRX_ID , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.HOST_TYPE AS HOST_TYPE ,a.RRN AS RRN ,a.AID_RESPONSE AS AID_RESPONSE ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND a.TXN_TYPE='GRABPAY' AND  a.TIME_STAMP BETWEEN "
					+ ":from and  :to order by a.TIME_STAMP desc limit 100 ";
		} else if (txnType.equals("FPX")) {
			logger.info("inside FPX: " + txnType);
			sql = "select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID, "
					+ " '' AS LOCATION , '' AS TRX_ID , '' AS STAN , 'FPX' As TXN_TYPE , '' AS HOST_TYPE , '' AS RRN , '' AS AID_RESPONSE ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND " + "f.TIME_STAMP between "
					+ ":from and  :to order by f.TIME_STAMP desc limit 100 ";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", dat);
		sqlQuery.setString("to", dat1);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				if (rec[2].toString().contains(".")) {
					fs.setAmount(rec[2].toString());
				} else {

					// set amount
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					fs.setAmount(output);
				}
			} else {
				fs.setAmount("0.00");
			}

			if (rec[4] != null) {
				// status
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GPS")) {
					fs.setStatus("GRABPAY COMPLETED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GRF")) {
					fs.setStatus("GRABPAY REFUND");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GBC")) {
					fs.setStatus("GRABPAY CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}

				// fs.setStatus(rec[4].toString());
			}
			// SET TIME
			if (rec[3] != null || rec[3] != "") {
				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
					// logger.info("time for normal trans: "+fs.getTime());
				} catch (ParseException e) {
				}
			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				/*
				 * if (fs.getStatus() != null || !fs.getStatus().isEmpty()) { if
				 * (!fs.getStatus().equals("CASH SALE") &&
				 * !fs.getStatus().equals("CASH CANCELLED")) { //
				 * logger.info("TID : "+rec[5].toString()); TerminalDetails td =
				 * getTerminalDetailsByTid(rec[5].toString()); if (td != null) { //
				 * logger.info("TID : "+td.getTid()); if (td.getContactName() != null) { //
				 * logger.info("TID : "+td.getContactName());
				 * fs.setMerchantName(td.getContactName()); } else { fs.setMerchantName(""); } }
				 * } }
				 */

			} else {
				fs.setTid("");
			}

			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());

			}

//		         if (rec[8] != null) {
//		                BigInteger number = new BigInteger(rec[8].toString());
//		                // logger.info("trid: "+number);
//		                fs.setTrxId(number);
			//
//		         }
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					}

					else if (fs.getTxnType().equals("FPX")) {
						fs.setTxnType("FPX");
					} else if (fs.getTxnType().equals("BOOST")) {
						fs.setTxnType("BOOST");
					} else if (fs.getTxnType().equals("GRABPAY")) {
						fs.setTxnType("GRABPAY");
					}

				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					} else if (fs.getTxnType().equals("FPX")) {
						fs.setTxnType("FPX");
					}

					else if (fs.getTxnType().equals("BOOST")) {
						fs.setTxnType("BOOST");
					} else if (fs.getTxnType().equals("GRABPAY")) {
						fs.setTxnType("GRABPAY");
					}

				} else {
					fs.setTxnType("EZYWIRE");
				}
			}

			if (rec[12] != null) {

				fs.setRrn(rec[12].toString());
			}
			if (rec[13] != null) {

				fs.setAidResponse(rec[13].toString());
			}
			if (rec[14] != null) {

				fs.setInvoiceId(rec[14].toString());
			}

			// card holder name

			if (rec[15] != null) {
				fs.setNumOfRefund(rec[15].toString());
			} else {
				fs.setNumOfRefund("");

			}

			// card number

			if (rec[16] != null) {
				fs.setPan(rec[16].toString());
			} else {
				fs.setPan("");
			}

			fss.add(fs);
		}
		return fss;
	}

	@Override
	public void listAllTransactionDetails(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String date, String date1) {

		logger.info("Inside listAllTransactionDetails : " + date + "     " + date1);
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));
	}

	@Override
	public void MerchantTransactionSummByAdmin(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status) {

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		int year = calendar.getWeekYear();
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();

		String dateorg1 = day + "/" + mon + "/" + year;
		String dateorg2 = daybefore + "/" + mon + "/" + year;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromDate));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(toDate));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
		}
		logger.info("inside MerchantTransactionSummByAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);
		if (status != null && !status.isEmpty()) {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,"
					+ "a.TXN_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.STATUS='S' and a.TIME_STAMP "
					+ "between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}
		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
				fs.setDate(rd);

				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					fs.setTime(rt);

				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
			}
			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[3] != null) {

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}

			}
			if (rec[4] != null) {
				// a.TID
				fs.setTid(rec[4].toString());

			}
			if (rec[5] != null) {
				// a.MID
				fs.setMid(rec[5].toString());
			}

			if (rec[6] != null) {
				fs.setTxnId(rec[6].toString());

			}

			if (rec[7] != null) {
				// a.LOCATION
				fs.setTxnType(rec[7].toString());
				if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("EZYPASS")) {
					fs.setTxnType("EZYPASS");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
					/*
					 * else if (fs.getTxnType().equals("CASH")) { fs.setTxnType("EZYCASH"); }
					 */
				} else {
					fs.setTxnType("EZYWIRE");
				}
			}
			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<ForSettlement> MerchantExportTrans(ArrayList<Criterion> props, String fromDate, String toDate,
			String status) {
		/*
		 * logger.info("inside MerchantTransactionSummByAdmin " + " from date: " +
		 * fromDate + "toDate: " + toDate + "status: " + status);
		 */
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		int year = calendar.getWeekYear();
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();

		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromDate));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(toDate));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
		}
		logger.info("inside MerchantTransactionSummByAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);
		if (status != null && !status.isEmpty()) {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,"
					+ "a.TXN_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.STATUS='S' and a.TIME_STAMP "
					+ "between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}
		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setMerchantName(rec[0].toString());
			}
			if (rec[1] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
				fs.setDate(rd);

				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					fs.setTime(rt);

				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
			}
			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[3] != null) {

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}

			}
			if (rec[4] != null) {
				// a.TID
				fs.setTid(rec[4].toString());

			}
			if (rec[5] != null) {
				// a.MID
				fs.setMid(rec[5].toString());
			}

			if (rec[6] != null) {
				fs.setTxnId(rec[6].toString());

			}

			if (rec[7] != null) {
				// a.LOCATION
				fs.setTxnType(rec[7].toString());
				if (fs.getTxnType().equals("RECURRING")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);

		}
		logger.info(fss.size());
		return fss;
		// paginationBean.setTotalRowCount(fss.size());
	}

	public void listAllTransactionDetailsbyAdmin(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props, String fromDate, String toDate, String status) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();

		// Date fromDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new
		// SimpleDateFormat("dd/MM/yyyy").parse(date));

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,"
					+ "a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(status);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC','B') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			// String TXNTYPE = paginationBean.setTXNtype(status);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC','B') "
					+ "and a.TIME_STAMP between '" + fromDateToSearch + "' and '" + toDateToSearch + "' "
					+ " order by a.TIME_STAMP desc ";
			// logger.info(sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(fromDateToSearch);
			String From1Date = paginationBean.setDate1FromBackend(toDateToSearch);
			// String TXNTYPE = paginationBean.setTXNtype(status);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}
		/*
		 * m.activateDate, m.
		 * activateDate"select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			/*
			 * if(rec[3]!=null) { //a.TIME fs.setTime(rec[3].toString()); try {
			 * 
			 * 
			 * String rt = new SimpleDateFormat("HH:mm:ss").format(new
			 * SimpleDateFormat("HHmmss").parse(rec[3].toString()));
			 * //forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
			 * 
			 * fs.setTime(rt); } catch (ParseException e) {} }
			 */
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				// fs.setStatus(rec[4].toString());
			}
			if (fs.getStatus().equals("BOOST PENDING") || fs.getStatus().equals("BOOST PAYMENT")
					|| fs.getStatus().equals("BOOST SETTLED") || fs.getStatus().equals("BOOST CANCELLED")
					|| fs.getStatus() == "BOOST PENDING" || fs.getStatus() == "BOOST PAYMENT"
					|| fs.getStatus() == "BOOST SETTLED" || fs.getStatus() == "BOOST CANCELLED") {
				// logger.info("time: "+rec[3].toString());

				// SET TIME
				if (rec[3] != null) {
					if (rec[3].toString().contains("T")) {
						// fs.setTime(rec[3].toString());
						try {
							String resTime = rec[3].toString().substring(11, 19);
							// logger.info("time T contains for boost:"+resTime);
							String rt = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(rec[3].toString()));
							// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
							fs.setTime(resTime);
						} catch (ParseException e) {
						}
					} else {
						String rt1;
						try {
							rt1 = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
							fs.setTime(rt1);
							// logger.info("time for boost: "+fs.getTime());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					}

				}
			} else {
				// SET TIME
				if (rec[1] != null) {
					try {
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

						fs.setTime(rt);
						// logger.info("time for normal trans: "+fs.getTime());
					} catch (ParseException e) {
					}
				}
			}
			// logger.info("check status: "+fs.getStatus());
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				/*
				 * if(fs.getStatus().equals("BOOST PAYMENT") ||
				 * fs.getStatus().equals("BOOST SETTLED") ||
				 * fs.getStatus().equals("BOOST CANCELLED") || fs.getStatus()=="BOOST PAYMENT"
				 * || fs.getStatus()=="BOOST SETTLED" || fs.getStatus()=="BOOST CANCELLED" ) {
				 * //logger.info("inside if status: "+fs.getStatus()+rec[2].toString()); double
				 * amount=0; amount=Double.parseDouble(rec[2].toString());
				 * //forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
				 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
				 * myFormatter.format(amount); //System.out.println(" Amount :"+output);
				 * fs.setAmount(output); } else {
				 */
				// logger.info("inside else status: "+fs.getStatus()+rec[2].toString());
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;

				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
				/* } */

			}
			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				// logger.info("location: al: "+rec[7].toString());
				fs.setLocation(rec[7].toString());

			}

			if (rec[8] != null) {
				String trxId = rec[8].toString();
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);
				if (fs.getTrxId() != null) {
					TransactionRequest tr = loadTransactionRequest(trxId);
					if (tr != null) {
						if (tr.getMaskedPan() != null) {
							// logger.info("maskedpan: "+tr.getMaskedPan());
							fs.setPan(tr.getMaskedPan());
							String pan = fs.getPan().substring(fs.getPan().length() - 8);
							if (pan.contains("f")) {
								pan = pan.replaceAll("f", "X");
								fs.setPan(pan);
							} else {
								fs.setPan(pan);
							}
						} else {
							fs.setPan("NA");
						}
					}
				}

			}
			// logger.info("trxId: "+fs.getTrxId()+" pan: "+fs.getPan());
			if (rec[9] != null) {
				// a.LOCATION
				fs.setTxnType(rec[9].toString());
				if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("EZYLINK")) {
					fs.setTxnType("EZYLINK");
				} else if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYRECPLUS");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public List<ForSettlement> exportAllTransactionbyAdmin(final ArrayList<Criterion> props, final String fromDate,
			final String toDate, final String status) {
		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		/*
		 * if ((fromDate == null || toDate == null) || (fromDate.equals("") ||
		 * toDate.equals(""))) {
		 * 
		 */

		/*
		 * sql =
		 * " select f.DATE,f.TIME,f.STATUS, f.AMOUNT,f.TID,f.MID,f.LOCATION,f.TIME_STAMP,t.CONTACT_NAME "
		 * + "from FOR_SETTLEMENT f, TERMINAL_DETAILS t " + "where t.TID=f.TID ";
		 */
		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			/*
			 * if(status=="BP" || status.equals("BP")){ sql =
			 * "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
			 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
			 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
			 * "where a.STATUS in ('BP','BPA') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
			 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql); //
			 * sqlQuery.setString("status", status); sqlQuery.setString("fromDate",
			 * fromDate); sqlQuery.setString("toDate", toDate); } else {
			 */
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			/* } */
		} else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info("inside status date criteria: " + "from date: " + fromDate + "toDate: " + toDate);
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID  or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('S','CT','C','R','CV','P','BP','BPS','BPA','BPC') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID  or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('S','CT','C','R','CV','P','BP','BPS','BPA','BPC') order by a.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}
		/*
		 * m.activateDate, m.
		 * activateDate"select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {
				// a.TIME
				fs.setTime(rec[3].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST VOID");
				}
				// fs.setStatus(rec[4].toString());
			}

			if (rec[2] != null) {
				/*
				 * if(fs.getStatus().equals("BOOST PAYMENT") ||
				 * fs.getStatus().equals("BOOST CANCELLED") ||
				 * fs.getStatus().equals("BOOST SETTLED") || fs.getStatus()=="BOOST PAYMENT" ||
				 * fs.getStatus()=="BOOST CANCELLED" || fs.getStatus()=="BOOST SETTLED")
				 * 
				 * { //a.AMOUNT
				 * 
				 * logger.info("inside if check status: "+fs.getStatus()); double amount=0;
				 * amount=Double.parseDouble(rec[2].toString());
				 * //forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
				 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
				 * myFormatter.format(amount); //System.out.println(" Amount :"+output);
				 * fs.setAmount(output); } else {
				 */
				// logger.info("inside else check status: "+fs.getStatus());
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
				/* } */

			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			}

			if (rec[8] != null) {
				// BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(new BigInteger(rec[8].toString()));

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setTxnType(rec[9].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYRECPLUS");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}

			fss.add(fs);
		}
		return fss;
	}

	@Override
	public Receipt loadReceiptSignature(String trx_id) {
		// logger.info("signature finding");
		BigInteger txId = new BigInteger(trx_id);
		return (Receipt) sessionFactory.getCurrentSession().createCriteria(Receipt.class)
				.add(Restrictions.eq("trxId", txId)).setMaxResults(1).uniqueResult();
	}

	@Override
	public Merchant loadMerchantDet(String mid) {
		Merchant merchant = new Merchant();

		/*
		 * String sql = "select BUSINESS_NAME,BUSINESS_ADDRESS1,BUSINESS_ADDRESS2,CITY,"
		 * +
		 * "POSTCODE,BUSINESS_CONTACT_NUMBER,FIRST_NAME,LAST_NAME,EMAIL from MERCHANT where mid_fk in "
		 * + "(select id from MID where mid = '" + mid + "')";
		 */

		String sql = "select BUSINESS_NAME,BUSINESS_ADDRESS1,BUSINESS_ADDRESS2,CITY,"
				+ "POSTCODE,BUSINESS_CONTACT_NUMBER,FIRST_NAME,LAST_NAME,EMAIL,AUTH_3DS,STATE from MERCHANT where mid_fk in "
				+ "(select id from MID where MID = :mid or MOTO_MID = :mid or EZYWAY_MID = :mid or FIUU_MID = :mid "
				+ "or EZYREC_MID = :mid or EZYPASS_MID = :mid or SPLIT_MID = :mid or GPAY_MID = :mid or UM_MID = :mid or UM_MOTO_MID = :mid or UM_EZYREC_MID = :mid or UM_EZYWAY_MID = :mid)";

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				merchant.setBusinessName(rec[0].toString().toUpperCase());
			}
			if (rec[1] != null) {
				merchant.setBusinessAddress1(rec[1].toString());
			}
			if (rec[2] != null) {
				merchant.setBusinessAddress2(rec[2].toString());
			}
			if (rec[3] != null) {
				merchant.setCity(rec[3].toString());
			}
			if (rec[4] != null) {
				merchant.setPostcode(rec[4].toString());
			}
			if (rec[5] != null) {
				merchant.setBusinessContactNumber(rec[5].toString());
			}
			if (rec[6] != null) {
				merchant.setFirstName(rec[6].toString());
			}
			if (rec[7] != null) {
				merchant.setLastName(rec[7].toString());
			}
			if (rec[8] != null) {
				merchant.setEmail(rec[8].toString());
			}
			if (rec[9] != null) {
				merchant.setAuth3DS(rec[9].toString());
			}

			if (rec[10] != null) {
				merchant.setState(rec[10].toString());
			}

		}
		return merchant;

	}

	@Override
	public void listSearchTransactionDetails(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String date, String date1) {

		logger.info("Inside   listAllTransaction test : " + date + "     " + date1);
		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();

		/*
		 * String sql2 =
		 * "select a.date ,a.txn_year ,a.status ,a.mid, a.location,a.Tid,a.time,round(a.AMOUNT)"
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN mid m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID where DATE between '" + date + "' and '" + date1 +
		 * "'   order by date desc";
		 */

		String sql2 = "select a.date ,a.txn_year ,a.status ,a.mid, a.location,a.Tid,a.time,round(a.AMOUNT)"
				+ "from FOR_SETTLEMENT a INNER JOIN mid m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID where DATE between :date and :date1 order by date desc";

		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("date", date);
		sqlQuery.setString("date1", date1);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			fs.setDate(rec[0].toString());
			String pattern1 = rec[0].toString();
			String su = pattern1.substring(0, 2);
			String sub2 = pattern1.substring(2, 4);

			String month = null;

			if (su == "01" || su.equals("01"))
				month = "Jan";
			else if (su == "02" || su.equals("02"))
				month = "Feb";
			else if (su == "03" || su.equals("03"))
				month = "Mar";
			else if (su == "04" || su.equals("04"))
				month = "Apr";
			else if (su == "05" || su.equals("05"))
				month = "May";
			else if (su == "06" || su.equals("06"))
				month = "Jun";
			else if (su == "07" || su.equals("07"))
				month = "Jul";
			else if (su == "08" || su.equals("08"))
				month = "Aug";
			else if (su == "09" || su.equals("09"))
				month = "Sep";
			else if (su == "10" || su.equals("10"))
				month = "Oct";
			else if (su == "11" || su.equals("11"))
				month = "Nov";
			else if (su == "12" || su.equals("12"))
				month = "Dec";
			fs.setDate(sub2 + "-" + month + "-" + rec[1].toString());
			System.out.println("test date : " + sub2 + "-" + month + "-" + rec[1].toString());
			// fs.setStatus(rec[1].toString());
			String status = null;
			// System.out.println("test data" + rec[1].toString());
			if (rec[2].toString() == "A" || rec[2].toString().equals("A")) {
				status = "COMPLETED";
			} else if (rec[2].toString() == "C" || rec[2].toString().equals("C")) {
				status = "VOID";
			} else if (rec[2].toString() == "R" || rec[2].toString().equals("R")) {
				status = "REVERSAL";
			} else if (rec[2].toString() == "P" || rec[2].toString().equals("P")) {
				status = "PENDING";
			} else if (rec[2].toString() == "S" || rec[2].toString().equals("S")) {
				status = "SETTLED";
			}
			fs.setStatus(status);
			logger.info("Status" + rec[2].toString());
			fs.setMid(rec[3].toString());
			if (rec[4] != null) {
				fs.setLocation(rec[4].toString());
			}
			if (rec[5] != null) {
				fs.setTid(rec[5].toString());
			}
			fs.setTime(rec[6].toString());

			Double d = new Double(rec[7].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);

			fs.setAmount(output);
			MerchantNameList.add(fs);
		}

	}

	@Override
	public void loadMerchantByName(final PaginationBean<ForSettlement> paginationBean, String mid, String date,
			String txnType) {
		logger.info("loadMerchantByName =====" + " date : " + date + "txnType: " + txnType + " mid: " + mid);
		// System.out.println("load merchantCity:" +City);
		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();
		@SuppressWarnings("deprecation")
		// Date dt = new Date(date+"-2015");
		Date dt = new Date(date);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String dat = dateFormat.format(dt);

		logger.info("date: " + dat);
		String sql2 = null;

		/*
		 * String sql2 =
		 * "select a.date ,a.txn_year,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and a.date='"+ dat
		 * +"' and a.txn_year='"+yr+"' and f.BUSINESS_NAME='" + merchantName +
		 * "'  order by time_stamp desc";
		 */

		/*
		 * String sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and a.time_stamp like '" + dat +
		 * "%' and upper(f.BUSINESS_NAME)='" + merchantName +
		 * "'  order by a.time_stamp desc";
		 */

		/*
		 * String sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and a.time_stamp like :dat " +
		 * "and upper(f.BUSINESS_NAME)= :merchantName  order by a.time_stamp desc";
		 */
		if (txnType == "ALL" || txnType == "" || txnType.equals("ALL") || txnType.isEmpty()) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','CT','A','BPA','BPS','GPS') and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYWIRE" || txnType.equals("EZYWIRE")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYCASH" || txnType.equals("EZYCASH")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('CT') and a.TXN_TYPE='CASH' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "BOOST" || txnType.equals("BOOST")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('BPA','BPS')  and a.TXN_TYPE='BOOST' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYPASS" || txnType.equals("EZYPASS")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A')  and a.TXN_TYPE='EZYPASS' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYMOTO" || txnType.equals("EZYMOTO")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='MOTO' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYREC" || txnType.equals("EZYREC")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYWAY" || txnType.equals("EZYWAY")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "GRABPAY" || txnType.equals("GRABPAY")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.GPAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('GPS')  and a.TXN_TYPE='GRABPAY' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYRECPLUS" || txnType.equals("EZYRECPLUS")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='RECPLUS' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		}
		/*
		 * String sql2 =
		 * "select a.date ,a.batchNo AS BatchNO, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT)"
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and f.BUSINESS_NAME='" + merchantName
		 * + "' order by date desc";
		 */
		// System.out.println("sql");

		// logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat + "%");
		sqlQuery.setString("mid", mid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			fs.setDate(rd);
			// logger.info("status: "+rec[1].toString());
			String status = null;
			// System.out.println("test data" + rec[1].toString());
			if (rec[1].toString() == "A" || rec[1].toString().equals("A")) {
				status = "COMPLETED";
			} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
				status = "VOID";
			} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
				status = "REVERSAL";
			} else if (rec[1].toString() == "P" || rec[1].toString().equals("P")) {
				status = "PENDING";
			} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
				status = "SETTLED";
			} else if (rec[1].toString() == "CT" || rec[1].toString().equals("CT")) {
				status = "CASH SALE";
			}
			/*
			 * else if (rec[1].toString() == "CV" || rec[1].toString().equals("CV")) {
			 * status = "CASH CANCELLED"; }
			 */
			else if (rec[1].toString() == "BPS" || rec[1].toString().equals("BPS")) {
				status = "BOOST SETTLED";
			} else if (rec[1].toString() == "BPA" || rec[1].toString().equals("BPA")) {
				status = "BOOST PAYMENT";
			} else if (rec[1].toString() == "BP" || rec[1].toString().equals("BP")) {
				status = "BOOST PENDING";
			} else if (rec[1].toString() == "GPP" || rec[1].toString().equals("GPP")) {
				status = "GRABPAY PENDING";
			} else if (rec[1].toString() == "GPS" || rec[1].toString().equals("GPS")) {
				status = "GRABPAY SUCCESS";
			}
			fs.setStatus(status);
			/* logger.info("Status" + rec[1].toString()); */
			fs.setMerchantName(rec[2].toString().toUpperCase());
			if (rec[3] != null) {
				fs.setLocation(rec[3].toString());
			}
			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			}
			if (fs.getStatus().equals("BOOST PENDING") || fs.getStatus().equals("BOOST PAYMENT")
					|| fs.getStatus().equals("BOOST SETTLED") || fs.getStatus() == "BOOST PENDING"
					|| fs.getStatus() == "BOOST PAYMENT" || fs.getStatus() == "BOOST SETTLED") {
				// logger.info("time: "+rec[5].toString());
				// 0,5
				// SET TIME
				if (rec[5] != null) {
					if (rec[5].toString().contains("T")) {
						String resTime = rec[5].toString().substring(11, 19);
						// logger.info("time for boost: "+resTime);
						/*
						 * String rt = new SimpleDateFormat("HH:mm:ss").format( new
						 * SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(rec[5].toString()));
						 */
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
						fs.setTime(resTime);
					} else {

						try {
							String rt1 = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("HHmmss").parse(rec[5].toString()));

							fs.setTime(rt1);
							// logger.info("time for boost: "+fs.getTime());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					}

				}
			}

			if (rec[6] != null) {

				Double d = new Double(rec[6].toString());
				d = d / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setAmount(output);
			}
			if (rec[7] != null) {
				fs.setTrxId(new BigInteger(rec[7].toString()));
				TransactionRequest tr = loadTransactionRequest(rec[7].toString());
				if (tr != null) {
					fs.setPan(tr.getMaskedPan());
					String pan = fs.getPan().substring(fs.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						fs.setPan(pan);
					} else {
						fs.setPan(pan);
					}
				} else {
					fs.setPan("NA");
				}
			}

			MerchantNameList.add(fs);
		}

		paginationBean.setItemList(MerchantNameList);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void loadUmMerchantByName(final PaginationBean<ForSettlement> paginationBean, String mid, String date,
			String txnType) {
		logger.info("loadMerchantByName =====" + " date : " + date + " txnType: " + txnType + " mid: " + mid);
		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();
		@SuppressWarnings("deprecation")
		Date dt = new Date(date);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String dat = dateFormat.format(dt);
		String sql2 = null;
		if (txnType == "ALL" || txnType == "" || txnType.equals("ALL") || txnType.isEmpty()) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID " + "INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','CT','A','BPA','BPS') and a.HOST_TYPE='U' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		}
		/*
		 * else if(txnType=="UMOBILE" || txnType.equals("UMOBILE")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE is NULL and a.HOST_TYPE='U' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="UMMOTO"|| txnType.equals("UMMOTO")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MOTO_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='MOTO' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }
		 */
		/*
		 * else if(txnType=="EZYCASH" || txnType.equals("EZYCASH")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('CT') and a.TXN_TYPE='CASH' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="BOOST"|| txnType.equals("BOOST")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('BPA','BPS')  and a.TXN_TYPE='BOOST' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="EZYPASS"|| txnType.equals("EZYPASS")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A')  and a.TXN_TYPE='EZYPASS' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="EZYREC"|| txnType.equals("EZYREC")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="EZYWAY"|| txnType.equals("EZYWAY")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }
		 */

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat + "%");
		sqlQuery.setString("mid", mid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String rd = null, rt = null;
			if (rec[0] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}

			// logger.info("status: "+rec[1].toString());
			String status = null;
			// System.out.println("test data" + rec[1].toString());
			if (rec[1].toString() == "A" || rec[1].toString().equals("A")) {
				status = "COMPLETED";
			} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
				status = "VOID";
			} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
				status = "REVERSAL";
			} else if (rec[1].toString() == "P" || rec[1].toString().equals("P")) {
				status = "PENDING";
			} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
				status = "SETTLED";
			} else if (rec[1].toString() == "CT" || rec[1].toString().equals("CT")) {
				status = "CASH SALE";
			}
			/*
			 * else if (rec[1].toString() == "CV" || rec[1].toString().equals("CV")) {
			 * status = "CASH CANCELLED"; }
			 */
			else if (rec[1].toString() == "BPS" || rec[1].toString().equals("BPS")) {
				status = "BOOST SETTLED";
			} else if (rec[1].toString() == "BPA" || rec[1].toString().equals("BPA")) {
				status = "BOOST PAYMENT";
			} else if (rec[1].toString() == "BP" || rec[1].toString().equals("BP")) {
				status = "BOOST PENDING";
			}
			fs.setStatus(status);
			/* logger.info("Status" + rec[1].toString()); */
			fs.setMerchantName(rec[2].toString().toUpperCase());
			if (rec[3] != null) {
				fs.setLocation(rec[3].toString());
			}
			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			}

			if (rec[6] != null) {

				Double d = new Double(rec[6].toString());
				d = d / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setAmount(output);
			}
			if (rec[7] != null) {
				fs.setTrxId(new BigInteger(rec[7].toString()));
				TransactionRequest tr = loadTransactionRequest(rec[7].toString());
				if (tr != null) {
					fs.setPan(tr.getMaskedPan());
					String pan = fs.getPan().substring(fs.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						fs.setPan(pan);
					} else {
						fs.setPan(pan);
					}
				} else {
					fs.setPan("NA");
				}
			}
			MerchantNameList.add(fs);
		}

		paginationBean.setItemList(MerchantNameList);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// start agent volume summary new method 08/08/2016
	@Transactional(readOnly = true)
	public List<ForSettlement> agentVolume(final ArrayList<Criterion> props, final String agentName) {

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		/*
		 * int cDate=0;
		 * 
		 * int pDate=0;
		 * 
		 * Date dt = new Date(); cDate = dt.getMonth()+1; pDate = dt.getMonth()-2;
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where month(a.time_stamp) between  '"
		 * + pDate + "'  and '" + cDate + "'" +
		 * " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
				+ " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
				+ " and a.status='S' and ag.FIRST_NAME = :agentName "
				+ " group by month(a.time_stamp) order by a.time_stamp desc";

		// super.getPaginationItemsByPage(paginationBean,
		// ForSettlement.class,props, Order.asc("merchantName"));
		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();
			String month = null;
			fs.setDate(su);
			Double d = new Double(rec[1].toString());
			d = d / 100;

			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			// logger.info(d + " " + pattern + " " + output);
			fs.setAmount(output);
			fs.setAgentName(rec[2].toString());
			// logger.info("agent__id:" + rec[3].toString() );
			fs.setMerchantName(rec[3].toString() + "~AGENT~" + rec[2].toString());

			fss.add(fs);
		}

		return fss;
	}

	// end agent volume summary

	// start subagent volume summary 08/08/2016
	@Transactional(readOnly = true)
	public List<ForSettlement> subAgentVolume(ArrayList<Criterion> props, SubAgent subAgent) {
		ArrayList<ForSettlement> fs1 = new ArrayList<ForSettlement>();
		String sql = null;
		/*
		 * int cDate=0; int pDate=0;
		 * 
		 * Date dt = new Date();
		 * 
		 * cDate = dt.getMonth()+1; pDate = dt.getMonth()-2;
		 */
		// System.out.println("Month :"+pDate +" "+cDate);
		/* ag.FIRST_NAME */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
		 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  '"
		 * + pDate + "'  and '" + cDate + "'" + " and a.status='S' and ag.id='" +
		 * subAgent.getId() + "' " +
		 * "group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
		 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.id='" + subAgent.getId() + "' " +
		 * "group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
				+ " and a.status='S' and ag.id= :id " + "group by month(a.time_stamp) order by a.time_stamp desc";

		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class,props,
		 * Order.asc("merchantName"));
		 */
		logger.info("Query : " + sql);
		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();

			fs.setDate(su);

			Double d = new Double(rec[1].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			fs.setAgentName(rec[2].toString());
			// logger.info("subagent__id:" + rec[3].toString() );
			fs.setMerchantName(rec[3].toString() + "~SUBAGENT~" + rec[2].toString());
			fs1.add(fs);
		}
		return fs1;

	}

	// end subagent volume summary 08/08/2016

	@Override
	public void searchForSettlement1(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, String tid, Merchant merchant) {

		logger.info("inside searchAllTransactionByMerchant " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);
		String mid = null;
		String ummid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;
		String splitMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}

		toDate = toDate + " 23:59:59";

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
					&& (!status.isEmpty() && status != null)) {
				logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
						+ "status: " + status);

				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION"
						+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,a.RRN,a.INVOICE_ID from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
						+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and a.TID= :tid and "
						+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("tid", tid);

			}

			else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
				logger.info("inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: "
						+ status);

				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,"
						+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,a.RRN,a.INVOICE_ID  "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and a.TID= :tid"
						+ " and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("tid", tid);
			}

			else {
				logger.info("status: " + status);
				sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,"
						+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,a.RRN,a.INVOICE_ID "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.TID= :tid and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
						+ " order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
					&& (!status.isEmpty() && status != null)) {
				logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
						+ "status: " + status);

				// original
//				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION"
//						+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
//						+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID where a.STATUS=:status and a.MID in "
//						+ "(:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and "
//						+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";

				sql = "(select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION"
						+ ",a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME,a.TRX_ID from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
						+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID where a.STATUS=:status and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and "
						+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000) "
						+ "UNION "
						+ " (select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID,"
						+ " '' AS LOCATION , '' AS STAN , 'FPX' As TXN_TYPE ,'' AS AID_RESPONSE ,'' AS MASKED_PAN , '' AS CARD_TYPE , '' AS CARD_SCHEME , '' AS RRN ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS TRX_ID "
						+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
						+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
						+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND "
						+ "f.MID IN (:ezywayMid,:motoMid,:splitMid ,:ezyrecMid) And f.TIME_STAMP BETWEEN "
						+ ":fromDate and :toDate order by f.TIME_STAMP desc limit 1000)" + "UNION "
						+ " (select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS,'' AS TID ,  '' AS MID,"
						+ " a.LOCATION AS LOCATION , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.AID_RESPONSE AS AID_RESPONSE , '' AS MASKED_PAN , '' AS CARD_TYPE , '' AS CARD_SCHEME ,a.RRN AS RRN ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS TRX_ID "
						+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
						+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
						+ "WHERE (m.MID=:mid or m.EZYWAY_MID=:ezywayMid or m.EZYREC_MID=:ezyrecMid or m.EZYPASS_MID=:ezypassMid or m.MOTO_MID =:motoMid) and c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND  a.TIME_STAMP BETWEEN "
						+ ":fromDate and  :toDate order by a.TIME_STAMP desc limit 1000) ";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("splitMid", splitMid);
				sqlQuery.setString("ezypassMid", ezypassMid);

			}

			else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
				logger.info("inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: "
						+ status);

//				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,"
//						+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME  "
//						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
//						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
//						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and"
//						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
//						+ " and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";

				sql = "(select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,"
						+ "a.LOCATION,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME , a.TRX_ID "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BPC') and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
						+ " and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000) "
						+ "UNION "
						+ " (select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT , f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID,"
						+ " '' AS LOCATION , '' AS STAN , 'FPX' As TXN_TYPE ,'' AS AID_RESPONSE ,'' AS MASKED_PAN , '' AS CARD_TYPE , '' AS CARD_SCHEME , '' AS RRN ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS TRX_ID "
						+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
						+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
						+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND "
						+ "f.MID IN (:ezywayMid,:motoMid,:splitMid ,:ezyrecMid) And f.TIME_STAMP BETWEEN "
						+ ":fromDate and :toDate order by f.TIME_STAMP desc limit 1000)" + "UNION "
						+ " (select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS,'' AS TID ,  '' AS MID,"
						+ " a.LOCATION AS LOCATION , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.AID_RESPONSE AS AID_RESPONSE , '' AS MASKED_PAN , '' AS CARD_TYPE , '' AS CARD_SCHEME ,a.RRN AS RRN ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS TRX_ID "
						+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
						+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
						+ "WHERE (m.MID=:mid or m.EZYWAY_MID=:ezywayMid or m.EZYREC_MID=:ezyrecMid or m.EZYPASS_MID=:ezypassMid or m.MOTO_MID =:motoMid) and c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND  a.TIME_STAMP BETWEEN "
						+ ":fromDate and  :toDate order by a.TIME_STAMP desc limit 1000) ";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("splitMid", splitMid);
				sqlQuery.setString("ezypassMid", ezypassMid);
			}

			else {
				logger.info("status: " + status);
//				sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,"
//						+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME "
//						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
//						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//						+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
//						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and"
//						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
//						+ " order by a.TIME_STAMP desc limit 1000";

				sql = "(select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,"
						+ "a.MID,a.LOCATION,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME , a.TRX_ID  "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
						+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BPC') and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
						+ " order by a.TIME_STAMP desc limit 1000) " + "UNION "
						+ " (select  mr.BUSINESS_NAME as BUSINESS_NAME ,f.TIME_STAMP AS TIME_STAMP , f.TXNAMOUNT AS AMOUNT ,  f.TX_TIME AS TIME , f.STATUS AS STATUS, f.TID AS TID ,f.MID AS MID,"
						+ " '' AS LOCATION , '' AS STAN , 'FPX' As TXN_TYPE ,'' AS AID_RESPONSE ,'' AS MASKED_PAN , '' AS CARD_TYPE , '' AS CARD_SCHEME , '' AS RRN ,f.SELLERORDERNO AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS TRX_ID "
						+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.MOTO_MID OR f.MID=m.EZYWAY_MID OR f.MID=m.EZYREC_MID OR f.MID=m.SPLIT_MID "
						+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
						+ "WHERE mr.MERCHANT_TYPE NOT IN ('U','FIUU') and f.STATUS in ('A','S') AND "
						+ "f.MID IN (:ezywayMid,:motoMid,:splitMid ,:ezyrecMid) And f.TIME_STAMP BETWEEN "
						+ ":fromDate and :toDate order by f.TIME_STAMP desc limit 1000)" + "UNION "
						+ " (select '' AS BUSINESS_NAME ,a.TIME_STAMP AS TIME_STAMP ,a.AMOUNT AS AMOUNT, a.TIME AS TIME , a.STATUS AS STATUS,'' AS TID ,  '' AS MID,"
						+ " a.LOCATION AS LOCATION , a.STAN AS STAN , a.TXN_TYPE As TXN_TYPE ,a.AID_RESPONSE AS AID_RESPONSE , '' AS MASKED_PAN , '' AS CARD_TYPE , '' AS CARD_SCHEME ,a.RRN AS RRN ,a.INVOICE_ID AS INVOICE_ID , '' AS CARD_HOLDER_NAME , '' AS TRX_ID "
						+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN  MERCHANT c ON c.ID = m.MERCHANT_FK "
						+ " INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
						+ "WHERE (m.MID=:mid or m.EZYWAY_MID=:ezywayMid or m.EZYREC_MID=:ezyrecMid or m.EZYPASS_MID=:ezypassMid or m.MOTO_MID =:motoMid) and c.MERCHANT_TYPE NOT IN ('U','FIUU') and a.STATUS in ('GPS','GPT','GRF','GBC') AND  a.TIME_STAMP BETWEEN "
						+ ":fromDate and  :toDate order by a.TIME_STAMP desc limit 1000) ";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("splitMid", splitMid);
				sqlQuery.setString("ezypassMid", ezypassMid);
			}
		}

		logger.info("Query : " + sql);

		// dhinesh

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());
				if (rec[2].toString().contains(".")) {
					fs.setAmount(rec[2].toString());
				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;

					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					fs.setAmount(output);

				}
			}

			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}

				if (rec[4].toString().equals("GPS")) {
					fs.setStatus("GRABPAY COMPLETED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("GRF")) {
					fs.setStatus("GRABPAY REFUND");
					// logger.info("check status: "+fs.getStatus());
				}

				if (rec[4].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}

				if (rec[4].toString().equals("GBC")) {
					fs.setStatus("GRABPAY CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}

				// fs.setStatus(rec[4].toString());
			}
			// logger.info("check status: "+fs.getStatus());

			// if (fs.getStatus().equals("BOOST PENDING") || fs.getStatus().equals("BOOST
			// PAYMENT")
			// || fs.getStatus().equals("BOOST SETTLED") || fs.getStatus().equals("BOOST
			// CANCELLED")
			// || fs.getStatus() == "BOOST PENDING" || fs.getStatus() == "BOOST PAYMENT"
			// || fs.getStatus() == "BOOST SETTLED" || fs.getStatus() == "BOOST CANCELLED")
			// {
			// logger.info("time: "+rec[3].toString());

			// SET TIME
			if (rec[3] != null) {

				String rt1;
				try {
					rt1 = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					fs.setTime(rt1);
					// logger.info("time for boost: "+fs.getTime());
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());

			} else {
				fs.setTid("");
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			} else {
				fs.setMid("");
			}

			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			} else {
				fs.setLocation("");
			}

			if (rec[8] != null) {
				// a.LOCATION
				fs.setStan(rec[8].toString());
				// logger.info(fs.getStan());
			} else {
				fs.setStan("");
			}
			if (rec[9] != null) {

				fs.setTxnType(rec[9].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				}

				else if (fs.getTxnType().equals("BOOST")) {
					fs.setTxnType("BOOST");
				}

				else if (fs.getTxnType().equals("FPX")) {
					fs.setTxnType("FPX");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				}

			} else {
				fs.setTxnType("EZYWIRE");
			}
			if (rec[10] != null) {
				// a.LOCATION
				fs.setAidResponse(rec[10].toString());
			} else {
				fs.setAidResponse("");
			}

			if (rec[11] != null) {
				// a.MID
				fs.setPan(rec[11].toString());

			} else {
				fs.setPan("");
			}

			if (rec[12] != null) {
				fs.setCardType(rec[12].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[13] != null) {
				fs.setBatchNo(rec[13].toString());
			} else {
				fs.setBatchNo("");
			}

			if (rec[14] != null) {
				fs.setRrn(rec[14].toString());
			} else {
				fs.setRrn("");
			}

			if (rec[15] != null) {
				fs.setInvoiceId(rec[15].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[16] != null) {
				fs.setNumOfRefund(rec[16].toString());
			} else {
				fs.setNumOfRefund("");
			}

			if (rec[17] != null) {
				BigInteger number = new BigInteger(rec[17].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	// new method for merchant volume summary 08/08/2016
	@Override
	public List<ForSettlement> loadMerchantByVolume(final ArrayList<Criterion> props, String agentName) {

		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();
		int cDate = 0;
		int pDate = 0;
		Date dt = new Date();
		cDate = dt.getMonth() + 1;
		pDate = dt.getMonth() - 2;

		String sql2 = null;
		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}
		// System.out.println("Condt : "+condt +" Agname :"+agname);

		if (condt.equals("AGENT")) {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
			 * +"ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
			 * "where month(a.time_stamp) between  '" + pDate + "'  and '" + cDate + "'" +
			 * " and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id=' "+agid+"'"
			 * + "group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
			 * "where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
			 * + " and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id=' " + agid
			 * + "'" + "group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from " // ag.FIRST_NAME
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid "
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		} else {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
			 * "where month(a.time_stamp) between  '" + pDate + "'  and '" + cDate + "'" +
			 * " and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid+"' " +
			 * "group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from " // ag.FIRST_NAME
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id "
					+ "where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.NAME= :agname and ag.id= :agid "
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		}

		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		sqlQuery.setString("agname", agname);
		sqlQuery.setString("agid", agid);
		// .addEntity(ForSettlement.class);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();
			String month = null;
			fs.setDate(su);

			Double d = new Double(rec[1].toString());

			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);

			fs.setMerchantName(rec[2].toString());
			MerchantNameList.add(fs);
		}
		/* } */
		return MerchantNameList;
		// paginationBean.setItemList(MerchantNameList);

	}

	// New Change for Preauth

	@Override
	public void getPreAuthTxn(PaginationBean<PreAuthorization> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, PreAuthorization.class, props, Order.desc("timeStamp"));
	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchPreAuth(String fromDate, String toDate, String tid, final String status,
			PaginationBean<PreAuthorization> paginationBean, ArrayList<Criterion> props) {
		logger.info("Data : " + toDate + " " + fromDate + " " + tid + " " + status);
		super.getPaginationItemsByPage(paginationBean, PreAuthorization.class, props, Order.desc("timeStamp"));
	}

	@Override
	public PreAuthorization getPreAuthTxn(String trxId) {
		BigInteger trx = new BigInteger(trxId);
		logger.info("trx: " + trx);
		PreAuthorization fSettlement = (PreAuthorization) sessionFactory.getCurrentSession()
				.createCriteria(PreAuthorization.class).add(Restrictions.eq("trxId", trx)).setMaxResults(1)
				.uniqueResult();
		return fSettlement;

	}

	@Override
	@Transactional(readOnly = true)
	public void listPreAuthTransaction(final PaginationBean<PreAuthorization> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, String txnType) {
		logger.info("Inside   listAllTransaction ");
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<PreAuthorization> fss = new ArrayList<PreAuthorization>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			from = dateFormat.format(dt);

			from = from + "-01";
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
		} else {
			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.ag_name "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and DATE between '" + dat + "' and '" + dat1 +
		 * "' and txn_year between '"
		 * +year1+"' and '"+year2+"' group by a.MID,a.DATE order by a.DATE desc" ;
		 */

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * + "from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		if (txnType != null) {
			logger.info(txnType + " transaction: " + from + " " + to);
			if (txnType.equals("EZYAUTH")) {
				sql = "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
						+ " ag.FIRST_NAME,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
						+ "or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
						+ "where a.txn_type='MOTO' and time_stamp between :from and :to "
						+ " group by a.MID,a.date order by a.time_stamp desc ";
			} else {
				sql = "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
						+ " ag.FIRST_NAME,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
						+ "where a.txn_type is Null and time_stamp between :from and :to "
						+ " group by a.MID,a.date order by a.time_stamp desc ";
			}

		} else {

			logger.info("EZYAUTH/PREAUTH transaction: " + from + " " + to);
			sql = "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
					+ " ag.FIRST_NAME,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where time_stamp between :from and :to group by a.MID,a.date,a.txn_type order by a.time_stamp desc ";
		}

		/*
		 * }else{ logger.info("PREAUTH transaction: "+from+" "+to); sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
		 * +
		 * " ag.FIRST_NAME from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.txn_type is Null and time_stamp between :from and :to " +
		 * " group by a.MID,a.date order by a.time_stamp desc"; }
		 */

		logger.info(sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("No of Records :" + resultSet.size());
		for (Object[] rec : resultSet) {
			PreAuthorization fs = new PreAuthorization();
			fs.setLocation(rec[0].toString());
			fs.setMerchantName(rec[1].toString().toUpperCase());
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd/MM/yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			fs.setDate(rd);
			Double d = new Double(rec[3].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			fs.setAgentName(rec[4].toString());
			if (rec[5] == null) {
				fs.setTxnType("PREAUTH");
			} else if (rec[5].equals("MOTO")) {
				fs.setTxnType("EZYAUTH");
			} else {
				fs.setTxnType("EZYREC");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
	}

	@Override
	public void loadPreAuthByName(final PaginationBean<PreAuthorization> paginationBean, String merchantName,
			String date, String txnType) {
		ArrayList<PreAuthorization> MerchantNameList = new ArrayList<PreAuthorization>();
		@SuppressWarnings("deprecation")
		Date dt = new Date(date);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String dat = dateFormat.format(dt);
		String sql2 = null;

		logger.info("merchantName: " + merchantName + " date: " + date + " txnType" + txnType);

		/*
		 * String sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * + "from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID where a.time_stamp like '" + dat +
		 * "%' and upper(f.BUSINESS_NAME)='" + merchantName +
		 * "'  order by a.time_stamp desc";
		 */
		logger.info("txn type: " + txnType);
		if (txnType.equals("EZYAUTH") || txnType == "EZYAUTH") {

			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,"
					+ "a.time,round(a.AMOUNT),a.trx_id,a.txn_type from PRE_AUTH a INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.TXN_TYPE='MOTO' and a.time_stamp like :dat and "
					+ "upper(f.BUSINESS_NAME)= :merchantName  order by a.time_stamp desc";

		} else if (txnType.equals("EZYREC") || txnType == "EZYREC") {

			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,"
					+ "a.time,round(a.AMOUNT),a.trx_id,a.txn_type from PRE_AUTH a INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.TXN_TYPE='EZYREC' and a.time_stamp like :dat and "
					+ "upper(f.BUSINESS_NAME)= :merchantName  order by a.time_stamp desc";

		} else {

			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,"
					+ "a.time,round(a.AMOUNT),a.trx_id,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp like :dat and "
					+ "upper(f.BUSINESS_NAME)= :merchantName and a.TXN_TYPE is null order by a.time_stamp desc";

		}

		logger.info(sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat + "%");
		sqlQuery.setString("merchantName", merchantName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			PreAuthorization fs = new PreAuthorization();
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			fs.setDate(rd);
			if (rec[8] == null) {
				fs.setTxnType("PREAUTH");

			} else if (rec[8].equals("MOTO")) {
				fs.setTxnType("EZYAUTH");
			} else if (rec[8].equals("EZYREC")) {
				fs.setTxnType("EZYREC");
			}
			String status = null;
			if (fs.getTxnType().equals("PREAUTH")) {
				if (rec[1].toString() == "A" || rec[1].toString().equals("A") || rec[1].toString() == "P"
						|| rec[1].toString().equals("P")) {
					status = "PREAUTH SALE";
				} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
					status = "PREAUTH CANCEL";
				} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
					status = "REVERSAL";
				} else if (rec[1].toString() == "D" || rec[1].toString().equals("D") || rec[1].toString() == "E"
						|| rec[1].toString().equals("E")) {
					status = "PRE-AUTHORIZATION";
				} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
					status = "SETTLED";
				}
			} else if (fs.getTxnType().equals("EZYAUTH")) {
				if (rec[1].toString() == "A" || rec[1].toString().equals("A") || rec[1].toString() == "P"
						|| rec[1].toString().equals("P")) {
					status = "EZYAUTH SALE";
				} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
					status = "EZYAUTH CANCEL";
				} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
					status = "EZYAUTH REVERSAL";
				} else if (rec[1].toString() == "D" || rec[1].toString().equals("D") || rec[1].toString() == "E"
						|| rec[1].toString().equals("E")) {
					status = "EZYAUTH";
				} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
					status = "EZYAUTH SETTLED";
				}
			} else {
				if (rec[1].toString() == "A" || rec[1].toString().equals("A") || rec[1].toString() == "P"
						|| rec[1].toString().equals("P")) {
					status = "EZYREC SALE";
				} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
					status = "EZYREC CANCEL";
				} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
					status = "EZYREC REVERSAL";
				} else if (rec[1].toString() == "D" || rec[1].toString().equals("D") || rec[1].toString() == "E"
						|| rec[1].toString().equals("E")) {
					status = "EZYREC";
				} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
					status = "EZYREC SETTLED";
				}
			}
			fs.setStatus(status);
			fs.setMerchantName(rec[2].toString().toUpperCase());
			if (rec[3] != null) {
				fs.setLocation(rec[3].toString());
			}
			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			}
			if (rec[5] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[5].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setTime(rt);
			}

			Double d = new Double(rec[6].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);

			fs.setAmount(output);
			fs.setTrxId(new BigInteger(rec[7].toString()));
			MerchantNameList.add(fs);
		}
		paginationBean.setItemList(MerchantNameList);
	}

	@Override
	@Transactional(readOnly = true)
	public void listSettlementMDRTransaction(final PaginationBean<SettlementModel> paginationBean, final String date1,
			final String date2, final String txntype) {

		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txntype);

		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
		String sql = null;

		Date dt = new Date();
		String fromDate = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		logger.info(" Previous Date Format " + fromDate);

		// Fpx Date Format - Start

		String FpxDate = null;
		try {
			FpxDate = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyy-MM-dd").parse(fromDate));
			System.out.println("FpxDate   " + FpxDate);
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		// Fpx Date Format - End

		String fromdate = null;
		String todate = null;
		if (date1 != null && date2 != null) {
			fromdate = date1.replace("-", "");
			todate = date2.replace("-", "");
		}

		// Date Variables
		String fromSearch = date1;
		String toSearch = date2;
		String previousDate = fromDate.replace("-", "");
		Query sqlQuery = null;

		if (txntype == null) {

			logger.info("Default Query Executed");

			sql = "(SELECT s.DATE,s.TXN_AMOUNT,s.NET_AMOUNT,s.HOST_MDR_AMT,s.MOBI_MDR_AMT,s.MID,s.MASKED_PAN,s.STATUS,s.RRN,'',s.CARD_BRAND,"
					+ "s.CARD_TYPE FROM SETTLEMENT_MDR s " + "WHERE s.DATE = '" + previousDate + "' ) " + "UNION "
					+ "(SELECT b.DATE,b.TXNAMOUNT,b.NETAMOUNT,b.MDRAMOUNT,b.MDRREBATEAMOUNT,b.MID,'',b.PAYMENT,b.BOOSTTXNID,'','BOOST',"
					+ "  '' FROM BOOST_DLY_RECON b " + " WHERE b.DATE LIKE '" + previousDate + "%') " + "UNION "
					+ "(SELECT f.TX_DATE , f.TXNAMOUNT , f.PAYABLEAMT , f.HOST_MDR_AMT , f.MOBI_MDR_AMT , f.MID , '' , f.`STATUS` , f.FPXTXNID , f.SELLERORDERNO , 'FPX' , ''  FROM FPX_TRANSACTION f WHERE f.TX_DATE = '"
					+ FpxDate + "')";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("CARD")) {

			logger.info("CARD Query Executed");

			sql = "SELECT s.DATE,s.TXN_AMOUNT,s.NET_AMOUNT,s.HOST_MDR_AMT,s.MOBI_MDR_AMT,s.MID,s.MASKED_PAN,s.STATUS,s.RRN,'',s.CARD_BRAND,"
					+ "s.CARD_TYPE FROM SETTLEMENT_MDR s WHERE s.DATE BETWEEN '" + fromdate + "' and '" + todate + "' ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("BOOST")) {

			logger.info("BOOST Query Executed");

			sql = "SELECT b.DATE,b.TXNAMOUNT,b.NETAMOUNT,b.MDRAMOUNT,b.MDRREBATEAMOUNT,b.MID,'' As MASKED_PAN ,b.PAYMENT,b.BOOSTTXNID,'' As SELLERORDERNO ,'BOOST',"
					+ "  '' As CARD_TYPE FROM BOOST_DLY_RECON  b  WHERE b.DATE BETWEEN '" + fromdate + "%' and '"
					+ todate + "%' ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("FPX")) {

			logger.info("FPX Query Executed");

			sql = "SELECT f.TX_DATE , f.TXNAMOUNT , f.PAYABLEAMT , f.HOST_MDR_AMT , f.MOBI_MDR_AMT , f.MID , '' As MASKED_PAN , f.`STATUS` , f.FPXTXNID , f.SELLERORDERNO , 'FPX' , '' As CARD_TYPE FROM FPX_TRANSACTION f WHERE  f.TIME_STAMP  between '"
					+ fromSearch + "' And '" + toSearch + "' ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementModel fs = new SettlementModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setDate("");

			} else if (rec[0] != null) {

				int datelength = rec[0].toString().length();

				if (datelength == 11) {

					String Fdate = null;
					try {
						Fdate = new SimpleDateFormat("yyyyMMdd")
								.format(new SimpleDateFormat("dd-MMM-yyyy").parse(rec[0].toString()));
						logger.info("Fdate   " + Fdate);
					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setDate(Fdate);
				} else if (rec[0].toString().contains("T")) {
					String rd = rec[0].toString().substring(0, 8);

					logger.info("rd" + rd);

					fs.setDate(rd);
				} else {
					fs.setDate(rec[0].toString());
				}

			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setTxnAmount("");

			} else

			if (rec[1] != null) {

				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[2] != null) {

				Double d = new Double(rec[2].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setHostMdrAmt("");

			} else if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setHostMdrAmt(output);

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setMobiMdrAmt("");

			} else

			if (rec[4] != null) {

				Double d = new Double(rec[4].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMobiMdrAmt(output);

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setMid("");

			} else

			if (rec[5] != null) {

				fs.setMid(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setMaskedPan("");

			} else

			if (rec[6] != null) {

				fs.setMaskedPan(rec[6].toString());

			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setStatus("");

			} else if (rec[7] != null) {

				if (rec[7].toString().equals("S")) {
					fs.setStatus("SETTLE");
				} else if (rec[7].toString().equals("H")) {
					fs.setStatus("HOLD");
				}
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setRrn("");

			} else if (rec[8] != null) {
				fs.setRrn(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setInvoiceId("");

			} else if (rec[9] != null) {
				fs.setInvoiceId(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setCardBrand("");

			} else if (rec[10] != null) {

				fs.setCardBrand(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {

				fs.setCardType("");

			} else if (rec[11] != null) {
				fs.setCardType(rec[11].toString());
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public SettlementMDR loadSettlementMDR(String rrn) {

		return (SettlementMDR) sessionFactory.getCurrentSession().createCriteria(SettlementMDR.class)
				.add(Restrictions.eq("rrn", rrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public BoostDailyRecon loadBoostdlyrecon(String rrn) {

		return (BoostDailyRecon) sessionFactory.getCurrentSession().createCriteria(BoostDailyRecon.class)
				.add(Restrictions.eq("boostTxnID", rrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public FpxTransaction loadFpxTransaction(String rrn, String invoiceId) {

		return (FpxTransaction) sessionFactory.getCurrentSession().createCriteria(FpxTransaction.class)
				.add(Restrictions.eq("fpxTxnId", rrn)).add(Restrictions.eq("sellerOrderNo", invoiceId)).setMaxResults(1)
				.uniqueResult();
	}

	// new method for contactName in transaction summary page admin & merchant
	// login
	@Override
	public TerminalDetails getTerminalDetailsByTid(String tid) {

		return (TerminalDetails) sessionFactory.getCurrentSession().createCriteria(TerminalDetails.class)
				.add(Restrictions.eq("tid", tid)).setMaxResults(1).uniqueResult();
	}

	@Override
	public TransactionRequest loadTxnDetailsByID(BigInteger txnid) {
		return (TransactionRequest) sessionFactory.getCurrentSession().createCriteria(TransactionRequest.class)
				.add(Restrictions.eq("txnId", txnid)).setMaxResults(1).uniqueResult();
	}

	public MobileUser getMobileUserByGpayTid(String tid) {

		return (MobileUser) sessionFactory.getCurrentSession().createCriteria(MobileUser.class)
				.add(Restrictions.eq("onlineGpay", tid)).setMaxResults(1).uniqueResult();
	}

	public MobileUser getMobileUserByGpayTidqr(String tid) {

		return (MobileUser) sessionFactory.getCurrentSession().createCriteria(MobileUser.class)
				.add(Restrictions.eq("gpayTid", tid)).setMaxResults(1).uniqueResult();
	}

	public TerminalDetails loadTerminalDetailsByMid(String mid) {

		return (TerminalDetails) getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.like("merchantId", mid, MatchMode.ANYWHERE)).setMaxResults(1).uniqueResult();
	}

	public MID loadMid(String mid) {
		/*
		 * System.out.print("MerchantDaoImpl:loadMid");
		 */
		return (MID) getSessionFactory().createCriteria(MID.class)
				.add(Restrictions.like("mid", mid, MatchMode.ANYWHERE)).setMaxResults(1).uniqueResult();
	}

	public Merchant loadMerchantbyid(MID mid) {
		/* logger.info("MerchantDaoImpl:loadMerchant MID"); */
		// TODO Auto-generated method stub
		return (Merchant) getSessionFactory().createCriteria(Merchant.class).add(Restrictions.eq("mid", mid))
				.setMaxResults(1).uniqueResult();
	}
	// demo method 05-10-2016
	/*
	 * @Transactional(readOnly = true) public ArrayList<ForSettlement>
	 * findinterval(){ ArrayList<ForSettlement> fs1 = new
	 * ArrayList<ForSettlement>(); String tid="11110012"; String sql =
	 * "select sum(f.amount),f.TXN_TYPE, QUARTER(f.TIME_STAMP) from mobiversa.for_settlement f where QUARTER(f.TIME_STAMP) = QUARTER(Date_sub(now(), INTERVAL 1 QUARTER)) and f.status in ('S','A','CT') and f.tid = :tid  group by f.TXN_TYPE order by f.TIME_STAMP"
	 * ; logger.info("Query : " + sql); Query sqlQuery =
	 * super.getSessionFactory().createSQLQuery(sql); sqlQuery.setString("tid",
	 * tid);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * 
	 * for (Object[] rec : resultSet) { ForSettlement fs = new ForSettlement();
	 * String su = rec[0].toString();
	 * 
	 * fs.setAmount(rec[0].toString());
	 * 
	 * fs.setTxnType(rec[1].toString()); fs.setTimeStamp(rec[2].toString());
	 * logger.info("check: "+fs.getAmount()+" "+fs.getTxnType()+" "+fs.getTimeStamp(
	 * )); fs1.add(fs); } return fs1; }
	 */

	// start subagent volume summary 08/08/2016
	@Transactional(readOnly = true)
	public List<ForSettlement> subAgentVolume1(ArrayList<Criterion> props, SubAgent subAgent) {
		ArrayList<ForSettlement> fs1 = new ArrayList<ForSettlement>();
		String sql = null;
		int cDate = 0;
		int pDate = 0;

		Date dt = new Date();

		cDate = dt.getMonth() + 1;
		pDate = dt.getMonth();
		// System.out.println("Month :"+pDate +" "+cDate);
		/* ag.FIRST_NAME */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
		 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  '"
		 * + pDate + "'  and '" + cDate + "'" + " and a.status='S' and ag.id='" +
		 * subAgent.getId() + "' " +
		 * "group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id "
				+ "where  month(a.time_stamp) between  :pDate  and :cDate" + " and a.status='S' and ag.id= :id"
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class,props,
		 * Order.asc("merchantName"));
		 */
		logger.info("Query : " + sql);
		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("pDate", pDate);
		sqlQuery.setLong("cDate", cDate);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();

			fs.setDate(su);

			Double d = new Double(rec[1].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			fs.setAgentName(rec[2].toString());
			// logger.info("subagent__id:" + rec[3].toString() );
			fs.setMerchantName(rec[3].toString() + "~SUBAGENT~" + rec[2].toString());
			fs1.add(fs);
		}
		return fs1;

	}

	/*
	 * // Start agentvolume 06-01-2017
	 * 
	 * @Transactional(readOnly = true) public List<AgentVolumeData>
	 * agentVolumeData(final String agentName) {
	 * 
	 * List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
	 * String sql = null; List<String> date = new ArrayList<String>(); List<String>
	 * amount = new ArrayList<String>(); String agId = null; String agent = null;
	 * String agentDet = null; String present = null; int cDate = 0; // String
	 * amount1= "0.00";
	 * 
	 * int count = 0;
	 * 
	 * Date dt = new Date(); cDate = dt.getMonth() + 1;
	 * 
	 * List<Integer> listMonth = getAllMonth(cDate);
	 * 
	 * // pDate = dt.getMonth()-2; // logger.info("Current Month : " + cDate); sql =
	 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
	 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
	 * +
	 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
	 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
	 * " group by month(a.time_stamp) order by a.time_stamp desc";
	 * 
	 * sql =
	 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
	 * +
	 * " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
	 * +
	 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
	 * +
	 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(),"
	 * +
	 * " INTERVAL 4 month)  and now() and a.status='S' and ag.FIRST_NAME = :agentName "
	 * + " group by month(a.time_stamp) order by a.time_stamp desc";
	 * 
	 * 
	 * 
	 * sql =
	 * "select month(a.time_stamp) , sum(a.AMOUNT) TotalAmount , ag.FIRST_NAME ,ag.id from "
	 * +
	 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
	 * +
	 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
	 * +
	 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), "
	 * +
	 * "INTERVAL 3 month) and now() and a.status='S' and ag.FIRST_NAME = :agentName "
	 * + "group by month(a.time_stamp) order by a.time_stamp desc";
	 * 
	 * logger.info("Query : " + sql);
	 * 
	 * Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
	 * .addEntity(ForSettlement.class); sqlQuery.setString("agentName", agentName);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * logger.info("Resultset Size : " + resultSet.size());
	 * logger.info("month Size : " + listMonth.size()); if (resultSet.size() <= 0) {
	 * 
	 * Agent agent1 = (Agent) getSessionFactory() .createCriteria(Agent.class)
	 * .add(Restrictions.eq("firstName", agentName))
	 * .setMaxResults(1).uniqueResult(); agId = agent1.getId().toString(); agent =
	 * agent1.getFirstName(); agentDet = agId + "~AGENT~" + agent; present = "No";
	 * for (int a : listMonth) { date.add(getMonth(a)); amount.add("0.00");
	 * 
	 * }
	 * 
	 * } else {
	 * 
	 * for (Object[] rec : resultSet) {
	 * 
	 * int date1 = Integer.parseInt(rec[0].toString());
	 * 
	 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
	 * while (listMonth.get(count).intValue() != date1) {
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++;
	 * 
	 * }// else{ date.add(getMonth(date1)); Double d = new
	 * Double(rec[1].toString()); d = d / 100;
	 * 
	 * String pattern = "#,##0.00"; DecimalFormat myFormatter = new
	 * DecimalFormat(pattern); String output = myFormatter.format(d);
	 * amount.add(output);
	 * 
	 * agId = rec[3].toString(); agent = rec[2].toString(); present = "Yes";
	 * agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();
	 * 
	 * count++; } while(count < 4){
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++; } }
	 * 
	 * AgentVolumeData agentVolumeData = new AgentVolumeData();
	 * agentVolumeData.setAgId(agId); agentVolumeData.setAgentName(agent);
	 * agentVolumeData.setAgentDet(agentDet); agentVolumeData.setAmount(amount);
	 * agentVolumeData.setDate(date); agentVolumeData.setTxnPresent(present);
	 * agentVolumeDataList.add(agentVolumeData); return agentVolumeDataList; }
	 */

	// Start agentvolume 06-01-2017

	@Transactional(readOnly = true)
	public List<AgentVolumeData> agentVolumeData(final String agentName) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		// logger.info("Current Month : " + cDate);
		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * +
		 * " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
		 * +
		 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(),"
		 * +
		 * " INTERVAL 4 month)  and now() and a.status='S' and ag.FIRST_NAME = :agentName "
		 * + " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT) TotalAmount , ag.FIRST_NAME ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
				+ "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 3 month) and now() and a.status='S' and ag.FIRST_NAME = :agentName "
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "###0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> agentVolumeData1(final String agentName) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		// logger.info("Current Month : " + cDate);
		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * +
		 * " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
		 * +
		 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(),"
		 * +
		 * " INTERVAL 4 month)  and now() and a.status='S' and ag.FIRST_NAME = :agentName "
		 * + " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.F007_TXNAMT) TotalAmount , ag.FIRST_NAME ,ag.id from "
				+ "UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID  INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 3 month) and now() and a.status='S' and ag.FIRST_NAME = :agentName "
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "###0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getAgentVolumeData(final String agentName, StringBuffer pMid, StringBuffer uMid,
			long id) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);
		AgentVolumeData agentVolumeData = new AgentVolumeData();

		String sql1 = "select month(a.time_stamp) , sum(a.AMOUNT) TotalAmount , '" + agentName + "' ,'" + id + "' from "
				+ "FOR_SETTLEMENT a WHERE a.MID IN (" + pMid + ") AND a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 3 month) and now() and a.status='S' "
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery1.list();
		logger.info("Resultset Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);

		String sql2 = "Select month(u.TIME_STAMP),sum(u.F007_TXNAMT) ,'" + agentName + "' ,'" + id
				+ "' from UM_ECOM_TXNRESPONSE u " + " where u.F001_MID IN (" + uMid
				+ ") and u.TIME_STAMP between DATE_SUB(now(),  " + "INTERVAL 3 month) and now() and status='S' "
				+ "group by month(u.TIME_STAMP) order by u.TIME_STAMP desc";

		logger.info("Query : " + sql2);

		Query sqlQuery2 = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet2 = sqlQuery2.list();
		logger.info("Resultset Size : " + resultSet2.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet2.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet2) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);

		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	public String getMonth(int m) {

		// System.out.println(" Data :"+m);
		String mon = "";
		switch (m) {
		case 1:
			mon = "JAN";
			break;
		case 2:
			mon = "FEB";
			break;
		case 3:
			mon = "MAR";
			break;
		case 4:
			mon = "APR";
			break;
		case 5:
			mon = "MAY";
			break;
		case 6:
			mon = "JUN";
			break;
		case 7:
			mon = "JUL";
			break;
		case 8:
			mon = "AUG";
			break;
		case 9:
			mon = "SEP";
			break;
		case 10:
			mon = "OCT";
			break;
		case 11:
			mon = "NOV";
			break;
		case 12:
			mon = "DEC";
			break;

		default:
			mon = "";
			break;
		}

		return mon;

	}

	private static List<Integer> getAllMonth(int month) {
		logger.info("month debug... " + month);
		List<Integer> listMonth = new ArrayList<Integer>();
		for (int i = 0; i < 4; i++) {
			if (month == 0) {
				logger.info("debug 0");
				listMonth.add(12);
			} else if (month == -1) {
				logger.info("debug -1");
				listMonth.add(11);
			} else if (month == -2) {
				logger.info("debug -2");
				listMonth.add(10);
			} else {
				logger.info("debug else ");
				listMonth.add(month);
			}
			month--;
		}
		return listMonth;
	}

	// sugAgent Volume Data 06-01-2017
	@Override
	public List<AgentVolumeData> subAgentVolumeData(SubAgent subAgent) {
		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		logger.info("Current Month : " + cDate);
//bps add in future also moto(S)
		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
				+ "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 4 month)  and now() and a.status='S'  and ag.id= :id "
				+ "group by month(a.time_stamp) order by a.time_stamp  desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());
		logger.info("Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			// String sql1 =
			// "select a.ID,a.FIRST_NAME from mobiversa.agent a where
			// a.FIRST_NAME='"+agentName+"'";
			logger.info(" size is ZERO  ");
			SubAgent agent1 = (SubAgent) getSessionFactory().createCriteria(SubAgent.class)
					.add(Restrictions.eq("id", subAgent.getId())).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getName();
			agentDet = agId + "~SUBAGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");
				// count ++;

			}

		} else {

			for (Object[] rec : resultSet) {
				// for(Integer mon : listMonth){
				int date1 = Integer.parseInt(rec[0].toString());
				// if(cDate != date1 && count == 0){
				/*
				 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				 */
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);

				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~SUBAGENT~" + rec[2].toString();
				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}
		// logger.info("agId :" + agId);
		// logger.info("agent :" + agent);
		// logger.info("agentDet :" + agentDet);
		// logger.info("amount :" + amount);
		// logger.info("date :" + date);
		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Override
	public List<AgentVolumeData> merchantVolumeData(String agentName) {
		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		int cDate = 0;

		int count = 0;

		String sql2 = null;
		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);

		if (condt.equals("AGENT")) {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id from "
			 * ag . FIRST_NAME
			 * 
			 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
			 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now()" +
			 * " and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id='" + agid +
			 * "'" + " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id from "
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid"
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		} else {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName,f.Id from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * " ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
			 * " where a.time_stamp  between DATE_SUB(now(), INTERVAL 90 DAY)  and now()" +
			 * " and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid + "' " +
			 * " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName,f.Id from " // ag.FIRST_NAME
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ " ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id "
					+ " where a.time_stamp  between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.NAME= :agname and ag.id= :agid "
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		}

		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agname", agname);
		sqlQuery.setString("agid", agid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());
		logger.info("Size : " + listMonth.size());

		/* Start Sorting */
		List<MerchantVolumeData> listMVD = new ArrayList<MerchantVolumeData>();
		for (Object[] rec : resultSet) {
			MerchantVolumeData mvd = new MerchantVolumeData();

			mvd.setId(rec[3].toString());
			mvd.setName(rec[2].toString());
			mvd.setAmount(rec[1].toString());
			mvd.setMonth(rec[0].toString());
			listMVD.add(mvd);
		}

		Collections.sort(listMVD, new MerchantComparator());

		for (MerchantVolumeData mvd : listMVD) {
			/*
			 * logger.info("Sorted Data : " + mvd.getId() + ":" + mvd.getName() + ":" +
			 * mvd.getAmount() + ":" + mvd.getMonth());
			 */
		}

		for (MerchantVolumeData mvd : listMVD) {
			// logger.info("getmonth:" + mvd.getMonth());

			int date1 = Integer.parseInt(mvd.getMonth());

			// String id = mvd.getId().toString();
			// logger.info("COUNT : " + count);
			// logger.info("q month : " + date1);
			while (listMonth.get(count).intValue() != date1) {
				// logger.info("While COUNT : " + count);
				/*
				 * logger.info("c month  : " + listMonth.get(count).intValue() + " q month :" +
				 * date1);
				 */
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
			// logger.info("End while");
			date.add(getMonth(date1));
			Double d = new Double(mvd.getAmount());
			d = d / 100;

			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			amount.add(output);
			agent = mvd.getName();
			count++;

			if (count == 4) {
				logger.info("Count :" + count);
				logger.info("agent :" + agent);
				logger.info("amount :" + amount);
				logger.info("date :" + date);
				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgentName(agent);
				agentVolumeData.setAmount(amount);
				agentVolumeData.setDate(date);
				agentVolumeDataList.add(agentVolumeData);
				amount = new ArrayList<String>();
				date = new ArrayList<String>();
				count = 0;
			}

		}
		return agentVolumeDataList;
	}

	/* End Sorting */

	// new method for merchant volume start
	/*
	 * @Override public List<String> midByTransaction(String agentName) {
	 * 
	 * String sql = null; List<String> listMid = new ArrayList<String>();
	 * 
	 * String data[] = null; String agid = null; String condt = null; String agname
	 * = null; if (agentName.contains("~")) { data = agentName.split("~"); agid =
	 * data[0]; condt = data[1]; agname = data[2]; }
	 * 
	 * if (condt.equals("AGENT")) {
	 * 
	 * sql = "select f.BUSINESS_NAME ,m.mid,f.id from FOR_SETTLEMENT a " +
	 * "INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
	 * "INNER JOIN AGENT ag on f.AGID_FK=ag.id  " +
	 * "where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() " +
	 * "and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id='" + agid +
	 * "'" + "group by a.MID order by a.mid desc "; // ******* add bps in future
	 * include moto(S) logger.info("insisde agent"); sql =
	 * "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a " +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN AGENT ag on f.AGID_FK=ag.id  " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * } else { logger.info("insisde sub-agent"); sql =
	 * "select f.BUSINESS_NAME ,m.mid,f.id from FOR_SETTLEMENT a " +
	 * "INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
	 * "INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * "where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() " +
	 * "and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid + "' " +
	 * "group by a.MID order by a.mid desc ";
	 * 
	 * sql = "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a "
	 * +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * }
	 * 
	 * logger.info("Query : " + sql); Query sqlQuery =
	 * super.getSessionFactory().createSQLQuery(sql);//
	 * .addEntity(ForSettlement.class); sqlQuery.setString("agname", agname);
	 * sqlQuery.setString("agid", agid);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * logger.info("Size : " + resultSet.size());
	 * 
	 * for (Object[] rec : resultSet) {
	 * 
	 * if(rec[1]!=null){ listMid.add(rec[1].toString()); } if(rec[2]!=null){
	 * listMid.add(rec[2].toString()); } //logger.info("display list MID: " +
	 * rec[0].toString());
	 * 
	 * } return listMid; }
	 */

	@Override
	public List<Merchant> getMerchantDataByAgent(BigInteger agid) {
		return (List<Merchant>) getSessionFactory().createCriteria(Merchant.class).add(Restrictions.eq("agID", agid))
				.list();

	}

	@Override
	public List<MasterMerchant> getMasterMerchantDataByAgent(String agid) {
		return (List<MasterMerchant>) getSessionFactory().createCriteria(MasterMerchant.class)
				.add(Restrictions.eq("agId", agid)).list();

	}

	@Override
	public List<String> loadmidBymerchant(Long id) {

		String sql = null;
		BigInteger merchantid = BigInteger.valueOf(id);
		List<String> listMid = new ArrayList<String>();
		sql = "select f.BUSINESS_NAME ,f.ID from MID m INNER JOIN MERCHANT f ON f.MID_FK=m.ID where f.ID= :merchantid ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size ---: " + resultSet.size());

		for (Object[] rec : resultSet) {

			if (rec[1] != null) {
				listMid.add(rec[1].toString());
			}
			/*
			 * if(rec[2]!=null){ listMid.add(rec[2].toString()); }
			 */
			// logger.info("display list MID: " + rec[0].toString());

		}
		return listMid;

	}

	@Override
	public String merchantCount(String agentName) {
		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}
		String sql = "select f.ID from MERCHANT f where f.AGID_FK= :agid";
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		sqlQuery.setString("agid", agid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size ---: " + resultSet.size());

		return String.valueOf(resultSet.size());
	}

	@Override
	public List<String> midByTransaction(String agentName, String offset) {

		String sql = null;
		List<String> listMid = new ArrayList<String>();

		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}

		logger.info("insisde agent");

		sql = "select f.BUSINESS_NAME ,f.ID from MERCHANT f where f.AGID_FK= :agid "
				+ " order by f.ID desc limit 10 OFFSET " + offset;

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agname", agname);
		sqlQuery.setString("agid", agid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size ---: " + resultSet.size());

		for (Object[] rec : resultSet) {

			if (rec[1] != null) {
				listMid.add(rec[1].toString());
			}
			/*
			 * if(rec[2]!=null){ listMid.add(rec[2].toString()); }
			 */
			// logger.info("display list MID: " + rec[0].toString());

		}
		return listMid;
	}
	// end

	/*
	 * @Override //public List<ForSettlement> midByTransaction(String agentName) {
	 * public List<AgentVolumeData> midByTransaction(String agentName) {
	 * 
	 * List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
	 * String sql = null; List<AgentVolumeData> listMid = new
	 * ArrayList<AgentVolumeData>();
	 * 
	 * String data[] = null; String agid = null; String condt = null; String agname
	 * = null;
	 * 
	 * 
	 * List<String> date = new ArrayList<String>(); List<String> amount = new
	 * ArrayList<String>(); String agId = null; String agent = null; int cDate = 0;
	 * int count = 0;
	 * 
	 * //logger.info("Merchant MID: "+mid); Date dt = new Date(); cDate =
	 * dt.getMonth() + 1;
	 * 
	 * List<Integer> listMonth = getAllMonth(cDate);
	 * 
	 * 
	 * 
	 * if (agentName.contains("~")) { data = agentName.split("~"); agid = data[0];
	 * condt = data[1]; agname = data[2]; }
	 * 
	 * if (condt.equals("AGENT")) { logger.info("insisde agent");
	 * sql="select f.BUSINESS_NAME ,a.MID,sum(a.amount),month(a.time_stamp) ,f.id from FOR_SETTLEMENT a INNER JOIN MID m "
	 * +
	 * "on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on "
	 * +
	 * "f.AGID_FK=ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month)  and now() and a.status='S'"
	 * +
	 * " and ag.FIRST_NAME= :agname and ag.id= :agid group by a.MID,month(a.time_stamp) order by month(a.time_stamp) "
	 * + "desc"; // ******* add bps in future include moto(S)
	 * 
	 * sql = "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a "
	 * +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN AGENT ag on f.AGID_FK=ag.id  " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * } else { logger.info("insisde sub-agent"); sql =
	 * "select f.BUSINESS_NAME ,m.mid,f.id from FOR_SETTLEMENT a " +
	 * "INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
	 * "INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * "where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() " +
	 * "and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid + "' " +
	 * "group by a.MID order by a.mid desc ";
	 * 
	 * sql="select f.BUSINESS_NAME ,a.MID,sum(a.amount),month(a.time_stamp) ,f.id from FOR_SETTLEMENT a INNER JOIN MID m "
	 * +
	 * "on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on "
	 * +
	 * "f.SUBAGID_FK=ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month)  and now() and a.status='S'"
	 * +
	 * " and ag.NAME= :agname and ag.id= :agid group by a.MID,month(a.time_stamp) order by month(a.time_stamp) desc"
	 * ;
	 * 
	 * sql = "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a "
	 * +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * }
	 * 
	 * logger.info("Query : " + sql); Query sqlQuery =
	 * super.getSessionFactory().createSQLQuery(sql);//
	 * .addEntity(ForSettlement.class); sqlQuery.setString("agname", agname);
	 * sqlQuery.setString("agid", agid);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * logger.info("Size : " + resultSet.size());
	 * 
	 * for (Object[] rec : resultSet) { AgentVolumeData fs=new AgentVolumeData();
	 * if(rec[0]!=null){ fs.setMerchantName(rec[0].toString()); } if(rec[1]!=null){
	 * fs.setMid(rec[1].toString()); } if(rec[2]!=null){ Double d = new
	 * Double(rec[2].toString()); d = d / 100;
	 * 
	 * String pattern = "#,##0.00"; DecimalFormat myFormatter = new
	 * DecimalFormat(pattern); String output = myFormatter.format(d);
	 * fs.setAmount1(output); } if(rec[3]!=null){ fs.setMonth(rec[3].toString()); }
	 * if(rec[4]!=null){ fs.setMerchantId(rec[4].toString()); }
	 * agentVolumeDataList.add(fs); //logger.info("display list MID: " +
	 * rec[0].toString());
	 * 
	 * }
	 * 
	 * for (Object[] rec : resultSet) {
	 * 
	 * if(rec[3]!=null){ int date1 = Integer.parseInt(rec[3].toString());
	 * 
	 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
	 * while (listMonth.get(count).intValue() != date1) {
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++;
	 * 
	 * }
	 * 
	 * date.add(getMonth(date1)); } if(rec[2]!=null){ Double d = new
	 * Double(rec[2].toString()); d = d / 100;
	 * 
	 * String pattern = "#,##0.00"; DecimalFormat myFormatter = new
	 * DecimalFormat(pattern); String output = myFormatter.format(d);
	 * 
	 * amount.add(output);
	 * 
	 * } if(rec[1]!=null){ agId = rec[1].toString(); } if(rec[0]!=null){ agent =
	 * rec[0].toString(); }
	 * 
	 * count++; } while(count < 4){
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++; } }
	 * 
	 * AgentVolumeData agentVolumeData = new AgentVolumeData();
	 * agentVolumeData.setAgId(agId); agentVolumeData.setAgentName(agent);
	 * agentVolumeData.setAmount(amount); agentVolumeData.setDate(date);
	 * agentVolumeDataList.add(agentVolumeData);
	 * 
	 * return agentVolumeDataList; }
	 */

	// merchant volume multiple merchant start
	// merchant volume multiple merchant start

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMid(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMid1(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id from FOR_SETTLEMENT a "
		 * +
		 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
		 * +
		 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
		 * + " and a.status='S' and a.mid= :mid " +
		 * " group by a.MID,month(a.time_stamp) order by a.time_stamp desc ";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id,a.TXN_TYPE from FOR_SETTLEMENT a "
		 * +
		 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
		 * +
		 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 3 month)  and now() "
		 * + " and a.status='S' and a.mid= :mid " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc ";
		 */
		/*
		 * sql="select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
		 * +
		 * "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
		 * +
		 * "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
		 * + "month(a.time_stamp) order by a.time_stamp desc limit 4";
		 */

		sql = "select month(a.time_stamp) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getHotelMerchantByMid(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.TIME_STAMP) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID=m.UM_MOTO_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.TIME_STAMP "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
				+ "month(a.TIME_STAMP) having montha in (" + month + ") order by a.TIME_STAMP desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantVolByMid(final String mid, String type) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;
		AgentVolumeData agentVolumeData = new AgentVolumeData();
		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		if ((type == null) || (type.equals("P"))) {
			sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
					+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
					+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

			logger.info("Query : " + sql);

			// System.out.println("no records found:" +sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("mid", mid);
			// sqlQuery.setString("motoMid", motoMid);
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("resultSet Size : " + resultSet.size());
			logger.info("month Size : " + listMonth.size());
			if (resultSet.size() <= 0) {

				Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
						.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
				agId = merchant.getId().toString();
				agent = merchant.getBusinessName().toLowerCase();

				for (int a : listMonth) {
					date.add(getMonth(a));
					amount.add("0.00");

				}

			} else {

				for (Object[] rec : resultSet) {

					// if(count <=3) {

					if (rec[0] != null) {
						int date1 = Integer.parseInt(rec[0].toString());

						logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
						while (listMonth.get(count).intValue() != date1) {
							date.add(getMonth(listMonth.get(count).intValue()));
							amount.add("0.00");
							count++;

						}

						date.add(getMonth(date1));
					}
					if (rec[1] != null) {
						Double d = new Double(rec[1].toString());
						d = d / 100;

						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(d);

						amount.add(output);

					}
					if (rec[3] != null) {
						agId = rec[3].toString();
					}
					if (rec[2] != null) {
						agent = rec[2].toString();
					}
					/*
					 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
					 */
					// }
					count++;

				}
				while (count <= 3) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;
				}
			}

			agentVolumeData.setAgId(agId);
			agentVolumeData.setAgentName(agent.toLowerCase());
			agentVolumeData.setTxnType(txnType);
			agentVolumeData.setAmount(amount);
			agentVolumeData.setDate(date);
		}

		else {
			sql = "select month(u.TIME_STAMP) montha, sum(u.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
					+ "from UM_ECOM_TXNRESPONSE u INNER JOIN MID m on u.F001_MID=m.UM_MOTO_MID "
					+ "or u.F001_MID=m.UM_EZYWAY_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.timeStamp "
					+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and u.status='S' and f.ID= :mid  group by "
					+ "month(u.TIME_STAMP) having montha in (" + month + ") order by u.TIME_STAMP desc";

			logger.info("Query : " + sql);

			// System.out.println("no records found:" +sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("mid", mid);
			// sqlQuery.setString("motoMid", motoMid);
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("resultSet Size : " + resultSet.size());
			logger.info("month Size : " + listMonth.size());
			if (resultSet.size() <= 0) {

				Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
						.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
				agId = merchant.getId().toString();
				agent = merchant.getBusinessName().toLowerCase();

				for (int a : listMonth) {
					date.add(getMonth(a));
					amount.add("0.00");

				}

			} else {

				for (Object[] rec : resultSet) {

					// if(count <=3) {

					if (rec[0] != null) {
						int date1 = Integer.parseInt(rec[0].toString());

						logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
						while (listMonth.get(count).intValue() != date1) {
							date.add(getMonth(listMonth.get(count).intValue()));
							amount.add("0.00");
							count++;

						}

						date.add(getMonth(date1));
					}
					if (rec[1] != null) {
						Double d = new Double(rec[1].toString());
						d = d / 100;

						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(d);

						amount.add(output);

					}
					if (rec[3] != null) {
						agId = rec[3].toString();
					}
					if (rec[2] != null) {
						agent = rec[2].toString();
					}
					/*
					 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
					 */
					// }
					count++;

				}
				while (count <= 3) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;
				}
			}

			agentVolumeData.setAgId(agId);
			agentVolumeData.setAgentName(agent.toLowerCase());
			agentVolumeData.setTxnType(txnType);
			agentVolumeData.setAmount(amount);
			agentVolumeData.setDate(date);
		}

		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	/*
	 * @Transactional(readOnly = true) public List<AgentVolumeData>
	 * getMerchantVolumeByMID(final String mID,final String aID) {
	 */

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantVolumeByMID(final String mID, final String aID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		List<String> txnTypes = new ArrayList<String>();
		String mId = null;
		String merchantBusinessName = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		// logger.info("Merchant MID: "+aid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id,a.TXN_TYPE from "
				+ "FOR_SETTLEMENT a  INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or "
				+ "a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 2 month) and now() and a.status='S' and f.AGID_FK= :aID and f.ID= :mID "
				+ "group by month(a.time_stamp),a.MID order by month(a.time_stamp) desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("aID", aID);
		sqlQuery.setString("mID", mID);
		// sqlQuery.setString("motoMid", motoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());

		String month = null;
		String amt = null;
		for (Object[] rec : resultSet) {
			AgentVolumeData agentVolumeData = new AgentVolumeData();
			if (rec[0] != null) {
				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("display  : " + date1 + " : ");

				date.add(getMonth(date1));

				month = getMonth(date1);

			}
			if (rec[1] != null) {
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				amount.add(output);

				amt = output;
			}
			if (rec[2] != null) {
				merchantBusinessName = rec[2].toString();
			}
			if (rec[3] != null) {
				mId = rec[3].toString();
			}

			if (rec[4] != null) {
				logger.info("txn-type: " + rec[4].toString());
				txnType = rec[4].toString();
				if (txnType.equals("MOTO")) {
					txnType = "EZYMOTO";
				} else if (txnType.equals("EZYREC") || txnType.equals("RECURRING")) {
					txnType = "EZYREC";
				} else if (txnType.equals("CASH")) {
					txnType = "EZYCASH";
				}
			} else {
				txnType = "EZYWIRE";
			}

			txnTypes.add(txnType);
			agentVolumeData.setAgId(mId);
			agentVolumeData.setMerchantName(merchantBusinessName);
			// agentVolumeData.setTxnTypes(txnTypes);
			agentVolumeData.setTxnType(txnType);
			// agentVolumeData.setAmount(amount);
			agentVolumeData.setAmount1(amt);
			agentVolumeData.setMonth(month);
			// agentVolumeData.setDate(date);
			logger.info(agentVolumeData.getAgId() + " " + agentVolumeData.getAgentName() + " "
					+ agentVolumeData.getAmount() + " " + agentVolumeData.getDate());
			logger.info(agentVolumeData.getAmount1() + " " + agentVolumeData.getMonth() + " "
					+ agentVolumeData.getTxnType());
			agentVolumeDataList.add(agentVolumeData);
		}

		// agentVolumeDataList.add(agentVolumeData);

		return agentVolumeDataList;
	}

	// sugAgent Volume Data 06-01-2017 new method for superAgent

	@Override
	public List<AgentVolumeData> superAgentVolumeData(SubAgent subAgent, Agent AgId) {
		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		logger.info("Current Month : " + cDate);

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
				+ " and a.status='S'  and ag.id= :id " + "group by month(a.time_stamp) order by a.time_stamp  desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());
		logger.info("Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			// String sql1 =
			// "select a.ID,a.FIRST_NAME from mobiversa.agent a where
			// a.FIRST_NAME='"+agentName+"'";
			logger.info(" size is ZERO  ");
			SubAgent agent1 = (SubAgent) getSessionFactory().createCriteria(SubAgent.class)
					.add(Restrictions.eq("id", subAgent.getId())).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getName();
			agentDet = agId + "~SUBAGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");
				// count ++;

			}

		} else {

			for (Object[] rec : resultSet) {
				// for(Integer mon : listMonth){
				int date1 = Integer.parseInt(rec[0].toString());
				// if(cDate != date1 && count == 0){
				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);

				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~SUBAGENT~" + rec[2].toString();
				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}
		// logger.info("agId :" + agId);
		// logger.info("agent :" + agent);
		// logger.info("agentDet :" + agentDet);
		// logger.info("amount :" + amount);
		// logger.info("date :" + date);
		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}
	// }

	// all transaction export new method
	@SuppressWarnings("unchecked")
	@Override
	public List<ForSettlement> listAllETransactionDetails(ArrayList<Criterion> props, String date, String date1) {

		logger.info("Inside listAllTransactionDetails : " + date + "     " + date1);
		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props,
		 * Order.desc("timeStamp"));
		 */
		if (props.size() == 2) {
			return (List<ForSettlement>) getSessionFactory().createCriteria(ForSettlement.class).add(props.get(0))
					.add(props.get(1)).addOrder(Order.desc("timeStamp")).list();
		} else {
			return (List<ForSettlement>) getSessionFactory().createCriteria(ForSettlement.class).add(props.get(0))
					.addOrder(Order.desc("timeStamp")).list();
		}
	}

	@Override
	public void searchForSettlementcard(String fromDate, String toDate, String tid, String status,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> criterionList) {
		// TODO Auto-generated method stub

	}

	@Override
	public void loadMerchantByName(PaginationBean<ForSettlement> paginationBean, String merchantName, String date) {
		// TODO Auto-generated method stub

	}

	@Override
	public void getMotoList(final PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> criterionList,
			final String fromDate, final String toDate, final String status, final Merchant merchant) {

		/*
		 * List<Object[]>resultList=
		 * (List<Object[]>)super.getSessionFactory().createCriteria(ForSettlement.class,
		 * "f") .add(Restrictions.eq("f.TRX_ID", merchant.getMid().getMotoMid()))
		 * .add(Restrictions.eq("f.STATUS", new String[] { "A", "C","S" }))
		 * .add(Restrictions.between("f.timeStamp", toDate, fromDate)) .setProjection(
		 * Projections.projectionList() .add( Projections.property("f.TRX_ID") ) .add(
		 * Projections.property("t.TRX_ID"))
		 * 
		 * ) .addOrder( Order.desc("f.timeStamp") ).list();
		 */

		/*
		 * Criteria criteria =
		 * super.getSessionFactory().createCriteria(ForSettlement.class, "f")
		 * .createAlias("f.transanctionrequest","t") .add(Restrictions.eq("f.TRX_ID",
		 * merchant.getMid().getMotoMid())) .add(Restrictions.eq("f.STATUS", new
		 * String[] { "A", "C","S" })) .add(Restrictions.between("f.TIME_STAMP", toDate,
		 * fromDate)) ;
		 */

		Criteria criteria = super.getSessionFactory().createCriteria(TransactionRequest.class, "t")
				.createAlias("t.forsettlement", "f").add(Restrictions.eq("f.TRX_ID", merchant.getMid().getMotoMid()))
				.add(Restrictions.eq("f.STATUS", new String[] { "A", "C", "S" }))
				.add(Restrictions.between("f.TIME_STAMP", toDate, fromDate));

		List<Object[]> resultList = criteria.list();

		// List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultList.size());
		for (Object[] rec : resultList) {

			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				logger.info(rec[0].toString());
			}
			if (rec[1] != null) {
				logger.info(rec[1].toString());
			}

		}

	}

	@Override
	public void searchForSettlementMotoByTid(PaginationBean<forsettlement> paginationBean, String fromDate,
			String toDate, Merchant merchant) {

		String sql2 = null;
		Query sqlQuery = null;
		String mid = merchant.getMid().getMotoMid();

		String from = null;
		String to = null;

		ArrayList<forsettlement> fsList = new ArrayList<forsettlement>();

		if (fromDate != null && toDate != null) {

			from = fromDate;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));

			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = toDate;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info(" from and to " + from + " " + to);

		sql2 = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
				+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE IN ('MOTO','EZYLINK','EZYMOTO') And "
				+ " a.TIME_STAMP BETWEEN :from and :to ) as temp order by TIME_STAMP desc";

		sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", mid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			forsettlement fs = new forsettlement();
			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setMid("");
			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[1] != null) {

				fs.setTid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setStatus("");
			} else if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setStatus("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("TPA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("SPA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("TPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("SPS")) {
					fs.setStatus("SETTLED");
				}

				else if (rec[3].toString().equals("BNA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("BNS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("BNC")) {
					fs.setStatus("VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[4] != null) {

				fs.setReference(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setAidresponse("");
			} else if (rec[5] != null) {

				fs.setAidresponse(rec[5].toString());
			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setRrn("");
			} else if (rec[6] != null) {

				fs.setRrn(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNameoncard("");
			} else if (rec[7] != null) {

				fs.setNameoncard(rec[7].toString());
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardnumber("");
			} else if (rec[8] != null) {

				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setCardnumber(lasteightDigits);
				}

			} else {
				fs.setCardnumber("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[9] != null) {
				if (rec[16].toString().equals("NULL")) {

					fs.setCardscheme(rec[9].toString());
				} else if (rec[16] != null && !rec[16].toString().isEmpty()) {
					fs.setCardscheme(rec[9].toString() + " - " + rec[16].toString());
				} else {
					fs.setCardscheme(rec[9].toString());
				}

			}
			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setCardtype("");
			} else if (rec[10] != null) {

				fs.setCardtype(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty() || rec[11].toString().equalsIgnoreCase("NULL")) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty() || rec[12].toString().equalsIgnoreCase("NULL")) {
				fs.setMdrAmount("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmount(output);
			}

			if (rec[13] == null || rec[13].toString().isEmpty() || rec[13].toString().equalsIgnoreCase("NULL")) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[13].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[13].toString());
				}

				else if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				} else {

					String rn = null;
					try {
						rn = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[13].toString()));
					} catch (ParseException e) {

						e.printStackTrace();
					}

					fs.setSettlementDate(rn);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");

			} else if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger bi = new BigInteger(rec[15].toString());
				fs.setTrxid(bi);
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

	}

	@Override
	public void searchForSettlementMoto(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, Merchant merchant) {

		logger.info("inside motoSearchList by Merchant" + " " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);

		String motoMid = merchant.getMid().getMotoMid();
		// String mid="000003203000009";
		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		/*
		 * if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() &&
		 * !toDate.isEmpty()) && (!status.isEmpty() && status != null)) {
		 * logger.info("inside date and status criteria: " + "from date: " + fromDate +
		 * "toDate: " + toDate + "status: " + status);
		 * 
		 * logger.info("else checking all status " + status); sql =
		 * "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,"
		 * +
		 * "a.TRX_ID,a.STAN from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
		 * + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS= :status and a.TXN_TYPE='MOTO' and a.MID= :motoMid " +
		 * "and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
		 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		 * sqlQuery.setString("status", status); sqlQuery.setString("fromDate",
		 * fromDate); sqlQuery.setString("toDate", toDate);
		 * sqlQuery.setString("motoMid", motoMid);
		 * 
		 * }
		 * 
		 * else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() &&
		 * !toDate.isEmpty())) { logger.info( "inside date criteria: " + "from date: " +
		 * fromDate + "toDate: " + toDate + "status: " + status);
		 * 
		 * sql =
		 * "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','C') and a.TXN_TYPE=" + "'MOTO'" + " and a.MID='"
		 * + motoMid + "' " +
		 * "and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
		 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql); //
		 * sqlQuery.setString("txn_Type", txn_Type); sqlQuery.setString("fromDate",
		 * fromDate); sqlQuery.setString("toDate", toDate); }
		 * 
		 * else { logger.info("status: " + status); sql =
		 * "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','C') and a.TXN_TYPE=" + "'MOTO'" + " and a.MID='"
		 * + motoMid + "'" + " order by a.TIME_STAMP desc limit 1000"; sqlQuery =
		 * super.getSessionFactory().createSQLQuery(sql);
		 * 
		 * }
		 */
		if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
				&& !(status.isEmpty())) {
			logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
			sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
					+ "between :fromDate  and :toDate "
					+ "and f.MID= :motoMid and f.TXN_TYPE='MOTO' order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("motoMid", motoMid);
		} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
			logger.info("else if: ");
			sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.TIME_STAMP"
					+ " between :fromDate and :toDate "
					+ "and f.MID= :motoMid and f.TXN_TYPE = 'MOTO' order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("motoMid", motoMid);
		} else {
			logger.info("inside else:");
			sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') "
					+ "and f.MID= :motoMid and f.TXN_TYPE = 'MOTO' order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motoMid", motoMid);
		}

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void searchForSettlementEzyWay(PaginationBean<forsettlement> paginationBean, String fromDate, String toDate,
			Merchant merchant) {
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String mid = merchant.getMid().getEzywayMid();

		ArrayList<forsettlement> fsList = new ArrayList<forsettlement>();

		String from = null;
		String to = null;

		if (fromDate != null && toDate != null) {

			from = fromDate;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));

			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = toDate;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
//29-11-22

		sql2 = "select * from (select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
				+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE='EZYWAY' and "
				+ " a.TIME_STAMP BETWEEN :from and :to ) as temp order by TIME_STAMP desc";

		sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", mid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			forsettlement fs = new forsettlement();
			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setMid("");
			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[1] != null) {

				fs.setTid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setStatus("");
			} else if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setStatus("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("TPA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("SPA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("TPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("SPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BNA")) {
					fs.setStatus("NOT SETTLED");

				} else if (rec[3].toString().equals("BNS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("BNC")) {
					fs.setStatus("VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[4] != null) {

				fs.setReference(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setAidresponse("");
			} else if (rec[5] != null) {

				fs.setAidresponse(rec[5].toString());
			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setRrn("");
			} else if (rec[6] != null) {

				fs.setRrn(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNameoncard("");
			} else if (rec[7] != null) {

				fs.setNameoncard(rec[7].toString());
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardnumber("");
			} else if (rec[8] != null) {

				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setCardnumber(lasteightDigits);
				}

			} else {
				fs.setCardnumber("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[9] != null) {
				if (rec[16].toString().equals("NULL")) {

					fs.setCardscheme(rec[9].toString());
				} else if (rec[16] != null && !rec[16].toString().isEmpty()) {
					fs.setCardscheme(rec[9].toString() + " - " + rec[16].toString());
				} else {
					fs.setCardscheme(rec[9].toString());
				}

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setCardtype("");
			} else if (rec[10] != null) {

				fs.setCardtype(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty() || rec[11].toString().equals("NULL")) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty() || rec[12].toString().equals("NULL")) {
				fs.setMdrAmount("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmount(output);
			}

			if (rec[13] == null || rec[13].toString().isEmpty() || rec[13].toString().equals("NULL")) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[13].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[13].toString());
				}

				else if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {

					String rn = null;
					try {
						rn = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[13].toString()));
					} catch (ParseException e) {

						e.printStackTrace();
					}

					fs.setSettlementDate(rn);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");

			} else if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger bi = new BigInteger(rec[15].toString());
				fs.setTrxid(bi);
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void searchForSettlementEzyPass(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String ezypassMid = merchant.getMid().getEzypassMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		/*
		 * if (fromDate == null || fromDate.equals("")) {
		 * 
		 * Date dt = new Date();
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM"); fromDate =
		 * dateFormat.format(dt); fromDate = fromDate + "-01";
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * fromDate = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(fromDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * } if (toDate == null || toDate.equals("")) { Date dt1 = new Date();
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); toDate =
		 * dateFormat1.format(dt1);
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * toDate = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(toDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * }
		 */
		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.INVOICE_ID,t.CARD_HOLDER_NAME ,f.AID_RESPONSE , f.RRN , f.TXN_TYPE , f.HOST_TYPE  from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TID= :tid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME ,f.AID_RESPONSE , f.RRN , f.TXN_TYPE , f.HOST_TYPE  from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TID= :tid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME ,f.AID_RESPONSE , f.RRN , f.TXN_TYPE , f.HOST_TYPE  from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezypassMid and f.TID= :tid and f.TXN_TYPE ='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME ,f.AID_RESPONSE , f.RRN , f.TXN_TYPE , f.HOST_TYPE  from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME ,f.AID_RESPONSE , f.RRN , f.TXN_TYPE , f.HOST_TYPE  from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME ,f.AID_RESPONSE , f.RRN , f.TXN_TYPE , f.HOST_TYPE  from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezypassMid and f.TXN_TYPE ='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezypassMid", ezypassMid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setInvoiceId(rec[10].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[11] != null) {

				fs.setNumOfRefund(rec[11].toString());
			} else {
				fs.setNumOfRefund("");
			}

			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());
			}

			if (rec[13] != null) {
				fs.setRrn(rec[13].toString());
			}

			if (rec[15] != null) {
				if (rec[14] != null) {
					fs.setTxnType(rec[14].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("UMOBILE EZYMOTO");
					} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
						fs.setTxnType("UMOBILE EZYREC");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("UMOBILE EZYPASS");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("UMOBILE EZYWAY");
					}
				} else {
					fs.setTxnType("UMOBILE");
				}
			} else {
				if (rec[14] != null) {
					fs.setTxnType(rec[14].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					}
				} else {
					fs.setTxnType("EZYPASS");
				}
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void searchForSettlementEzyRec(PaginationBean<forsettlement> paginationBean, String fromDate, String toDate,
			Merchant merchant) {

		String sql2 = null;
		Query sqlQuery = null;

		String mid = null;
		TerminalDetails termDetails = loadTerminalDetailsByMid(merchant.getMid().getEzyrecMid());

		if ((termDetails.getDeviceType() == "EZYPOD") || (termDetails.getDeviceType().equals("EZYPOD"))) {

			mid = merchant.getMid().getEzyrecMid();

		} else {
			mid = merchant.getMid().getEzyrecMid();
		}

		String from = null;
		String to = null;
		String boostmid = null;
		String grabmid = null;
		String fpxmid = null;

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if (fromDate != null && toDate != null) {

			from = fromDate;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));

			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = toDate;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		ArrayList<forsettlement> fsList = new ArrayList<forsettlement>();

		logger.info(" from and to " + from + " " + to);
		sql2 = "select * from ((select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
				+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE IN ('EZYREC','RECURRING') and "
				+ " a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
				+ "(select a.MID AS MID  , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN , 'BOOST' AS CARD_SCHEME  ,'' AS CARD_TYPE, "
				+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
				+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
				+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE , a.TIME_STAMP AS TIME_STAMP ,'' AS TRX_ID , 'NULL' AS BANK_NAME "
				+ "from mobiversa.FOR_SETTLEMENT a " + "WHERE a.STATUS in ('BPS','BPA','BPC') AND "
				+ "(a.MID = :mid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN :from and :to) " + "UNION "
				+ "(select '' AS MID, '' AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN ,'GRABPAY'  AS CARD_SCHEME,'' AS CARD_TYPE ,'' AS NETAMOUNT  ,'' AS MDRAMT ,'' AS SETTLE_DATE ,  a.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , 'NULL' AS BANK_NAME "
				+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
				+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
				+ "WHERE (m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.GRAB_MID = :grabmid) and a.STATUS in ('GPS','GRF','GBC','GPT') and "
				+ "a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
				+ "(select f.MID AS MID,f.TID AS TID ,f.TXNAMOUNT AS AMOUNT,f.STATUS AS STATUS ,f.SELLERORDERNO AS INVOICE_ID,f.FPXTXNID AS AID_RESPONSE, "
				+ " '' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'FPX' AS CARD_SCHEME,'' AS CARD_TYPE,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , f.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , f.BANK_NAME AS BANK_NAME "
				+ "from mobiversa.FPX_TRANSACTION f " + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
				+ "(f.MID = :mid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
				+ " :from and :to )) as temp order by TIME_STAMP desc";
		sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", mid);
		sqlQuery.setString("boostmid", boostmid);
		sqlQuery.setString("grabmid", grabmid);
		sqlQuery.setString("fpxmid", fpxmid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			forsettlement fs = new forsettlement();
			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setMid("");
			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[1] != null) {

				fs.setTid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setStatus("");
			} else if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setStatus("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setStatus("VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[4] != null) {

				fs.setReference(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setAidresponse("");
			} else if (rec[5] != null) {

				fs.setAidresponse(rec[5].toString());
			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setRrn("");
			} else if (rec[6] != null) {

				fs.setRrn(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNameoncard("");
			} else if (rec[7] != null) {

				fs.setNameoncard(rec[7].toString());
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardnumber("");
			} else if (rec[8] != null) {

				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setCardnumber(lasteightDigits);
				}

			} else {
				fs.setCardnumber("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[9] != null) {
				if (rec[16].toString().equals("NULL")) {

					fs.setCardscheme(rec[9].toString());
				} else if (rec[16] != null && !rec[16].toString().isEmpty()) {
					fs.setCardscheme(rec[9].toString() + " - " + rec[16].toString());
				} else {
					fs.setCardscheme(rec[9].toString());
				}

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setCardtype("");
			} else if (rec[10] != null) {

				fs.setCardtype(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty() || rec[11].toString().equals("NULL")) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty() || rec[12].toString().equals("NULL")) {
				fs.setMdrAmount("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmount(output);
			}

			if (rec[13] == null || rec[13].toString().isEmpty() || rec[13].toString().equals("NULL")) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[13].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[13].toString());
				}

				else if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");

			} else if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger bi = new BigInteger(rec[15].toString());
				fs.setTrxid(bi);
			}
			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

	}

	@Override
	public void getCardTransactionForSettlement(PaginationBean<ForSettlement> paginationBean, Merchant merchant,
			String txnType, String date, String date1, String status) {
		logger.info("In dao impl*******");
		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props,
		 * Order.desc("timeStamp"));
		 */
		// String TXN_TYPE1=new String[]{null,"RECURRING"};
		// String TXN_TYPE2="RECURRING";

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String mid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		logger.info("mid: " + mid);
		logger.info("motomid: " + motoMid);
		logger.info("ezyrec: " + ezyrecMid);
		logger.info("ezyway: " + ezywayMid);
		logger.info("ezypass: " + ezypassMid);
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		String sql2 = null;
		if (status != null && !status.isEmpty()) {
			logger.info("inside status.." + status);
			if (txnType.equals("EZYWIRE")) {

				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID='" + mid
						+ "' and f.TXN_TYPE is Null and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("BOOST")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID IN ('" + mid + "','"
						+ motoMid + "','" + ezyrecMid + "','" + ezypassMid + "') and "
						+ "f.TXN_TYPE='BOOST' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYREC")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID='" + ezyrecMid
						+ "' and f.TXN_TYPE IN ('EZYREC','RECURRING') and f.TIME_STAMP between '" + from + "' and '"
						+ to + "'" + " order by f.TIME_STAMP desc";
			} else {
				if (txnType.equals("MOTO")) {
					mid = motoMid;
				} else if (txnType.equals("EZYPASS")) {
					mid = ezypassMid;
				} else if (txnType.equals("EZYWAY")) {
					mid = ezywayMid;
				}
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID='" + mid
						+ "' and f.TXN_TYPE='" + txnType + "' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			}

		} else {
			logger.info("inside all status.." + txnType);
			if (txnType.equals("EZYWIRE")) {

				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and " + "f.MID='" + mid
						+ "' and f.TXN_TYPE is Null and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("MOTO")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and " + "f.MID='" + motoMid
						+ "' and f.TXN_TYPE='MOTO' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYREC")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.MID='" + ezyrecMid
						+ "' and f.TXN_TYPE IN ('EZYREC','RECURRING') and f.TIME_STAMP between '" + from + "' and '"
						+ to + "'" + " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYPASS")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and " + "f.MID='" + ezypassMid
						+ "' and f.TXN_TYPE='EZYPASS' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYWAY")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and " + "f.MID='" + ezywayMid
						+ "' and f.TXN_TYPE='EZYWAY' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("BOOST")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('BP','BPC','BPA','BPS') and " + "f.MID IN ('" + mid
						+ "','" + motoMid + "','" + ezyrecMid + "','" + ezypassMid + "') and "
						+ "f.TXN_TYPE='BOOST' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			}

		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		/*
		 * setParameter("MID", mid); sqlQuery.setString("f.MID", mid);
		 */
		// sqlQuery.setString("TXN_TYPE1", TXN_TYPE1);
		// sqlQuery.setString("TXN_TYPE2", TXN_TYPE2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[2].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
				}
				if (rec[2].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
				}
				if (rec[2].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
				}
				if (rec[2].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT
				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setPan(rec[7].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// trxid
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setTxnType(rec[10].toString());
			} else {
				fs.setTxnType("CARD");
			}
			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public List<MID> loadAllmid() {
		return (List<MID>) getSessionFactory().createCriteria(MID.class).list();

	}

	@Override
	public List<String> midByTransaction(String agentName) {
		// TODO Auto-generated method stub
		return null;
	}

	public List<TerminalDetails> loadAlltid() {
		return (List<TerminalDetails>) getSessionFactory().createCriteria(TerminalDetails.class).list();

	}

	@Override
	public void getTransactionRequest(PaginationBean<TransactionRequest> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, TransactionRequest.class, props, Order.desc("timeStamp"));

	}

	@Override
	public void getTransactionResponse(PaginationBean<TransactionResponse> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, TransactionResponse.class, props, Order.desc("timeStamp"));

	}

	@Override
	public void getTransactionEnquiry(PaginationBean<TransactionRequest> paginationBean, String fromDate1,
			String toDate1, String mid, String tid) {

		logger.info("fromDate: " + fromDate1 + "  toDate : " + toDate1);
		String fromDate = null, toDate = null;

		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		int year = calendar.getWeekYear();
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate() - 20;

		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		/*
		 * if(fromDate1!=null && toDate1!=null && !fromDate1.isEmpty() &&
		 * !toDate1.isEmpty()) { fromDate=fromDate1; toDate=toDate1; }else { try {
		 * toDate=new SimpleDateFormat("yyyy-MM-dd").format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(dateorg2)); fromDate=new
		 * SimpleDateFormat("yyyy-MM-dd").format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(dateorg1)); } catch (ParseException e1)
		 * { // TODO Auto-generated catch block e1.printStackTrace(); } }
		 */

		String sql2 = null;
		Query sqlQuery = null;

		ArrayList<TransactionRequest> fsList = new ArrayList<TransactionRequest>();

		if (mid != null && !mid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("mid : " + mid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.MID= :mid  "
					+ "and tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

			String FromDate = paginationBean.setDateFromBackend(fromDate1);
			String From1Date = paginationBean.setDate1FromBackend(toDate1);
			String TXNTYPE = paginationBean.setTXNtype(mid);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (tid != null && !tid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD') "
					+ "group by tr.TXN_ID order by tr.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

			String FromDate = paginationBean.setDateFromBackend(fromDate1);
			String From1Date = paginationBean.setDate1FromBackend(toDate1);
			String TXNTYPE = paginationBean.setTID2(tid);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (tid != null && mid != null && !tid.isEmpty() && !mid.isEmpty() && fromDate1 != null
				&& toDate1 != null && !fromDate1.isEmpty() && !toDate1.isEmpty()) {
			logger.info("mid : " + mid + " and tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and tr.MID= :mid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("mid", mid);

			String FromDate = paginationBean.setDateFromBackend(fromDate1);
			String From1Date = paginationBean.setDate1FromBackend(toDate1);
			String TXNTYPE = paginationBean.setTXNtype(mid);
			String TID = paginationBean.setTID2(tid);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (fromDate1 != null && toDate1 != null && !fromDate1.isEmpty() && !toDate1.isEmpty()) {
			fromDate = fromDate1;
			toDate = toDate1;
			logger.info("search with date :::" + "fromDate:" + fromDate + "toDate:" + toDate);

			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TXN_TYPE not in "
					+ "('LOGIN','TCUPLOAD','BATCHUPLOAD') and tr.TIME_STAMP between :fromDate and :toDate group by tr.TXN_ID order by tr.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			// String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else {
			logger.info("No criteria");

			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TXN_TYPE not in "
					+ "('LOGIN','TCUPLOAD','BATCHUPLOAD')  group by tr.TXN_ID order by tr.TIME_STAMP desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);

			/// String FromDate= paginationBean.setDateFromBackend(fromDate);
			// String From1Date= paginationBean.setDate1FromBackend(toDate);
			// String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			TransactionRequest fs = new TransactionRequest();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setTransactionDate(rd);

				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTransactionTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {

				// a.MID
				fs.setPan(rec[1].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan();// .substring(fs.getPan().length() - 16);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);

			}

			if (rec[2] != null && !rec[2].toString().isEmpty()) {

				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}

			if (rec[3] != null) {
				fs.setAid(rec[3].toString());
			}

			if (rec[4] != null) {
				fs.setRefNo(rec[4].toString());
			}
			if (rec[5] != null) {
				// fs.setPosConditionCode(rec[5].toString());
				fs.setPosConditionCode(HostResponse.getHostResponse(rec[5].toString()));
			}
			if (rec[6] != null) {
				fs.setBatchNo(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setStan(rec[7].toString());
			}

			if (rec[8] != null) {
				fs.setTid(rec[8].toString());
			}
			if (rec[9] != null) {
				fs.setMid(rec[9].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

	}

	@Override
	public void searchForSettlementEzyRecplus(PaginationBean<forsettlement> paginationBean, String fromDate,
			String toDate, Merchant merchant) {

		String sql2 = null;
		Query sqlQuery = null;
		String mid = merchant.getMid().getEzyrecMid();

		ArrayList<forsettlement> fsList = new ArrayList<forsettlement>();

		String from = null;
		String to = null;
		String boostmid = null;
		String grabmid = null;
		String fpxmid = null;

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if (fromDate != null && toDate != null) {

			from = fromDate;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));

			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = toDate;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info(" from and to " + from + " " + to);
		sql2 = "select * from ((select a.MID AS MID , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN , t.CARD_HOLDER_NAME AS CARD_HOLDER_NAME , t.MASKED_PAN AS MASKED_PAN , t.CARD_SCHEME AS CARD_SCHEME ,t.CARD_TYPE AS CARD_TYPE,'' AS NETAMOUNT,'' AS MDRAMT ,'' AS SETTLE_DATE,a.TIME_STAMP AS TIME_STAMP , a.TRX_ID AS TRX_ID , 'NULL' AS BANK_NAME  from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t "
				+ " where a.TRX_ID=t.TXN_ID And a.STATUS in ('A','S','C') And a.MID in (:mid)  And a.TXN_TYPE='RECPLUS' And "
				+ " a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
				+ "(select a.MID AS MID  , a.TID AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN , 'BOOST' AS CARD_SCHEME  ,'' AS CARD_TYPE, "
				+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
				+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
				+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE , a.TIME_STAMP AS TIME_STAMP ,'' AS TRX_ID , 'NULL' AS BANK_NAME "
				+ "from mobiversa.FOR_SETTLEMENT a " + "WHERE a.STATUS in ('BPS','BPA','BPC') AND "
				+ "(a.MID = :mid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN :from and :to) " + "UNION "
				+ "(select '' AS MID, '' AS TID , a.AMOUNT AS AMOUNT , a.STATUS AS STATUS , a.INVOICE_ID AS INVOICE_ID ,a.AID_RESPONSE AS AID_RESPONSE,a.RRN AS RRN, '' AS CARD_HOLDER_NAME , '' AS MASKED_PAN ,'GRABPAY'  AS CARD_SCHEME,'' AS CARD_TYPE ,'' AS NETAMOUNT  ,'' AS MDRAMT ,'' AS SETTLE_DATE ,  a.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , 'NULL' AS BANK_NAME "
				+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
				+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
				+ "WHERE (m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.GRAB_MID = :grabmid) and a.STATUS in ('GPS','GRF','GBC','GPT') and "
				+ "a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
				+ "(select f.MID AS MID,f.TID AS TID ,f.TXNAMOUNT AS AMOUNT,f.STATUS AS STATUS ,f.SELLERORDERNO AS INVOICE_ID,f.FPXTXNID AS AID_RESPONSE, "
				+ " '' AS RRN,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'FPX' AS CARD_SCHEME,'' AS CARD_TYPE,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , f.TIME_STAMP AS TIME_STAMP,'' AS TRX_ID , f.BANK_NAME AS BANK_NAME "
				+ "from mobiversa.FPX_TRANSACTION f " + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
				+ "(f.MID = :mid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
				+ " :from and :to )) as temp order by TIME_STAMP desc";
		sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", mid);
		sqlQuery.setString("boostmid", boostmid);
		sqlQuery.setString("grabmid", grabmid);
		sqlQuery.setString("fpxmid", fpxmid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			forsettlement fs = new forsettlement();
			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setMid("");
			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[1] != null) {

				fs.setTid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setStatus("");
			} else if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setStatus("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setStatus("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setStatus("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setStatus("VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[4] != null) {

				fs.setReference(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setAidresponse("");
			} else if (rec[5] != null) {

				fs.setAidresponse(rec[5].toString());
			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setRrn("");
			} else if (rec[6] != null) {

				fs.setRrn(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNameoncard("");
			} else if (rec[7] != null) {

				fs.setNameoncard(rec[7].toString());
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardnumber("");
			} else if (rec[8] != null) {

				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setCardnumber(lasteightDigits);
				}

			} else {
				fs.setCardnumber("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[9] != null) {
				if (rec[16].toString().equals("NULL")) {

					fs.setCardscheme(rec[9].toString());
				} else if (rec[16] != null && !rec[16].toString().isEmpty()) {
					fs.setCardscheme(rec[9].toString() + " - " + rec[16].toString());
				} else {
					fs.setCardscheme(rec[9].toString());
				}

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setCardtype("");
			} else if (rec[10] != null) {

				fs.setCardtype(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setMdrAmount("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmount(output);
			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[13].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[13].toString());
				}

				else if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");

			} else if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger bi = new BigInteger(rec[15].toString());
				fs.setTrxid(bi);
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

	}

	@Override
	public void searchForSettlementGrabpay(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {

		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String gpayid = merchant.getMid().getGpayMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :gpayid and f.TID= :tid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GRF','GPC','GPT') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :gpayid and f.TID= :tid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GRF','GPC','GPT') "
						+ "and f.MID= :gpayid and f.TID= :tid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GRF','GPC','GPT') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :gpayid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GRF','GPC','GPT') "
						+ "and f.MID= :gpayid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("gpayid", gpayid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("GPS")) {
					fs.setStatus("COMPLETED");
				}
				if (rec[2].toString().equals("GPP")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("GRF")) {
					fs.setStatus("REFUND");
				}
				if (rec[2].toString().equals("GPC")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("GPT")) {
					fs.setStatus("SETTLED");
				}

				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	@Transactional(readOnly = true)
	public void listAllUmTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllUMTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);
		sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
				+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME,a.HOST_TYPE "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
				+ "where a.status in ('S','CT','A','BPA','BPS') and a.time_stamp between :from  and :to "
				+ "group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setLocation(rec[0].toString());
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString().toUpperCase());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}
			if (rec[4] != null) {
				fs.setAgentName(rec[4].toString());
			}

			String rd1 = null;
			if (rec[5] != null) {
				try {
					rd1 = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					fs.setNumOfRefund(rd1);
				} catch (ParseException e) {

					e.printStackTrace();
				}
			}
			if (rec[6] != null) {
				fs.setStatus(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setTxnType(rec[7].toString());
			}

			if (rec[8] != null) {
				fs.setMid(rec[8].toString());
			}
			if (rec[10] != null) {
				fs.setHostType(rec[10].toString());
			}
			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void searchAllUmEzywireTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllUMTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);

		sql = "select a.time,a.MERCHANT_NAME ,a.time_stamp ,a.AMOUNT, "
				+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
				+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
				+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE = 'U' and a.EZYWIRE_TYPE is null and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
				+ "order by a.time_stamp desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void searchAllForsettlementTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		String dummy = null;
		Query sqlQuery = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);

		// sravanan changes
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
			//
		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a  "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("BOOST")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a  "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BPC','BPA','BPS') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Inside Boost Pagination");
			sqlQuery = super.getSessionFactory().createSQLQuery(sql); // .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			logger.info("Query : " + sql);
			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			if (rec[15] != null) {
				fs.setSubMerchantMID(rec[15].toString());

			} else {
				fs.setSubMerchantMID("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void listAllForsettlementTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IN ('EZYMOTO' , 'MOTO') and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IN ('EZYLINK' , 'MOTO') and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "or a.MID=m.UM_MID or a.MID=m.UM_EZYPASS_MID or a.MID=m.UM_EZYREC_MID or a.MID=m.UM_EZYWAY_MID "
					+ "or a.MID=m.UM_MOTO_MID or a.MID = m.BOOST_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BPC','BPA','BPS') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			String FromDate = paginationBean.setDateFromBackend(fromDate);
			String From1Date = paginationBean.setDate1FromBackend(toDate);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			if (rec[15] != null) {
				fs.setSubMerchantMID(rec[15].toString());

			} else {
				fs.setSubMerchantMID("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	// rkboostqr
	@Override
	@Transactional(readOnly = true)
	public void listAllForsettlementTransactionQR(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

//         Date date = new Date();
//         Calendar calendar = Calendar.getInstance();
//         date = calendar.getTime();
//         // Date date = new Date();
//
//         int year = calendar.getWeekYear();
//         // int year=2017;
//         long mon = date.getMonth() + 1;
//         int day = date.getDate() + 1;
//         int daybefore = date.getDate() - 20;
//         String fromDate = null;
//         String toDate = null;
//         String dateorg2 = day + "/" + mon + "/" + year;
//         String dateorg1 = daybefore + "/" + mon + "/" + year;
//         logger.info("date to find: " + dateorg1 + " " + dateorg2);
//         try {
//               toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//               fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//         } catch (ParseException e1) {
//               // TODO Auto-generated catch block
//               e1.printStackTrace();
//         }

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.REQ_MODE='App' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";
		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P')  and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P')  and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		}

		else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BP','BPA','BPS') and a.REQ_MODE='App'  and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App'  and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	// rkboostecom
	@Override
	@Transactional(readOnly = true)
	public void listAllForsettlementTransactionEcom(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

//        Date date = new Date();
//        Calendar calendar = Calendar.getInstance();
//        date = calendar.getTime();
//        // Date date = new Date();
//
//        int year = calendar.getWeekYear();
//        // int year=2017;
//        long mon = date.getMonth() + 1;
//        int day = date.getDate() + 1;
//        int daybefore = date.getDate() - 20;
//        String fromDate = null;
//        String toDate = null;
//        String dateorg2 = day + "/" + mon + "/" + year;
//        String dateorg1 = daybefore + "/" + mon + "/" + year;
//        logger.info("date to find: " + dateorg1 + " " + dateorg2);
//        try {
//               toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//               fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//        } catch (ParseException e1) {
//               // TODO Auto-generated catch block
//               e1.printStackTrace();
//        }

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.REQ_MODE='WebLink' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";
		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P')  and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P')  and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		}

		else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BP','BPA','BPS') and a.REQ_MODE='Link'  and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink'  and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	// rkboostecom
	@Override
	@Transactional(readOnly = true)
	public void searchecomForsettlementTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.REQ_MODE='WebLink' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";
		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.REQ_MODE='WebLink' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BP','BPA','BPS') and a.REQ_MODE='Link' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='WebLink' and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	// rkboostqr
	@Override
	@Transactional(readOnly = true)
	public void searchqrForsettlementTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.REQ_MODE='App' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";
		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.REQ_MODE='App' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BP','BPA','BPS') and a.REQ_MODE='App' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.REQ_MODE='App' and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void listAllUmEzywireTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);

		sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
				+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
				+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
				+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE = 'U' AND IFNULL(f.MERCHANT_TYPE, '') NOT LIKE 'FIUU' and a.EZYWIRE_TYPE is null and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
				+ "order by a.time_stamp desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);

		String FromDate = paginationBean.setDateFromBackend(fromDate);
		String From1Date = paginationBean.setDate1FromBackend(toDate);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setStan(rec[12].toString());
			} else {
				fs.setStan("");
			}
			if (rec[13] != null) {
				fs.setMid(rec[13].toString());
			} else {
				fs.setMid("");
			}
			if (rec[14] != null) {
				fs.setAidResponse(rec[14].toString());
			} else {
				fs.setAidResponse("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public List<TransactionRequest> exportTransactionExpiry(ArrayList<Criterion> criterionList, String fromDate1,
			String toDate1, String mid, String tid) {

		logger.info("inside exportTransactionExpiry " + " from date: " + fromDate1 + "toDate: " + toDate1 + " mid: "
				+ mid + "tid: " + tid);

		String sql2 = null;
		Query sqlQuery = null;

		ArrayList<TransactionRequest> fsList = new ArrayList<TransactionRequest>();
//sravanan 
		if (mid != null && !mid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("mid : " + mid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.MID= :mid  "
					+ "and tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		} else if (tid != null && !tid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD') "
					+ "group by tr.TXN_ID order by tr.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		} else if (tid != null && mid != null && !tid.isEmpty() && !mid.isEmpty() && fromDate1 != null
				&& toDate1 != null && !fromDate1.isEmpty() && !toDate1.isEmpty()) {
			logger.info("mid : " + mid + " and tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and tr.MID= :mid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("mid", mid);

		} else {

			logger.info("search with date :::" + "fromDate:" + fromDate1 + "toDate:" + toDate1);

			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TXN_TYPE not in "
					+ "('LOGIN','TCUPLOAD','BATCHUPLOAD') and tr.TIME_STAMP between :fromDate and :toDate group by tr.TXN_ID order by tr.TIME_STAMP desc limit 10000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		}

		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			TransactionRequest fs = new TransactionRequest();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setTransactionDate(rd);

				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTransactionTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {

				// a.MID
				fs.setPan(rec[1].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan();// .substring(fs.getPan().length() - 16);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);

			}

			if (rec[2] != null && !rec[2].toString().isEmpty()) {

				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}

			if (rec[3] != null) {
				fs.setAid(rec[3].toString());
			}

			if (rec[4] != null) {
				fs.setRefNo(rec[4].toString());
			}
			if (rec[5] != null) {
				// fs.setPosConditionCode(rec[5].toString());
				fs.setPosConditionCode(HostResponse.getHostResponse(rec[5].toString()));
			}
			if (rec[6] != null) {
				fs.setBatchNo(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setStan(rec[7].toString());
			}

			if (rec[8] != null) {
				fs.setTid(rec[8].toString());
			}
			if (rec[9] != null) {
				fs.setMid(rec[9].toString());
			}

			fsList.add(fs);
		}

		return fsList;

	}

	@Override
	public void listUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String mid) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "     " + date1 + " " + mid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (mid.equals("ALL") || mid.isEmpty() || mid == null) {
			logger.info("Inside UMEzyway MID: " + mid);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.time_stamp between :from  and :to order by res.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(mid);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else {
			logger.info("Search by MID:" + mid);
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R','FR') and res.txn_type ='EZYWAY' and res.F001_MID=:mid and res.time_stamp between :from  and :to order by res.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("mid", mid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(mid);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUND");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUND");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCBDate(rec[13].toString());
			} else {
				fs.setCBDate("");
			}

			if (rec[14] != null) {
				fs.setCBReason(rec[14].toString());
			} else {
				fs.setCBReason("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[17] != null) {
				fs.setSubmid(rec[17].toString());
			} else {
				fs.setSubmid("");
			}
			
			//service id
			if (rec[18] != null) {
				fs.setServiceId(rec[18].toString());
			} else {
				fs.setServiceId("");
			}

			
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String mid) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "     " + date1 + " " + mid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (mid.equals("ALL") || mid.isEmpty() || mid == null) {
			logger.info("Inside UMEzyway MID: " + mid);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.time_stamp between :from  and :to order by res.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(mid);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else {
			logger.info("Search by MID:" + mid);
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R','FR') and res.txn_type ='EZYWAY' and res.F001_MID=:mid and res.time_stamp between :from  and :to order by res.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("mid", mid);

		}
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[16] != null) {
				fs.setTxnType(rec[16].toString());
			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setSubmid(rec[17].toString());
			} else {
				fs.setSubmid("");
			}
			
			if (rec[18] != null) {
				fs.setServiceId(rec[18].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType, Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String boostmid = null;
		String grabmid = null;
		String fpxmid = null;
		String tngMid = null;
		String shoppyMid = null;
		// BNPL INTEGRATION
		String bnplMid = null;
		Query sqlQuery = null;

		String VALUE = date;

		String Ezywaymid = umEzywayMid;

        String fiuuMid = "";

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if (merchant.getMid().getTngMid() != null) {
			tngMid = merchant.getMid().getTngMid();
		}
		if (merchant.getMid().getShoppyMid() != null) {
			shoppyMid = merchant.getMid().getShoppyMid();
		}
		// BNPL INTEGRATION
		if (merchant.getMid().getBnplMid() != null) {
			bnplMid = merchant.getMid().getBnplMid();
		}

        //fiuu mid
        if (merchant.getMid().getFiuuMid() != null) {
            fiuuMid = merchant.getMid().getFiuuMid();
        }

		logger.info("umEzywayMid" + Ezywaymid);
		logger.info("boostmid" + boostmid);
		logger.info("grabmid" + grabmid);
		logger.info("fpxmid" + fpxmid);
		logger.info("tngMid" + tngMid);
		logger.info("shoppyMid" + shoppyMid);

		logger.info("BnplMid " + bnplMid);
        logger.info("fiuuMid" + fiuuMid);

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

//			LocalDate Currentdate = LocalDate.now();
//			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
//			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
//			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.TIME_STAMP between :from  and :to and res.STATUS IN ('S','H','PPA','FR','R','PR')) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.TIME_STAMP between :from  and :to and res.STATUS IN ('A','C')) "
					+ ") as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		}

		/* SEARCH METHOD IMPLEMENTATION */

		else if (txnType.equals("UM_CARD_RRN")) {
			logger.info("Inside SEARCH METHOD UMEzyway UM_CARD_RRN " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.F023_RRN like '"
					+ VALUE + "%' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.F023_RRN like '"
					+ VALUE + "%' and res.STATUS IN ('A','C')) " + ") as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("THE RRN IS ON QUERY:" + VALUE);
		}

		else if (txnType.equals("UM_CARD_CARDNO")) {
			logger.info("Inside SEARCH METHOD UMEzyway UM_CARD_BY_CARD_NO " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.MASKED_PAN like '%"
					+ VALUE + "' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.MASKED_PAN like '%"
					+ VALUE + "' and res.STATUS IN ('A','C')) " + ") as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("THE CARD NO IS ON QUERY:" + VALUE);
		}

		else if (txnType.equals("UM_CARD_ApCode")) {
			logger.info("Inside SEARCH METHOD UMEzyway UM_CARD_BY_APPROVAL_CODE " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and res.STATUS IN ('A','C')) " + ") as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("THE APPROVAL CODE IS ON QUERY:" + VALUE);
		}

		else if (txnType.equals("UM_CARD_REF")) {
			logger.info("Inside SEARCH METHOD UMEzyway UM_CARD_BY_REFERENCE " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.F270_ORN like '%"
					+ VALUE + "%' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.F270_ORN like '%"
					+ VALUE + "%' and res.STATUS IN ('A','C')) " + ") as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("THE REFERENCE IS ON QUERY:" + VALUE);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {

				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					String replacefpan = rec[4].toString().replace("f", "*");

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {

				String status = rec[5].toString();

				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("H")) {
					fs.setSTATUS("EZYSETTLE");
				} else if (rec[5].toString().equals("PPA")) {
					fs.setSTATUS("PAYOUT");
				} else if (rec[5].toString().equals("TPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("SPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("TPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("SPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BNS")) {
					fs.setSTATUS("SETTLED");
				}

				else if (rec[5].toString().equals("BNA")) {
					fs.setSTATUS("NOT SETTLED");
				}

				else if (rec[5].toString().equals("BNC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setF263_MRN("");
			} else if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF011_AUTHIDRESP("");
			} else if (rec[9] != null) {

				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {

				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {

				String rd = null;
				String rt = "";

				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);

			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {

				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {

				fs.setF268_CHNAME(rec[14].toString());
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setFraudScore("");

			} else if (rec[15] != null || rec[15] != "") {

				if (rec[15].toString().equalsIgnoreCase("null")) {
					fs.setFraudScore("");
				} else {
					fs.setFraudScore(rec[15].toString());
				}

			} else {
				fs.setFraudScore("");
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setFraudId("");

			} else if (rec[16] != null || rec[16] != "") {

				if (rec[16].toString().equalsIgnoreCase("null")) {
					fs.setFraudId("");
				} else {
					fs.setFraudId(rec[16].toString());
				}

			} else {
				fs.setFraudId("");
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {

				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {

				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					fs.setSettlementDate(rt);
				} else if (datelength == 10) {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {

				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				}

				else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				}

				else {
					fs.setCardType(rec[20].toString());
				}
			}

			else {
				fs.setCardType(" ");

			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setEzysettleAmt("");
			} else if (rec[22] != null) {

				Double d = new Double(rec[22].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setEzysettleAmt(output);

			}

			if (rec[23] != null) {
				fs.setSubmerchantmid(rec[23].toString());
			} else {
				fs.setSubmerchantmid("");
			}
			
			//service id 
			if (rec[24] != null) {
				fs.setServiceId(rec[24].toString());
			} else {
				fs.setServiceId("");
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void SearchlistUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String boostmid = null;
		String grabmid = null;
		String fpxmid = null;
		Query sqlQuery = null;
		String tngMid = null;
		String shoppyMid = null;
		String bnplMid = null;

		String Ezywaymid = umEzywayMid;
		
		String fiuuMid = "";

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}
		if (merchant.getMid().getTngMid() != null) {
			tngMid = merchant.getMid().getTngMid();
		}
		if (merchant.getMid().getShoppyMid() != null) {
			shoppyMid = merchant.getMid().getShoppyMid();
		}

		// BNPL INTEGRATION
		if (merchant.getMid().getBnplMid() != null) {
			bnplMid = merchant.getMid().getBnplMid();
		}
		
		//fiuuMid
		
		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}

		logger.info("umEzywayMid" + Ezywaymid);
		logger.info("boostmid" + boostmid);
		logger.info("grabmid" + grabmid);
		logger.info("fpxmid" + fpxmid);
		logger.info("tngMid" + tngMid);
		logger.info("shoppyMid" + shoppyMid);
		logger.info("BnplMid" + bnplMid);
		logger.info("fiuuMid" + fiuuMid);

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now();
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		logger.info("txnType : " + txnType);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);

			sql = "select * from (select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.TIME_STAMP between :from  and :to and res.STATUS IN ('S','H','PPA','FR','R','PR')) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.TIME_STAMP between :from  and :to and res.STATUS IN ('A','C')) "
					+ ")as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		}
		if (txnType.equals("CARD")) {

			/*
			 * sql =
			 * "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from "
			 * + "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210') " +
			 * "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID = :Ezywaymid and res.STATUS IN ('A') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )"
			 * + "UNION " +
			 * "(select s.MID,'NULL' AS F005_EXPDATE,s.TXN_AMOUNT,s.TID,s.MASKED_PAN, s.`STATUS`,s.TRX_ID,'NULL' AS TDT,'NULL' AS TTM,s.AID,s.RRN,s.DATE AS TIME_STAMP,'NULL' AS BUSINESS_NAME,s.INVOICE_ID, '' AS F268_CHNAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, s.NET_AMOUNT,s.MDR_AMT,s.SETTLEMENTDATE,s.CARD_BRAND AS TXN_TYPE ,'NULL' AS BANK_NAME , s.EZYSETTLE_AMOUNT, s.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from mobiversa.SETTLEMENT_MDR as s "
			 * +
			 * "	where s.TXN_TYPE = 'EZYWAY' and s.MID =:Ezywaymid and s.STATUS IN ('S','H','PPA','FR','R','PR') and s.DATE between :fdate and :tdate order by s.DATE desc ) "
			 * + "UNION " +
			 * "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from "
			 * + "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210') " +
			 * "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID = :Ezywaymid and res.STATUS IN ('C') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )"
			 * ;
			 */

//			sql = "select * from((select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from "
//					+ "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210') "
//					+ "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID = :Ezywaymid and res.STATUS IN ('A') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )"
//					+ "UNION "
//					+ "(select s.MID,'NULL' AS F005_EXPDATE,s.TXN_AMOUNT,s.TID,s.MASKED_PAN, s.`STATUS`,s.TRX_ID,'NULL' AS TDT,'NULL' AS TTM,s.AID,s.RRN,s.DATE AS TIME_STAMP,'NULL' AS BUSINESS_NAME,s.INVOICE_ID, '' AS F268_CHNAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, s.NET_AMOUNT,s.MDR_AMT,s.SETTLEMENTDATE,s.CARD_BRAND AS TXN_TYPE ,'NULL' AS BANK_NAME , s.EZYSETTLE_AMOUNT, s.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from mobiversa.SETTLEMENT_MDR as s "
//					+ "	where s.TXN_TYPE = 'EZYWAY' and s.MID =:Ezywaymid and s.STATUS IN ('S','H','PPA','FR','R','PR') and s.DATE between :fdate and :tdate order by s.DATE desc ) "
//					+ "UNION "
//					+ "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from "
//					+ "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210') "
//					+ "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID = :Ezywaymid and res.STATUS IN ('C') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc ))AS subalias ORDER BY TIME_STAMP DESC ";
//

			sql = "SELECT * FROM ((select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210','0200') "
					+ "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.STATUS IN ('A') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )"
					+ "UNION "
					+ "(select s.MID,'NULL' AS F005_EXPDATE,s.TXN_AMOUNT,s.TID,s.MASKED_PAN, s.`STATUS`,s.TRX_ID,'NULL' AS TDT,'NULL' AS TTM,s.AID,s.RRN, CONCAT(s.DATE, ' ', s.TIME) AS TIME_STAMP,'NULL' AS BUSINESS_NAME,s.INVOICE_ID, '' AS F268_CHNAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, s.NET_AMOUNT,s.MDR_AMT,s.SETTLEMENTDATE,s.CARD_BRAND AS TXN_TYPE ,'NULL' AS BANK_NAME , s.EZYSETTLE_AMOUNT,s.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, s.HOST_TYPE AS SERVID from mobiversa.SETTLEMENT_MDR as s "
					+ "	where s.TXN_TYPE = 'EZYWAY' and s.MID IN (:Ezywaymid,:fiuuMid) and s.STATUS IN ('S','H','PPA','FR','R','PR') and s.DATE between :fdate and :tdate order by s.DATE desc ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210','0200') "
					+ "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.STATUS IN ('C') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )) AS subalias ORDER BY TIME_STAMP desc";

			logger.info(" Card Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("fdate", fdate);
			sqlQuery.setString("tdate", tdate);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		} else if (txnType.equals("BOOST")) {
			sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
					+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID, '' AS SERVID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID = m.BOOST_MID) "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('BPS','BPA','BPC') AND "
					+ "(a.MID = :Ezywaymid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN "
					+ " :from and :to order by a.TIME_STAMP desc ";

			logger.info(" BOOST Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("boostmid", boostmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		} else if (txnType.equals("GRABPAY")) {
			sql = "select '' AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, '' AS SERVID"
					+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
					+ "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid) and c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
					+ "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc ";

			logger.info("GRABPAY Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("grabmid", grabmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		} else if (txnType.equals("FPX")) {
//			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
//					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME "
//					+ "from FPX_TRANSACTION f INNER JOIN MID m on (f.MID=m.UM_EZYWAY_MID OR f.MID = m.FPX_MID) "
//					+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
//					+ "(f.MID = :Ezywaymid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
//					+ " :from and :to order by f.TIME_STAMP desc";

			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, '' AS SERVID "
					+ "from FPX_TRANSACTION f " + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "(f.MID = :Ezywaymid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to order by f.TIME_STAMP desc ";

			logger.info(" FPX Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("fpxmid", fpxmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		} else if (txnType.equals("TNG") || txnType.equals("SHOPPY")) {

			sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID, "
					+ " '' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID, '' AS SERVID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f " + "WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') AND "
					+ " (f.MID = :tngMid OR f.MID = :shoppyMid OR f.MID = :Ezywaymid)  And f.TIME_STAMP BETWEEN "
					+ " :from and :to order by f.TIME_STAMP desc ";

			logger.info(" TNG-SHOPPY Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("tngMid", tngMid);
			sqlQuery.setString("shoppyMid", shoppyMid);
			sqlQuery.setString("Ezywaymid", Ezywaymid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		}

		else if (txnType.equals("BNPL")) {
			sql = "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, '' AS SERVID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND (b.MID = :bnplMid OR b.MID = :Ezywaymid) AND b.TIME_STAMP BETWEEN :from and :to order by b.TIME_STAMP desc ";

			logger.info(" BNPL Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("bnplMid", bnplMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {

				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					String replacefpan = rec[4].toString().replace("f", "*");

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {

				String status = rec[5].toString();

				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("H")) {
					fs.setSTATUS("EZYSETTLE");
				} else if (rec[5].toString().equals("PPA")) {
					fs.setSTATUS("PAYOUT");
				} else if (rec[5].toString().equals("TPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("SPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("TPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("SPS")) {
					fs.setSTATUS("SETTLED");
				}

				else if (rec[5].toString().equals("BNA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BNS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BNC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setF263_MRN("");
			} else if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF011_AUTHIDRESP("");
			} else if (rec[9] != null) {

				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {

				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {

				String rd = null;
				String rt = "";

				if (rec[5].toString().equals("S") || rec[5].toString().equals("H")) {

					try {
						
						String datetime = rec[11].toString();
						
						String datePart = datetime.substring(0, 8); 

			            String timePart = datetime.substring(9, 15); 

			            rd = new SimpleDateFormat("dd/MM/yyyy")
			                    .format(new SimpleDateFormat("yyyyMMdd").parse(datePart));

			            rt = new SimpleDateFormat("HH:mm:ss")
			                    .format(new SimpleDateFormat("HHmmss").parse(timePart));
			            
//						
//						rd = new SimpleDateFormat("dd/MM/yyyy")
//								.format(new SimpleDateFormat("yyyyMMdd").parse(rec[11].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					logger.info("Testing DATE TIME ELSE ***:" + rd + " " + rt);
					fs.setDate(rd);
					fs.setTime(rt);
				} else {

					try {

						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
						rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));

						logger.info("Testing DATE TIME ELSE :" + rd + " " + rt);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
//					fs.setDate(rd);
//					fs.setTime(rt);
					fs.setDate(rd);
					fs.setTime(rt);
				}
			}

			if (rec[12] != null) {

				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {

				fs.setF268_CHNAME(rec[14].toString());
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setFraudScore("");

			} else if (rec[15] != null || rec[15] != "") {

				if (rec[15].toString().equalsIgnoreCase("null")) {
					fs.setFraudScore("");
				} else {
					fs.setFraudScore(rec[15].toString());
				}

			} else {
				fs.setFraudScore("");
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setFraudId("");

			} else if (rec[16] != null || rec[16] != "") {

				if (rec[16].toString().equalsIgnoreCase("null")) {
					fs.setFraudId("");
				} else {
					fs.setFraudId(rec[16].toString());
				}

			} else {
				fs.setFraudId("");
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {

				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {

				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					fs.setSettlementDate(rt);
				} else if (datelength == 10) {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				} else {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {

				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				}

				else {
					fs.setCardType(rec[20].toString());
				}
			}

			else {
				fs.setCardType("");
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setEzysettleAmt("");
			} else if (rec[22] != null) {

				Double d = new Double(rec[22].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setEzysettleAmt(output);

			}
			if (rec[23] != null) {
				fs.setSubmerchantmid(rec[23].toString());
			} else {
				fs.setSubmerchantmid("");
			}
			
			//service id added
			
			if (rec[24] != null) {
				fs.setServiceId(rec[24].toString());
				logger.info("service id : "+fs.getServiceId());
			} else {
				fs.setServiceId("");
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
	
	}

	@Override
	public void listUMEzywayTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayenqTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzywayMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}

			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				logger.info("respMsg" + respMsg);
				fs.setRespMessage(respMsg);
				logger.info("setRespMessage: " + fs.getRespMessage());
			} else {
				fs.setRespMessage("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.txn_type = 'EZYWAY'  and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000')  and  res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			if (rec[17] != null) {
				fs.setServiceId(rec[17].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransactionEnq(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzywayMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE,res.F270_ORN,res.F268_CHNAME, res.F260_SERVID, res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.txn_type = 'EZYWAY' and res.H001_MTI in ('0290','0210','0200') and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}
			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			if (rec[18] != null) {
				fs.setServiceId(rec[18].toString());
			} else {
				fs.setServiceId("");
			}
			
			if (rec[19] != null) {
				fs.setTxnType(rec[19].toString());
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType, Merchant merchant) {

		try {
			// TODO Auto-generated method stub

			logger.info(
					"Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
			String from = null;
			String to = null;
			String fdate = null;
			String tdate = null;
			String year1 = null;
			String year2 = null;
			ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
			String sql = null;
			String boostmid = null;
			String grabmid = null;
			String fpxmid = null;
			String tngMid = null;
			String shoppyMid = null;

			// BNPL INTEGRATION

			String bnplMid = null;
			
			//fiuu mid
			
			String fiuuMid = "";

			Query sqlQuery = null;

			String Ezywaymid = umEzywayMid;

			if (merchant.getMid().getBoostMid() != null) {
				boostmid = merchant.getMid().getBoostMid();
			}

			if (merchant.getMid().getGrabMid() != null) {
				grabmid = merchant.getMid().getGrabMid();
			}

			if (merchant.getMid().getFpxMid() != null) {
				fpxmid = merchant.getMid().getFpxMid();
			}

			if (merchant.getMid().getTngMid() != null) {
				tngMid = merchant.getMid().getTngMid();
			}
			if (merchant.getMid().getShoppyMid() != null) {
				shoppyMid = merchant.getMid().getShoppyMid();
			}
			// BNPL INTEGRATION
			if (merchant.getMid().getBnplMid() != null) {
				bnplMid = merchant.getMid().getBnplMid();
			}
			
			//Fiuu Mid
			if (merchant.getMid().getFiuuMid() != null) {
				fiuuMid = merchant.getMid().getFiuuMid();
			}
			

			logger.info("BNPLMid" + bnplMid);

			if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

				Date dt = new Date();

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				from = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = from.substring(0, from.length() - 2);
				from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
				logger.info("change date format:" + from);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				to = dateFormat1.format(dt1);
				String to1 = to.substring(0, to.length() - 2);
				to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
				logger.info("date format:" + to);

			} else {

				from = date;
				fdate = date;
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
				try {
					from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
					fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));

					logger.info("date format:" + date);
				} catch (ParseException e) {

					e.printStackTrace();
				}

				to = date1;
				tdate = date1;
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				try {
					to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
					tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
				} catch (ParseException e) {

					e.printStackTrace();
				}

			}

			logger.info("checkd date: " + from + " : " + to + fdate + tdate);
			if (txnType.equals("CARD")) {

//			sql = "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME, '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from "
//					+ "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210') "
//					+ "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID = :Ezywaymid and res.STATUS IN ('A') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc limit 50000 ) "
//					+ "UNION "
//					+ "(select s.MID,'NULL' AS F005_EXPDATE,s.TXN_AMOUNT,s.TID,s.MASKED_PAN, s.`STATUS`,s.TRX_ID,'NULL' AS TDT,'NULL' AS TTM,s.AID,s.RRN,s.DATE AS TIME_STAMP,'NULL' AS BUSINESS_NAME,s.INVOICE_ID, '' AS F268_CHNAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, s.NET_AMOUNT,s.MDR_AMT,s.SETTLEMENTDATE,s.CARD_BRAND AS TXN_TYPE ,'NULL' AS BANK_NAME,s.EZYSETTLE_AMOUNT,s.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from mobiversa.SETTLEMENT_MDR as s "
//					+ "	where s.TXN_TYPE = 'EZYWAY' and s.MID =:Ezywaymid and s.STATUS IN ('S','H','PPA','FR','R','PR') and s.DATE between :fdate and :tdate order by s.DATE desc limit 50000 ) "
//					+ "UNION "
//					+ "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID from "
//					+ "	UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210') "
//					+ "	and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID = :Ezywaymid and res.STATUS IN ('C') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc limit 50000 )";

				sql = "SELECT * FROM ((select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
						+ "UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210','0200') "
						+ "and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.STATUS IN ('A') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )"
						+ "UNION "
						+ "(select s.MID,'NULL' AS F005_EXPDATE,s.TXN_AMOUNT,s.TID,s.MASKED_PAN, s.`STATUS`,s.TRX_ID,'NULL' AS TDT,'NULL' AS TTM,s.AID,s.RRN,CONCAT(s.DATE, ' ', s.TIME) AS TIME_STAMP,'NULL' AS BUSINESS_NAME,s.INVOICE_ID, '' AS F268_CHNAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, s.NET_AMOUNT,s.MDR_AMT,s.SETTLEMENTDATE,s.CARD_BRAND AS TXN_TYPE ,'NULL' AS BANK_NAME , s.EZYSETTLE_AMOUNT,s.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, s.HOST_TYPE AS SERVID from mobiversa.SETTLEMENT_MDR as s "
						+ "where s.TXN_TYPE = 'EZYWAY' and s.MID IN (:Ezywaymid,:fiuuMid) and s.STATUS IN ('S','H','PPA','FR','R','PR') and s.DATE between :fdate and :tdate order by s.DATE desc ) "
						+ "UNION "
						+ "(select res.F001_MID AS MID,'NULL' AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN,res.`STATUS` AS STATUS,res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,'NULL' AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NET_AMOUNT,'' AS MDR_AMT,'' AS SETTLEMENTDATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
						+ "UM_ECOM_TXNRESPONSE as res where res.H001_MTI in ('0290','0210','0200') "
						+ "and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYWAY' and res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.STATUS IN ('C') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc )) AS subalias ORDER BY TIME_STAMP desc limit 10000";

				logger.info("CARD Query : " + sql);
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
				sqlQuery.setString("from", from);
				sqlQuery.setString("to", to);
				sqlQuery.setString("fdate", fdate);
				sqlQuery.setString("tdate", tdate);
				sqlQuery.setString("Ezywaymid", Ezywaymid);
				sqlQuery.setString("fiuuMid", fiuuMid);

			}
			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				UMEzyway fs = new UMEzyway();

				if (rec[0] != null || rec[0] != "") {
					fs.setF001_MID(rec[0].toString());
				} else {
					fs.setF001_MID("");
				}

				if (rec[1] != null || rec[1] != "") {
					fs.setF005_EXPDATE(rec[1].toString());
				} else {
					fs.setF005_EXPDATE("");
				}

				if (rec[2] != null) {
					if (rec[2].toString().contains(".")) {
						try {
							Double d = new Double(rec[2].toString());
							String pattern = "#,##0.00";
							DecimalFormat myFormatter = new DecimalFormat(pattern);
							String output = myFormatter.format(d);

							fs.setF007_TXNAMT(output);
						} catch (Exception e) {

							logger.error("Double Formatting Error::" + e.getMessage(), e);
						}
					} else {
						try {
							double amount = 0;
							amount = Double.parseDouble(rec[2].toString()) / 100;
							String pattern = "#,##0.00";
							DecimalFormat myFormatter = new DecimalFormat(pattern);
							String output = myFormatter.format(amount);
							fs.setF007_TXNAMT(output);
						} catch (Exception e) {
							logger.error("Double Formatting Error::" + e.getMessage(), e);
						}
					}
				} else {
					fs.setF007_TXNAMT("");
				}

				if (rec[3] != null || rec[3] != "") {
					fs.setF354_TID(rec[3].toString());
				} else {
					fs.setF354_TID("");
				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPAN("");
				} else if (rec[4] != null || rec[4] != "") {

					String rt = null;
					String rd = null;
					String lasteightDigits = null;

					if (rec[4].toString().contains("f")) {

						int panlength = rec[4].toString().length();

						String replacefpan = rec[4].toString().replace("f", "*");

						if (panlength > 13) {

							lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						}
						fs.setPAN(lasteightDigits);
					}

				} else {

					fs.setPAN("");
				}

				if (rec[5] != null) {
					String status = rec[5].toString();

					if (rec[5].toString().equals("A")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("C")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("S")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("CB")) {
						fs.setSTATUS("CHARGE BACK");
					} else if (rec[5].toString().equals("FR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("BPS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("BPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("BPC")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("GPS")) {
						fs.setSTATUS("SETTLED");

					} else if (rec[5].toString().equals("GRF")) {
						fs.setSTATUS("VOIDED");

					} else if (rec[5].toString().equals("GPT")) {
						fs.setSTATUS("SETTLED");

					} else if (rec[5].toString().equals("GBC")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("R")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("PR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("H")) {
						fs.setSTATUS("EZYSETTLE");
					} else if (rec[5].toString().equals("PPA")) {
						fs.setSTATUS("PAYOUT");
					} else if (rec[5].toString().equals("TPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("SPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("TPS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("SPS")) {
						fs.setSTATUS("SETTLED");
					}

					else if (rec[5].toString().equals("BNA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("BNS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("BNC")) {
						fs.setSTATUS("VOIDED");
					}

				} else {
					fs.setSTATUS("NOT SETTLED");
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setF263_MRN("");
				} else if (rec[6] != null || rec[6] != "") {

					fs.setF263_MRN(rec[6].toString());
				} else {
					fs.setF263_MRN("");
				}

				if (rec[9] == null || rec[9].toString().isEmpty()) {

					fs.setF011_AUTHIDRESP("");
				} else if (rec[9] != null) {
					fs.setF011_AUTHIDRESP(rec[9].toString());
				} else {
					fs.setF011_AUTHIDRESP("");
				}

				if (rec[10] != null) {
					fs.setF023_RRN(rec[10].toString());
				} else {
					fs.setF023_RRN("");
				}
				if (rec[11] != null) {

					String rd = null;
					String rt = "";

					if (rec[5].toString().equals("S") || rec[5].toString().equals("H")) {

						try {
							
							String datetime = rec[11].toString();
							
							String datePart = datetime.substring(0, 8); 

				            String timePart = datetime.substring(9, 15); 

				            rd = new SimpleDateFormat("dd/MM/yyyy")
				                    .format(new SimpleDateFormat("yyyyMMdd").parse(datePart));

				            rt = new SimpleDateFormat("HH:mm:ss")
				                    .format(new SimpleDateFormat("HHmmss").parse(timePart));
				            
//							
//							rd = new SimpleDateFormat("dd/MM/yyyy")
//									.format(new SimpleDateFormat("yyyyMMdd").parse(rec[11].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						logger.info("Testing DATE TIME ELSE ***:" + rd + " " + rt);
						fs.setDate(rd);
						fs.setTime(rt);
					} else {
						try {
							rd = new SimpleDateFormat("dd/MM/yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
							rt = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
							logger.info("Testing DATE TIME ELSE :" + rd + " " + rt);
						}

						catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setDate(rd);
						fs.setTime(rt);
					}

//				String rd = null;
//				String rt = "";
//
//				if (rec[5].toString().equals("S") ) {
//
//					try {
//						rd = new SimpleDateFormat("dd/MM/yyyy")
//								.format(new SimpleDateFormat("yyyyMMdd").parse(rec[11].toString()));
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//
//					fs.setDate(rd);
//				} else {
//
//					try {
//						rd = new SimpleDateFormat("dd/MM/yyyy")
//								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
//						rt = new SimpleDateFormat("HH:mm:ss")
//								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//					fs.setDate(rd);
//					fs.setTime(rt);
//				}
//			} else {
//				String rd = null;
//				String rt = "";
//				try {
//					rd = new SimpleDateFormat("dd/MM/yyyy")
//							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
//					rt = new SimpleDateFormat("HH:mm:ss")
//							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
//				} catch (ParseException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				fs.setDate(rd);
//				fs.setTime(rt);
//			}
				}

				if (rec[12] != null) {
					fs.setMerchantName(rec[12].toString());
				} else {
					fs.setMerchantName("");
				}

				if (rec[13] != null) {
					fs.setF270_ORN(rec[13].toString());
				} else {
					fs.setF270_ORN("");
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setF268_CHNAME("");

				} else if (rec[14] != null) {
					fs.setF268_CHNAME(rec[14].toString());
				}

				if (rec[15] == null || rec[15].toString().isEmpty()) {

					fs.setFraudScore("");

				} else if (rec[15] != null || rec[15] != "") {
					if (rec[15].toString().equalsIgnoreCase("null")) {
						fs.setFraudScore("");
					} else {
						fs.setFraudScore(rec[15].toString());
					}

				} else {
					fs.setFraudScore("");
				}

				if (rec[16] == null || rec[16].toString().isEmpty()) {

					fs.setFraudId("");

				} else if (rec[16] != null || rec[16] != "") {
					if (rec[16].toString().equalsIgnoreCase("null")) {
						fs.setFraudId("");
					} else {
						fs.setFraudId(rec[16].toString());
					}

				} else {
					fs.setFraudId("");
				}

				// NEW FIELDS

				if (rec[17] == null || rec[17].toString().isEmpty()) {
					fs.setNetAmount("");
				} else if (rec[17] != null || rec[17] != "") {
					Double d = new Double(rec[17].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setNetAmount(output);
				}

				if (rec[18] == null || rec[18].toString().isEmpty()) {
					fs.setMdrAmt("");
				} else if (rec[18] != null || rec[18] != "") {
					Double d = new Double(rec[18].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setMdrAmt(output);
				}
				String rd = null;
				String rt = null;
				if (rec[19] == null || rec[19].toString().isEmpty()) {
					fs.setSettlementDate("");
				} else if (rec[19] != null || rec[19] != "") {

					int datelength = rec[19].toString().length();

					if (datelength == 11) {
						fs.setSettlementDate(rec[19].toString());
					}

					else if (rec[19].toString().contains("T")) {
						rd = rec[19].toString().substring(0, 8);

						try {
							rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
						} catch (ParseException e) {
							e.printStackTrace();
						}

						fs.setSettlementDate(rt);
					} else if (datelength == 10) {

						try {
							rd = new SimpleDateFormat("dd/MM/yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setSettlementDate(rd);
					} else {

						try {
							rd = new SimpleDateFormat("dd-MMM-yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setSettlementDate(rd);
					}
				} else {
					fs.setSettlementDate("");
				}

				if (rec[20] == null || rec[20].toString().isEmpty()) {
					fs.setCardType("");
				} else if (rec[20] != null) {
					if (rec[21].toString().equals("NULL")) {
						fs.setCardType(rec[20].toString());
					}

					else if (rec[21] != null && !rec[21].toString().isEmpty()) {
						fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
					}

					else {
						fs.setCardType(rec[20].toString());
					}

				} else {
					fs.setCardType("");
				}

				if (rec[22] == null || rec[22].toString().isEmpty()) {
					fs.setEzysettleAmt("");
				} else if (rec[22] != null) {

					Double d = new Double(rec[22].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setEzysettleAmt(output);

				}

				if (rec[23] != null) {
					fs.setSubmerchantmid(rec[23].toString());
				} else {
					fs.setSubmerchantmid("");
				}
				
				//serv id
				
				if (rec[24] != null) {
					fs.setServiceId(rec[24].toString());
				} else {
					fs.setServiceId("");
				}

				fss.add(fs);
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + paginationBean.getItemList().size());

		} catch (Exception e) {
			logger.error("exportUMEzywayTransaction Error::" + e.getMessage(), e);
		}
	}

	@Override
	public UMEcomTxnRequest loadUMEzywayTransactionRequest(String id) {
		return (UMEcomTxnRequest) sessionFactory.getCurrentSession().createCriteria(UMEcomTxnRequest.class)
				.add(Restrictions.eq("f263_MRN", id)).setMaxResults(1).uniqueResult();
	}

	// BNPL VOID 12-12-22

	@Override
	public BnplTxnDetails loadBnplDetails(String id) {
		return (BnplTxnDetails) sessionFactory.getCurrentSession().createCriteria(BnplTxnDetails.class)
				.add(Restrictions.eq("mobiTxnId", id)).setMaxResults(1).uniqueResult();
	}

	@Override
	public UMEcomTxnResponse loadUMEzywayTransactionResponse(String id) {

		logger.info("MRN:" + id);

		Disjunction orExp = null;

		Criterion pending = Restrictions.like("status", "A");
		Criterion complete = Restrictions.like("status", "S");
		Criterion cancel = Restrictions.like("status", "C");
		Criterion preAuth = Restrictions.like("status", "E");

		orExp = Restrictions.or(complete, pending, cancel, preAuth);

		return (UMEcomTxnResponse) sessionFactory.getCurrentSession().createCriteria(UMEcomTxnResponse.class)
				.add(Restrictions.eq("f263_MRN", id)).add(orExp).setMaxResults(1).uniqueResult();
	}

	@Override
	public ForSettlement loadBoostForSettlement(String rrn) {
		logger.info("load ForSettlement By Boost RRN : " + rrn);
		return (ForSettlement) sessionFactory.getCurrentSession().createCriteria(ForSettlement.class)
				.add(Restrictions.eq("rrn", rrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public ForSettlement loadGrabpayForSettlement(String rrn) {
		logger.info("load ForSettlement By Grabpay RRN : " + rrn);
		return (ForSettlement) sessionFactory.getCurrentSession().createCriteria(ForSettlement.class)
				.add(Restrictions.eq("rrn", rrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public TempletFields getMerchantDetByGrabpayTid(String tid) {

		logger.info(" Get MerchantDet By GrabpayTid : " + tid);
		TempletFields tf = new TempletFields();

		try {

			MobileUser mid1 = (MobileUser) sessionFactory.getCurrentSession().createCriteria(MobileUser.class)
					.add(Restrictions.eq("gpayTid", tid)).setMaxResults(1).uniqueResult();

			// TID
			if (mid1.getMotoTid() != null) {
				tf.setTID(mid1.getMotoTid());

			} else {
				if (mid1.getTid() != null) {
					tf.setTID(mid1.getTid());
				} else {
					tf.setTID("");
				}
			}

			if (mid1.getMerchant().getMerchantType() != null) {
				logger.info(" Inside Merchant : " + mid1.getMerchant().getMerchantType());
			} else {
				mid1.getMerchant().setMerchantType("P");
				logger.info("Host Assigned P ");
			}

			// MID
			if (mid1.getMerchant().getMerchantType().equalsIgnoreCase("P")) {

				logger.info(" Inside Merchant Type P ");

				if (mid1.getMerchant().getMid().getMotoMid() != null) {
					logger.info("Moto Mid :::" + mid1.getMerchant().getMid().getMotoMid());

					tf.setMID(mid1.getMerchant().getMid().getMotoMid());
				} else {
					if (mid1.getMerchant().getMid().getMid() != null) {
						logger.info(" Mid :::" + mid1.getMerchant().getMid().getMid());

						tf.setMID(mid1.getMerchant().getMid().getMid());
					} else {
						tf.setMID("");
					}
				}

			} else if (mid1.getMerchant().getMerchantType().equalsIgnoreCase("U") || mid1.getMerchant().getMerchantType().equalsIgnoreCase("FIUU")) {

				logger.info(" Inside Merchant Type U ");

				tf.setMID(mid1.getMerchant().getMid().getUmMotoMid());
				if (mid1.getMerchant().getMid().getUmMotoMid() != null) {
					logger.info("UmMoto Mid :::" + mid1.getMerchant().getMid().getUmMotoMid());

					tf.setMID(mid1.getMerchant().getMid().getUmMotoMid());
				} else {
					if (mid1.getMerchant().getMid().getUmMid() != null) {
						logger.info("UM Mid :::" + mid1.getMerchant().getMid().getUmMid());

						tf.setMID(mid1.getMerchant().getMid().getUmMid());
					} else {
						tf.setMID("");
					}
				}

			} else {
				logger.info(" Final Assign nothing");
				tf.setMID("");
			}

			return tf;

		}

		catch (NullPointerException np) {

			TempletFields templetFields = null;

			return templetFields;

		}

	}

	@Override
	public TempletFields getMerchantDetByGrabpayecom(String tid) {

		logger.info(" Get MerchantDet By Grabpayecom : " + tid);
		TempletFields tf = new TempletFields();

		try {

			MobileUser mid1 = (MobileUser) sessionFactory.getCurrentSession().createCriteria(MobileUser.class)
					.add(Restrictions.eq("onlineGpay", tid)).setMaxResults(1).uniqueResult();

			// TID
			if (mid1.getMotoTid() != null) {
				tf.setTID(mid1.getMotoTid());
			} else {
				if (mid1.getEzywayTid() != null) {
					tf.setTID(mid1.getEzywayTid());
				} else {
					tf.setTID("");
				}
			}

			if (mid1.getMerchant().getMerchantType() != null) {
				logger.info(" Inside Merchant : " + mid1.getMerchant().getMerchantType());
			} else {
				mid1.getMerchant().setMerchantType("P");
				logger.info("Host Assigned P ");
			}

			// MID
			if (mid1.getMerchant().getMerchantType().equalsIgnoreCase("P")) {

				logger.info(" Inside Merchant Type P");

				if (mid1.getMerchant().getMid().getMotoMid() != null) {
					logger.info("Moto MID :" + mid1.getMerchant().getMid().getMotoMid());

					tf.setMID(mid1.getMerchant().getMid().getMotoMid());
				} else {
					if (mid1.getMerchant().getMid().getEzywayMid() != null) {
						logger.info("Ezyway MID :" + mid1.getMerchant().getMid().getEzywayMid());

						tf.setMID(mid1.getMerchant().getMid().getEzywayMid());
					} else {
						tf.setMID("");
					}
				}

			} else if (mid1.getMerchant().getMerchantType().equalsIgnoreCase("U") || mid1.getMerchant().getMerchantType().equalsIgnoreCase("FIUU")) {

				logger.info(" Inside Merchant Type U");

				if (mid1.getMerchant().getMid().getUmMotoMid() != null) {
					logger.info("Um Moto MID :" + mid1.getMerchant().getMid().getUmMotoMid());

					tf.setMID(mid1.getMerchant().getMid().getUmMotoMid());
				} else {
					if (mid1.getMerchant().getMid().getUmEzywayMid() != null) {
						logger.info("Um Ezyway MID :" + mid1.getMerchant().getMid().getUmEzywayMid());

						tf.setMID(mid1.getMerchant().getMid().getUmEzywayMid());
					} else {
						tf.setMID("");
					}
				}

			} else {
				logger.info(" Final Assign nothing");
				tf.setMID("");
			}

			return tf;

		} catch (NullPointerException np) {

			TempletFields templetFields = null;

			return templetFields;

		}

	}

	@Override
	public FpxTransaction loadFpxTransaction(String txnId) {

		logger.info("load FpxTransaction By TxnId : " + txnId);
		return (FpxTransaction) sessionFactory.getCurrentSession().createCriteria(FpxTransaction.class)
				.add(Restrictions.eq("fpxTxnId", txnId)).setMaxResults(1).uniqueResult();

	}
    @Override
	public FpxTransaction loadFpxTransactionBySellerExOrderNumber(String sellerExOrderNumber) {

		logger.info("load FpxTransaction By sellerExOrderNumber : " + sellerExOrderNumber);
        try {
            return (FpxTransaction) sessionFactory.getCurrentSession().createCriteria(FpxTransaction.class)
                    .add(Restrictions.eq("sellerExOrderNo", sellerExOrderNumber)).setMaxResults(1).uniqueResult();
        }catch(Exception e)
        {
            logger.error("Exception occured while loading the FPX transaction by sellerExOrderNumbesellerExOrderNumber in FpxTransaction table for the ID "+sellerExOrderNumber+" and the execeptuion is "+e.getMessage(),e );
            throw e;
        }

	}

	public String getResMsg(String code) {

		logger.info("get response message");

		String msg = "";
		switch (code) {
		case "00":
			msg = "Approved";
			break;
		case "01":
			msg = "Refer To Issuer";
			break;
		case "02":
			msg = "Refer To Issuer, Special Condition";
			break;
		case "03":
			msg = "Invalid Merchant ID";
			break;
		case "04":
			msg = "Pick Up Card";
			break;
		case "05":
			msg = "Do Not Honour";
			break;
		case "06":
			msg = "Error";
			break;
		case "07":
			msg = "Pick Up Card";
			break;
		case "12":
			msg = "Invalid Transaction";
			break;
		case "13":
			msg = "Invalid Amount";
			break;
		case "14":
			msg = "Invalid Card Number (PAN)";
			break;
		case "19":
			msg = "Re-enter Transaction";
			break;
		case "21":
			msg = "No Action Taken (Unable to back out prior transaction)";
			break;
		case "22":
			msg = "Transaction in pending stage (in progress)*";
			break;
		case "23":
			msg = "Invalid/Unacceptable Transaction Fee";
			break;
		case "25":
			msg = "Terminated/Inactive card";
			break;
		case "30":
			msg = "Message Format Error";
			break;
		case "31":
			msg = "Bank ID Not Found";
			break;
		case "41":
			msg = "Card Reported Lost";
			break;
		case "43":
			msg = "Stolen Card";
			break;
		case "44":
			msg = "PIN Change Require";
			break;
		case "45":
			msg = "Card Not Activated For Use";
			break;
		case "51":
			msg = "Insufficient Fund";
			break;
		case "52":
			msg = "No Checking Count";
			break;
		case "53":
			msg = "No Savings Account";
			break;
		case "54":
			msg = "Expired Card";
			break;
		case "55":
			msg = "Invalid PIN";
			break;
		case "56":
			msg = "Invalid Card";
			break;
		case "57":
			msg = "Transaction not permitted to cardholder";
			break;
		case "58":
			msg = "Invalid Transaction";
			break;
		case "59":
			msg = "Suspected Fraud";
			break;
		case "61":
			msg = "Over Limit";
			break;
		case "62":
			msg = "Restricted Card";
			break;
		case "63":
			msg = "Security Violation";
			break;
		case "68":
			msg = "Transaction timeout (No reply from acquirer)";
			break;
		case "75":
			msg = "PIN Tries Exceeded";
			break;
		case "76":
			msg = "Unable to locate previous message";
			break;
		case "77":
			msg = "Repeat or Reversal Data are inconsistent";
			break;
		case "78":
			msg = "Card is not activated yet";
			break;
		case "80":
			msg = "Credit issuer unavailable";
			break;
		case "83":
			msg = "Unable to verify PIN";
			break;
		case "88":
			msg = "Call Issuer";
			break;
		case "91":
			msg = "Issuer/Switch Error";
			break;
		case "92":
			msg = "Destination cannot be found for routing";
			break;
		case "93":
			msg = "Transaction cannot be completed; violation of law";
			break;
		case "94":
			msg = "Duplicate Transaction";
			break;
		case "95":
			msg = "Total Mismatch (reconciliation problem)";
			break;
		case "96":
			msg = "System Malfunction/Error";
			break;
		case "99":
			msg = "Unknown/unmappable response code";
			break;
		case "N7":
			msg = "Decline for CVV2 failure";
			break;
		case "B1":
			msg = "Rejected by Issuer - Duplicate Retry";
			break;
		default:
			msg = "Transaction Failed";
			break;
		}

		return msg;

	}

	@Override
	public void listUMMotoTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String fiuuMid, String txnType, Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		Query sqlQuery = null;

		String motomid = umMotoMid;
		
		String VALUE = date;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null || txnType.equalsIgnoreCase("CARD")) {

			logger.info("checkd date: " + from + " : " + to);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid, :fiuuMid) and res.STATUS IN ('S','H','PPA','FR','R','PR') and res.TIME_STAMP between :from  and :to ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid, :fiuuMid) and res.STATUS IN ('A','C') and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("UM_CARD_MOTO_RRN")) {

			logger.info("=========>>>INSIDE UM_CARD_MOTO_RRN<<<============");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F023_RRN like '"
					+ VALUE + "%' and  res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F023_RRN like '"
					+ VALUE + "%' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("SEARCH RRN UM-EZYMOTO Query : " + sql);
			logger.info("THE RRN VALUE IS :" + VALUE);

		}

		else if (txnType.equals("UM_CARD_MOTO_CARDNO")) {

			logger.info("=========>>>INSIDE UM_CARD_MOTO_CARDNO<<<============");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.MASKED_PAN like '%"
					+ VALUE + "' and  res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.MASKED_PAN like '%"
					+ VALUE + "' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("SEARCH CARD NUMBER UM-EZYMOTO Query : " + sql);
			logger.info("THE CARD NUMBER VALUE IS :" + VALUE);

		}

		else if (txnType.equals("UM_CARD_MOTO_AP")) {

			logger.info("=========>>>INSIDE UM_CARD_MOTO_APPROVAL_CODE<<<============");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and  res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("SEARCH APPROVAL CODE UM-EZYMOTO Query : " + sql);
			logger.info("THE APPROVAL CODE VALUE IS :" + VALUE);

		}

		else if (txnType.equals("UM_CARD_MOTO_REF")) {

			logger.info("=========>>>INSIDE UM_CARD_MOTO_REFERENCE<<<============");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F270_ORN like '"
					+ VALUE + "%' and  res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F270_ORN like '"
					+ VALUE + "%' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("SEARCH REFERENCE UM-EZYMOTO Query : " + sql);
			logger.info("THE REFERENCE VALUE IS :" + VALUE);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {
					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("H")) {
					fs.setSTATUS("EZYSETTLE");
				} else if (rec[5].toString().equals("PPA")) {
					fs.setSTATUS("PAYOUT");
				} else if (rec[5].toString().equals("TPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("SPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("TPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("SPS")) {
					fs.setSTATUS("SETTLED");
				}

				else if (rec[5].toString().equals("BNA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BNS")) {
					fs.setSTATUS("SETTLED");
				}

			} else {
				fs.setSTATUS("NOT SETTLED");
			} 

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {
				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					fs.setSettlementDate(rt);
				} else if (datelength == 10) {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				} else {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {
				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				} else {
					fs.setCardType(rec[20].toString());
				}

			} else {
				fs.setCardType("");
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setEzysettleAmt("");
			} else if (rec[22] != null) {

				Double d = new Double(rec[22].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setEzysettleAmt(output);

			}

			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setTxnType("");
			} else if (rec[23] != null) {
				logger.info("txntype is " + rec[23].toString());

				fs.setTxnType(rec[23].toString());

			}

			if (rec[24] == null || rec[24].toString().isEmpty() || rec[24].toString().equalsIgnoreCase("NULL")) {
				fs.setPreauthfee("");
			} else if (rec[24] != null || rec[24] != "") {
				Double d = new Double(rec[24].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setPreauthfee(output);
			}

			if (rec[25] == null || rec[25].toString().isEmpty() || rec[25].toString().equalsIgnoreCase("NULL")) {

				fs.setSubmerchantmid("");
			} else if (rec[25] != null) {
				fs.setSubmerchantmid(rec[25].toString());
			}
			
			//service id 
			if (rec[26] != null) {
				fs.setServiceId(rec[26].toString());
			} else {
				fs.setServiceId("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void listUMEzyrecTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzyrecMid, String txnType, Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyrecTransaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umEzyrecMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String boostmid = null;
		String grabmid = null;
		String fpxmid = null;
		Query sqlQuery = null;

		String ezyrecmid = umEzyrecMid;

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto ALL " + txnType);

			// rknamefieldchange
			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.TIME_STAMP between :from  and :to and res.STATUS IN ('S','FR','R','PR') ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.TIME_STAMP between :from  and :to and res.STATUS IN ('A','C') ) "
					+ "UNION "
					+ "(select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID, "
					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
					+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from mobiversa.FOR_SETTLEMENT a INNER JOIN mobiversa.MID m on (a.MID=m.UM_EZYREC_MID OR a.MID = m.BOOST_MID) "
					+ "INNER JOIN mobiversa.MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('BPS','BPA','BPC') AND "
					+ "(a.MID = :ezyrecmid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN " + " :from and :to ) "
					+ "UNION "
					+ "(select '' AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
					+ "WHERE (m.UM_EZYREC_MID=:ezyrecmid OR m.GRAB_MID = :grabmid) and c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
					+ "a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
					+ "(select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME "
					+ "from mobiversa.FPX_TRANSACTION f INNER JOIN mobiversa.MID m on (f.MID=m.UM_EZYREC_MID OR f.MID = m.FPX_MID) "
					+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "(f.MID = :ezyrecmid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to )) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("boostmid", boostmid);
			sqlQuery.setString("grabmid", grabmid);
			sqlQuery.setString("fpxmid", fpxmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("CARD")) {

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.STATUS IN ('S','FR','R','PR') and res.TIME_STAMP between :from  and :to ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.STATUS IN ('A','C') and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("BOOST")) {

			sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID, "
					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
					+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from mobiversa.FOR_SETTLEMENT a INNER JOIN mobiversa.MID m on (a.MID=m.UM_EZYREC_MID OR a.MID = m.BOOST_MID) "
					+ "INNER JOIN mobiversa.MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('BPS','BPA','BPC') AND "
					+ "(a.MID = :ezyrecmid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN "
					+ " :from and :to  order by a.TIME_STAMP desc";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("boostmid", boostmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("GRABPAY")) {
			sql = "select '' AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
					+ "WHERE (m.UM_EZYREC_MID=:ezyrecmid OR m.GRAB_MID = :grabmid) and c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
					+ "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("grabmid", grabmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("FPX")) {
			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME "
					+ "from mobiversa.FPX_TRANSACTION f INNER JOIN mobiversa.MID m on (f.MID=m.UM_EZYREC_MID OR f.MID = m.FPX_MID) "
					+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "(f.MID = :ezyrecmid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to  order by f.TIME_STAMP desc";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("fpxmid", fpxmid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {
					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {
				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {
				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				} else {
					fs.setCardType(rec[20].toString());
				}

			} else {
				fs.setCardType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void listUMLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType, Merchant merchant) {
		// TODO Auto-generated method stub

		logger.info("Inside list UMLink Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;
		String VALUE = date;

		String motomid = umMotoMid;
		String fiuuMid = merchant.getMid().getFiuuMid()== null?"":merchant.getMid().getFiuuMid();
		logger.info("fiuu mid : "+fiuuMid);

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null || txnType.equals("CARD")) {

			logger.info("checkd date: " + from + " : " + to);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.STATUS IN ('S','H','PPA','FR','R','PR') and res.TIME_STAMP between :from  and :to ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME ,  '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.STATUS IN ('A','C') and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("UM_CARD_LINK_RRN")) {

			logger.info("<====INSIDE UM_EZYLINK_RRN SEARCH METHOD====>");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F023_RRN like '"
					+ VALUE + "%' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME ,  '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F023_RRN like '"
					+ VALUE + "%' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info(" SEARCH RRN Query : " + sql);
			logger.info("VALUE WHICH USER GIVES FOR RRN : " + VALUE);

		}

		else if (txnType.equals("UM_CARD_LINK_CARDNO")) {

			logger.info("<====INSIDE UM_EZYLINK_CARD-NO SEARCH METHOD====>");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.MASKED_PAN like '%"
					+ VALUE + "' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME ,  '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.MASKED_PAN like '%"
					+ VALUE + "' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info(" SEARCH CARD NO BY Query : " + sql);
			logger.info("VALUE WHICH USER GIVES FOR CARD NO : " + VALUE);

		}

		else if (txnType.equals("UM_CARD_LINK_AP")) {

			logger.info("<====INSIDE UM_EZYLINK_AP-CODE SEARCH METHOD====>");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME ,  '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info(" SEARCH APPROVAL CODE BY Query : " + sql);
			logger.info("VALUE WHICH USER GIVES FOR APPROVAL_CODE : " + VALUE);

		}

		else if (txnType.equals("UM_CARD_LINK_REF")) {

			logger.info("<====INSIDE UM_EZYLINK_REFERENCE SEARCH METHOD====>");

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F270_ORN like '"
					+ VALUE + "%' and res.STATUS IN ('S','H','PPA','FR','R','PR')) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME ,  '' AS EZYSETTLEAMOUNT,res.TXN_TYPE AS PRODUCTTYPE,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.F270_ORN like '"
					+ VALUE + "%' and res.STATUS IN ('A','C'))) as temp order by TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info(" SEARCH REFERENCE BY Query : " + sql);
			logger.info("VALUE WHICH USER GIVES FOR REFERENCE : " + VALUE);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {
					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("H")) {
					fs.setSTATUS("EZYSETTLE");
				} else if (rec[5].toString().equals("PPA")) {
					fs.setSTATUS("PAYOUT");
				} else if (rec[5].toString().equals("TPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("SPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("TPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("SPS")) {
					fs.setSTATUS("SETTLED");
				}

				else if (rec[5].toString().equals("BNA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BNS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BNC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {
				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					fs.setSettlementDate(rt);
				} else if (datelength == 10) {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				} else {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {
				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				} else {
					fs.setCardType(rec[20].toString());
				}

			} else {
				fs.setCardType("");
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setEzysettleAmt("");
			} else if (rec[22] != null) {

				Double d = new Double(rec[22].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setEzysettleAmt(output);

			}

			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setTxnType("");
			} else if (rec[23] != null) {
				logger.info("txntype is " + rec[23].toString());

				fs.setTxnType(rec[23].toString());

			}

			if (rec[24] == null || rec[24].toString().isEmpty() || rec[24].toString().equalsIgnoreCase("NULL")) {
				fs.setPreauthfee("");
			} else if (rec[24] != null || rec[24] != "") {
				Double d = new Double(rec[24].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setPreauthfee(output);
			}
			if (rec[25] == null || rec[25].toString().isEmpty() || rec[25].toString().equalsIgnoreCase("NULL")) {

				fs.setSubmerchantmid("");
			} else if (rec[25] != null) {
				fs.setSubmerchantmid(rec[25].toString());
			}
			
			//service id
			if (rec[26] == null || rec[26].toString().isEmpty() || rec[26].toString().equalsIgnoreCase("NULL")) {

				fs.setServiceId("");
			} else if (rec[26] != null) {
				fs.setServiceId(rec[26].toString());
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void listUMVccTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyauthMerchantTransaction(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, Merchant currentmerchant, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthMerchantTransaction : " + date + " " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		String ummotomid = null;
		String ummid = null;
		
		String fiuuMid = null;
		
		Query sqlQuery = null;

		String VALUE = date;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();

		String sql = null;

		if (currentmerchant.getMid().getUmMotoMid() != null) {
			ummotomid = currentmerchant.getMid().getUmMotoMid();

		}

		if (currentmerchant.getMid().getUmMid() != null) {
			ummid = currentmerchant.getMid().getUmMid();

		}

		if (currentmerchant.getMid().getFiuuMid() != null) {
			fiuuMid = currentmerchant.getMid().getFiuuMid();

		}
		
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyauth ALL " + txnType);

			// rknamefieldchange
			sql = "select * from (select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','E','C','FR','R','PR') and res.H001_MTI in ('0110','0230','0200') and res.TXN_TYPE IN ('EZYAUTH','AUTHSALE') and res.F003_PROCCODE in ('003000','303000') and res.F001_MID IN ( :ummotomid, :fiuuMid) and res.TIME_STAMP between :from and :to  "
					+ "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE, '' AS SERV_ID from PRE_AUTH as p "
					+ "where p.STATUS IN ('E','M','A','C') and p.MID =:ummid and p.TIME_STAMP BETWEEN :from and :to )as temp order by TIME_STAMP desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
		}

		else if (txnType.equals("UM_CARD_AUTH_RRN")) {

			logger.info("==========>Inside UMEzyauth RRN SEARCH METHOD<==============  " + txnType);

			sql = "select * from (select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','E','C','FR','R','PR') and res.H001_MTI in ('0110','0230','0200') and res.TXN_TYPE IN ('EZYAUTH','AUTHSALE') and res.F023_RRN like '"
					+ VALUE + "%' and res.F003_PROCCODE in ('003000','303000') and res.F001_MID IN (:ummotomid, :fiuuMid) "
					+ "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE, '' AS SERV_ID from PRE_AUTH as p "
					+ "where p.RRN like '" + VALUE
					+ "%' and p.STATUS IN ('E','M','A','C') and p.MID =:ummid )as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("UM CARD AUTH RRN SEARCH Query : " + sql);
			logger.info("UM CARD AUTH RRN SEARCH VALUE : " + VALUE);

		}

		else if (txnType.equals("UM_CARD_AUTH_CARDNO")) {

			logger.info("==========>Inside UMEzyauth CARD NUMBER SEARCH METHOD<==============  " + txnType);

			sql = "select * from (select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','E','C','FR','R','PR') and res.H001_MTI in ('0110','0230','0200') and res.TXN_TYPE IN ('EZYAUTH','AUTHSALE') and res.MASKED_PAN like '%"
					+ VALUE + "' and res.F003_PROCCODE in ('003000','303000') and res.F001_MID IN (:ummotomid, :fiuuMid) " + "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE, '' AS SERV_ID from PRE_AUTH as p "
					+ "where p.PAN like '%" + VALUE
					+ "' and p.STATUS IN ('E','M','A','C') and p.MID =:ummid )as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("UM CARD AUTH CARD NUMBER SEARCH Query : " + sql);
			logger.info("UM CARD AUTH CARD NUMBER VALUE : " + VALUE);

		}

		else if (txnType.equals("UM_CARD_AUTH_AP")) {

			logger.info("==========>Inside UMEzyauth APPROVAL CODE SEARCH METHOD<==============  " + txnType);

			sql = "select * from (select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','E','C','FR','R','PR') and res.H001_MTI in ('0110','0230','0200') and res.TXN_TYPE IN ('EZYAUTH','AUTHSALE') and res.F011_AUTHIDRESP like '"
					+ VALUE + "%' and res.F003_PROCCODE in ('003000','303000') and res.F001_MID IN (:ummotomid, :fiuuMid) "
					+ "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE, '' AS SERV_ID from PRE_AUTH as p "
					+ "where p.AID_RESPONSE like '" + VALUE
					+ "%' and p.STATUS IN ('E','M','A','C') and p.MID =:ummid )as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("UM CARD AUTH APPROVAL CODE SEARCH Query : " + sql);
			logger.info("UM CARD AUTH APPROVAL CODE SEARCH VALUE : " + VALUE);

		}

		else if (txnType.equals("UM_CARD_AUTH_REF")) {

			logger.info("==========>Inside UMEzyauth REFERENCE SEARCH METHOD<==============  " + txnType);

			sql = "select * from (select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','E','C','FR','R','PR') and res.H001_MTI in ('0110','0230','0200') and res.TXN_TYPE IN ('EZYAUTH','AUTHSALE') and res.F270_ORN like '"
					+ VALUE + "%' and res.F003_PROCCODE in ('003000','303000') and res.F001_MID IN (:ummotomid, :fiuuMid) "
					+ "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE, '' AS SERV_ID from PRE_AUTH as p "
					+ "where p.INVOICE_ID like '" + VALUE
					+ "%' and p.STATUS IN ('E','M','A','C') and p.MID =:ummid )as temp order by TIME_STAMP desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			logger.info("UM CARD AUTH REFERENCE SEARCH Query : " + sql);
			logger.info("UM CARD AUTH REFERENCE SEARCH VALUE : " + VALUE);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("E")) {
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("E")) {
					// fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setF270_ORN(rec[12].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[13] != null) {
				fs.setF268_CHNAME(rec[13].toString());
			}

			if (rec[19] != null) {

				fs.setCardType(rec[19].toString());

			} else {
				fs.setCardType("");

			}
			
			//service id
			
			if (rec[20] != null) {

				fs.setServiceId(rec[20].toString());

			} else {
				fs.setServiceId("");

			}
			
			
			// ezywire mid is setting in f279_hp field

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}
//ezyauthfailedtransactions -- rk added

	@Override
	public void listUMEzyauthFailedTransaction(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, Merchant currentmerchant, String txnType) {

		// TODO Auto-generated method stub
		int querySize = 0;

		List<Object[]> resultSet = null;

		logger.info("Inside listUMEzyauthMerchantTransaction : " + date + " " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		String ummotomid = null;
		String ummid = null;
		
		String fiuuMid = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();

		String sql = null;

		if (currentmerchant.getMid().getUmMotoMid() != null) {
			ummotomid = currentmerchant.getMid().getUmMotoMid();

		}

		if (currentmerchant.getMid().getUmMid() != null) {
			ummid = currentmerchant.getMid().getUmMid();

		}
		
		if (currentmerchant.getMid().getFiuuMid() != null) {
			fiuuMid = currentmerchant.getMid().getFiuuMid();

		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			try {
				LocalDate Currentdate = LocalDate.now().minusDays(5);
				LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
				from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				logger.info("From date :" + from);
				logger.info("To date :" + to);
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception while date formating " + e);
			}
		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyauth ALL " + txnType);

			// rknamefieldchange
			sql = "select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE,res.F350_CRDTYP AS PAYMENTMETHOD,res.F009_RESPCODE AS RESPONSECODE from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.TXN_TYPE ='EZYAUTH' and res.H001_MTI = '0110' and res.STATUS NOT IN ('E') and res.F009_RESPCODE NOT IN ('00') and  res.F001_MID IN (:ummotomid, :fiuuMid) and res.TIME_STAMP between :from and :to  "
					+ "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE,t.CARD_SCHEME AS PAYMENTMETHOD,r.RESPONSE_CODE AS RESPONSECODE from mobiversa.PRE_AUTH as p "
					+ "inner join mobiversa.TRANSACTION_REQUEST t on p.TRX_ID = t.TXN_ID "
					+ "inner join mobiversa.TRANSACTION_RESPONSE r on r.TXN_ID = t.TXN_ID "
					+ "where  t.POS_CONDITION_CODE ='08' and t.MTI='0100' and r.RESPONSE_CODE NOT IN ('00')  and t.MID =:ummid and t.TIME_STAMP BETWEEN :from and :to ORDER BY TIME_STAMP DESC";

			// already added MRN above

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ummid", ummid);
		sqlQuery.setString("ummotomid", ummotomid);
		sqlQuery.setString("fiuuMid", fiuuMid);

		querySize = sqlQuery.list().size();
		paginationBean.setQuerySize(String.valueOf(querySize));
		logger.info("size of failed auth search query is :: " + querySize);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		resultSet = sqlQuery.list();
		logger.info("Number of records in the List -----------: " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("E")) {
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("E")) {
					// fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}
//rec 19 is txn type 
			if (rec[20] != null) {

				fs.setCardType(rec[20].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[21] != null) {

				if (rec[19].toString().equalsIgnoreCase("MOTOPREAUTH")) {
					fs.setRespcode(rec[21].toString());
					logger.info("Resp code is : " + rec[21].toString());
					String respMsg = getResMsg(rec[21].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());

				}

				else {
					// this one for ezywire which is from tr req and tr res so that's y resp msg
					// diff
					// EZYWIREAUTH -txntype
					logger.info("Inside :  " + rec[21].toString() + " and respcode is : " + rec[21].toString());
					fs.setRespMessage(HostResponse.getHostResponse(rec[21].toString()));
					fs.setRespcode(rec[21].toString());

				}
			} else {
				fs.setRespMessage("");
				fs.setRespcode("");

			}

			// ezywire mid is setting in f279_hp field

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void listUMEzyauthFailedTransaction1(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, Merchant currentmerchant, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthMerchantTransaction : " + date + " " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		String ummotomid = null;
		String ummid = null;
		
		String fiuuMid = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();

		String sql = null;

		if (currentmerchant.getMid().getUmMotoMid() != null) {
			ummotomid = currentmerchant.getMid().getUmMotoMid();

		}

		if (currentmerchant.getMid().getUmMid() != null) {
			ummid = currentmerchant.getMid().getUmMid();

		}
		
		if (currentmerchant.getMid().getFiuuMid() != null) {
			fiuuMid = currentmerchant.getMid().getFiuuMid();

		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyauth ALL " + txnType);

			// rknamefieldchange
			sql = "select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE,res.F350_CRDTYP AS PAYMENTMETHOD,res.F009_RESPCODE AS RESPONSECODE from "
					+ "UM_ECOM_TXNRESPONSE as res "
					+ "where res.TXN_TYPE ='EZYAUTH' and res.H001_MTI = '0110' and res.STATUS NOT IN ('E') and res.F009_RESPCODE NOT IN ('00') and  res.F001_MID IN (:ummotomid, :fiuuMid) and res.TIME_STAMP between :from and :to  "
					+ "UNION "
					+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE,t.CARD_SCHEME AS PAYMENTMETHOD,r.RESPONSE_CODE AS RESPONSECODE from mobiversa.PRE_AUTH as p "
					+ "inner join mobiversa.TRANSACTION_REQUEST t on p.TRX_ID = t.TXN_ID "
					+ "inner join mobiversa.TRANSACTION_RESPONSE r on r.TXN_ID = t.TXN_ID "
					+ "where  t.POS_CONDITION_CODE ='08' and t.MTI='0100' and r.RESPONSE_CODE NOT IN ('00')  and t.MID =:ummid and t.TIME_STAMP BETWEEN :from and :to ORDER BY TIME_STAMP DESC";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ummid", ummid);
		sqlQuery.setString("ummotomid", ummotomid);
		sqlQuery.setString("fiuuMid", fiuuMid);

//		String FromDate= paginationBean.setDateFromBackend(from);
//		  String From1Date= paginationBean.setDate1FromBackend(to);
//		  String TXNTYPE = paginationBean.setTXNtype(txnType);
//		  
//		  
//		  int pageSize = 10; 
//		  int pageNumFromJsp = paginationBean.getCurrPage();
//		  logger.info("Page Number:" + pageNumFromJsp);
//		  
//		  sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
//		  sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("E")) {
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("E")) {
					// fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}
//rec 19 is txn type 
			if (rec[20] != null) {

				fs.setCardType(rec[20].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[21] != null) {

				if (rec[19].toString().equalsIgnoreCase("MOTOPREAUTH")) {
					logger.info("Resp code is : " + rec[21].toString());
					String respMsg = getResMsg(rec[21].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());

				}

				else {
					// this one for ezywire which is from tr req and tr res so that's y resp msg
					// diff
					// EZYWIREAUTH -txntype
					logger.info("Inside :  " + rec[19].toString() + " and respcode is : " + rec[21].toString());
					fs.setRespMessage(HostResponse.getHostResponse(rec[21].toString()));

				}
			} else {
				fs.setRespMessage("");

			}

			// ezywire mid is setting in f279_hp field

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void exportUMMotoTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String fiuuMid, String txnType, Merchant merchant) {

		try {
			// TODO Auto-generated method stub

			logger.info("Inside list UMMoto Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
					+ umMotoMid);
			String from = null;
			String to = null;
			String year1 = null;
			String year2 = null;
			ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
			String sql = null;

			Query sqlQuery = null;

			String motomid = umMotoMid;

			if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

				Date dt = new Date();

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				from = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = from.substring(0, from.length() - 2);
				from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
				logger.info("change date format:" + from);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				to = dateFormat1.format(dt1);
				String to1 = to.substring(0, to.length() - 2);
				to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
				logger.info("date format:" + to);

			} else {

				from = date;
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				try {
					from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
					logger.info("date format:" + date);
				} catch (ParseException e) {

					e.printStackTrace();
				}

				to = date1;
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				try {
					to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				} catch (ParseException e) {

					e.printStackTrace();
				}

			}

			logger.info("checkd date: " + from + " : " + to);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.STATUS, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME,(select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.STATUS IN ('S','H','PPA','FR','R','PR') and res.TIME_STAMP between :from  and :to ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID AS SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in ('05','05V') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid,:fiuuMid) and res.STATUS IN ('A','C') and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				UMEzyway fs = new UMEzyway();

				if (rec[0] != null || rec[0] != "") {
					fs.setF001_MID(rec[0].toString());
				} else {
					fs.setF001_MID("");
				}

				if (rec[1] != null || rec[1] != "") {
					fs.setF005_EXPDATE(rec[1].toString());
				} else {
					fs.setF005_EXPDATE("");
				}

				if (rec[2] != null) {
					if (rec[2].toString().contains(".")) {
						try {
							Double d = new Double(rec[2].toString());
							String pattern = "#,##0.00";
							DecimalFormat myFormatter = new DecimalFormat(pattern);
							String output = myFormatter.format(d);

							fs.setF007_TXNAMT(output);
						} catch (Exception e) {
							logger.error("exportUMLinkTransaction Error while Double Formatting::" + e.getMessage(), e);
						}
					} else {
						try {
							double amount = 0;
							amount = Double.parseDouble(rec[2].toString()) / 100;
							String pattern = "#,##0.00";
							DecimalFormat myFormatter = new DecimalFormat(pattern);
							String output = myFormatter.format(amount);
							fs.setF007_TXNAMT(output);
						} catch (Exception e) {
							logger.error(
									"exportUMLinkTransaction Error while Double Formatting Else::" + e.getMessage(), e);
						}

					}
				} else {
					fs.setF007_TXNAMT("");
				}

				if (rec[3] != null || rec[3] != "") {
					fs.setF354_TID(rec[3].toString());
				} else {
					fs.setF354_TID("");
				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPAN("");
				} else if (rec[4] != null || rec[4] != "") {

					String rt = null;
					String rd = null;
					String lasteightDigits = null;

					if (rec[4].toString().contains("f")) {

						int panlength = rec[4].toString().length();

						logger.info("panlength" + panlength);
						String replacefpan = rec[4].toString().replace("f", "*");
						logger.info("replacefpan" + replacefpan);

						if (panlength > 13) {

							lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

							logger.info("lasteightDigits" + lasteightDigits);

						}
						fs.setPAN(lasteightDigits);
					}

				} else {

					fs.setPAN("");
				}

				if (rec[5] != null) {
					if (rec[5].toString().equals("A")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("C")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("S")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("CB")) {
						fs.setSTATUS("CHARGE BACK");
					} else if (rec[5].toString().equals("FR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("BPS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("BPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("BPC")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("GPS")) {
						fs.setSTATUS("SETTLED");

					} else if (rec[5].toString().equals("GRF")) {
						fs.setSTATUS("VOIDED");

					} else if (rec[5].toString().equals("GPT")) {
						fs.setSTATUS("SETTLED");

					} else if (rec[5].toString().equals("GBC")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("R")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("PR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("H")) {
						fs.setSTATUS("EZYSETTLE");
					} else if (rec[5].toString().equals("PPA")) {
						fs.setSTATUS("PAYOUT");
					} else if (rec[5].toString().equals("TPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("SPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("TPS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("SPS")) {
						fs.setSTATUS("SETTLED");
					}

					else if (rec[5].toString().equals("BNA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("BNS")) {
						fs.setSTATUS("SETTLED");
					}

				} else {
					fs.setSTATUS("NOT SETTLED");
				}

				if (rec[6] != null || rec[6] != "") {

					fs.setF263_MRN(rec[6].toString());
				} else {
					fs.setF263_MRN("");
				}

				if (rec[9] != null) {
					fs.setF011_AUTHIDRESP(rec[9].toString());
				} else {
					fs.setF011_AUTHIDRESP("");
				}

				if (rec[10] != null) {
					fs.setF023_RRN(rec[10].toString());
				} else {
					fs.setF023_RRN("");
				}
				if (rec[11] != null) {
					String rd = null;
					String rt = null;
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
						rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					fs.setDate(rd);
					fs.setTime(rt);
				} else {
					fs.setDate("");
					fs.setTime("");
				}

				if (rec[12] != null) {
					fs.setMerchantName(rec[12].toString());
				} else {
					fs.setMerchantName("");
				}

				if (rec[13] != null) {
					fs.setF270_ORN(rec[13].toString());
				} else {
					fs.setF270_ORN("");
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setF268_CHNAME("");

				} else if (rec[14] != null) {
					fs.setF268_CHNAME(rec[14].toString());
				}

				// NEW FIELDS

				if (rec[17] == null || rec[17].toString().isEmpty()) {
					fs.setNetAmount("");
				} else if (rec[17] != null || rec[17] != "") {
					Double d = new Double(rec[17].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setNetAmount(output);
				}

				if (rec[18] == null || rec[18].toString().isEmpty()) {
					fs.setMdrAmt("");
				} else if (rec[18] != null || rec[18] != "") {
					Double d = new Double(rec[18].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setMdrAmt(output);
				}
				String rd = null;
				String rt = null;

				if (rec[19] == null || rec[19].toString().isEmpty()) {
					fs.setSettlementDate("");
				} else if (rec[19] != null || rec[19] != "") {

					int datelength = rec[19].toString().length();

					if (datelength == 11) {
						fs.setSettlementDate(rec[19].toString());
					}

					else if (rec[19].toString().contains("T")) {
						rd = rec[19].toString().substring(0, 8);

						try {
							rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
						} catch (ParseException e) {
							e.printStackTrace();
						}

						fs.setSettlementDate(rt);
					} else if (datelength == 10) {

						try {
							rd = new SimpleDateFormat("dd/MM/yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setSettlementDate(rd);
					} else {

						try {
							rd = new SimpleDateFormat("dd/MM/yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setSettlementDate(rd);
					}
				} else {
					fs.setSettlementDate("");
				}

				if (rec[20] == null || rec[20].toString().isEmpty()) {
					fs.setCardType("");
				} else if (rec[20] != null) {
					if (rec[21].toString().equals("NULL")) {
						fs.setCardType(rec[20].toString());
					} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
						fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
					} else {
						fs.setCardType(rec[20].toString());
					}

				} else {
					fs.setCardType("");
				}

				if (rec[22] == null || rec[22].toString().isEmpty()) {
					fs.setEzysettleAmt("");
				} else if (rec[22] != null) {

					Double d = new Double(rec[22].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setEzysettleAmt(output);

				}

				if (rec[23] == null || rec[23].toString().isEmpty() || rec[23].toString().equalsIgnoreCase("NULL")) {
					fs.setPreauthfee("");
				} else if (rec[23] != null || rec[23] != "") {
					Double d = new Double(rec[23].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setPreauthfee(output);
				}

				if (rec[24] == null || rec[24].toString().isEmpty() || rec[24].toString().equalsIgnoreCase("NULL")) {

					fs.setSubmerchantmid("");
				} else if (rec[24] != null) {
					fs.setSubmerchantmid(rec[24].toString());
				}
				
				//service id 
				if (rec[25] != null) {
					fs.setServiceId(rec[25].toString());
				} else {
					fs.setServiceId("");
				}

				fss.add(fs);
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + paginationBean.getItemList().size());
		} catch (Exception e) {
			logger.error("exportUMMotoTransaction Error::" + e.getMessage(), e);
		}

	}

	@Override
	public void exportUMEzyrecTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzyrecMid, String txnType, Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside list umEzyrecMid Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
				+ umEzyrecMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		String boostmid = null;
		String grabmid = null;
		String fpxmid = null;

		String ezyrecmid = umEzyrecMid;

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside umEzyrecMid ALL " + txnType);

			// rknamefieldchange
			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.TIME_STAMP between :from  and :to and res.STATUS IN ('S','FR','R','PR') ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.TIME_STAMP between :from  and :to and res.STATUS IN ('A','C') ) "
					+ "UNION "
					+ "(select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID, "
					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
					+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from mobiversa.FOR_SETTLEMENT a INNER JOIN mobiversa.MID m on (a.MID=m.UM_EZYREC_MID OR a.MID = m.BOOST_MID)"
					+ "INNER JOIN mobiversa.MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('BPS','BPA','BPC') AND "
					+ "(a.MID = :ezyrecmid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN " + " :from and :to ) "
					+ "UNION "
					+ "(select '' AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
					+ "WHERE (m.UM_EZYREC_MID=:ezyrecmid OR m.GRAB_MID = :grabmid) and c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
					+ "a.TIME_STAMP BETWEEN :from and :to ) " + "UNION "
					+ "(select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME "
					+ "from mobiversa.FPX_TRANSACTION f INNER JOIN mobiversa.MID m on (f.MID=m.UM_EZYREC_MID OR f.MID = m.FPX_MID) "
					+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "(f.MID = :ezyrecmid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to )) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("boostmid", boostmid);
			sqlQuery.setString("grabmid", grabmid);
			sqlQuery.setString("fpxmid", fpxmid);

		}

		else if (txnType.equals("CARD")) {

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.STATUS IN ('S','FR','R','PR') and res.TIME_STAMP between :from  and :to ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.H002_VNO ='05' and res.F003_PROCCODE in ('003000') and res.TXN_TYPE = 'EZYREC' and res.F001_MID =:ezyrecmid and res.STATUS IN ('A','C') and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);

		}

		else if (txnType.equals("BOOST")) {

			sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID, "
					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
					+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from mobiversa.FOR_SETTLEMENT a INNER JOIN mobiversa.MID m on (a.MID=m.UM_EZYREC_MID OR a.MID = m.BOOST_MID) "
					+ "INNER JOIN mobiversa.MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('BPS','BPA','BPC') AND "
					+ "(a.MID = :ezyrecmid OR a.MID = :boostmid) And a.TIME_STAMP BETWEEN "
					+ " :from and :to  order by a.TIME_STAMP desc";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("boostmid", boostmid);

		}

		else if (txnType.equals("GRABPAY")) {
			sql = "select '' AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
					+ "WHERE (m.UM_EZYREC_MID=:ezyrecmid OR m.GRAB_MID = :grabmid) and c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
					+ "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("grabmid", grabmid);

		}

		else if (txnType.equals("FPX")) {
			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME "
					+ "from mobiversa.FPX_TRANSACTION f INNER JOIN mobiversa.MID m on (f.MID=m.UM_EZYREC_MID OR f.MID = m.FPX_MID) "
					+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "(f.MID = :ezyrecmid OR f.MID = :fpxmid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to  order by f.TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("fpxmid", fpxmid);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {
					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {
				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {
				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				} else {
					fs.setCardType(rec[20].toString());
				}

			} else {
				fs.setCardType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void exportUMVccTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto vcc ALL " + txnType);
			/*
			 * sql = "select req.F001_MID,req.F007_TXNAMT,req.MASKED_PAN, " +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') "
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */

			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V' and res.txn_type ='EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID as SERVICE_ID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			if (rec[17] != null) {
				fs.setServiceId(rec[17].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyrecTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyrecTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0210','0200') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYREC' and res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");

				}
			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMLinkTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S')  and res.H002_VNO ='03'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			
			//service id
			if (rec[17] != null) {
				fs.setServiceId(rec[17].toString());
			} else {
				fs.setServiceId("");
			}
			
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	// rk added

	@Override
	public void listpreauthfee(PaginationBean<UMEzyway> paginationBean, String date, String date1) {
		// TODO Auto-generated method stub

		logger.info("Inside listpreauthfee : " + date + "     " + date1);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		sql = "select p.MID,p.TID,p.TIME_STAMP,p.TXN_AMOUNT,me.BUSINESS_NAME,p.REMAINING_AMOUNT from mobiversa.PREAUTH_FEE p "
				+ "inner join mobiversa.MID as m ON (p.MID = m.MID OR p.MID = m.MOTO_MID OR p.MID=m.UM_MID OR p.MID = m.UM_MOTO_MID OR p.MID = m.FIUU_MID) "
				+ "inner join mobiversa.MERCHANT me ON me.ID = m.MERCHANT_FK where p.TIME_STAMP between :from  and :to order by p.TIME_STAMP desc limit 1000 ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF354_TID(rec[1].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[2] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[3] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[3].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[4] != null) {
				fs.setMerchantName(rec[4].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[5] != null) {

				fs.setAuthremamt(rec[5].toString());
			} else {
				fs.setAuthremamt("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMVccTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMVccTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V' and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME, res.F260_SERVID from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.H002_VNO = '05' and res.H001_MTI in ('0290','0210','0200') and res.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";
		}
 
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			if (rec[20] != null) {
				fs.setServiceId(rec[20].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyrecTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside exportUMEzyrecTransactionAdmin Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside exportUMEzyrecTransactionAdmin ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','C','S') and res.H001_MTI in ('0210') and res.H002_VNO ='05' and res.F003_PROCCODE in ('003000')  and res.txn_type ='EZYREC' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMlinkTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','C','S') and res.H001_MTI in ('0290','0210','0200') and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[14].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[15].toString());
					} else if (rec[14].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			if (rec[18] != null) {
				fs.setServiceId(rec[18].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTransactionAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMVccTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto vcc ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','C','S') and res.H001_MTI in ('0290','0210') and res.H002_VNO ='05V'  and res.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[14].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[15].toString());
					} else if (rec[14].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and  res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			if (rec[19] != null) {
				fs.setServiceId(rec[19].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyrecTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("listUMEzyrecTxnEnqByAdmin Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyRec Enquiry ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0210') "
					+ "where res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYREC' and  res.TIME_STAMP between :from  and :to order by res.TIME_STAMP desc ";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");
				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMLinkTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMlink Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO,res.txn_type,req.F270_ORN,req.F268_CHNAME,res.F260_SERVID from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where  res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and  res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			
			if (rec[19] != null) {
				fs.setServiceId(rec[19].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMVccTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO ='05V' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and  res.time_stamp between :from  and :to order by res.time_stamp desc ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Enquiry Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.H002_VNO = '05' and req.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			if (rec[20] != null) {
				fs.setServiceId(rec[20].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyrecTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside exportUMEzyrecTxnEnqByAdmin Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside exportUMEzyrecTxnEnqByAdmin  ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','C','S') AND res.H002_VNO = '05' and res.H001_MTI in ('0210') and res.F003_PROCCODE in ('003000') and res.txn_type = 'EZYREC' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";
		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMlink Enquiry Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME, res.F260_SERVID from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.H002_VNO = '03' and res.H001_MTI in ('0290','0210','0200') and res.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";

		}

		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			
			if (rec[20] != null) {
				fs.setServiceId(rec[20].toString());
			} else {
				fs.setServiceId("");
			}
			
			
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Vcc Enquiry Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.H002_VNO = '05V' and res.H001_MTI in ('0290','0210') and res.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMEzymoto Enquiry Transaction : " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.txn_type = 'EZYMOTO'and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMEzymoto VCC Enquiry Transaction : " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '05V' and  res.txn_type = 'EZYMOTO'and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMMoto Enquiry Transaction  : " + date + "  " + date1 + "  " + txnType + "  " + umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}

			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				logger.info("respMsg" + respMsg);
				fs.setRespMessage(respMsg);
				logger.info("setRespMessage: " + fs.getRespMessage());
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMVccTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Enquiry Transaction  : " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '05V' and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}

			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				logger.info("respMsg" + respMsg);
				fs.setRespMessage(respMsg);
				logger.info("setRespMessage: " + fs.getRespMessage());
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<ForSettlement> exportAllUmTransaction(final ArrayList<Criterion> props, final String date,
			final String date1, final String txnType) {
		// logger.info("Inside listAllTransaction");
		String dat = null;
		String dat1 = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if (date == null || date.equals("")) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			dat = dateFormat.format(dt);
			dat = dat + "-01";

		} else {

			dat = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (date1 == null || date1.equals("")) {
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			dat1 = dateFormat1.format(dt1);

		} else {

			dat1 = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("check date: " + dat + " : " + dat1);

		/*
		 * if(txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
		 */
		logger.info("inside all type");
		sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
				+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID " + "INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
				+ "where a.status in ('S','A','CT','BPS','BPA','GPS') and time_stamp between :dat and :dat1"
				+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 2500";

		/*
		 * }else if(txnType.equals("UMOBILE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id where a.status in ('S','A') "
		 * +
		 * "and a.TXN_TYPE is NULL and a.HOST_TYPE='U' and a.time_stamp between :dat and :dat1 "
		 * +
		 * "group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 2500"
		 * ; }else if(txnType.equals("EZYWIRE")){ logger.info("inside card type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
		 * + " ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("BOOST")){ logger.info("inside boost type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID or a.MID=m.UM_MOTO_MID "
		 * + "INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('BPS','BPA') and a.TXN_TYPE='BOOST' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("EZYMOTO")){ logger.info("inside moto type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MOTO_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE='MOTO' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * }else if(txnType.equals("EZYREC")){ logger.info("inside EZYREC type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_EZYREC_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * }else if(txnType.equals("EZYWAY")){ logger.info("inside EZYWAY type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_EZYWAY_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("EZYCASH")){ logger.info("inside cash type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
		 * + " ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('CT') and a.TXN_TYPE='CASH' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("EZYRECPLUS")){
		 * logger.info("inside EZYRECPLUS: "+txnType); sql =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_EZYREC_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('A','S') and a.TXN_TYPE='RECPLUS' and a.time_stamp between :dat  and :dat1"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat);
		sqlQuery.setString("dat1", dat1);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("No of Records: " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			fs.setLocation(rec[0].toString());
			fs.setMerchantName(rec[1].toString().toUpperCase());

			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			fs.setDate(rd);

			// logger.info("check date: "+fs.getDate());
			fs.setStatus(rec[7].toString());
			// logger.info("check status: "+fs.getStatus());
			/*
			 * if((fs.getStatus().equals("BP") || fs.getStatus().equals("BPA") ||
			 * fs.getStatus().equals("BPS")) || (fs.getStatus()=="BP" ||
			 * fs.getStatus()=="BPS" || fs.getStatus()=="BPA") ) {
			 * //logger.info("inside if check status: "+fs.getStatus()); Double d = new
			 * Double(rec[3].toString()); d = d / 100; String pattern = "#,##0.00";
			 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
			 * myFormatter.format(d); fs.setAmount(output); } else {
			 */
			// logger.info("inside else check status: "+fs.getStatus());
			Double d = new Double(rec[3].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			// }

			fs.setAgentName(rec[4].toString());
			String rd1 = null;
			if (rec[5] != null) {
				try {
					rd1 = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
			}
			fs.setNumOfRefund(rd1);
			fs.setMid(rec[6].toString());
			/*
			 * if(rec[8]!=null){ fs.setTrxId(new BigInteger(rec[8].toString())); } else {
			 * fs.setTxnType("CARD"); }
			 */

			if (rec[8] != null) {
				fs.setTxnType(rec[8].toString());

				logger.info("fs.txntype" + fs.getTxnType());

				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("BOOST")) {
					fs.setTxnType("BOOST");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if ((fs.getTxnType().equals("EZYREC")) || (fs.getTxnType().equals("RECURRING"))) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);
		}
		return fss;
	}

	@Override
	public void motoVC(PaginationBean<MotoVCDetails> paginationBean, String date, String date1, String motoMid)
			throws Exception {

		logger.info("Inside motoVC list : " + date + "  " + date1 + "  " + motoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<MotoVCDetails> fss = new ArrayList<MotoVCDetails>();
		String sql = null;

		/*
		 * if ((date == null || date1 == null) || (date.equals("") || date1.equals("")))
		 * {
		 * 
		 * Date dt = new Date();
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
		 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
		 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
		 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
		 * logger.info("change date format:" + from);
		 * 
		 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
		 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
		 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
		 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
		 * 
		 * } else {
		 * 
		 * from = date; SimpleDateFormat dateFormat = new
		 * SimpleDateFormat("yyyy-MM-dd"); try { from = dateFormat.format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(from)); logger.info("date format:" +
		 * date); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * to = date1; SimpleDateFormat dateFormat1 = new
		 * SimpleDateFormat("yyyy-MM-dd"); try { to = dateFormat1.format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(to)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * }
		 */

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		logger.info("checkd date: " + from + " : " + to);
		sql = "select d.ID ,d.CREATED_DATE,d.NAMEONCARD,d.TXN_DETAILS,d.`STATUS`,d.AMOUNT,d.RESP_CODE,d.RESP_MSG,d.TXNID,d.TID,d.REFERENCE "
				+ "from  mobiversa.MOTO_VC_DETAILS as d where d.MID =:mid order by d.time_stamp desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("from", from); sqlQuery.setString("to", to);
		 */
		sqlQuery.setString("mid", motoMid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		String txnDetails = null;
		String tidTid = null;
		String txnAmount = null;

		for (Object[] rec : resultSet) {

			/*
			 * logger.info("ID :::::::::::::::"+rec[0].toString());
			 * logger.info("Created Date::::::"+rec[1].toString());
			 * logger.info("Name on card::::::"+rec[2].toString());
			 * logger.info("TxnDetails::::::::"+rec[3].toString());
			 * logger.info("Status::::::::::::"+rec[4].toString());
			 * logger.info("Amount::::::::::::"+rec[5].toString());
			 * logger.info("Resp Code:::::::::"+rec[6].toString());
			 * logger.info("Resp Msg::::::::::"+rec[7].toString());
			 * logger.info("TxnID:::::::::::::"+rec[8].toString());
			 */

			MotoVCDetails fs = new MotoVCDetails();

			if (rec[0] != null) {
				fs.setId(Long.parseLong(rec[0].toString()));
			} else {
				fs.setId(Long.parseLong(""));
			}

			if (rec[1] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setCreatedBy(rd);

			} else {
				fs.setCreatedBy("");
			}

			if (rec[2] != null) {
				fs.setNameOnCard(rec[2].toString());
			} else {
				fs.setNameOnCard("");
			}

			if (rec[3] != null) {
				tidTid = rec[9].toString() + rec[9].toString();
				tidTid = tidTid.replaceAll("\\s", "");
				txnDetails = AESencrp.hexaToAscii(rec[3].toString(), true);
//						logger.info(" json Object HEXA Decrypted txnDetails " + txnDetails);
				txnDetails = AESencrp.decrypt1(txnDetails, tidTid);
//						logger.info(" txnDetails " +txnDetails);
				String test = txnDetails;
				String cardNo = test.substring(0, test.indexOf("~"));
//						logger.info(" cardNo " +cardNo);

				String replaced = cardNo.replaceAll("\\b(\\d{6})\\d+(\\d{4})", "$1XXXXXX$2");
				logger.info(" replaced " + replaced);

				fs.setTxnDetails(replaced);
			} else {
				fs.setTxnDetails("");
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("ACTIVE")) {
					fs.setStatus(CommonStatus.ACTIVE);
				} else if (rec[4].toString().equals("SUBMITTED")) {
					fs.setStatus(CommonStatus.SUBMITTED);
				} else if (rec[4].toString().equals("REJECTED")) {
					fs.setStatus(CommonStatus.REJECTED);
				} else if (rec[4].toString().equals("APPROVED")) {
					fs.setStatus(CommonStatus.APPROVED);
				} else if (rec[4].toString().equals("PENDING")) {
					fs.setStatus(CommonStatus.PENDING);
				} else if (rec[4].toString().equals("CANCELLED")) {
					fs.setStatus(CommonStatus.CANCELLED);
				} else if (rec[4].toString().equals("SENT")) {
					fs.setStatus(CommonStatus.SENT);
				}
			} else {
				fs.setStatus(null);
			}

			if (rec[5] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[5].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			} else {
				fs.setAmount("");
			}

			if (rec[6] != null) {
				fs.setRespCode(rec[6].toString());
			} else {
				fs.setRespCode("");
			}

			if (rec[7] != null) {
				fs.setRespMsg(rec[7].toString());
			} else {
				fs.setRespMsg("");
			}

			if (rec[8] != null) {
				fs.setTxnId(rec[8].toString());
			} else {
				fs.setTxnId("");
			}

			if (rec[10] != null) {
				fs.setReference(rec[10].toString());
			} else {
				fs.setReference("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<MotoVCDetails> getActiveMoto(String mid) {

		List<MotoVCDetails> td = super.getSessionFactory().createCriteria(MotoVCDetails.class)
				.add(Restrictions.eq("mid", mid)).add(Restrictions.eq("status", CommonStatus.ACTIVE)).list();
		return td;

	}

	@Override
	public MotoVCDetails motoVCById(String id) {
		return (MotoVCDetails) getSessionFactory().createCriteria(MotoVCDetails.class)
				.add(Restrictions.eq("id", Long.parseLong(id))).setMaxResults(1).uniqueResult();
	}

	@Override
	public void listUMEzyauthTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			// '0290',

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','E','C') and res.txn_type = 'EZYAUTH' and res.time_stamp between :from  and :to order by res.time_stamp desc ";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("E")) {
					// fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setServiceId(rec[13].toString());
			} else {
				fs.setServiceId("");
			}
			
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

// rk added 

	@Override
	public void listUMAuthTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzywayauth ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			// '0290',

			sql = "select * from ((select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
					+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE,res.F350_CRDTYP AS PAYMENTMETHOD,res.F009_RESPCODE AS RESPONSECODE,res.MERCHANT_NAME AS MERCHANTNAME,res.F259_TXNSTATMSG AS TXNSTATMSG, res.F260_SERVID AS SERVICE_ID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.TXN_TYPE ='EZYAUTH' and res.H001_MTI = '0110' and res.STATUS NOT IN ('E') and res.F009_RESPCODE NOT IN ('00')  and res.TIME_STAMP between :from and :to ) "
					+ "UNION "
					+ "(select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
					+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
					+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
					+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE,t.CARD_SCHEME AS PAYMENTMETHOD,r.RESPONSE_CODE AS RESPONSECODE,p.MERCHANT_NAME AS MERCHANTNAME,'' AS TXNSTATMSG, '' AS SERVICE_ID from mobiversa.PRE_AUTH as p "
					+ "inner join mobiversa.TRANSACTION_REQUEST t on p.TRX_ID = t.TXN_ID "
					+ "inner join mobiversa.MID m on m.UM_MID = t.MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "inner join mobiversa.TRANSACTION_RESPONSE r on r.TXN_ID = t.TXN_ID "
					+ "where  t.POS_CONDITION_CODE ='08' and t.MTI='0100' and r.RESPONSE_CODE NOT IN ('00')  and  t.TIME_STAMP BETWEEN :from and :to )) as temp ";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

// Dynamic changes for pagination count 

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("E")) {
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("E")) {
					// fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}
//rec 19 is txn type 

			if (rec[19] != null) {

				fs.setTxnType(rec[19].toString());

			} else {
				fs.setTxnType("");

			}

			if (rec[20] != null) {

				fs.setCardType(rec[20].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[21] != null) {

				if (rec[19].toString().equalsIgnoreCase("MOTOPREAUTH")) {
					logger.info("Resp code is : " + rec[21].toString());
					String respMsg = getResMsg(rec[21].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());

				}

				else {
					// this one for ezywire which is from tr req and tr res so that's y resp msg
					// diff
					// EZYWIREAUTH -txntype
					logger.info("Inside :  " + rec[19].toString() + " and respcode is : " + rec[21].toString());
					fs.setRespMessage(HostResponse.getHostResponse(rec[21].toString()));

				}
			} else {
				fs.setRespMessage("");

			}

			if (rec[22] != null) {

				fs.setMerchantName(rec[22].toString());

			} else {
				fs.setMerchantName("");

			}

			if (rec[23] != null) {

				if (rec[19].toString().equalsIgnoreCase("MOTOPREAUTH")) {

					fs.setTxnstatMsg(rec[23].toString());
				}

				else {
// here we are taking again respcode for txnstatmsg because no such field present in tr req or res so for normal paydee enq(transaction enquiry) they are taking this field only so 		
					logger.info("Inside :  " + rec[19].toString() + " and respcode is : " + rec[21].toString());
					fs.setTxnstatMsg(HostResponse.getHostResponse(rec[21].toString()));

				}

			} else {
				fs.setTxnstatMsg("");

			}
			
			// service id
			if (rec[24] != null) {

				fs.setServiceId(rec[24].toString());

			} else {
				fs.setServiceId("");

			}

			// ezywire mid is setting in f279_hp field

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	// rk added

	@Override
	public void exportUMEzyauthTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, Merchant currentmerchant, String txnType) {

		try {
			// TODO Auto-generated method stub

			logger.info("Inside listUMEzyauthTransaction : " + date + " " + date1 + " " + txnType);
			String from = null;
			String to = null;
			String year1 = null;
			String year2 = null;
			String ummotomid = null;
			String ummid = null;
			String fiuuMid = null;

			ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
			String sql = null;

			if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

				Date dt = new Date();

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				from = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = from.substring(0, from.length() - 2);
				from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
				logger.info("change date format:" + from);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				to = dateFormat1.format(dt1);
				String to1 = to.substring(0, to.length() - 2);
				to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
				logger.info("date format:" + to);

			} else {

				from = date;
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				try {
					from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
					logger.info("date format:" + date);
				} catch (ParseException e) {

					e.printStackTrace();
				}

				to = date1;
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				try {
					to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				} catch (ParseException e) {

					e.printStackTrace();
				}

			}

			if (currentmerchant.getMid().getUmMotoMid() != null) {
				ummotomid = currentmerchant.getMid().getUmMotoMid();

			}

			if (currentmerchant.getMid().getUmMid() != null) {
				ummid = currentmerchant.getMid().getUmMid();

			}
			
			if (currentmerchant.getMid().getFiuuMid() != null) {
				fiuuMid = currentmerchant.getMid().getFiuuMid();

			}

			logger.info("checkd date: " + from + " : " + to);
			if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
				logger.info("Inside UMEzyauth ALL " + txnType);

				// rknamefieldchange
				sql = "select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
						+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP, "
						+ "res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'NULL' AS NETAMOUNT, 'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE,'MOTOPREAUTH' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from "
						+ "UM_ECOM_TXNRESPONSE as res "
						+ "where res.`STATUS` in ('A','E','C','FR','R','PR') and res.H001_MTI in ('0110','0230','0200') and res.TXN_TYPE IN ('EZYAUTH','AUTHSALE') and res.F003_PROCCODE in ('003000','303000') and res.F001_MID IN (:ummotomid,:fiuuMid) and res.TIME_STAMP between :from and :to "
						+ "UNION "
						+ "select p.`MID`AS MID,p.EXPIRY_DATE AS EXPDATE,p.AMOUNT AS AMOUNT,p.TID AS TID,p.PAN AS MASKED_PAN,p.`STATUS`AS STATUS, "
						+ " p.TRX_ID AS MRN,p.DATE AS TDT, p.TIME AS TTM,p.AID_RESPONSE AS AID_RESPONSE,p.RRN AS RRN,p.TIME_STAMP AS TIME_STAMP, "
						+ "p.INVOICE_ID AS INVOICE_ID,'NULL' AS CARD_HOLDER_NAME,'NULL' AS FRAUD_SCORE,'NULL' AS FRAUD_ID, "
						+ " 'NULL' AS NETAMOUNT,'NULL' AS MDRAMT ,'NULL' AS SETTLE_DATE, 'EZYWIREAUTH' AS TXN_TYPE, '' AS SERV_ID from PRE_AUTH as p "
						+ "where p.STATUS IN ('E','M','A','C') and p.MID =:ummid and p.TIME_STAMP BETWEEN :from and :to ";
			}

			logger.info("Query : " + sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				UMEzyway fs = new UMEzyway();

				if (rec[0] != null || rec[0] != "") {
					fs.setF001_MID(rec[0].toString());
				} else {
					fs.setF001_MID("");
				}

				if (rec[1] != null || rec[1] != "") {
					fs.setF005_EXPDATE(rec[1].toString());
				} else {
					fs.setF005_EXPDATE("");
				}

				if (rec[2] != null) {
					try {
						double amount = 0;
						amount = Double.parseDouble(rec[2].toString()) / 100;
						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(amount);
						fs.setF007_TXNAMT(output);
					} catch (Exception e) {
						logger.error("exportUMLinkTransaction Error while Double Formatting::" + e.getMessage(), e);
					}

				} else {
					fs.setF007_TXNAMT("");
				}

				if (rec[3] != null || rec[3] != "") {
					fs.setF354_TID(rec[3].toString());
				} else {
					fs.setF354_TID("");
				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPAN("");
				} else if (rec[4] != null || rec[4] != "") {

					String rt = null;
					String rd = null;
					String lasteightDigits = null;

					if (rec[4].toString().contains("f")) {

						int panlength = rec[4].toString().length();

						logger.info("panlength" + panlength);
						String replacefpan = rec[4].toString().replace("f", "*");
						logger.info("replacefpan" + replacefpan);

						if (panlength > 13) {

							lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

							logger.info("lasteightDigits" + lasteightDigits);

						}
						fs.setPAN(lasteightDigits);
					}

				} else {

					fs.setPAN("");
				}

				if (rec[5] != null) {
					if (rec[5].toString().equals("A")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("C")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("E")) {
						fs.setSTATUS("PREAUTH");
					} else if (rec[5].toString().equals("E")) {
						// fs.setSTATUS("TO SALE");
						fs.setSTATUS("PREAUTH");
					} else if (rec[5].toString().equals("CB")) {
						fs.setSTATUS("CHARGE BACK");
					} else if (rec[5].toString().equals("R")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("PR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("FR")) {
						fs.setSTATUS("REFUNDED");
					}

				} else {
					fs.setSTATUS("");
				}

				if (rec[6] != null || rec[6] != "") {

					fs.setF263_MRN(rec[6].toString());
				} else {
					fs.setF263_MRN("");
				}

				if (rec[9] != null) {
					fs.setF011_AUTHIDRESP(rec[9].toString());
				} else {
					fs.setF011_AUTHIDRESP("");
				}

				if (rec[10] != null) {
					fs.setF023_RRN(rec[10].toString());
				} else {
					fs.setF023_RRN("");
				}
				if (rec[11] != null) {
					String rd = null;
					String rt = null;
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
						rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					fs.setDate(rd);
					fs.setTime(rt);
				} else {
					fs.setDate("");
					fs.setTime("");
				}

				if (rec[13] != null) {
					fs.setF270_ORN(rec[13].toString());
				} else {
					fs.setF270_ORN("");
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setF268_CHNAME("");

				} else if (rec[14] != null) {
					fs.setF268_CHNAME(rec[14].toString());
				}

				if (rec[19] != null) {

					fs.setCardType(rec[19].toString());

				} else {
					fs.setCardType("");

				}
				
				// service id
				if (rec[20] != null) {

					fs.setServiceId(rec[20].toString());

				} else {
					fs.setServiceId("");

				}

				fss.add(fs);
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + paginationBean.getItemList().size());

		} catch (Exception e) {
			logger.error("exportUMEzyauthTransaction Error while Double Formatting Else::" + e.getMessage(), e);
		}

	}

	@Override
	public void exportUMEzyauthTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.MERCHANT_NAME,res.F350_CRDTYP, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.`STATUS` in ('A','S','C') and res.H001_MTI in ('0110') and res.time_stamp between :from  and :to order by res.time_stamp desc limit 10000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}
			
			
			//service id
			
			if (rec[14] != null) {
				fs.setServiceId(rec[14].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listBoostTransaction(PaginationBean<BoostDailyRecon> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		if (txnType.equalsIgnoreCase("ALL")) {

			logger.info("Boost Transaction : " + txnType);

			Session session = sessionFactory.getCurrentSession();

			List users = session

					.createQuery("from BoostDailyRecon where payment ='S'")
					.setMaxResults(paginationBean.getItemsPerPage()).setFirstResult(paginationBean.getStartIndex())
					.list();

			paginationBean.setItemList(users);

		}

		if (txnType.equalsIgnoreCase("Search")) {

			logger.info("Boost Transaction : " + txnType);
			logger.info("Boost Transaction Date : " + date);

			Session session = sessionFactory.getCurrentSession();

			List users = session

					.createQuery("from BoostDailyRecon where payment ='S' and  date LIKE :date")
					.setParameter("date", "%" + date + "%").setMaxResults(paginationBean.getItemsPerPage())
					.setFirstResult(paginationBean.getStartIndex()).list();

			paginationBean.setItemList(users);

		}

	}

	@Override
	public BoostDailyRecon loadBoostSettlement(String date) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date);

		BoostDailyRecon boostss = new BoostDailyRecon();

		String sql2 = "select sum(b.MDRAMOUNT) ,sum(b.MDRREBATEAMOUNT), sum(b.TXNAMOUNT), sum(b.NETAMOUNT)"
				+ "from BOOST_DLY_RECON b where b.PAYMENT='S' and b.TIME_STAMP LIKE '" + date + "%' ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMdrAmount(rec[0].toString());
			} else {
				boostss.setMdrAmount("");
			}

			if (rec[1] != null) {
				boostss.setMdrRebateAmount(rec[1].toString());
			} else {
				boostss.setMdrRebateAmount("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setNetAmount(rec[3].toString());
			} else {
				boostss.setNetAmount("");
			}

		}

		boostss.setDate(date);

		return boostss;

	}

	@Override
	public void listBoostSettlement(PaginationBean<BoostDailyRecon> paginationBean, String date) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + date);

		ArrayList<BoostDailyRecon> fss = new ArrayList<BoostDailyRecon>();
		String sql = null;

		sql = "select sum(b.MDRAMOUNT) ,sum(b.MDRREBATEAMOUNT), sum(b.TXNAMOUNT), sum(b.NETAMOUNT),b.MERCHANTNAME "
				+ "from BOOST_DLY_RECON b where b.PAYMENT='S' and b.TIME_STAMP LIKE '" + date + "%' group by b.MID";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BoostDailyRecon boostss = new BoostDailyRecon();

			if (rec[0] != null) {
				boostss.setMdrAmount(rec[0].toString());
			} else {
				boostss.setMdrAmount("");
			}

			if (rec[1] != null) {
				boostss.setMdrRebateAmount(rec[1].toString());
			} else {
				boostss.setMdrRebateAmount("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setNetAmount(rec[3].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[4] != null) {
				boostss.setMerchantName(rec[4].toString());
			} else {
				boostss.setMerchantName("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public SettlementMDR loadSettlement(String date, String date1) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date + ":::" + date1);

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),MAX(b.SETTLEMENTDATE)  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "'";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}
			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public SettlementMDR loadmobiliteSettlement(String date, String date1) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date);

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),MAX(b.SUB_SETTLE_DATE)  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and  b.SUB_SETTLE_DATE BETWEEN '" + date + "' AND '"
				+ date1 + "'";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public SettlementMDR loadLatestmobiliteSettlement() {

//				date="2020-01-29";

		logger.info("loadLatestmobiliteSettlement : ");

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),MAX(b.SUB_SETTLE_DATE) "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and b.SUB_SETTLE_DATE = ( "
				+ "SELECT MAX(b.SUB_SETTLE_DATE) FROM SETTLEMENT_MDR ) ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public BizAppSettlement loadbizappSettlement(String date, String date1) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date);

		BizAppSettlement boostss = new BizAppSettlement();

		/*
		 * String sql2 =
		 * "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT)  "
		 * +
		 * "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE LIKE '"
		 * +date+"%' ";
		 */
		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),MAX(b.SETTLEMENTDATE)  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "' ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setSettlementDate(rec[5].toString());
			} else {
				boostss.setSettlementDate("");
			}

		}

		return boostss;

	}

	@Override
	public void listSettlement(PaginationBean<SettlementMDR> paginationBean, String date, String date1) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listSettlement : " + date + date1);

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),b.MERCHANTNAME,b.SETTLETYPE, b.SETTLEMENTDATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "' group by b.MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSettleType(rec[6].toString());
			} else {
				boostss.setSettleType("");
			}
			if (rec[7] != null) {
				boostss.setSettlementDate(rec[7].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listmobiliteSettlement(PaginationBean<SettlementMDR> paginationBean, String date, String date1) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + date + ":::" + date1);

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),b.SUB_MERCHANTNAME,b.SUB_SETTLETYPE,b.SUB_SETTLE_DATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and  b.SUB_SETTLE_DATE BETWEEN '" + date + "' AND '"
				+ date1 + "' " + "group by b.SUB_MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setSubMerchantName(rec[5].toString());
			} else {
				boostss.setSubMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSubSettleType(rec[6].toString());
			} else {
				boostss.setSubSettleType("");
			}

			if (rec[7] != null) {
				boostss.setSubSettleDate(rec[7].toString());
			} else {
				boostss.setSubSettleDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listLatestmobiliteSettlement(PaginationBean<SettlementMDR> paginationBean) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listLatestmobiliteSettlement : ");

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),b.SUB_MERCHANTNAME,b.SUB_SETTLETYPE,b.SUB_SETTLE_DATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and  b.SUB_SETTLE_DATE = ( "
				+ "SELECT MAX(b.SUB_SETTLE_DATE) FROM SETTLEMENT_MDR ) group by b.SUB_MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setSubMerchantName(rec[5].toString());
			} else {
				boostss.setSubMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSubSettleType(rec[6].toString());
			} else {
				boostss.setSubSettleType("");
			}

			if (rec[7] != null) {
				boostss.setSubSettleDate(rec[7].toString());
			} else {
				boostss.setSubSettleDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listbizappSettlement(PaginationBean<BizAppSettlement> paginationBean, String date, String date1) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listbizappSettlement : " + date + "::" + date1);

		ArrayList<BizAppSettlement> fss = new ArrayList<BizAppSettlement>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),b.MERCHANTNAME,b.SETTLEMENTDATE  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "' group by b.MERCHANTID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BizAppSettlement boostss = new BizAppSettlement();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}

			if (rec[6] != null) {
				boostss.setSettlementDate(rec[6].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTransactionByAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzymoto ALL " + txnType);

		/*
		 * sql =
		 * "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
		 * +
		 * "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from "
		 * + "mobiversa.UM_ECOM_TXNRESPONSE as res " +
		 * "inner join mobiversa.MID as m on res.F001_MID IN ("+strUm+") " +
		 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
		 * "and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' " +
		 * "where res.`STATUS` in ('S') and res.txn_type ='"+txnType+"' and " +
		 * "res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000"
		 * ;
		 */

		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,mt.ID,res.H002_VNO,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_MOTO_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' and "
				+ "res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setMerchantId(rec[13].toString());
			}
			if (rec[15] != null) {
				if ((rec[14].toString().equals("05V")) && (rec[15].toString().equals("EZYMOTO"))) {
					fs.setTxnType("EZYMOTO VCC");
				} else {
					fs.setTxnType(rec[15].toString());
				}
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransactionAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzyway ALL " + txnType);

		/*
		 * sql =
		 * "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
		 * +
		 * "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from "
		 * + "mobiversa.UM_ECOM_TXNRESPONSE as res " +
		 * "inner join mobiversa.MID as m on res.F001_MID IN ("+strUm+") " +
		 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
		 * "and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' " +
		 * "where res.`STATUS` in ('S') and res.txn_type ='"+txnType+"' and " +
		 * "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000"
		 * ;
		 */
		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_MOTO_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' and "
				+ "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				logger.info("H002_VNO : " + rec[13].toString());
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[14] != null) {

				fs.setTxnType(rec[14].toString());
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransactionAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside exportUMEzywayTransactionAgent : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzyway ALL " + txnType);

		/*
		 * sql =
		 * "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
		 * +
		 * "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from "
		 * + "mobiversa.UM_ECOM_TXNRESPONSE as res " +
		 * "inner join mobiversa.MID as m on res.F001_MID IN ("+strUm+") " +
		 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
		 * "and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' " +
		 * "where res.`STATUS` in ('S') and res.txn_type ='"+txnType+"' and " +
		 * "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000"
		 * ;
		 */
		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_EZYWAY_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and res.H002_VNO = '03' and "
				+ "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				logger.info("H002_VNO : " + rec[13].toString());
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[14] != null) {

				fs.setTxnType(rec[14].toString());
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void searchAllForSettlement(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);
		String mid = null, motoMid = null, ezywayMid = null, ezyrecMid = null, ezypassMid = null;
		String umMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID,a.LOCATION"
					+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
					+ "a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID or "
					+ "a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in "
					+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and "
					+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 5000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("motoMid", motoMid);
			sqlQuery.setString("ezywayMid", ezywayMid);
			sqlQuery.setString("ezyrecMid", ezyrecMid);
			sqlQuery.setString("ezypassMid", ezypassMid);
			sqlQuery.setString("umMid", umMid);

		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID,"
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID "
					+ "or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in "
					+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between "
					+ ":fromDate and :toDate order by a.TIME_STAMP desc limit 5000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("motoMid", motoMid);
			sqlQuery.setString("ezywayMid", ezywayMid);
			sqlQuery.setString("ezyrecMid", ezyrecMid);
			sqlQuery.setString("ezypassMid", ezypassMid);
			sqlQuery.setString("umMid", umMid);
		} else {
			logger.info("status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,"
					+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
					+ "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
					+ "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS "
					+ "in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in "
					+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) order by "
					+ "a.TIME_STAMP desc limit 5000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("motoMid", motoMid);
			sqlQuery.setString("ezywayMid", ezywayMid);
			sqlQuery.setString("ezyrecMid", ezyrecMid);
			sqlQuery.setString("ezypassMid", ezypassMid);
			sqlQuery.setString("umMid", umMid);
		}

		logger.info("Query : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null, rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}
			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
			}
			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			if (rec[5] != null) {
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setLocation(rec[7].toString());
			}
			if (rec[8] != null) {
				fs.setTrxId(new BigInteger(rec[8].toString()));
			}
			if (rec[9] != null) {
				fs.setStan(rec[9].toString());
			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("UMOBILE EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("UMOBILE EZYREC");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("UMOBILE EZYCASH");
					}
				} else {
					fs.setTxnType("UMOBILE");
				}
			} else {
				if (rec[10] != null) {
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					}
				} else {
					fs.setTxnType("EZYWIRE");
				}
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType, Merchant merchant) {
		try {
			// TODO Auto-generated method stub

			logger.info("Inside list UMlink Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
					+ umMotoMid);
			String from = null;
			String to = null;
			String year1 = null;
			String year2 = null;
			ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
			String sql = null;
			Query sqlQuery = null;

			String motomid = umMotoMid;
			
			String fiuuMid = merchant.getMid().getFiuuMid() == null?"":merchant.getMid().getFiuuMid();
			logger.info("fiuu Mid : "+fiuuMid);
			
			

			if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

				Date dt = new Date();

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				from = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = from.substring(0, from.length() - 2);
				from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
				logger.info("change date format:" + from);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				to = dateFormat1.format(dt1);
				String to1 = to.substring(0, to.length() - 2);
				to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
				logger.info("date format:" + to);

			} else {

				from = date;
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				try {
					from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
					logger.info("date format:" + date);
				} catch (ParseException e) {

					e.printStackTrace();
				}

				to = date1;
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				try {
					to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				} catch (ParseException e) {

					e.printStackTrace();
				}

			}

//bnplexportlink

			logger.info("checkd date: " + from + " : " + to);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP , 'NULL' AS BANK_NAME , (select st.EZYSETTLE_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS EZYSETTLEAMOUNT,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid, :fiuuMid) and res.STATUS IN ('S','H','PPA','FR','R','PR') and res.TIME_STAMP between :from  and :to ) "
					+ "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS PREAUTH_FEE,res.SUB_MERCHANT_MID AS SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.H002_VNO in('03','05') and res.F003_PROCCODE in ('003000','303000') and res.TXN_TYPE in ('EZYMOTO','AUTHSALE') and res.F001_MID IN (:motomid, :fiuuMid) and res.STATUS IN ('A','C') and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("fiuuMid", fiuuMid);

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				UMEzyway fs = new UMEzyway();

				if (rec[0] != null || rec[0] != "") {
					fs.setF001_MID(rec[0].toString());
				} else {
					fs.setF001_MID("");
				}

				if (rec[1] != null || rec[1] != "") {
					fs.setF005_EXPDATE(rec[1].toString());
				} else {
					fs.setF005_EXPDATE("");
				}

				if (rec[2] != null) {
					if (rec[2].toString().contains(".")) {
						try {
							Double d = new Double(rec[2].toString());
							String pattern = "#,##0.00";
							DecimalFormat myFormatter = new DecimalFormat(pattern);
							String output = myFormatter.format(d);

							fs.setF007_TXNAMT(output);
						} catch (Exception e) {
							logger.error("exportUMLinkTransaction Error while Double Formatting::" + e.getMessage(), e);
						}
					} else {
						try {
							double amount = 0;
							amount = Double.parseDouble(rec[2].toString()) / 100;
							String pattern = "#,##0.00";
							DecimalFormat myFormatter = new DecimalFormat(pattern);
							String output = myFormatter.format(amount);
							fs.setF007_TXNAMT(output);
						} catch (Exception e) {
							logger.error(
									"exportUMLinkTransaction Error while Double Formatting Else::" + e.getMessage(), e);
						}

					}
				} else {
					fs.setF007_TXNAMT("");
				}

				if (rec[3] != null || rec[3] != "") {
					fs.setF354_TID(rec[3].toString());
				} else {
					fs.setF354_TID("");
				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPAN("");
				} else if (rec[4] != null || rec[4] != "") {

					String rt = null;
					String rd = null;
					String lasteightDigits = null;

					if (rec[4].toString().contains("f")) {

						int panlength = rec[4].toString().length();

						logger.info("panlength" + panlength);
						String replacefpan = rec[4].toString().replace("f", "*");
						logger.info("replacefpan" + replacefpan);

						if (panlength > 13) {

							lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

							logger.info("lasteightDigits" + lasteightDigits);

						}
						fs.setPAN(lasteightDigits);
					}

				} else {

					fs.setPAN("");
				}

				if (rec[5] != null) {
					if (rec[5].toString().equals("A")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("C")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("S")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("CB")) {
						fs.setSTATUS("CHARGE BACK");
					} else if (rec[5].toString().equals("FR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("BPS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("BPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("BPC")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("GPS")) {
						fs.setSTATUS("SETTLED");

					} else if (rec[5].toString().equals("GRF")) {
						fs.setSTATUS("VOIDED");

					} else if (rec[5].toString().equals("GPT")) {
						fs.setSTATUS("SETTLED");

					} else if (rec[5].toString().equals("GBC")) {
						fs.setSTATUS("VOIDED");
					} else if (rec[5].toString().equals("R")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("PR")) {
						fs.setSTATUS("REFUNDED");
					} else if (rec[5].toString().equals("H")) {
						fs.setSTATUS("EZYSETTLE");
					} else if (rec[5].toString().equals("PPA")) {
						fs.setSTATUS("PAYOUT");
					} else if (rec[5].toString().equals("TPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("SPA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("TPS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("SPS")) {
						fs.setSTATUS("SETTLED");
					}

					else if (rec[5].toString().equals("BNA")) {
						fs.setSTATUS("NOT SETTLED");
					} else if (rec[5].toString().equals("BNS")) {
						fs.setSTATUS("SETTLED");
					} else if (rec[5].toString().equals("BNC")) {
						fs.setSTATUS("VOIDED");
					}
				} else {
					fs.setSTATUS("NOT SETTLED");
				}

				if (rec[6] != null || rec[6] != "") {

					fs.setF263_MRN(rec[6].toString());
				} else {
					fs.setF263_MRN("");
				}

				if (rec[9] != null) {
					fs.setF011_AUTHIDRESP(rec[9].toString());
				} else {
					fs.setF011_AUTHIDRESP("");
				}

				if (rec[10] != null) {
					fs.setF023_RRN(rec[10].toString());
				} else {
					fs.setF023_RRN("");
				}
				if (rec[11] != null) {
					String rd = null;
					String rt = null;
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
						rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					fs.setDate(rd);
					fs.setTime(rt);
				} else {
					fs.setDate("");
					fs.setTime("");
				}

				if (rec[12] != null) {
					fs.setMerchantName(rec[12].toString());
				} else {
					fs.setMerchantName("");
				}

				if (rec[13] != null) {
					fs.setF270_ORN(rec[13].toString());
				} else {
					fs.setF270_ORN("");
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setF268_CHNAME("");

				} else if (rec[14] != null) {
					fs.setF268_CHNAME(rec[14].toString());
				}

				// NEW FIELDS

				if (rec[17] == null || rec[17].toString().isEmpty()) {
					fs.setNetAmount("");
				} else if (rec[17] != null || rec[17] != "") {
					Double d = new Double(rec[17].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setNetAmount(output);
				}

				if (rec[18] == null || rec[18].toString().isEmpty()) {
					fs.setMdrAmt("");
				} else if (rec[18] != null || rec[18] != "") {
					Double d = new Double(rec[18].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setMdrAmt(output);
				}
				String rd = null;
				String rt = null;

				if (rec[19] == null || rec[19].toString().isEmpty()) {
					fs.setSettlementDate("");
				} else if (rec[19] != null || rec[19] != "") {

					int datelength = rec[19].toString().length();

					if (datelength == 11) {
						fs.setSettlementDate(rec[19].toString());
					}

					else if (rec[19].toString().contains("T")) {
						rd = rec[19].toString().substring(0, 8);

						try {
							rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
						} catch (ParseException e) {
							e.printStackTrace();
						}

						fs.setSettlementDate(rt);
					} else if (datelength == 10) {

						try {
							rd = new SimpleDateFormat("dd/MM/yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setSettlementDate(rd);
					} else {

						try {
							rd = new SimpleDateFormat("dd/MM/yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						fs.setSettlementDate(rd);
					}
				} else {
					fs.setSettlementDate("");
				}

				if (rec[20] == null || rec[20].toString().isEmpty()) {
					fs.setCardType("");
				} else if (rec[20] != null) {
					if (rec[21].toString().equals("NULL")) {
						fs.setCardType(rec[20].toString());
					} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
						fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
					} else {
						fs.setCardType(rec[20].toString());
					}

				} else {
					fs.setCardType("");
				}

				if (rec[22] == null || rec[22].toString().isEmpty()) {
					fs.setEzysettleAmt("");
				} else if (rec[22] != null) {

					Double d = new Double(rec[22].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setEzysettleAmt(output);

				}

				if (rec[23] == null || rec[23].toString().isEmpty() || rec[23].toString().equalsIgnoreCase("NULL")) {
					fs.setPreauthfee("");
				} else if (rec[23] != null || rec[23] != "") {
					Double d = new Double(rec[23].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					// logger.info(d + " " + pattern + " " + output);
					fs.setPreauthfee(output);
				}

				if (rec[24] == null || rec[24].toString().isEmpty() || rec[24].toString().equalsIgnoreCase("NULL")) {

					fs.setSubmerchantmid("");
				} else if (rec[24] != null) {
					fs.setSubmerchantmid(rec[24].toString());
				}
				
				//service id
				if (rec[25] == null || rec[25].toString().isEmpty() || rec[25].toString().equalsIgnoreCase("NULL")) {

					fs.setServiceId("");
				} else if (rec[25] != null) {
					fs.setServiceId(rec[25].toString());
				}

				fss.add(fs);
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + paginationBean.getItemList().size());

		} catch (Exception e) {
			logger.error("exportUMLinkTransaction Catch Exception::" + e.getMessage(), e);
		}

	}

	@Override
	public Merchant getMerchantTypeByID(String id) {

		// logger.info("check tid: "+motoTid);

		return (Merchant) getSessionFactory().createCriteria(Merchant.class)
				.add(Restrictions.eq("id", Long.parseLong(id))).setMaxResults(1).uniqueResult();
	}

	@Override
	public List<AgentVolumeData> agentVolumeUM(StringBuffer agentID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;

		sql = "select month(a.time_stamp) , sum(a.F007_TXNAMT) TotalAmount ,  f.AGID_FK from UM_ECOM_TXNRESPONSE a "
				+ "INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID  INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
				+ "where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month) and now() "
				+ "and a.status='S' and f.AGID_FK in (" + agentID + ") "
				+ "group by month(a.time_stamp),f.AGID_FK order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[2].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

		}

		return agentVolumeDataList;
	}

	@Override
	public List<AgentVolumeData> agentVolumeForsettle(StringBuffer agentID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount ,  f.AGID_FK from FOR_SETTLEMENT a "
				+ "INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or "
				+ "a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
				+ "where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month) and now() "
				+ "and a.status='S' and f.AGID_FK in (" + agentID + ") "
				+ "group by month(a.time_stamp),f.AGID_FK order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[2].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

		}

		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMidList(StringBuffer listMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID IN (" + listMid
				+ ")  group by " + "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[2].toString().toLowerCase());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeDataList.add(agentVolumeData);

			}

		}

		return agentVolumeDataList;

	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMid1List(StringBuffer listMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID IN (" + listMid
				+ ") group by " + "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[2].toString().toLowerCase());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeDataList.add(agentVolumeData);

			}

		}

		return agentVolumeDataList;
	}

	@Override
	public Merchant loadMerchantByID(BigInteger merchantId) {
		// logger.info("MerchantDaoImpl:loadMerchant");
		Long id = merchantId.longValue();
		return (Merchant) getSessionFactory().createCriteria(Merchant.class).add(Restrictions.eq("id", id))
				.setMaxResults(1).uniqueResult();
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getHotelMerchantVolByUMid(StringBuffer uMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		List<String> count1 = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MIDList: " + uMid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		/*
		 * sql="select month(a.TXN_DATE) montha, sum(a.AMOUNT)  TotalAmount , a.MERCHANT_NAME AS MerchantName,a.MERCHANT_ID  "
		 * + "from TRANSACTION_SUMMARY a " +
		 * "WHERE  a.MID IN ("+uMid+") and a.TXN_DATE " +
		 * "between DATE_SUB(now(), INTERVAL 4 month) and now() group by " +
		 * "month(a.TXN_DATE) having montha in ("+month+") order by a.TXN_DATE desc";
		 */
		sql = "select month(a.TXN_DATE) montha, sum(a.AMOUNT)  TotalAmount , a.MERCHANT_NAME AS MerchantName,a.MERCHANT_ID, a.MID "
				+ "from TRANSACTION_SUMMARY a " + "WHERE  a.MID IN (" + uMid + ") and a.TXN_DATE "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() group by a.MID, "
				+ "month(a.TXN_DATE) having montha in (" + month + ") order by a.TXN_DATE desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgentName(rec[2].toString());
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

		}

		return agentVolumeDataList;
	}

	@Override
	public void listFPXTransaction(PaginationBean<FpxTransaction> paginationBean, String from, String to, String VALUE,
			String TXNTYPE) {

//      date="2020-01-29";

// TODO Auto-generated method stub

		String searchvalue = VALUE;
		Query sqlQuery = null;
		logger.info("Inside listFPXTransaction : " + from + ":::" + to);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
// Date date = new Date();

		int year = calendar.getWeekYear();
// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		int daybefore1 = date.getDate() + 1;
		String currentdate = null;
		String currentdate1 = null;

		String dateorg1 = daybefore + "/" + mon + "/" + year;
		String dateorg2 = daybefore1 + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1);
		try {
			currentdate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			currentdate1 = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			System.out.println(" currentdate   " + currentdate);
			System.out.println(" currentdate 1  " + currentdate1);
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		logger.info("current date " + currentdate);

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * +
		 * "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
		 * + "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
		 * + "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID " +
		 * "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " +
		 * "where b.TX_DATE LIKE '"+date+"%' ";
		 */

//sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
//      + "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
//      + "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
//      + "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
//      + "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID "
//      + "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " + "where b.TIME_STAMP BETWEEN :from AND :to "
//+ "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc";

// new

		if (TXNTYPE.equals("NULL")) {
			sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
					+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from mobiversa.FPX_TRANSACTION b  "
//					+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
//					+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
//					+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
//                    + "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
					+ "INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_ID = m.ID " + "where b.TIME_STAMP LIKE '"
					+ currentdate + "%' " + "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

			logger.info("Querylast : " + sql);

			String FromDate = paginationBean.setDateFromBackend(currentdate);
			String From1Date = paginationBean.setDate1FromBackend(currentdate1);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (TXNTYPE.equals("FPX1")) {

			logger.info("<=== SEARCH FPX By REF No ===>");

			sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
					+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from mobiversa.FPX_TRANSACTION b  "
//					+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
//					+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
//					+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
					+ "INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_ID = m.ID " + "where b.SELLERORDERNO LIKE '"
					+ searchvalue + "%' " + "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc";

			logger.info("Search Fpx Query for Ref No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Reference Number in Query :" + searchvalue);

		} else if (TXNTYPE.equals("FPX2")) {

			logger.info("<=== SEARCH FPX BY APPROVAL CODE ===>");

			sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
					+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from mobiversa.FPX_TRANSACTION b  "
//					+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
//					+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
//					+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
					+ "INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_ID = m.ID " + "where b.FPXTXNID LIKE '"
					+ searchvalue + "%' " + "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc";

			logger.info("Search Fpx Query for Approval Code: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Approval Code in Query :" + searchvalue);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {

				try {
					String Tdate;
					Tdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("dd-MMM-yyyy").parse(rec[0].toString()));
					boostss.setTxDate(Tdate);
				} catch (ParseException e) {

					e.printStackTrace();
				}

			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {

				if (rec[13].toString().equals("S")) {
					boostss.setStatus("SETTLED");
				} else if (rec[13].toString().equals("H")) {
					boostss.setStatus("HOLD");
				}

			} else {
				boostss.setStatus("");
			}

			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			} else {
				boostss.setSubMerchantMID("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
// paginationBean.setTotalRowCount(fss.size());

	}

	// search

	@Override
	public void listFPXTransactionsearch(PaginationBean<FpxTransaction> paginationBean, String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listFPXTransaction : " + from + ":::" + to);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * +
		 * "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
		 * + "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
		 * + "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID " +
		 * "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " +
		 * "where b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from mobiversa.FPX_TRANSACTION b  "
//				+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
//				+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
//				+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
				+ "INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_ID = m.ID "
				+ "where b.TIME_STAMP BETWEEN :from AND :to "
				+ "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		logger.info("Querylast : " + sql);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				if (rec[13].toString().equals("S")) {
					boostss.setStatus("SETTLED");
				} else if (rec[13].toString().equals("H")) {
					boostss.setStatus("HOLD");
				}
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			} else {
				boostss.setSubMerchantMID("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listFPXTransactionsearchexport(PaginationBean<FpxTransaction> paginationBean, String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listFPXTransaction : " + from + ":::" + to);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * +
		 * "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
		 * + "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
		 * + "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID " +
		 * "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " +
		 * "where b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from mobiversa.FPX_TRANSACTION b  "
//				+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
//				+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
//				+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
				+ "INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_ID = m.ID "
				+ "where b.TIME_STAMP BETWEEN :from AND :to "
				+ "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc limit 10000 ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		logger.info("Querylast : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				if (rec[13].toString().equals("S")) {
					boostss.setStatus("SETTLED");
				} else if (rec[13].toString().equals("H")) {
					boostss.setStatus("HOLD");
				}
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			} else {
				boostss.setSubMerchantMID("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listFPXTransactionByMidexport(PaginationBean<FpxTransaction> paginationBean, Merchant merchant,
			String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + ":::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}
			if (midDetails.getUmEzywayMid() != null) {
				if (!midDetails.getUmEzywayMid().isEmpty()) {
					midList.add(midDetails.getUmEzywayMid());
				}

			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * + "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,'"+ merchantName
		 * +"',b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * + "where b.MID IN ("+str+") AND  b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,'" + merchantName
				+ "',b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from FPX_TRANSACTION b  "
				+ "where b.MID IN (" + str + ") AND  b.TIME_STAMP BETWEEN :from AND :to limit 10000 ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				if (rec[13].toString().equals("S")) {
					boostss.setStatus("SETTLED");
				} else if (rec[13].toString().equals("H")) {
					boostss.setStatus("HOLD");
				}
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			} else {
				boostss.setSubMerchantMID("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listFPXTransactionByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant, String from,
			String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + ":::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}
			if (midDetails.getUmEzywayMid() != null) {
				if (!midDetails.getUmEzywayMid().isEmpty()) {
					midList.add(midDetails.getUmEzywayMid());
				}

			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * + "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,'"+ merchantName
		 * +"',b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * + "where b.MID IN ("+str+") AND  b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,'" + merchantName
				+ "',b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from FPX_TRANSACTION b  "
				+ "where b.MID IN (" + str
				+ ") AND  b.TIME_STAMP BETWEEN :from AND :to order by b.TIME_STAMP desc limit 10000 ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				try {
					String Tdate;
					Tdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("dd-MMM-yyyy").parse(rec[0].toString()));
					boostss.setTxDate(Tdate);
				} catch (ParseException e) {

					e.printStackTrace();
				}
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				if (rec[13].toString().equals("S")) {
					boostss.setStatus("SETTLED");
				} else if (rec[13].toString().equals("H")) {
					boostss.setStatus("HOLD");
				}
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			} else {
				boostss.setSubMerchantMID("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listMerchantFPXTransactionByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant,
			String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + "::" + to);
		MID midDetails = merchant.getMid();
		logger.info(" mid : " + midDetails.getMid());
		logger.info(" moto mid : " + midDetails.getMotoMid());
		logger.info(" ezypassmid : " + midDetails.getEzypassMid());
		logger.info(" ezywaymid : " + midDetails.getEzywayMid());
		logger.info(" ezyrecmid : " + midDetails.getEzyrecMid());
		logger.info(" ummid : " + midDetails.getUmMid());
		logger.info(" ummotomid : " + midDetails.getUmMotoMid());
		logger.info(" umezywaymid : " + midDetails.getUmEzywayMid());

		String umezywaymid = null;
		String mid = null;
		String motomid = null;
		String ezypassmid = null;
		String ezywaymid = null;
		String ezyrecmid = null;
		String ummotomid = null;
		String ummid = null;

		if (merchant.getMid().getUmEzywayMid() != null && !(merchant.getMid().getUmEzywayMid().isEmpty())) {
			if (merchant.getMid().getUmEzywayMid().equals("000000111021591")) {
				String Ezywaymid = "000000000021591";
				umezywaymid = Ezywaymid;
			} else if (merchant.getMid().getUmEzywayMid() != null) {
				umezywaymid = merchant.getMid().getUmEzywayMid();
			}
		}

		if (merchant.getMid().getEzywayMid() != null) {
			ezywaymid = merchant.getMid().getEzywayMid();
		}

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motomid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassmid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			ummotomid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecmid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}

		logger.info("before array list");
		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String currentdate = null;

		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1);
		try {
			currentdate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			System.out.println(" currentdate   " + currentdate);
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		logger.info("current date " + currentdate);

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from FPX_TRANSACTION b  "
				+ "where b.DEBITAUTHCODE = '00' AND b.CREDITAUTHCODE = '00' AND b.MID IN (:ummid,:ezyrecmid,:ummotomid,:ezypassmid,:ezywaymid,:umezywaymid,:motomid,:mid) AND  b.TIME_STAMP LIKE '"
				+ currentdate + "%'  order by b.TIME_STAMP desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		sqlQuery.setString("ummid", ummid);
		sqlQuery.setString("ezyrecmid", ezyrecmid);
		sqlQuery.setString("ummotomid", ummotomid);
		sqlQuery.setString("ezypassmid", ezypassmid);
		sqlQuery.setString("ezywaymid", ezywaymid);
		sqlQuery.setString("umezywaymid", umezywaymid);
		sqlQuery.setString("motomid", motomid);
		sqlQuery.setString("mid", mid);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				boostss.setTxDate("");
			} else if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				boostss.setTxTime("");
			} else if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {
				boostss.setTxnAmount("");
			} else if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				boostss.setTxnCurrency("");
			} else if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			}
			if (rec[4] == null || rec[4].toString().isEmpty()) {
				boostss.setBuyerBankId("");
			} else if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				boostss.setSellerExOrderNo("");
			} else if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {
				boostss.setSellerOrderNo("");
			} else if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				boostss.setDebitAuthCode("");
			} else if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {
				boostss.setDebitAuthCodeStr("");
			} else if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			}
			if (rec[9] == null || rec[9].toString().isEmpty()) {
				boostss.setCreditAuthCode("");
			} else if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				boostss.setCreditAuthCodeStr("");
			} else if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				boostss.setPayableAmt("");
			} else if (rec[11] != null) {
				boostss.setPayableAmt(rec[11].toString());
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				boostss.setBuyerName("");
			} else if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			}

			if (rec[13] != null) {
				boostss.setStatus("Completed");
			} else {
				boostss.setStatus("Completed");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				boostss.setBankName("");
				;
			} else if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {
				boostss.setFpxTxnId("");
			} else if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {
				boostss.setMid("");
			} else if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			}

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				boostss.setSubMerchantMID("");

			} else if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			}

			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// search fpx

	@Override
	public void listMerchantFPXTransactionByMidsearch(PaginationBean<FpxTransaction> paginationBean, Merchant merchant,
			String from, String to) {

		logger.info("Inside listBoostSettlement : " + from + "::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}

			if (midDetails.getUmEzywayMid() != null && !(midDetails.getUmEzywayMid().isEmpty())) {
				if (midDetails.getUmEzywayMid().equals("000000111021591")) {
					String ezywaymid = "000000000021591";
					midList.add(ezywaymid);
				} else if (midDetails.getUmEzywayMid() != null) {
					if (!midDetails.getUmEzywayMid().isEmpty()) {
						midList.add(midDetails.getUmEzywayMid());
					}

				}
			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * + "where b.MID IN ("+str+") AND  b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from FPX_TRANSACTION b  "
				+ "where b.DEBITAUTHCODE = '00' AND b.CREDITAUTHCODE = '00' AND b.MID IN (" + str
				+ ") AND  b.TIME_STAMP BETWEEN :from AND :to order by b.TIME_STAMP desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());

			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setPayableAmt(rec[11].toString());
			} else {
				boostss.setPayableAmt("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
//				if (rec[13] != null) {
//					
//					if (rec[13].toString().equals("S")) 
//					{
//						boostss.setStatus("SETTLED");
//					}else if(rec[13].toString().equals("H"))
//					{
//						boostss.setStatus("HOLD");
//					}else if(rec[13] == null)
//					{
//						boostss.setStatus("NOT SETTLED");
//					}
//				} else {
//					boostss.setStatus("");
//				}
			if (rec[13] != null) {
				boostss.setStatus("Completed");
			} else {
				boostss.setStatus("Completed");
			}

			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}
			if (rec[17] == null || rec[17].toString().isEmpty()) {
				boostss.setSubMerchantMID("");

			} else if (rec[17] != null) {
				boostss.setSubMerchantMID(rec[17].toString());
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<AgentVolumeData> agentTotalVolume(StringBuffer agentID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = "No";
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		sql = "select month(a.TXN_DATE), sum(a.AMOUNT) TotalAmount,f.AGID_FK,a.AGENT_NAME  "
				+ "from TRANSACTION_SUMMARY a " + "INNER JOIN MERCHANT f ON f.ID=a.MERCHANT_ID  "
				+ "WHERE a.TXN_DATE between DATE_SUB(now(), INTERVAL 3 month) and now() " + "and f.AGID_FK in ("
				+ agentID + ") " + "group by month(a.TXN_DATE),f.AGID_FK order by f.AGID_FK desc";

		/*
		 * sql="select month(a.TXN_DATE), sum(a.AMOUNT) TotalAmount,ag.FIRST_NAME,ag.id  "
		 * + "from TRANSACTION_SUMMARY a " +
		 * "INNER JOIN MERCHANT f ON f.ID=a.MERCHANT_ID " +
		 * "INNER JOIN AGENT ag on f.AGID_FK= ag.id " +
		 * "WHERE a.TXN_DATE between DATE_SUB(now(), INTERVAL 3 month) and now() " +
		 * "and f.AGID_FK in ("+agentID+") " +
		 * "group by month(a.TXN_DATE),f.AGID_FK order by a.TXN_DATE desc";
		 */

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[2].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[3].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

			/*
			 * for (Object[] rec : resultSet) {
			 * 
			 * int date1 = Integer.parseInt(rec[0].toString());
			 * 
			 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
			 * while (listMonth.get(count).intValue() != date1) {
			 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
			 * count++;
			 * 
			 * }// else{ date.add(getMonth(date1)); Double d = new
			 * Double(rec[1].toString()); d = d / 100;
			 * 
			 * String pattern = "###0.00"; DecimalFormat myFormatter = new
			 * DecimalFormat(pattern); String output = myFormatter.format(d);
			 * amount.add(output);
			 * 
			 * agId = rec[3].toString(); agent = rec[2].toString(); present = "Yes";
			 * agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();
			 * 
			 * count++; } while(count < 4){
			 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
			 * count++; } }
			 * 
			 * AgentVolumeData agentVolumeData = new AgentVolumeData();
			 * agentVolumeData.setAgId(agId); agentVolumeData.setAgentName(agent);
			 * agentVolumeData.setAgentDet(agentDet); agentVolumeData.setAmount(amount);
			 * agentVolumeData.setDate(date); agentVolumeData.setTxnPresent(present);
			 * agentVolumeDataList.add(agentVolumeData); return agentVolumeDataList;
			 */
		}
		return agentVolumeDataList;
	}

	public void listAllUmTransactionDetailsbyAdmin(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props, String fromDate, String toDate, String status) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);

//		 sql =  "(select res.F001_MID AS MID ,res.F007_TXNAMT AS AMOUNT ,res.F354_TID AS TID, res.STATUS AS STATUS, "
//		           + "res.F011_AUTHIDRESP AS AIDRESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
//		           + "res.F270_ORN AS INVOICE_ID ,mt.AUTH_3DS AS AUTH,res.TXN_TYPE AS TXN_TYPE,res.F268_CHNAME AS CARD_HOLDER_NAME,res.MASKED_PAN AS MASKED_PAN,'' AS STAN , res.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE  res "
//		           + "INNER JOIN MID m ON res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
//		           + "res.F001_MID = m.UM_EZYREC_MID "
//		           + "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
//		           + "WHERE res.STATUS =:status AND  res.H001_MTI in ('0290','0210') AND "
//		           + "res.TIME_STAMP BETWEEN :fromDate and :toDate ) "
//		           + "UNION "
//		           + "(select a.MID AS MID ,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
//		           + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE ,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
//		           + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
//		           + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//		           + "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS =:status AND "
//		           + "a.TIME_STAMP BETWEEN :fromDate and :toDate ) "
//		           + "UNION "
//		           + "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID ,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
//		           + "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,'' AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME  "
//		           + "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID "
//		           + "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
//		           + "WHERE mr.MERCHANT_TYPE = 'U' and f.STATUS =:status AND "
//		           + "f.TIME_STAMP BETWEEN :fromDate and :toDate ) "
//		           + "UNION "
//		           + "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
//		           + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME  "
//		           + "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//		           + "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
//		           + "WHERE c.MERCHANT_TYPE = 'U' and a.STATUS =:status AND "
//		           + "a.TIME_STAMP BETWEEN :fromDate and :toDate ) "; 

			sql = "(select e.F001_MID AS MID ,e.F007_TXNAMT AS AMOUNT ,e.F354_TID AS TID, e.STATUS AS STATUS, "
					+ "e.F011_AUTHIDRESP AS AID_RESPONSE,e.F023_RRN AS RRN,e.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
					+ "e.F270_ORN AS INVOICE_ID ,mt.AUTH_3DS AS AUTH,e.TXN_TYPE AS TXN_TYPE,e.F268_CHNAME AS CARD_HOLDER_NAME,e.MASKED_PAN AS MASKED_PAN,'' AS STAN , e.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE e "
					+ "INNER JOIN MID m on e.F001_MID = m.UM_EZYWAY_MID OR e.F001_MID = m.UM_MOTO_MID OR e.F001_MID = m.UM_EZYREC_MID OR e.F001_MID = m.FIUU_MID "
					+ "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE e.STATUS =:status AND  e.H001_MTI in ('0290','0210') AND "
					+ "e.TIME_STAMP BETWEEN :fromDate and :toDate order by e.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE, '' AS CARD_HOLDER_NAME, '' AS MASKED_PAN ,a.STAN AS STAN , a.TIME AS TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID OR a.MID=m.UM_EZYWAY_MID OR a.MID = m.UM_MOTO_MID OR a.MID = m.UM_EZYREC_MID OR  a.MID = m.UM_EZYPASS_MID OR a.MID = m.BOOST_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS =:status AND  a.TIME_STAMP BETWEEN "
					+ " :fromDate and :toDate order by a.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
					+ "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,f.SELLERORDERNO AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID OR f.MID = m.FPX_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE IN ('U','FIUU') and f.STATUS =:status AND  f.TIME_STAMP BETWEEN "
					+ " :fromDate and :toDate order by f.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS = :status AND a.TIME_STAMP BETWEEN :fromDate and :toDate order by a.TIME_STAMP desc limit 100) ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

//		sql =  "(select res.F001_MID AS MID ,res.F007_TXNAMT AS AMOUNT ,res.F354_TID AS TID, res.STATUS AS STATUS, "
//		           + "res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
//		           + "res.F270_ORN AS INVOICE_ID,mt.AUTH_3DS AS AUTH,res.TXN_TYPE AS TXN_TYPE,res.F268_CHNAME AS CARD_HOLDER_NAME,res.MASKED_PAN AS MASKED_PAN,'' AS STAN , res.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE  res "
//		           + "INNER JOIN MID m ON res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
//		           + "res.F001_MID = m.UM_EZYREC_MID "
//		           + "INNER JOIN MERCHANT mt on m.MERCHANT_FK = mt.ID "
//		           + "WHERE res.`STATUS` in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
//		           + "res.TIME_STAMP BETWEEN :fromDate and :toDate  ) "
//		           + "UNION "
//		           + "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
//		           + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
//		           + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
//		           + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//		           + "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P','BPS','BPA','BPC') AND "
//		           + "a.TIME_STAMP BETWEEN :fromDate and :toDate  ) "
//		           + "UNION "
//		           + "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID ,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
//		           + " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,'' AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
//		           + "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID "
//		           + "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
//		           + "WHERE mr.MERCHANT_TYPE = 'U' and f.STATUS in ('A','S') AND "
//		           + "f.TIME_STAMP BETWEEN :fromDate and :toDate ) "
//		           + "UNION "
//		           + "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
//		           + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
//		           + "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//		           + "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
//		           + "WHERE c.MERCHANT_TYPE = 'U' and a.STATUS in ('GPS','GRF','GBC','GPT') AND "
//		           + "a.TIME_STAMP BETWEEN :fromDate and :toDate ) "; 

			sql = "(select e.F001_MID AS MID ,e.F007_TXNAMT AS AMOUNT ,e.F354_TID AS TID, e.STATUS AS STATUS, "
					+ "e.F011_AUTHIDRESP AS AID_RESPONSE,e.F023_RRN AS RRN,e.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
					+ "e.F270_ORN AS INVOICE_ID ,mt.AUTH_3DS AS AUTH,e.TXN_TYPE AS TXN_TYPE,e.F268_CHNAME AS CARD_HOLDER_NAME,e.MASKED_PAN AS MASKED_PAN,'' AS STAN , e.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE e "
					+ "INNER JOIN MID m on e.F001_MID = m.UM_EZYWAY_MID OR e.F001_MID = m.UM_MOTO_MID OR e.F001_MID = m.UM_EZYREC_MID OR e.F001_MID = m.FIUU_MID "
					+ "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE e.STATUS in ('A','S','C') AND  e.H001_MTI in ('0290','0210') AND "
					+ "e.TIME_STAMP BETWEEN :fromDate and :toDate order by e.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE, '' AS CARD_HOLDER_NAME, '' AS MASKED_PAN ,a.STAN AS STAN , a.TIME AS TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID OR a.MID=m.UM_EZYWAY_MID OR a.MID = m.UM_MOTO_MID OR a.MID = m.UM_EZYREC_MID OR  a.MID = m.UM_EZYPASS_MID OR a.MID = m.BOOST_MID  "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('A','S','BPS','BPA','BPC') AND "
					+ " a.TIME_STAMP BETWEEN :fromDate and :toDate order by a.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
					+ "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME, f.SELLERORDERNO AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID OR f.MID = m.FPX_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE IN ('U','FIUU') and f.STATUS in ('A','S') AND  f.TIME_STAMP BETWEEN "
					+ " :fromDate and :toDate order by f.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') AND "
					+ " a.TIME_STAMP BETWEEN :fromDate and :toDate order by a.TIME_STAMP desc limit 100) ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		}

		else {

//		sql = "(select res.F001_MID AS MID ,res.F007_TXNAMT AS AMOUNT ,res.F354_TID AS TID, res.STATUS AS STATUS, "
//		           + "res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
//		           + "res.F270_ORN AS INVOICE_ID,mt.AUTH_3DS  AS AUTH,res.TXN_TYPE AS TXN_TYPE,res.F268_CHNAME AS CARD_HOLDER_NAME,res.MASKED_PAN AS MASKED_PAN,'' AS STAN , res.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE res "
//		           + "INNER JOIN MID  m ON res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
//		           + "res.F001_MID = m.UM_EZYREC_MID "
//		           + "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
//		           + "WHERE res.STATUS in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
//		           + "res.TIME_STAMP BETWEEN  :fromDateToSearch  and  :toDateToSearch  ) "
//		           + "UNION "
//		           + "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
//		           + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
//		           + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
//		           + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//		           + "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P','BPS','BPA','BPC') AND "
//		           + "a.TIME_STAMP BETWEEN :fromDateToSearch  and  :toDateToSearch ) "
//		           + "UNION "
//		           + "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID ,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
//		           + "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,'' AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
//		           + "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID "
//		           + "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
//		           + "WHERE mr.MERCHANT_TYPE = 'U' and f.STATUS in ('A','S') AND "
//		           + "f.TIME_STAMP BETWEEN :fromDateToSearch  and  :toDateToSearch ) "
//		           + "UNION "
//		           + "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
//		           + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
//		           + "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//		           + "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
//		           + "WHERE c.MERCHANT_TYPE = 'U' and a.STATUS in ('GPS','GRF','GBC','GPT') AND "
//		           + "a.TIME_STAMP BETWEEN :fromDateToSearch  and  :toDateToSearch)";

			sql = "(select e.F001_MID AS MID ,e.F007_TXNAMT AS AMOUNT ,e.F354_TID AS TID, e.STATUS AS STATUS, "
					+ "e.F011_AUTHIDRESP AS AID_RESPONSE,e.F023_RRN AS RRN,e.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
					+ "e.F270_ORN AS INVOICE_ID ,mt.AUTH_3DS AS AUTH,e.TXN_TYPE AS TXN_TYPE,e.F268_CHNAME AS CARD_HOLDER_NAME,e.MASKED_PAN AS MASKED_PAN,'' AS STAN , e.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE e "
					+ "INNER JOIN MID m on e.F001_MID = m.UM_EZYWAY_MID OR e.F001_MID = m.UM_MOTO_MID OR e.F001_MID = m.UM_EZYREC_MID OR e.F001_MID = m.FIUU_MID "
					+ "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE e.STATUS in ('A','S','C') AND  e.H001_MTI in ('0290','0210') AND "
					+ "e.TIME_STAMP BETWEEN :fromDateToSearch and :toDateToSearch order by e.TIME_STAMP desc limit 100) "
					+ "UNION "
					+ "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE, '' AS CARD_HOLDER_NAME, '' AS MASKED_PAN ,a.STAN AS STAN , a.TIME AS TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID OR a.MID=m.UM_EZYWAY_MID OR a.MID = m.UM_MOTO_MID OR a.MID = m.UM_EZYREC_MID OR  a.MID = m.UM_EZYPASS_MID OR a.MID = m.BOOST_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('A','S','BPS','BPA','BPC') AND "
					+ " a.TIME_STAMP BETWEEN :fromDateToSearch and :toDateToSearch order by a.TIME_STAMP desc limit 100) "
					+ "UNION "
					+ "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
					+ "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,f.SELLERORDERNO AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID OR f.MID = m.FPX_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE IN ('U','FIUU') and f.STATUS in ('A','S') AND  f.TIME_STAMP BETWEEN "
					+ " :fromDateToSearch and :toDateToSearch order by f.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') AND "
					+ " a.TIME_STAMP BETWEEN :fromDateToSearch and :toDateToSearch order by a.TIME_STAMP desc limit 100) ";

			// logger.info(sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDateToSearch", fromDateToSearch);
			sqlQuery.setString("toDateToSearch", toDateToSearch);

		}

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {

			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// MID
				fs.setMid(rec[0].toString());
			} else {
				fs.setMid("");
			}
			if (rec[1] != null || rec[1] != "") {

				if (rec[1].toString().contains(".")) {
					fs.setAmount(rec[1].toString());
				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}

			} else {

				fs.setAmount("0.00");
			}

			if (rec[2] != null) {
				// TID
				fs.setTid(rec[2].toString());
			} else {
				fs.setTid("");

			}

			if (rec[3] != null) {

				// STATUS

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[3].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[3].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[3].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GPS")) {
					fs.setStatus("GRABPAY COMPLETED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GRF")) {
					fs.setStatus("GRABPAY REFUND");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GBC")) {
					fs.setStatus("GRABPAY CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
			}
			if (rec[4] != null) {
				fs.setAidResponse(rec[4].toString());
			} else {
				fs.setAidResponse("");
			}
			if (rec[5] != null) {
				fs.setRrn(rec[5].toString());
			} else {
				fs.setRrn("");
			}

			// TIME STAMP --- FIELDS
			if (rec[6] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[7] != null) {
				// merchant name
				fs.setNumOfSale(rec[7].toString());
			} else {
				fs.setNumOfSale("");
			}
			if (rec[8] != null) {
				// reference
				fs.setInvoiceId(rec[8].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[11] != null) {

				fs.setNumOfRefund(rec[11].toString());
			} else {

				fs.setNumOfRefund("");
			}
			if (rec[12] != null) {

				fs.setPan(rec[12].toString());
			} else {
				fs.setPan("");
			}
			if (rec[13] != null) {

				fs.setStan(rec[13].toString());
			} else {
				fs.setStan("");
			}

			// TIME -- FIELDS

			if (rec[14] != null) {

				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));

					fs.setTime(rt);

				} catch (ParseException e) {
				}

			}

			if (rec[10] != null) {
				if (rec[9] != null) {

					// logger.info("auth3ds:++: " + rec[9].toString());
					// logger.info("setTxnType:++: " + rec[10].toString());
					if ((rec[9].toString().equals("Yes")) && (rec[10].toString().equals("EZYMOTO"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("EZYLINK");
					}

					if ((rec[10].toString().equals("BOOST"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("BOOST");
					}
					if ((rec[10].toString().equals("FPX"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("FPX");
					}
					if ((rec[10].toString().equals("GRABPAY"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("GRABPAY");
					}

				} else {
					fs.setTxnType(rec[10].toString());
				}

			} else {
				fs.setTxnType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);

		// paginationBean.setTotalRowCount(fss.size());
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantInTxnSummary(StringBuffer listMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		/*
		 * sql="select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
		 * +
		 * "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
		 * +
		 * "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID IN ("
		 * +listMid +")  group by " +
		 * "month(a.time_stamp) having montha in ("+month+") order by a.time_stamp desc"
		 * ;
		 * 
		 */
		sql = "select month(a.TXN_DATE) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from TRANSACTION_SUMMARY a  " + "INNER JOIN MERCHANT f ON f.ID=a.MERCHANT_ID where a.TXN_DATE "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and f.ID IN (" + listMid + ")  group by "
				+ "month(a.TXN_DATE) having montha in (" + month + ") order by a.TXN_DATE desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[2].toString().toLowerCase());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeDataList.add(agentVolumeData);

			}

		}

		return agentVolumeDataList;

	}

	@Override
	public void listbizappSettlementByMerchant(PaginationBean<BizAppSettlement> paginationBean, Merchant merchant,
			String date) {

		logger.info("Inside listBoostSettlement : " + date);

		ArrayList<BizAppSettlement> fss = new ArrayList<BizAppSettlement>();
		String sql = null;

		String merchantId = merchant.getId().toString();
		sql = "select b.MOBI_MDR_AMT,b.HOST_MDR_AMT,b.DETECTIONAMT,b.GROSSAMT,b.NETAMT,b.BANKNAME,  "
				+ "b.REFERENCE,b.TRADENAME,b.`STATUS`,b.MERCHANTNAME,b.EMAIL,b.SETTLEMENTDATE,b.ACCOUNTNO "
				+ "from BIZAPP_SETTLEMENT b where b.SETTLEMENTDATE = '" + date + "' ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BizAppSettlement boostss = new BizAppSettlement();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setBankName(rec[5].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[6] != null) {
				boostss.setReference(rec[6].toString());
			} else {
				boostss.setReference("");
			}
			if (rec[7] != null) {
				boostss.setTradeName(rec[7].toString());
			} else {
				boostss.setTradeName("");
			}
			if (rec[8] != null) {
				boostss.setStatus(rec[8].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[9] != null) {
				boostss.setMerchantName(rec[9].toString());
			} else {
				boostss.setMerchantName("");
			}
			if (rec[10] != null) {
				boostss.setEmail(rec[10].toString());
			} else {
				boostss.setEmail("");
			}
			if (rec[11] != null) {
				boostss.setSettlementDate(rec[11].toString());
			} else {
				boostss.setSettlementDate("");
			}
			if (rec[12] != null) {
				boostss.setAccountNo(rec[12].toString());
			} else {
				boostss.setAccountNo("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public BizAppSettlement loadLatestbizappSettlement() {

//				date="2020-01-29";

		logger.info("loadLatestbizappSettlement : ");

		BizAppSettlement boostss = new BizAppSettlement();

		/*
		 * String sql2 =
		 * "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT)  "
		 * +
		 * "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE LIKE '"
		 * +date+"%' ";
		 */
		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),MAX(b.SETTLEMENTDATE)  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE = ( "
				+ "SELECT MAX(b.SETTLEMENTDATE) FROM BIZAPP_SETTLEMENT ) ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setSettlementDate(rec[5].toString());
			} else {
				boostss.setSettlementDate("");
			}

		}

		return boostss;

	}

	@Override
	public void listLatestbizappSettlement(PaginationBean<BizAppSettlement> paginationBean) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listLatestbizappSettlement : ");

		ArrayList<BizAppSettlement> fss = new ArrayList<BizAppSettlement>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),b.MERCHANTNAME,b.SETTLEMENTDATE  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE = ( "
				+ "SELECT MAX(b.SETTLEMENTDATE) FROM BIZAPP_SETTLEMENT ) group by b.MERCHANTID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BizAppSettlement boostss = new BizAppSettlement();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}

			if (rec[6] != null) {
				boostss.setSettlementDate(rec[6].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public SettlementMDR loadLatestSettlement() {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : ");

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),MAX(b.SETTLEMENTDATE)  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE = ( "
				+ "SELECT MAX(md.SETTLEMENTDATE) FROM SETTLEMENT_MDR md )";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}
			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public void listLatestSettlement(PaginationBean<SettlementMDR> paginationBean) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listLatestSettlement : ");

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),b.MERCHANTNAME,b.SETTLETYPE,b.SETTLEMENTDATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE =( "
				+ "SELECT MAX(md.SETTLEMENTDATE) FROM SETTLEMENT_MDR md) group by b.MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSettleType(rec[6].toString());
			} else {
				boostss.setSettleType("");
			}

			if (rec[7] != null) {
				boostss.setSettlementDate(rec[7].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTransactionByAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransactionByAgent : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzyway ALL " + txnType);

		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,mt.ID,res.H002_VNO,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_EZYWAY_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and "
				+ "res.H002_VNO ='03' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setMerchantId(rec[13].toString());
			}
			if (rec[15] != null) {

				fs.setTxnType(rec[15].toString());

			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantBymmId(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.MM_ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {
			logger.info("111111122 " + resultSet.size());

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("mmId", mid)).setMaxResults(1).uniqueResult();

			logger.info("merchant " + merchant);

			agId = merchant.getId().toString();
			logger.info("agId " + agId);
			agent = merchant.getBusinessName().toLowerCase();
			logger.info("agent " + agId);
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			logger.info("1111111 " + resultSet.size());

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantBymmId1(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.MM_ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("mmId", mid)).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Override
	public void listMobiliteLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String tid) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMLink Transaction by merchant: " + date + "  " + date1 + "  " + tid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME,mt.ID,res.GOODS_STATUS,res.UPDATED_DATE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
				+ "inner join mobiversa.MOBILITE_TERMINAL as m on res.MOBILITE_TID = m.TID "
				+ "inner join mobiversa.MOBILITE_MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "and res.H001_MTI in ('0210') "
				+ "where res.`STATUS` in ('A','C') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.MOBILITE_TID=:tid and res.time_stamp between :from  and :to order by res.time_stamp desc "
				+ "" + "" + "" + "0";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("tid", tid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[17] != null) {
				fs.setMerchantId(rec[17].toString());
			} else {
				fs.setMerchantId("");
			}

			if (rec[18] != null) {
				fs.setGoodsStatus(rec[18].toString());
			} else {
				fs.setGoodsStatus("NIL");
			}

			if (rec[19] != null) {
				fs.setUpdatedDate(rec[19].toString());
			} else {
				fs.setUpdatedDate("NIL");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportMobiliteLinkTransaction(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String tid) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Transaction export: " + date + "  " + date1 + "  " + tid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F278_EMAILADDR,req.F279_HP from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
				+ "inner join mobiversa.MOBILITE_TERMINAL as m on res.MOBILITE_TID = m.TID "
				+ "inner join mobiversa.MOBILITE_MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "and res.H001_MTI in ('0210') "
				+ "where res.`STATUS` in ('A','C') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000') and res.txn_type ='EZYMOTO' and res.MOBILITE_TID =:tid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("tid", tid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[16] != null) {
				fs.setF278_EMAILADDR(rec[16].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}

			if (rec[17] != null) {
				fs.setF279_HP(rec[17].toString());
			} else {
				fs.setF279_HP("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	public void listAllUmTransactionDetails(PaginationBean<ForSettlement> paginationBean, Merchant merchant,
			String fromDate, String toDate) {

		logger.info("inside listAllTransactionDetailsbyAdmin ");
		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null && !(merchant.getMid().getUmEzywayMid().isEmpty())) {
			if (merchant.getMid().getUmEzywayMid().equals("000000111021591")) {
				String ezywaymid = "000000000021591";
				umEzywayMid = ezywaymid;
			} else if (merchant.getMid().getUmEzywayMid() != null) {
				umEzywayMid = merchant.getMid().getUmEzywayMid();
			}
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		logger.info("check fromdate and todate : " + fromDate + "  " + toDate); // search

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {

			logger.info(" Search sql ");

			sql = "(select e.F001_MID AS MID ,e.F007_TXNAMT AS AMOUNT ,e.F354_TID AS TID, e.STATUS AS STATUS, "
					+ "e.F011_AUTHIDRESP AS AID_RESPONSE,e.F023_RRN AS RRN,e.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
					+ "e.F270_ORN AS INVOICE_ID ,mt.AUTH_3DS AS AUTH,e.TXN_TYPE AS TXN_TYPE,e.F268_CHNAME AS CARD_HOLDER_NAME,e.MASKED_PAN AS MASKED_PAN,'' AS STAN , e.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE e "
					+ "INNER JOIN MID m on e.F001_MID = m.UM_EZYWAY_MID OR e.F001_MID = m.UM_MOTO_MID OR e.F001_MID = m.UM_EZYREC_MID "
					+ "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE e.STATUS in ('A','S','C') AND  e.H001_MTI in ('0290','0210') AND "
					+ "e.F001_MID IN (:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) AND "
					+ "e.TIME_STAMP BETWEEN :fromDate and :toDate order by e.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE, '' AS CARD_HOLDER_NAME, '' AS MASKED_PAN ,a.STAN AS STAN , a.TIME AS TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID OR a.MID=m.UM_EZYWAY_MID OR a.MID = m.UM_MOTO_MID OR a.MID = m.UM_EZYREC_MID OR  a.MID = m.UM_EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('A','S','BPS','BPA','BPC') AND "
					+ "a.MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) And a.TIME_STAMP BETWEEN "
					+ " :fromDate and :toDate order by a.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
					+ "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,f.SELLERORDERNO AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE IN ('U','FIUU') and f.STATUS in ('A','S') AND "
					+ "f.MID IN (:umEzywayMid,:umMotoMid,:splitMid,:umEzyrecMid) And f.TIME_STAMP BETWEEN "
					+ " :fromDate and :toDate order by f.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE (m.UM_MID=:umMid or m.UM_EZYWAY_MID=:umEzywayMid or m.UM_EZYREC_MID=:umEzyrecMid or m.UM_EZYPASS_MID=:umEzypassMid or m.UM_MOTO_MID =:umMotoMid) And c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') "
					+ " And a.TIME_STAMP BETWEEN :fromDate and :toDate order by a.TIME_STAMP desc limit 100) ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("umMid", umMid);
			sqlQuery.setString("umEzywayMid", umEzywayMid);
			sqlQuery.setString("umMotoMid", umMotoMid);
			sqlQuery.setString("umEzyrecMid", umEzyrecMid);
			sqlQuery.setString("umEzypassMid", umEzypassMid);
			sqlQuery.setString("splitMid", splitMid);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

			logger.info(" ummid " + umMid);
			logger.info(" ezywaymid " + umEzywayMid);
			logger.info(" motomid " + umMotoMid);
			logger.info(" ezyrecmid " + umEzyrecMid);
			logger.info(" passmid " + umEzypassMid);
			logger.info(" splitmid " + splitMid);
			logger.info(" fromdate " + fromDate);
			logger.info(" todate " + toDate);

		}

		else {

			logger.info(" Main sql ");

//			sql = "(select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.`STATUS` AS stat, "
//                    + "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
//                    + "res.F270_ORN AS refer,mt.AUTH_3DS as auth1,res.TXN_TYPE AS type1,res.F268_CHNAME AS nameoncard,res.MASKED_PAN AS cardno,res.MASKED_PAN AS stan , res.H004_TTM from UM_ECOM_TXNRESPONSE as res "
//                    + "INNER JOIN MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
//                    + "res.F001_MID = m.UM_EZYREC_MID "
//                    + "INNER JOIN MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//                    + "WHERE res.STATUS in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
//                    + "res.F001_MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) AND "
//                    + "res.TIME_STAMP BETWEEN '" + fromDateToSearch + "' and '" + toDateToSearch + "' ) "
//                    + "UNION "
//                    + "(select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
//                    + "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID AS refer,f.AUTH_3DS as auth1,a.TXN_TYPE AS type1,'' AS nameoncard,'' AS cardno,'' AS stan , a.TIME "
//                    + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
//                    + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//                    + "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P','BPS','BP','BPA','BPC') AND "
//                    + "a.MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) And a.TIME_STAMP BETWEEN '"
//                    + fromDateToSearch + "' and '" + toDateToSearch  + "' ) "
//                    + "UNION "
//                    + "(select f.MID AS mid1,f.TXNAMOUNT AS amt,f.TID AS tidf ,f.STATUS AS stat,'' AS appcode, "
//                    + "'' AS rrn,f.TIME_STAMP as timeSt,mr.BUSINESS_NAME as mercname,f.SELLEREXORDERNO AS refer,mr.AUTH_3DS as auth1,'FPX' AS type1,'' AS nameoncard,'' AS cardno,'' AS stan , f.TX_TIME "
//                    + "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR m.UM_EZYWAY_MID OR m.UM_EZYREC_MID OR m.SPLIT_MID "
//                    + "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
//                    + "WHERE mr.MERCHANT_TYPE = 'U' and f.STATUS in ('A','S') AND "
//                    + "f.MID IN (:umEzywayMid,:umMotoMid,:SPLIT_MID,:umEzyrecMid) And f.TIME_STAMP BETWEEN '"
//                    + fromDateToSearch + "' and '" + toDateToSearch  + "' ) "
//                    + "UNION "
//                    + "(select '' AS mid1,a.AMOUNT AS amt,'' AS tidf,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
//                    + "a.RRN AS rrn,a.TIME_STAMP as timeSt,c.BUSINESS_NAME as mercname,a.INVOICE_ID AS refer,c.AUTH_3DS as auth1,a.TXN_TYPE AS type1,'' AS nameoncard,'' AS cardno,'' AS stan , a.TIME "
//                    + "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//                    + "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
//                    + "WHERE c.MERCHANT_TYPE = 'U' and a.STATUS in ('GPS','GRF','GBC','GPT') AND "
//                    + "m.UM_MID=:umMid or m.UM_EZYWAY_MID=:umMid or m.UM_EZYREC_MID=:umMid or m.UM_EZYPASS_MID=:umMid or m.UM_MOTO_MID =:umMid "
//                    + "And a.TIME_STAMP BETWEEN '"
//                    + fromDateToSearch + "' and '" + toDateToSearch  + "' ) ";
//			

//			sql = "(select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.STATUS AS stat, "
//                    + "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
//                    + "res.F270_ORN AS refer,mt.AUTH_3DS as auth1,res.TXN_TYPE AS type1,res.F268_CHNAME AS nameoncard,res.MASKED_PAN AS cardno,res.MASKED_PAN AS stan , res.H004_TTM AS time from UM_ECOM_TXNRESPONSE as res "
//                    + "INNER JOIN MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
//                    + "res.F001_MID = m.UM_EZYREC_MID "
//                    + "INNER JOIN MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//                    + "WHERE res.STATUS in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
//                    + "res.F001_MID IN (:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) AND "
//                    + "res.TIME_STAMP BETWEEN '2021-01-01' and '2021-09-31' order by res.TIME_STAMP desc limit 100) "
//	                + "UNION "
//                    + "(select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
//                    + "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID AS refer,f.AUTH_3DS as auth1,a.TXN_TYPE AS type1,'' AS nameoncard,'' AS cardno,'' AS stan , a.TIME AS time "
//                    + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
//                    + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//                    + "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','BPS','BPA','BPC') AND "
//                    + "a.MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) And a.TIME_STAMP BETWEEN "
//                    + " '2021-01-01' and '2021-09-31' order by a.TIME_STAMP desc limit 100) "
//                    + "UNION "
//                    + "(select f.MID AS mid1,f.TXNAMOUNT AS amt,f.TID AS tidf ,f.STATUS AS stat,'' AS appcode, "
//                    + "'' AS rrn,f.TIME_STAMP as timeSt,mr.BUSINESS_NAME as mercname,f.SELLEREXORDERNO AS refer,mr.AUTH_3DS as auth1,'FPX' AS type1,'' AS nameoncard,'' AS cardno,'' AS stan , f.TX_TIME AS time "
//                    + "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR m.UM_EZYWAY_MID OR m.UM_EZYREC_MID OR m.SPLIT_MID "
//                    + "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
//                    + "WHERE mr.MERCHANT_TYPE = 'U' and f.STATUS in ('A','S') AND "
//                    + "f.MID IN (:umEzywayMid,:umMotoMid,:splitMid,:umEzyrecMid) And f.TIME_STAMP BETWEEN "
//                    + " '2021-01-01' and '2021-09-31' order by f.TIME_STAMP desc limit 100) "
//                    + "UNION "
//                    + "(select '' AS mid1,a.AMOUNT AS amt,'' AS tidf,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
//                    + "a.RRN AS rrn,a.TIME_STAMP as timeSt,c.BUSINESS_NAME as mercname,a.INVOICE_ID AS refer,c.AUTH_3DS as auth1,a.TXN_TYPE AS type1,'' AS nameoncard,'' AS cardno,'' AS stan , a.TIME AS time  "
//                    + "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//                    + "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
//                    + "WHERE c.MERCHANT_TYPE = 'U' and a.STATUS in ('GPS','GRF','GBC','GPT') AND "
//                    + "m.UM_MID=:umMid or m.UM_EZYWAY_MID=:umMid or m.UM_EZYREC_MID=:umMid or m.UM_EZYPASS_MID=:umMid or m.UM_MOTO_MID =:umMid "
//                    + " And a.TIME_STAMP BETWEEN '2021-01-01' and '2021-09-31' order by a.TIME_STAMP desc limit 100) ";

			sql = "(select e.F001_MID AS MID ,e.F007_TXNAMT AS AMOUNT ,e.F354_TID AS TID, e.STATUS AS STATUS, "
					+ "e.F011_AUTHIDRESP AS AID_RESPONSE,e.F023_RRN AS RRN,e.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME, "
					+ "e.F270_ORN AS INVOICE_ID ,mt.AUTH_3DS AS AUTH,e.TXN_TYPE AS TXN_TYPE,e.F268_CHNAME AS CARD_HOLDER_NAME,e.MASKED_PAN AS MASKED_PAN,'' AS STAN , e.H004_TTM AS TIME from UM_ECOM_TXNRESPONSE e "
					+ "INNER JOIN MID m on e.F001_MID = m.UM_EZYWAY_MID OR e.F001_MID = m.UM_MOTO_MID OR e.F001_MID = m.UM_EZYREC_MID "
					+ "INNER JOIN MERCHANT  mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE e.STATUS in ('A','S','C') AND  e.H001_MTI in ('0290','0210') AND "
					+ "e.F001_MID IN (:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) AND "
					+ "e.TIME_STAMP BETWEEN :fromDateToSearch and :toDateToSearch order by e.TIME_STAMP desc limit 100) "
					+ "UNION "
					+ "(select a.MID AS MID,a.AMOUNT AS AMOUNT,a.TID AS TID ,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,f.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE, '' AS CARD_HOLDER_NAME, '' AS MASKED_PAN ,a.STAN AS STAN , a.TIME AS TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID OR a.MID=m.UM_EZYWAY_MID OR a.MID = m.UM_MOTO_MID OR a.MID = m.UM_EZYREC_MID OR  a.MID = m.UM_EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('A','S','BPS','BPA','BPC') AND "
					+ "a.MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) And a.TIME_STAMP BETWEEN "
					+ " :fromDateToSearch and :toDateToSearch order by a.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select f.MID AS MID,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,'' AS AID_RESPONSE, "
					+ "'' AS RRN,f.TIME_STAMP AS TIME_STAMP,mr.BUSINESS_NAME AS BUSINESS_NAME,f.SELLERORDERNO AS INVOICE_ID,mr.AUTH_3DS AS AUTH,'FPX' AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , f.TX_TIME AS TIME "
					+ "from FPX_TRANSACTION f INNER JOIN MID m on f.MID=m.UM_MOTO_MID OR f.MID=m.UM_EZYWAY_MID OR f.MID=m.UM_EZYREC_MID OR f.MID=m.SPLIT_MID "
					+ "INNER JOIN MERCHANT mr ON mr.MID_FK=m.ID "
					+ "WHERE mr.MERCHANT_TYPE IN ('U','FIUU') and f.STATUS in ('A','S') AND "
					+ "f.MID IN (:umEzywayMid,:umMotoMid,:splitMid,:umEzyrecMid) And f.TIME_STAMP BETWEEN "
					+ " :fromDateToSearch and :toDateToSearch order by f.TIME_STAMP desc limit 100) " + "UNION "
					+ "(select '' AS MID,a.AMOUNT AS AMOUNT,'' AS TID,a.STATUS AS STATUS,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME,a.INVOICE_ID AS INVOICE_ID,c.AUTH_3DS AS AUTH,a.TXN_TYPE AS TXN_TYPE,'' AS CARD_HOLDER_NAME,'' AS MASKED_PAN,'' AS STAN , a.TIME AS TIME "
					+ "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID OR u.ONLINE_GPAY "
					+ "WHERE (m.UM_MID=:umMid or m.UM_EZYWAY_MID=:umEzywayMid or m.UM_EZYREC_MID=:umEzyrecMid or m.UM_EZYPASS_MID=:umEzypassMid or m.UM_MOTO_MID =:umMotoMid) and c.MERCHANT_TYPE IN ('U','FIUU') and a.STATUS in ('GPS','GRF','GBC','GPT') "
					+ " And a.TIME_STAMP BETWEEN :fromDateToSearch and :toDateToSearch order by a.TIME_STAMP desc limit 100) ";

			logger.info("after query");

			logger.info(" ummid " + umMid);
			logger.info(" ezywaymid " + umEzywayMid);
			logger.info(" motomid " + umMotoMid);
			logger.info(" ezyrecmid " + umEzyrecMid);
			logger.info(" passmid " + umEzypassMid);
			logger.info(" splitmid " + splitMid);
			logger.info("fromDateToSearch" + fromDateToSearch);
			logger.info("toDateToSearch" + toDateToSearch);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("umMid", umMid);
			sqlQuery.setString("umEzywayMid", umEzywayMid);
			sqlQuery.setString("umMotoMid", umMotoMid);
			sqlQuery.setString("umEzyrecMid", umEzyrecMid);
			sqlQuery.setString("umEzypassMid", umEzypassMid);
			sqlQuery.setString("splitMid", splitMid);
			sqlQuery.setString("fromDateToSearch", fromDateToSearch);
			sqlQuery.setString("toDateToSearch", toDateToSearch);

		}

		logger.info(sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			logger.info("1");
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// MID
				fs.setMid(rec[0].toString());
			} else {
				fs.setMid("");
			}
			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					fs.setAmount(rec[1].toString());
				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setAmount(output);
				}

			} else {

				fs.setAmount("0.00");
			}

			if (rec[2] != null) {
				// TID
				fs.setTid(rec[2].toString());
			} else {
				fs.setTid("");

			}

			if (rec[3] != null) {

				// STATUS

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[3].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[3].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[3].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GPS")) {
					fs.setStatus("GRABPAY COMPLETED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GRF")) {
					fs.setStatus("GRABPAY REFUND");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[3].toString().equals("GBC")) {
					fs.setStatus("GRABPAY CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
			}
			if (rec[4] != null) {
				fs.setAidResponse(rec[4].toString());
			} else {
				fs.setAidResponse("");
			}
			if (rec[5] != null) {
				fs.setRrn(rec[5].toString());
			} else {
				fs.setRrn("");
			}

			// TIME STAMP --- FIELDS
			if (rec[6] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			} else {
				fs.setDate(rec[6].toString()); // for fpx
			}

			if (rec[7] != null) {
				// merchant name
				fs.setNumOfSale(rec[7].toString());
			} else {
				fs.setNumOfSale("");
			}
			if (rec[8] != null) {
				// reference
				fs.setInvoiceId(rec[8].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[11] != null) {

				fs.setNumOfRefund(rec[11].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[12] != null) {

				fs.setPan(rec[12].toString());
			} else {
				fs.setPan("");
			}
			if (rec[13] != null) {

				fs.setStan(rec[13].toString());
			} else {
				fs.setStan("");
			}

			// TIME -- FIELDS

			if (rec[14] != null) {

				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));

					fs.setTime(rt);

				} catch (ParseException e) {
				}

			}

			if (rec[10] != null) {
				if (rec[9] != null) {

					// logger.info("auth3ds:++: " + rec[9].toString());
					// logger.info("setTxnType:++: " + rec[10].toString());
					if ((rec[9].toString().equals("Yes")) && (rec[10].toString().equals("EZYMOTO"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("EZYLINK");
					}

					if ((rec[10].toString().equals("BOOST"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("BOOST");
					}
					if ((rec[10].toString().equals("FPX"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("FPX");
					}
					if ((rec[10].toString().equals("GRABPAY"))) {

						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("GRABPAY");
					}

				} else {
					fs.setTxnType(rec[10].toString());
				}

			} else {
				fs.setTxnType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);

	}

	@Override
	public void listMerchantFPXSettlementByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant,
			String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + "::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}

			if (midDetails.getUmEzywayMid() != null && !(midDetails.getUmEzywayMid().isEmpty())) {

				if (midDetails.getUmEzywayMid().equals("000000111021591")) {
					String ezywaymid = "000000000021591";
					midList.add(ezywaymid);
				} else if (midDetails.getUmEzywayMid() != null) {
					if (!midDetails.getUmEzywayMid().isEmpty()) {
						midList.add(midDetails.getUmEzywayMid());
					}

				}
			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.MDR_AMT,b.SUB_MERCHANT_MID from FPX_TRANSACTION b  "
				+ "where b.DEBITAUTHCODE = '00' AND b.CREDITAUTHCODE = '00' AND b.MID IN (" + str
				+ ") AND  b.TIME_STAMP BETWEEN :from AND :to ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());

			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setPayableAmt(rec[11].toString());
			} else {
				boostss.setPayableAmt("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				boostss.setStatus(rec[13].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}
			if (rec[17] != null) {
				boostss.setMdrAmt(rec[17].toString());
			} else {
				boostss.setMdrAmt("");
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				boostss.setSubMerchantMID("");

			} else if (rec[18] != null) {
				boostss.setSubMerchantMID(rec[18].toString());
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyLinkSSTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umSsMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMSSLink Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umSsMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMLink ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME,res.GOODS_STATUS,res.UPDATED_DATE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_SS_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umSsMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[17] != null) {
				fs.setGoodsStatus(rec[17].toString());
			} else {
				fs.setGoodsStatus("NIL");
			}

			if (rec[18] != null) {
				fs.setUpdatedDate(rec[18].toString());
			} else {
				fs.setUpdatedDate("NIL");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkSSTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umSsMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list umSsMotoMid Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
				+ umSsMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F279_HP,req.F278_EMAILADDR,res.GOODS_STATUS,res.UPDATED_DATE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_SS_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000') and res.txn_type ='EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umSsMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[16] != null) {
				fs.setF279_HP(rec[16].toString());
			} else {
				fs.setF279_HP("");
			}

			if (rec[17] != null) {
				fs.setF278_EMAILADDR(rec[17].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}

			if (rec[18] != null) {
				fs.setGoodsStatus(rec[18].toString());
			} else {
				fs.setGoodsStatus("NIL");
			}

			if (rec[19] != null) {
				fs.setUpdatedDate(rec[19].toString());
			} else {
				fs.setUpdatedDate("NIL");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public MobiMDR loadMobiMdr(String mid) {
		return (MobiMDR) sessionFactory.getCurrentSession().createCriteria(MobiMDR.class)
				.add(Restrictions.eq("mid", mid)).setMaxResults(1).uniqueResult();
	}

	@Override
	public String totalSettleAmount(String date, String date1, String Mid) {

		logger.info("Inside totalSettleAmount: " + date + "  " + date1 + "  " + Mid);
		String totalAmount = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		logger.info("checkd date: " + date + " : " + date1);

		sql = "select SUM(res.F007_TXNAMT) from " + "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "where res.`STATUS` in ('A','S') and res.H002_VNO ='03' and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", date);
		sqlQuery.setString("to", date1);
		sqlQuery.setString("mid", Mid);

		if (sqlQuery.list().get(0) != null) {
			totalAmount = sqlQuery.list().get(0).toString();
		} else {
			totalAmount = "0.0";
		}

		logger.info("Total: " + totalAmount);

		return totalAmount;

	}

	// EZYWIRE + RK

	@Override
	@Transactional(readOnly = true)
	public void searchAllUmEzywireplusTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllUMTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);

		sql = "select a.time,a.MERCHANT_NAME ,a.time_stamp ,a.AMOUNT, "
				+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
				+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
				+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE IN ('U','FIUU') and a.EZYWIRE_TYPE = 'PLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
				+ "order by a.time_stamp desc limit 10000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void listAllUmEzywireplusTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

//         Date date = new Date();
//         Calendar calendar = Calendar.getInstance();
//         date = calendar.getTime();
//         // Date date = new Date();
//
//         int year = calendar.getWeekYear();
//         // int year=2017;
//         long mon = date.getMonth() + 1;
//         int day = date.getDate() + 1;
//         int daybefore = date.getDate() - 20;
//         String fromDate = null;
//         String toDate = null;
//         String dateorg2 = day + "/" + mon + "/" + year;
//         String dateorg1 = daybefore + "/" + mon + "/" + year;
//         logger.info("date to find: " + dateorg1 + " " + dateorg2);
//         try {
//               toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//               fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//         } catch (ParseException e1) {
//               // TODO Auto-generated catch block
//               e1.printStackTrace();
//         }

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);

		sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
				+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
				+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
				+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE IN ('U','FIUU') and a.EZYWIRE_TYPE = 'PLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
				+ "order by a.time_stamp desc limit 100";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setStan(rec[12].toString());
			} else {
				fs.setStan("");
			}
			if (rec[13] != null) {
				fs.setMid(rec[13].toString());
			} else {
				fs.setMid("");
			}
			if (rec[14] != null) {
				fs.setAidResponse(rec[14].toString());
			} else {
				fs.setAidResponse("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	// EZYWIREPLUS RK

//rk

	public void exportUMSplitTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String SplitMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMSplit Transaction export: " + date + "  " + date1 + "  " + txnType + "  " + SplitMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzySplit ALL " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.SPLIT_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0110') "
					+ "where res.`STATUS` in ('S','FR','R','PR') and res.H002_VNO IN ('03','05') and res.F003_PROCCODE in ('003000','303000')  and res.TXN_TYPE IN ('EZYAUTH' , 'EZYMOTO' , 'AUTHSALE' , 'EZYLINK') "
					+ "and res.F001_MID =:mid and res.time_stamp between :from  and :to ) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.SPLIT_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0110') "
					+ "where res.`STATUS` in ('C','A') and res.H002_VNO IN ('03','05') and res.F003_PROCCODE in ('003000','303000')  and res.TXN_TYPE IN ('EZYAUTH' , 'EZYMOTO' , 'AUTHSALE' , 'EZYLINK') "
					+ "and res.F001_MID =:mid and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", SplitMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {
				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setSettlementDate(rd);
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] != null) {

				fs.setCardType(rec[20].toString());

			} else {
				fs.setCardType("");

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

//rk
	@Override
	public void listUMSplitTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String SplitMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMSplit Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ SplitMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMSplit ALL " + txnType);

			sql = "select * from ((select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F270_ORN,res.F268_CHNAME,res.FRAUD_SCORE,res.FRAUD_ID, "
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = res.F023_RRN and st.AID = res.F011_AUTHIDRESP) AS SETTLEMENTDATE, res.F350_CRDTYP from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.SPLIT_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0110') "
					+ "where res.`STATUS` in ('S','FR','R','PR') and res.H002_VNO IN ('03','05') and res.F003_PROCCODE in ('003000','303000')  and res.TXN_TYPE IN ('EZYAUTH' , 'EZYMOTO' , 'AUTHSALE' , 'EZYLINK') "
					+ "and res.F001_MID =:mid and res.time_stamp between :from  and :to ) " + "UNION "
					+ "(select res.F001_MID AS MID,res.F005_EXPDATE AS EXPDATE,res.F007_TXNAMT AS AMOUNT,res.F354_TID AS TID,res.MASKED_PAN AS MASKED_PAN, res.`STATUS` AS STATUS, "
					+ "res.F263_MRN AS MRN,res.H003_TDT AS TDT,res.H004_TTM AS TTM,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F023_RRN AS RRN,res.TIME_STAMP AS TIME_STAMP,mt.BUSINESS_NAME AS BUSINESS_NAME,res.F270_ORN AS INVOICE_ID,res.F268_CHNAME AS CARD_HOLDER_NAME,res.FRAUD_SCORE AS FRAUD_SCORE,res.FRAUD_ID AS FRAUD_ID,'' AS NETAMOUNT, '' AS MDRAMT ,'' AS SETTLE_DATE,res.F350_CRDTYP AS TXN_TYPE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.SPLIT_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0110') "
					+ "where res.`STATUS` in ('C','A') and res.H002_VNO IN ('03','05') and res.F003_PROCCODE in ('003000','303000')  and res.TXN_TYPE IN ('EZYAUTH' , 'EZYMOTO' , 'AUTHSALE' , 'EZYLINK') "
					+ "and res.F001_MID =:mid and res.TIME_STAMP between :from  and :to )) as temp order by TIME_STAMP desc";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", SplitMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[4].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {
				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setSettlementDate(rd);
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] != null) {

				fs.setCardType(rec[20].toString());

			} else {
				fs.setCardType("");

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

//rksplitadmin

	@Override
	public void listUMSplitTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMSplitTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			/*
			 * Date dt = new Date();
			 * 
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			 * logger.info("change date format:" + from);
			 * 
			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
			 */

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzysplit ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.STATUS, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.SPLIT_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0110') "
					+ "where res.STATUS in ('A','C','S') and res.H002_VNO IN ('03','05') and res.F003_PROCCODE in ('003000') and res.TXN_TYPE IN ('EZYAUTH' ,'AUTHSALE' , 'EZYMOTO' ,' EZYLINK') and res.TIME_STAMP between :from and :to order by res.TIME_STAMP desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType("EZYLINK");
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYSPLIT");
						fs.setTxnType("EZYSPLIT");
					}

				}

			} else {
				fs.setTxnType("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	// rkadminsplit

	@Override
	public void exportUMSplitTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMSplitTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzysplit ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.STATUS, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,res.F270_ORN,res.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "where res.STATUS in ('A','C','S') and res.H001_MTI in ('0290','0210','0230','0110') and res.H002_VNO IN ('03','05') and res.F003_PROCCODE in ('003000')  and res.TXN_TYPE IN ('EZYAUTH' ,'AUTHSALE' , 'EZYMOTO' ,' EZYLINK') and res.TIME_STAMP between :from  and :to order by res.time_stamp desc limit 10000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[14].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType("EZYLINK");
					} else if (rec[14].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	public void FPXTransactionEnqByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant, String from,
			String to) {

//                date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + "::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}

			if (midDetails.getUmEzywayMid() != null && !(midDetails.getUmEzywayMid().isEmpty())) {
				if (midDetails.getUmEzywayMid().equals("000000111021591")) {
					String ezywaymid = "000000000021591";
					midList.add(ezywaymid);
				} else if (midDetails.getUmEzywayMid() != null) {
					if (!midDetails.getUmEzywayMid().isEmpty()) {
						midList.add(midDetails.getUmEzywayMid());
					}

				}
			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * + "where b.MID IN ("+str+") AND  b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.BANK_NAME,b.FPXTXNID,b.MID,b.SUB_MERCHANT_MID from FPX_TRANSACTION b  "
				+ "where b.MID IN (" + str + ") AND  b.TIME_STAMP BETWEEN :from AND :to order by b.TIME_STAMP desc ";
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());

			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}

			if (rec[9] != null) {
				boostss.setPayableAmt(rec[9].toString());
			} else {
				boostss.setPayableAmt("");
			}
			if (rec[10] != null) {
				boostss.setBuyerName(rec[10].toString());
			} else {
				boostss.setBuyerName("");
			}

			if (rec[11] != null) {
				boostss.setBankName(rec[11].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[12] != null) {
				boostss.setFpxTxnId(rec[12].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[13] != null) {
				boostss.setMid(rec[13].toString());
			} else {
				boostss.setMid("");
			}
			if (rec[14] == null || rec[14].toString().isEmpty()) {
				boostss.setSubMerchantMID("");

			} else if (rec[14] != null) {
				boostss.setSubMerchantMID(rec[14].toString());
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	// rksettlementsum
	@Override
	@Transactional(readOnly = false)
	public void listsettleDetails(final PaginationBean<SettlementMDR> paginationBean, Merchant merchant,
			String fromDate, String toDate) {
		logger.info("listMerchantUserByMid::" + merchant.getMid().getMid());

		List<SettlementMDR> fss = new ArrayList<SettlementMDR>();

		String sql = null;
		String ummid = null, umezywaymid = null, umezyrecmid = null, umezypassmid = null, ummotomid = null,
				splitmid = null, umssmotomid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}

		if (merchant.getMid().getUmEzywayMid() != null && !(merchant.getMid().getUmEzywayMid().isEmpty())) {

			if (merchant.getMid().getUmEzywayMid().equals("000000111021591")) {
				String ezywaymid = "000000000021591";
				umezywaymid = ezywaymid;
			} else if (merchant.getMid().getUmEzywayMid() != null) {
				umezywaymid = merchant.getMid().getUmEzywayMid();
			}
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umezyrecmid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umezypassmid = merchant.getMid().getUmEzypassMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			ummotomid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getSplitMid() != null) {
			splitmid = merchant.getMid().getSplitMid();
		}
		if (merchant.getMid().getUmSsMotoMid() != null) {
			umssmotomid = merchant.getMid().getUmSsMotoMid();
		}
		logger.info("ummid - " + ummid + "  umezywaymid -   " + umezywaymid + "  umezyrecmid -  " + umezyrecmid
				+ "  umezypassmid - " + umezypassmid + " ummotomid - " + ummotomid + " splitmid - " + splitmid
				+ " umssmotomid - " + umssmotomid);

		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String from;
		String to;
		String fromsearch;
		String tosearch;

		if ((fromDate != null && toDate != null)) {
			from = fromDate.replace("-", "");
			to = toDate.replace("-", "");
			logger.info("from : " + from + "to:  " + to);

			sql = " SELECT s.SETTLEMENTDATE,s.DATE,s.INVOICE_ID,s.TXN_AMOUNT,s.TID,s.MDR_AMT, "
					+ "s.NET_AMOUNT,s.STATUS , s.MID from SETTLEMENT_MDR s  "
					+ "where (s.MID = :ummid or s.MID = :umezywaymid or s.MID = :umezypassmid or s.MID = :umezyrecmid or s.MID = :ummotomid  "
					+ "or s.MID = :splitmid or s.MID = :umssmotomid) and s.DATE BETWEEN '" + from + "' and '" + to
					+ "'  ";

		} else {
			fromsearch = fromDateToSearch.replace("-", "");
			tosearch = toDateToSearch.replace("-", "");
			logger.info("from : " + fromsearch + "to:  " + tosearch);

			sql = " SELECT s.SETTLEMENTDATE,s.DATE,s.INVOICE_ID,s.TXN_AMOUNT,s.TID,s.MDR_AMT, "
					+ "s.NET_AMOUNT,s.STATUS , s.MID from SETTLEMENT_MDR s  "
					+ "where (s.MID = :ummid or s.MID = :umezywaymid or s.MID = :umezypassmid or s.MID = :umezyrecmid or s.MID = :ummotomid  "
					+ "or s.MID = :splitmid or s.MID = :umssmotomid) order by s.DATE desc limit 100 ";

		}
		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("ummid", ummid);
		sqlQuery.setString("umezywaymid", umezywaymid);
		sqlQuery.setString("umezypassmid", umezypassmid);
		sqlQuery.setString("umezyrecmid", umezyrecmid);
		sqlQuery.setString("ummotomid", ummotomid);
		sqlQuery.setString("umezywaymid", umezywaymid);
		sqlQuery.setString("splitmid", splitmid);
		sqlQuery.setString("umssmotomid", umssmotomid);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			SettlementMDR fs = new SettlementMDR();

			String rd = null;
			String rt = null;
			if (rec[0] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setSettlementDate(rd);
			}

			if (rec[1] != null) {

				try {
					rt = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[1].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				fs.setDate(rt);
			}

			if (rec[2] != null) {
				fs.setInvoiceId(rec[2].toString());
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);
			}

			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			} else {
				fs.setTid("");
			}

			if (rec[6] != null) {

				Double d = new Double(rec[6].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}

			if (rec[5] != null) {

				Double d = new Double(rec[5].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrAmt(output);
			}
			if (rec[7] != null) {

				if (rec[7].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[8] != null) {
				fs.setMid(rec[8].toString());
			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		logger.info("fss : " + fss);
		paginationBean.setItemList(fss);

	}

	// boostsettlementsum
	@Override
	@Transactional(readOnly = false)
	public void listboostsettleDetails(final PaginationBean<BoostDailyRecon> paginationBean, Merchant merchant,
			String fromDate, String toDate) {
		logger.info("listMerchantUserByMid::" + merchant.getMid().getMid());

		List<BoostDailyRecon> fss = new ArrayList<BoostDailyRecon>();

		String sql = null;

		String ummid = null, umezywaymid = null, umezyrecmid = null, umezypassmid = null, ummotomid = null,
				splitmid = null, umssmotomid = null, mid = null, ezywaymid = null, ezyrecmid = null, ezypassmid = null,
				motomid = null, ssmotomid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}

		if (merchant.getMid().getUmEzywayMid() != null && !(merchant.getMid().getUmEzywayMid().isEmpty())) {
			if (merchant.getMid().getUmEzywayMid().equals("000000111021591")) {
				String UMezywaymid = "000000000021591";
				umezywaymid = UMezywaymid;
			} else if (merchant.getMid().getUmEzywayMid() != null) {
				umezywaymid = merchant.getMid().getUmEzywayMid();
			}
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umezyrecmid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umezypassmid = merchant.getMid().getUmEzypassMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			ummotomid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getSplitMid() != null) {
			splitmid = merchant.getMid().getSplitMid();
		}
		if (merchant.getMid().getUmSsMotoMid() != null) {
			umssmotomid = merchant.getMid().getUmSsMotoMid();
		}

		// paydee

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}

		if (merchant.getMid().getEzypassMid() != null) {
			ezypassmid = merchant.getMid().getEzypassMid();
		}

		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecmid = merchant.getMid().getEzyrecMid();
		}

		if (merchant.getMid().getEzywayMid() != null) {
			ezywaymid = merchant.getMid().getEzywayMid();
		}

		if (merchant.getMid().getSsMotoMid() != null) {
			ssmotomid = merchant.getMid().getSsMotoMid();
		}

		logger.info("ummid - " + ummid + "  umezywaymid -   " + umezywaymid + "  umezyrecmid -  " + umezyrecmid
				+ "  umezypassmid - " + umezypassmid + " ummotomid - " + ummotomid + " splitmid - " + splitmid
				+ " umssmotomid - " + umssmotomid);

		logger.info("mid - " + mid + "  ezywaymid -   " + ezywaymid + "  ezyrecmid -  " + ezyrecmid + "  ezypassmid - "
				+ ezypassmid + " motomid - " + motomid + " ssmotomid - " + ssmotomid);

		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String fromtodate = null;
		String todate = null;
		String fromsearch = null;
		String tosearch = null;
		Query sqlQuery = null;

		if ((fromDate != null && toDate != null)) {
			fromtodate = fromDate.replace("-", "");
			todate = toDate.replace("-", "");
			logger.info("fromDate : " + fromtodate + "toDate:  " + todate);

			logger.info("search sql");

			sql = " SELECT b.DATE,b.TXNAMOUNT,b.MID,b.TID,b.MDRREBATEAMOUNT, "
					+ "b.NETAMOUNT ,b.SETTLE_DATE from BOOST_DLY_RECON b  "
					+ "where (b.MID = :ummid or b.MID = :umezywaymid or b.MID = :umezypassmid or b.MID = :umezyrecmid or b.MID = :ummotomid  "
					+ "or b.MID = :splitmid or b.MID = :umssmotomid or b.MID = :mid or b.MID = :ezywaymid or b.MID = :ezypassmid "
					+ " or b.MID = :ezyrecmid  or b.MID = :motomid  or b.MID = :ssmotomid)  and b.DATE BETWEEN '"
					+ fromtodate + "%' and '" + todate + "%' order by b.DATE desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("umezywaymid", umezywaymid);
			sqlQuery.setString("umezypassmid", umezypassmid);
			sqlQuery.setString("umezyrecmid", umezyrecmid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("splitmid", splitmid);
			sqlQuery.setString("umssmotomid", umssmotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("ezywaymid", ezywaymid);
			sqlQuery.setString("ezypassmid", ezypassmid);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("ssmotomid", ssmotomid);
			// sqlQuery.setString("fromtodate", fromtodate);
			// sqlQuery.setString("todate", todate);

		} else {
			fromsearch = fromDateToSearch.replace("-", "");
			tosearch = toDateToSearch.replace("-", "");
			logger.info("fromDateToSearch : " + fromsearch + "toDateToSearch:  " + tosearch);

			logger.info("Main sql");

			sql = " SELECT b.DATE,b.TXNAMOUNT,b.MID,b.TID,b.MDRREBATEAMOUNT, "
					+ "b.NETAMOUNT , b.SETTLE_DATE from BOOST_DLY_RECON b  "
					+ "where (b.MID = :ummid or b.MID = :umezywaymid or b.MID = :umezypassmid or b.MID = :umezyrecmid or b.MID = :ummotomid  "
					+ "or b.MID = :splitmid or b.MID = :umssmotomid or b.MID = :mid or b.MID = :ezywaymid or b.MID = :ezypassmid "
					+ " or b.MID = :ezyrecmid  or b.MID = :motomid  or b.MID = :ssmotomid) order by b.DATE desc limit 100 ";

			logger.info("Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("umezywaymid", umezywaymid);
			sqlQuery.setString("umezypassmid", umezypassmid);
			sqlQuery.setString("umezyrecmid", umezyrecmid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("splitmid", splitmid);
			sqlQuery.setString("umssmotomid", umssmotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("ezywaymid", ezywaymid);
			sqlQuery.setString("ezypassmid", ezypassmid);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("ssmotomid", ssmotomid);
			// sqlQuery.setString("fromsearch", fromsearch);
			// sqlQuery.setString("tosearch", tosearch);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			BoostDailyRecon fs = new BoostDailyRecon();

			String rd = null;
			String rt = null;

			String rm = null;
			String rn = null;

			if (rec[0] != null) {

				if (rec[0].toString().contains("T")) {
					rd = rec[0].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setDate(rt);
				}
			}
			if (rec[1] != null) {

				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);
			} else {

				fs.setTxnAmount("");

			}

			if (rec[2] != null) {
				fs.setMid(rec[2].toString());
			} else {

				fs.setMid("");

			}

			if (rec[3] != null) {
				fs.setTid(rec[3].toString());
			} else {

				fs.setTid("");

			}

			if (rec[4] != null) {

				Double d = new Double(rec[4].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrRebateAmount(output);
			} else {
				fs.setMdrRebateAmount("");
			}

			if (rec[5] != null) {

				Double d = new Double(rec[5].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			} else {
				fs.setNetAmount("");
			}

			if (rec[6] != null) {

				if (rec[6].toString().contains("T")) {
					rm = rec[6].toString().substring(0, 8);

					logger.info("rm" + rm);

					try {
						rn = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rm));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rn" + rn);

					fs.setTimeStamp(rn);
				}
			}

			fss.add(fs);

		}

		logger.info("fss : " + fss);

		paginationBean.setItemList(fss);

	}

	// grabpaysettlementsum

	@Override
	@Transactional(readOnly = false)
	public void listgrabpaysettleDetails(final PaginationBean<GrabPayFile> paginationBean, Merchant merchant,
			String fromDate, String toDate) {
		logger.info("listMerchantUserByMid::" + merchant.getMid().getMid());

		List<GrabPayFile> fss = new ArrayList<GrabPayFile>();

		String sql = null;

		String ummid = null, umezywaymid = null, umezyrecmid = null, umezypassmid = null, ummotomid = null,
				splitmid = null, umssmotomid = null, mid = null, ezywaymid = null, ezyrecmid = null, ezypassmid = null,
				motomid = null, ssmotomid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umezywaymid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umezyrecmid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umezypassmid = merchant.getMid().getUmEzypassMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			ummotomid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getSplitMid() != null) {
			splitmid = merchant.getMid().getSplitMid();
		}
		if (merchant.getMid().getUmSsMotoMid() != null) {
			umssmotomid = merchant.getMid().getUmSsMotoMid();
		}

		// paydee

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}

		if (merchant.getMid().getEzypassMid() != null) {
			ezypassmid = merchant.getMid().getEzypassMid();
		}

		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecmid = merchant.getMid().getEzyrecMid();
		}

		if (merchant.getMid().getEzywayMid() != null) {
			ezywaymid = merchant.getMid().getEzywayMid();
		}

		if (merchant.getMid().getSsMotoMid() != null) {
			ssmotomid = merchant.getMid().getSsMotoMid();
		}

		logger.info("ummid - " + ummid + "  umezywaymid -   " + umezywaymid + "  umezyrecmid -  " + umezyrecmid
				+ "  umezypassmid - " + umezypassmid + " ummotomid - " + ummotomid + " splitmid - " + splitmid
				+ " umssmotomid - " + umssmotomid);

		logger.info("mid - " + mid + "  ezywaymid -   " + ezywaymid + "  ezyrecmid -  " + ezyrecmid + "  ezypassmid - "
				+ ezypassmid + " motomid - " + motomid + " ssmotomid - " + ssmotomid);

		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		Query sqlQuery = null;

		if ((fromDate != null && toDate != null)) {

			logger.info("fromDate : " + fromDate + "toDate:  " + toDate);

			logger.info("search sql");

			sql = " SELECT  g.PAYMENTDATE,g.TXNAMOUNT,td.MERCHANT_ID,td.TID , g.MDR , g.HOST_NETAMT , g.SETTLEMENT_DATE FROM GRABPAY_FILE g  INNER JOIN MOBILE_USER mu "
					+ "ON g.GPAYTID = mu.GPAY_TID OR g.GPAYTID = mu.ONLINE_GPAY "
					+ "INNER JOIN TERMINAL_DETAILS td ON td.TID = mu.TID OR td.TID = mu.MOTO_TID OR "
					+ "td.TID = mu.EZYWAY_TID OR td.TID = mu.EZYREC_TID OR td.TID = mu.SPLIT_TID WHERE td.MERCHANT_ID IN (:ummid , :umezywaymid , :umezypassmid , :umezyrecmid , :ummotomid , :splitmid , :umssmotomid , :mid , "
					+ ":ezywaymid , :ezypassmid , :ezyrecmid , :motomid , :ssmotomid) AND g.SETTLEMENT_DATE  BETWEEN '"
					+ fromDate + "' and '" + toDate + "' order by g.SETTLEMENT_DATE  desc ";

			logger.info("search Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("umezywaymid", umezywaymid);
			sqlQuery.setString("umezypassmid", umezypassmid);
			sqlQuery.setString("umezyrecmid", umezyrecmid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("splitmid", splitmid);
			sqlQuery.setString("umssmotomid", umssmotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("ezywaymid", ezywaymid);
			sqlQuery.setString("ezypassmid", ezypassmid);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("ssmotomid", ssmotomid);
			// sqlQuery.setString("fromtodate", fromtodate);
			// sqlQuery.setString("todate", todate);

		} else {

			logger.info("fromDateToSearch : " + fromDateToSearch + "toDateToSearch:  " + toDateToSearch);

			logger.info("Main sql");

			sql = " SELECT  g.PAYMENTDATE,g.TXNAMOUNT,td.MERCHANT_ID,td.TID , g.MDR , g.HOST_NETAMT , g.SETTLEMENT_DATE  FROM GRABPAY_FILE g  INNER JOIN MOBILE_USER mu "
					+ "ON g.GPAYTID = mu.GPAY_TID OR g.GPAYTID = mu.ONLINE_GPAY "
					+ "INNER JOIN TERMINAL_DETAILS td ON td.TID = mu.TID OR td.TID = mu.MOTO_TID OR "
					+ "td.TID = mu.EZYWAY_TID OR td.TID = mu.EZYREC_TID OR td.TID = mu.SPLIT_TID WHERE td.MERCHANT_ID IN (:ummid , :umezywaymid , :umezypassmid , :umezyrecmid , :ummotomid , :splitmid , :umssmotomid , :mid ,"
					+ ":ezywaymid , :ezypassmid , :ezyrecmid , :motomid , :ssmotomid) order by g.SETTLEMENT_DATE desc limit 100";

			logger.info(" main Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("umezywaymid", umezywaymid);
			sqlQuery.setString("umezypassmid", umezypassmid);
			sqlQuery.setString("umezyrecmid", umezyrecmid);
			sqlQuery.setString("ummotomid", ummotomid);
			sqlQuery.setString("splitmid", splitmid);
			sqlQuery.setString("umssmotomid", umssmotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("ezywaymid", ezywaymid);
			sqlQuery.setString("ezypassmid", ezypassmid);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("ssmotomid", ssmotomid);
			// sqlQuery.setString("fromsearch", fromsearch);
			// sqlQuery.setString("tosearch", tosearch);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			GrabPayFile fs = new GrabPayFile();

			if (rec[0] != null) {

				fs.setPaymentDate(rec[0].toString());
			} else {
				fs.setPaymentDate("");
			}

			if (rec[1] != null) {

				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);
			} else {

				fs.setTxnAmount("");

			}

			if (rec[2] != null) {
				fs.setMerchantId(rec[2].toString());
			} else {

				fs.setMerchantId("");

			}

			if (rec[3] != null) {
				fs.setPartnerId(rec[3].toString());
			} else {

				fs.setPartnerId("");

			}

			if (rec[4] != null) {

				Double d = new Double(rec[4].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdr(output);
			} else {
				fs.setMdr("");
			}

			if (rec[5] != null) {

				Double d = new Double(rec[5].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setHostNetAmt(output);
			} else {
				fs.setHostNetAmt("");
			}

			if (rec[6] != null) {

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setSettlementDate(rd);
			}

			fss.add(fs);

		}

		logger.info("fss : " + fss);

		paginationBean.setItemList(fss);

	}

	// Grabpay summary new
	Integer num = null;

	@Override
	@Transactional(readOnly = false)
	public void ListGrabpaySummaryAdmin(final PaginationBean<ForSettlement> paginationBean, Merchant merchant,
			String fromDate, String toDate, String VALUE, String TXNTYPE, String export) {

		String SearchValue = VALUE;
		logger.info("Inside Grabpay Summary Dao impl");

		List<ForSettlement> fss = new ArrayList<ForSettlement>();

		String sql = null;

		Query sqlQuery = null;

		String from = null;
		String to = null;
		String fromsearch = null;
		String tosearch = null;

		if ((fromDate == null || toDate == null) || (fromDate.equals("") || toDate.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));

			logger.info("from : " + from + "to:  " + to);

		} else {

			fromsearch = fromDate;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				fromsearch = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromsearch));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			tosearch = toDate;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				tosearch = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(tosearch));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			logger.info("fromsearch : " + fromsearch + "tosearch:  " + tosearch);

		}

		if ((fromsearch != null && tosearch != null)) {

			logger.info(" Inside Grabpay Search Query ");

			logger.info("fromsearch : " + fromsearch + "tosearch:  " + tosearch);

			/*
			 * sql =
			 * "select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,a.MERCHANT_NAME AS BUSINESS_NAME,a.STAN AS STAN "
			 * + " from FOR_SETTLEMENT a " +
			 * "WHERE a.STATUS in ('GPS','GRF','GBC','GPT')  And a.TIME_STAMP between " +
			 * ":fromsearch and :tosearch order by a.TIME_STAMP desc limit 10000";
			 */

			sql = "select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,a.MERCHANT_NAME AS BUSINESS_NAME,a.STAN AS STAN,a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ " from FOR_SETTLEMENT a "
					+ "WHERE a.STATUS in ('GPS','GRF','GBC','GPT')  And a.TIME_STAMP between "
					+ ":fromsearch and :tosearch order by a.TIME_STAMP desc";

			logger.info("Search Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromsearch", fromsearch);
			sqlQuery.setString("tosearch", tosearch);

			String FromDate = paginationBean.setDateFromBackend(fromsearch);
			String From1Date = paginationBean.setDate1FromBackend(tosearch);

			// Dynamic changes for pagination count

//			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//			int pageSize = Integer.parseInt(DynamicPage);
//
//			int pageNumFromJsp = paginationBean.getCurrPage();
//			logger.info("Page Number:" + pageNumFromJsp);
//			logger.info("Max Count for Records:" + pageSize);
//
//			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//			sqlQuery.setMaxResults(pageSize);

			if (export == null) {
				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);
			}

		}

		else if (TXNTYPE.equals("GRAB1")) {

			logger.info("<=== SEARCH GRAB By Stan No ===>");

			sql = "select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,a.MERCHANT_NAME AS BUSINESS_NAME,a.STAN AS STAN,a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ " from FOR_SETTLEMENT a " + "WHERE a.STATUS in ('GPS','GRF','GBC','GPT')  And a.STAN LIKE '"
					+ SearchValue + "%'" + "order by a.TIME_STAMP desc";

			logger.info("Search Fpx Query for Stan No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Reference Number in Query :" + SearchValue);

		} else if (TXNTYPE.equals("GRAB2")) {

			logger.info("<=== SEARCH GRAB By Sub_Mid No ===>");

			sql = "select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,a.MERCHANT_NAME AS BUSINESS_NAME,a.STAN AS STAN,a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ " from FOR_SETTLEMENT a "
					+ "WHERE a.STATUS in ('GPS','GRF','GBC','GPT')  And a.SUB_MERCHANT_MID LIKE '" + SearchValue + "%'"
					+ "order by a.TIME_STAMP desc";

			logger.info("Search Fpx Query for Stan No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Reference Number in Query :" + SearchValue);

		}

		else {

			/*
			 * logger.info(" Inside Grabpay Default Query ");
			 * 
			 * logger.info("from : " + from + "to:  " + to);
			 * 
			 * sql =
			 * " select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,a.MERCHANT_NAME AS BUSINESS_NAME,a.STAN AS STAN "
			 * + " from FOR_SETTLEMENT a " +
			 * "WHERE a.STATUS in ('GPS','GRF','GBC','GPT') And a.TIME_STAMP between " +
			 * ":from and :to order by a.TIME_STAMP desc limit 10000";
			 * 
			 * logger.info("Default Query : " + sql); sqlQuery =
			 * super.getSessionFactory().createSQLQuery(sql); sqlQuery.setString("from",
			 * from); sqlQuery.setString("to", to);
			 */

			logger.info(" Inside Grabpay Default Query ");

			logger.info("from : " + from + "to:  " + to);

//                      sql = " select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,c.BUSINESS_NAME AS BUSINESS_NAME,a.STAN AS STAN,a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
//                              + "from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//                              + "INNER JOIN FOR_SETTLEMENT a ON a.TID = u.GPAY_TID "
//                              + "WHERE a.STATUS in ('GPS','GRF','GBC','GPT') And a.TIME_STAMP between "
//                              + ":from and :to order by a.TIME_STAMP desc ";

			sql = "select a.AMOUNT AS AMOUNT,a.TIME_STAMP AS TIME_STAMP,a.STATUS AS STATUS,a.MERCHANT_NAME AS BUSINESS_NAME,a.STAN AS STAN,a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ " from FOR_SETTLEMENT a "
					+ "WHERE a.STATUS in ('GPS','GRF','GBC','GPT') And a.TIME_STAMP between "
					+ ":from and :to order by a.TIME_STAMP desc";

			logger.info("Default Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		int sizedummy = resultSet.size();
		long startTime = System.currentTimeMillis();
		System.out.println(
				"Time taken for whole record loading : " + (System.currentTimeMillis() - startTime) + "MilliSeconds");
		logger.info("Number of records in the List : " + sizedummy);

//          List<Object[]> resultSet = sqlQuery.list();
//          logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			String cd = null;
			String ct = null;

			if (rec[0] != null) {

				Double d = new Double(rec[0].toString());
				d = d / 100;
				logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			} else {
				fs.setAmount("");
			}

			if (rec[1] != null) {

				try {
					cd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					ct = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(cd);
				fs.setTime(ct);

			}

			if (rec[2] != null) {

				if (rec[2].toString().equals("GPS")) {
					fs.setStatus("GRABPAY SETTLED");

				} else if (rec[2].toString().equals("GRF")) {
					fs.setStatus("GRABPAY VOIDED");

				} else if (rec[2].toString().equals("GPT")) {
					fs.setStatus("GRABPAY SETTLED");

				} else if (rec[2].toString().equals("GBC")) {
					fs.setStatus("GRABPAY VOIDED");
				}

			} else {
				fs.setStatus("");
			}

			if (rec[3] != null) {
				fs.setMerchantName(rec[3].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[4] != null) {
				fs.setStan(rec[4].toString());
			} else {
				fs.setStan("");
			}

			if (rec[5] != null) {
				fs.setSubMerchantMID(rec[5].toString());
			} else {
				fs.setSubMerchantMID("");

			}

			fss.add(fs);

		}

		logger.info("fss : " + fss);
		paginationBean.setItemList(fss);

	}

	@Override
	@Transactional(readOnly = true)
	public void listAllForsettlementTransactionSearchAPI(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType,
			final String VALUE) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);
		String SearchValue = VALUE;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		Date dt = new Date();

		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);

		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);

		if (txnType.equals("BOOST1")) {

			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a  "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BPC','BPA','BPS') and a.INVOICE_ID LIKE '"
					+ SearchValue + "%'" + "order by a.time_stamp desc ";

			logger.info("Search Fpx Query for Stan No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Reference Number in Query :" + SearchValue);

		} else if (txnType.equals("BOOST2")) {

			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a  "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BPC','BPA','BPS') and a.RRN LIKE '" + SearchValue
					+ "%'" + "order by a.time_stamp desc ";

			logger.info("Search Fpx Query for Stan No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("RRN Number in Query :" + SearchValue);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			if (rec[15] != null) {
				fs.setSubMerchantMID(rec[15].toString());

			} else {
				fs.setSubMerchantMID("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void ListofM1PaySummarySearchApi(final PaginationBean<SettlementModel> paginationBean, final String date1,
			final String date2, final String txntype, final String VALUE) {

		logger.info("Inside List of Ewallet Transaction Details : " + date1 + "     " + date2 + " " + txntype);
		String SearchValue = VALUE;
		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
		String sql = null;
		Query sqlQuery = null;
		String today = null;

		Date dt = new Date();
		String fromDate = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		logger.info(" Previous Date Format " + fromDate);

		LocalDate Currentdate = LocalDate.now();
		LocalDate Currentdate1 = Currentdate.plusDays(1);
		today = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		String tomo = Currentdate1.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		if (txntype == null || txntype == "") {
			logger.info("Default M1 PAY Query Executed");

			sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') and f.TIME_STAMP LIKE '"
					+ today + "%' order by f.TIME_STAMP desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(today);
			String From1Date = paginationBean.setDate1FromBackend(tomo);
			String TXNTYPE = paginationBean.setTXNtype("");

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txntype.equals("M1pay1")) {

			logger.info("TOUCH N GO Query Executed");

			sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') and f.INVOICE_ID LIKE '"
					+ SearchValue + "%' order by f.TIME_STAMP desc ";

			logger.info("Search Fpx Query for Stan No: " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("INVOICE Number in Query :" + SearchValue);

		} else if (txntype.equals("M1pay2")) {

			logger.info("TOUCH N GO Query Executed");

			sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') and f.TNG_TXN_ID LIKE '"
					+ SearchValue + "%' order by f.TIME_STAMP desc ";

			logger.info("Search Fpx Query for Stan No: " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("INVOICE Number in Query :" + SearchValue);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementModel fs = new SettlementModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setMid("");

			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setTxnAmount("");

			} else

			if (rec[1] != null) {

				Double d = new Double(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setTid("");

			} else if (rec[2] != null) {

				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setStatus("");

			} else if (rec[3] != null) {

				if (rec[3].toString().equals("H")) {
					fs.setStatus("EZYSETTLE");
				} else if (rec[3].toString().equals("TPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("TPA")) {
					fs.setStatus("NOT SETTLED");
				}
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setRrn("");

			} else if (rec[4] != null) {
				fs.setRrn(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setDate("");
				fs.setTime("");

			} else if (rec[5] != null) {

				String Fdate = null;
				String Ftime = null;
				try {
					Fdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					Ftime = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					logger.info("Fdate   " + Fdate);
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setDate(Fdate);
				fs.setTime(Ftime);

			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setInvoiceId("");

			} else if (rec[6] != null) {
				fs.setInvoiceId(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[7] != null) {

				Double d = new Double(rec[7].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setMdrAmount("");

			} else if (rec[8] != null) {

				Double d = new Double(rec[8].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrAmount(output);

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setPaymentDate("");
			} else if (rec[9] != null || rec[9] != "") {

				String rt = null;

				try {
					rt = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[9].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				logger.info("rt" + rt);

				fs.setPaymentDate(rt);
			} else {
				fs.setPaymentDate("");
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setCardBrand("");

			} else if (rec[10] != null) {

				if (rec[10].toString().equals("TNG")) {
					fs.setCardBrand("TOUCH N GO");
				} else if (rec[10].toString().equals("SPP")) {
					fs.setCardBrand("SHOPEE PAY");
				} else {
					fs.setCardBrand("");
				}

			}

			if (rec[11] != null) {
				fs.setSubmerchantid(rec[11].toString());
			} else {
				fs.setSubmerchantid("");

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in M1 PAY SUMMARY: " + paginationBean.getItemList().size());

	}

	@Transactional
	public void ListofBnplSummarySearchApi(final PaginationBean<SettlementModel> paginationBean, final String date1,
			final String date2, final String txntype, final String VALUE) {

		logger.info("Inside List of BNPL Summary Details : " + date1 + "    " + date2 + " " + txntype);
		String Searchvalue = VALUE;
		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
		String sql = null;
		Query sqlQuery = null;
		String today = null;
		String prevDate = null;

		Date dt = new Date();
		String fromDate = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		logger.info(" Previous Date Format " + fromDate);

		LocalDate Currentdate = LocalDate.now();
		LocalDate Prev = Currentdate.minusDays(3);
		today = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		prevDate = Prev.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		if (txntype == null) {
			logger.info("Bnpl Query Admin summary default executed");
			sql = "SELECT b.MID,b.AMOUNT,b.TID,b.STATUS,b.BNPL_TXN_ID AS AID_RESPONSE,b.TIME_STAMP AS TIME_STAMP,b.INVOICE_ID AS INVOICE_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC') and b.TIME_STAMP BETWEEN '"
					+ prevDate + "' and '" + today + "' order by b.TIME_STAMP desc";

			logger.info("BNPL DEFAULT Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(prevDate);
			String From1Date = paginationBean.setDate1FromBackend(today);
			String TXNTYPE = paginationBean.setTXNtype("BNPL");

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
		}

		else if (txntype.equals("BNPL")) {
			logger.info("Bnpl Query Admin search executed");

			sql = "SELECT b.MID,b.AMOUNT,b.TID,b.STATUS,b.BNPL_TXN_ID AS AID_RESPONSE,b.TIME_STAMP AS TIME_STAMP,b.INVOICE_ID AS INVOICE_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC') and b.TIME_STAMP BETWEEN '"
					+ date1 + "' and '" + date2 + "' order by b.TIME_STAMP desc ";

			logger.info("BNPL ADMIN Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(date1);
			String From1Date = paginationBean.setDate1FromBackend(date2);
			String TXNTYPE = paginationBean.setTXNtype(txntype);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txntype.equals("BNPL1")) {

			logger.info("BNPL Query Executed");

			sql = "SELECT b.MID,b.AMOUNT,b.TID,b.STATUS,b.BNPL_TXN_ID AS AID_RESPONSE,b.TIME_STAMP AS TIME_STAMP,b.INVOICE_ID AS INVOICE_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC') and b.INVOICE_ID LIKE'"
					+ Searchvalue + "%' order by b.TIME_STAMP desc ";

//               sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
//                            + "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') and f.INVOICE_ID LIKE '"
//                            + Searchvalue + "%' order by f.TIME_STAMP desc ";

			logger.info("Search BNPL Query for INVOICE No: " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("INVOICE Number in Query :" + Searchvalue);

		} else if (txntype.equals("BNPL2")) {

			logger.info("BNPL Query Executed");

			sql = "SELECT b.MID,b.AMOUNT,b.TID,b.STATUS,b.BNPL_TXN_ID AS AID_RESPONSE,b.TIME_STAMP AS TIME_STAMP,b.INVOICE_ID AS INVOICE_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC') and b.BNPL_TXN_ID LIKE'"
					+ Searchvalue + "%' order by b.TIME_STAMP desc ";

			logger.info("Search BNPL Query for Approval No: " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Approval Number in Query :" + Searchvalue);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementModel fs = new SettlementModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setMid("");

			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setTxnAmount("");

			} else

			if (rec[1] != null) {

				Double d = new Double(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setTid("");

			} else if (rec[2] != null) {

				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setStatus("");

			} else if (rec[3] != null) {

				if (rec[3].toString().equals("BNS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BNA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BNC")) {
					fs.setStatus("VOIDED");
				}
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setRrn("");

			} else if (rec[4] != null) {
				fs.setRrn(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setDate("");
				fs.setTime("");

			} else if (rec[5] != null) {

				String Fdate = null;
				String Ftime = null;
				try {
					Fdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					Ftime = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					logger.info("Fdate   " + Fdate);
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setDate(Fdate);
				fs.setTime(Ftime);

			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setInvoiceId("");

			} else if (rec[6] != null) {
				fs.setInvoiceId(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[7] != null) {

				Double d = new Double(rec[7].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setMdrAmount("");

			} else if (rec[8] != null) {

				Double d = new Double(rec[8].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrAmount(output);

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setPaymentDate("");
			} else if (rec[9] != null || rec[9] != "") {

				String rt = null;

				try {
					rt = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[9].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				logger.info("rt" + rt);

				fs.setPaymentDate(rt);
			} else {
				fs.setPaymentDate("");
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setCardBrand("");

			} else if (rec[10] != null) {
				fs.setCardBrand(rec[10].toString());
			}

			if (rec[11] != null) {
				fs.setSubmerchantid(rec[11].toString());
			} else {
				fs.setSubmerchantid("");

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in BNPL SUMMARY: " + paginationBean.getItemList().size());

	}

	@Override
	public void listUMEzywayTransactionSearchApi(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String Txntype, String VALUE) {
		// TODO Auto-generated method stub
		String SearchValue = VALUE;
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		String Searchvalue = VALUE;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		if (Txntype.equals("EZYWAY1")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and req.F270_ORN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (Txntype.equals("EZYWAY2")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.MASKED_PAN LIKE '%"
					+ SearchValue + "' order by res.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (Txntype.equals("EZYWAY3")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.F011_AUTHIDRESP LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		} else if (Txntype.equals("EZYWAY4")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME,res.SUB_MERCHANT_MID, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S','CB','R') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.F023_RRN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUND");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUND");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCBDate(rec[13].toString());
			} else {
				fs.setCBDate("");
			}

			if (rec[14] != null) {
				fs.setCBReason(rec[14].toString());
			} else {
				fs.setCBReason("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[17] != null) {
				fs.setSubmid(rec[17].toString());
			} else {
				fs.setSubmid("");
			}
			//service id
			if (rec[18] != null) {
				fs.setServiceId(rec[18].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	@Transactional(readOnly = true)
	public void listAllUmEzywireTransactionSearchAPI(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType,
			final String VALUE) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		String SearchValue = VALUE;
		Query sqlQuery = null;

		logger.info("inside ALL" + txnType);
		if (txnType.equals("UMEZYWIRE1")) {
			logger.info("UM_EZYWIRE Ref No :" + SearchValue);

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE IN ('U','FIUU') and a.EZYWIRE_TYPE is null and a.STATUS in ('A','S','C','R','P')  and a.INVOICE_ID LIKE '"
					+ SearchValue + "%'" + "order by a.time_stamp desc ";

			logger.info("Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txnType.equals("UMEZYWIRE2")) {
			logger.info("UM_EZYWIRE CARD No :" + SearchValue);

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE IN ('U','FIUU') and a.EZYWIRE_TYPE is null and a.STATUS in ('A','S','C','R','P') and t.MASKED_PAN LIKE '%"
					+ SearchValue + "'" + "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txnType.equals("UMEZYWIRE3")) {
			logger.info("UM_EZYWIRE AID Response No :" + SearchValue);

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE IN ('U','FIUU') and a.EZYWIRE_TYPE is null and a.STATUS in ('A','S','C','R','P') and a.AID_RESPONSE LIKE '"
					+ SearchValue + "%'" + "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txnType.equals("UMEZYWIRE4")) {
			logger.info("UM_EZYWIRE RRN No :" + SearchValue);

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE IN ('U','FIUU') and a.EZYWIRE_TYPE is null and a.STATUS in ('A','S','C','R','P') and a.RRN LIKE '"
					+ SearchValue + "%'" + "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setStan(rec[12].toString());
			} else {
				fs.setStan("");
			}
			if (rec[13] != null) {
				fs.setMid(rec[13].toString());
			} else {
				fs.setMid("");
			}
			if (rec[14] != null) {
				fs.setAidResponse(rec[14].toString());
			} else {
				fs.setAidResponse("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void listUMMotoTransactionSearchApi(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType, String VALUE) {
		// TODO Auto-generated method stub

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String SearchValue = VALUE;
		String sql = null;
		Query sqlQuery = null;
		if (txnType.equals("UMMOTO1")) {
			logger.info("Inside UMEzymoto Reference :" + SearchValue);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and req.F270_ORN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		} else if (txnType.equals("UMMOTO2")) {
			logger.info("Inside UMEzymoto Card No :" + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.MASKED_PAN LIKE '%"
					+ SearchValue + "' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		} else if (txnType.equals("UMMOTO3")) {
			logger.info("Inside UMEzymoto AID RESPONSE NO :" + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.F011_AUTHIDRESP LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		} else if (txnType.equals("UMMOTO4")) {
			logger.info("Inside UMEzymoto RRN NO :" + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.F023_RRN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		}
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			//service id
			if (rec[17] != null) {
				fs.setServiceId(rec[17].toString());
			} else {
				fs.setServiceId("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void listUMLinkTransactionSearchAPI(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType, String VALUE) {
		// TODO Auto-generated method stub

		String SearchValue = VALUE;

		Query sqlQuery = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if (txnType.equals("UMEZYLINK1")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S')  and res.H002_VNO ='03'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and req.F270_ORN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);

		}

		else if (txnType.equals("UMEZYLINK2")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S')  and res.H002_VNO ='03'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.MASKED_PAN LIKE '%"
					+ SearchValue + "' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);

		} else if (txnType.equals("UMEZYLINK3")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S')  and res.H002_VNO ='03'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.F011_AUTHIDRESP LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);

		} else if (txnType.equals("UMEZYLINK4")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.`STATUS` in ('A','C','S')  and res.H002_VNO ='03'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.F023_RRN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			//service id
			if (rec[17] != null) {
				fs.setServiceId(rec[17].toString());
			} else {
				fs.setServiceId("");
			}
			
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyauthTransactionSearchAPI(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType, String VALUE) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "     " + date1 + " " + txnType);
		Query sqlQuery = null;
		String SearchValue = VALUE;
		String from = null;
		String to = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if (txnType.equals("UMEZYAUTH1")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','E','C') and res.txn_type = 'EZYAUTH' and res.MASKED_PAN LIKE '%"
					+ SearchValue + "' order by res.time_stamp desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		} else if (txnType.equals("UMEZYAUTH2")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','E','C') and res.txn_type = 'EZYAUTH' and res.F011_AUTHIDRESP LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		} else if (txnType.equals("UMEZYAUTH3")) {

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.F260_SERVID from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','E','C') and res.txn_type = 'EZYAUTH' and res.F023_RRN LIKE '"
					+ SearchValue + "%' order by res.time_stamp desc ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Query : " + sql);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("E")) {
					// fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}
			
			if (rec[13] != null) {
				fs.setServiceId(rec[13].toString());
			} else {
				fs.setServiceId("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String txnType,
			Merchant merchant) {

		int querySize = 0;
		List<Object[]> resultSet = null;
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;
		String fiuuMid = "";

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}
		
		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}

		String Ezywaymid = umEzywayMid;

		logger.info("umEzywayMid" + Ezywaymid);

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			try {
				LocalDate Currentdate = LocalDate.now().minusDays(5);
				LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
				from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				logger.info("From date :" + from);
				logger.info("To date :" + to);
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception while date formating " + e);
			}

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);

//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:Ezywaymid and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:Ezywaymid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			// added MRN
//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE, res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:Ezywaymid and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:Ezywaymid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";
			sql = "select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE, res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "where res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.TXN_TYPE IN ('EZYWAY') and res.H001_MTI in ('0290','0210','0200') and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) order by res.TIME_STAMP desc";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("Ezywaymid", Ezywaymid);
		sqlQuery.setString("fiuuMid", fiuuMid);
//		sqlQuery.setString("fpxmid", fpxmid);

		querySize = sqlQuery.list().size();
		paginationBean.setQuerySize(String.valueOf(querySize));
		logger.info("total size of failed summary  query is : " + sqlQuery.list().size());

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		resultSet = sqlQuery.list();

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setRespMessage("");
				fs.setRespcode("");
			} else if (rec[7] != null) {

				if (rec[12].toString().equals("EZYWAY")) {

					fs.setRespcode(rec[7].toString());
					logger.info("setRespCode: " + (rec[7].toString()));
					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());

				} else {
					logger.info("fpx");
					fs.setRespMessage(rec[7].toString());
					fs.setRespcode(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
				fs.setRespcode("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {
				logger.info("if ch name");
				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				logger.info("else ch name");
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				logger.info("if reference");
				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				logger.info("else reference");

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {
				logger.info("if status");
				fs.setSTATUS("Failed");

			} else {
				logger.info("else status");

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {
				logger.info("if card Type");
				fs.setCardType(rec[11].toString());

			} else {
				logger.info("else card Type");
				fs.setCardType("");
			}

			if (rec[12] != null) {
				logger.info("if Txn Type");
				fs.setTxnType(rec[12].toString());

			} else {
				logger.info("else Txn Type");
				fs.setTxnType("");
			}
			if (rec[13] != null) {
				logger.info("if MRN");
				fs.setF263_MRN(rec[13].toString());

			} else {
				logger.info("else MRN");
				fs.setF263_MRN("");
			}

			logger.info("before fss");

			fss.add(fs);
			logger.info("after fss");
		}
		logger.info("paginationBean");
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

// Ezyway Failed Transaction - Start	
//	@Override
//	public void listUMEzywayTransactionFailure(PaginationBean<UMEzyway> paginationBean,
//			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String txnType,
//			Merchant merchant) {
//
//		// TODO Auto-generated method stub
//		int querySize = 0;
//		List<Object[]> resultSet = null;
//		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
//		String from = null;
//		String to = null;
//		String year1 = null;
//		String year2 = null;
//		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
//		String sql = null;
//		String fpxmid = null;
//
//		if (merchant.getMid().getFpxMid() != null) {
//			fpxmid = merchant.getMid().getFpxMid();
//		}
//
//		String Ezywaymid = umEzywayMid;
//
//		logger.info("umEzywayMid" + Ezywaymid);
//
//		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {
//
//			/*
//			 * Date dt = new Date();
//			 * 
//			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
//			 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
//			 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
//			 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
//			 * logger.info("change date format:" + from);
//			 * 
//			 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
//			 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
//			 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
//			 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
//			 */
//
//			LocalDate Currentdate = LocalDate.now().minusDays(5);
//			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
//			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
//			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
//			logger.info("From date :" + from);
//			logger.info("To date :" + to);
//
//		} else {
//
//			from = date;
//			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//			try {
//				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
//				logger.info("date format:" + date);
//			} catch (ParseException e) {
//
//				e.printStackTrace();
//			}
//
//			to = date1;
//			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
//			try {
//				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
//			} catch (ParseException e) {
//
//				e.printStackTrace();
//			}
//
//		}
//
//		logger.info("checkd date: " + from + " : " + to);
//		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
//			logger.info("Inside UMEzyway ALL " + txnType);
//
//			// exisiting query
//
////			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
////					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
////					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
////					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
////					+ "and res.H001_MTI in ('0290','0210') "
////					+ "where res.F001_MID =:Ezywaymid and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
////					+ "UNION "
////					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
////					+ " from FPX_TRANSACTION b where (b.MID =:Ezywaymid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";
//
//			// new
//
////			sql = " select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
////					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
////					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
////					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
////					+ "and res.H001_MTI in ('0290','0210') "
////					+ "where res.F001_MID =:Ezywaymid and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null)  "
////					+ " order by res.TIME_STAMP desc ";
//
//			// added MRN
//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE, res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:Ezywaymid and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:Ezywaymid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";
//		}
//
//		logger.info("Query : " + sql);
//		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//		sqlQuery.setString("from", from);
//		sqlQuery.setString("to", to);
//		sqlQuery.setString("Ezywaymid", Ezywaymid);
//		// sqlQuery.setString("fpxmid", fpxmid);
//
//		querySize = sqlQuery.list().size();
//		paginationBean.setQuerySize(String.valueOf(querySize));
//		logger.info("total size of failed summary  query is : " + sqlQuery.list().size());
//
//		String FromDate = paginationBean.setDateFromBackend(from);
//		String From1Date = paginationBean.setDate1FromBackend(to);
//		String TXNTYPE = paginationBean.setTXNtype(txnType);
//
//		// Dynamic changes for pagination count
//
//		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//		int pageSize = Integer.parseInt(DynamicPage);
//
//		int pageNumFromJsp = paginationBean.getCurrPage();
//		logger.info("Page Number:" + pageNumFromJsp);
//		logger.info("Max Count for Records:" + pageSize);
//
//		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//		sqlQuery.setMaxResults(pageSize);
//
//		resultSet = sqlQuery.list();
//		logger.info("Number of records in the List : " + resultSet.size());
//
//		for (Object[] rec : resultSet) {
//
//			UMEzyway fs = new UMEzyway();
//
//			if (rec[0] != null) {
//				fs.setF001_MID(rec[0].toString());
//			} else {
//				fs.setF001_MID("");
//			}
//
//			if (rec[1] != null) {
//
//				if (rec[1].toString().contains(".")) {
//					Double d = new Double(rec[1].toString());
//					String pattern = "#,##0.00";
//					DecimalFormat myFormatter = new DecimalFormat(pattern);
//					String output = myFormatter.format(d);
//
//					fs.setF007_TXNAMT(output);
//				} else {
//					double amount = 0;
//					amount = Double.parseDouble(rec[1].toString()) / 100;
//					String pattern = "#,##0.00";
//					DecimalFormat myFormatter = new DecimalFormat(pattern);
//					String output = myFormatter.format(amount);
//					fs.setF007_TXNAMT(output);
//
//				}
//			} else {
//				fs.setF007_TXNAMT("");
//			}
//
//			if (rec[2] != null) {
//				fs.setF354_TID(rec[2].toString());
//			} else {
//				fs.setF354_TID("");
//			}
//
//			if (rec[3] == null || rec[3].toString().isEmpty()) {
//				fs.setPAN("");
//			} else if (rec[3] != null || rec[3] != "") {
//
//				String rt = null;
//				String rd = null;
//				String lasteightDigits = null;
//
//				if (rec[3].toString().contains("f")) {
//
//					int panlength = rec[3].toString().length();
//
//					logger.info("panlength" + panlength);
//					String replacefpan = rec[3].toString().replace("f", "*");
//					logger.info("replacefpan" + replacefpan);
//
//					if (panlength > 13) {
//
//						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);
//
//						logger.info("lasteightDigits" + lasteightDigits);
//
//					}
//					fs.setPAN(lasteightDigits);
//				}
//
//			} else {
//				fs.setPAN("");
//			}
//
//			if (rec[4] == null || rec[4].toString().isEmpty()) {
//				fs.setF011_AUTHIDRESP("");
//			} else if (rec[4] != null) {
//				fs.setF011_AUTHIDRESP(rec[4].toString());
//			}
//
//			if (rec[5] == null || rec[5].toString().isEmpty()) {
//				fs.setF023_RRN("");
//			} else if (rec[5] != null) {
//
//				fs.setF023_RRN(rec[5].toString());
//			}
//
//			if (rec[6] != null) {
//				String rd = null;
//				String rt = null;
//				try {
//					rd = new SimpleDateFormat("dd/MM/yyyy")
//							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
//					rt = new SimpleDateFormat("HH:mm:ss")
//							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
//				} catch (ParseException e) {
//
//					e.printStackTrace();
//				}
//				fs.setDate(rd);
//				fs.setTime(rt);
//			} else {
//				fs.setDate("");
//				fs.setTime("");
//			}
//
//			if (rec[7] == null || rec[7].toString().isEmpty()) {
//
//				fs.setRespMessage("");
//			} else if (rec[7] != null) {
//
//				if (rec[12].toString().equals("EZYWAY")) {
//
//					String respMsg = getResMsg(rec[7].toString());
//					logger.info("respMsg" + respMsg);
//					fs.setRespMessage(respMsg);
//					logger.info("setRespMessage: " + fs.getRespMessage());
//				} else {
//					logger.info("fpx");
//					fs.setRespMessage(rec[7].toString());
//				}
//			} else {
//				fs.setRespMessage("");
//			}
//
//			if (rec[8] == null || rec[8].toString().isEmpty()) {
//				logger.info("if ch name");
//				fs.setF268_CHNAME("");
//			} else if (rec[8] != null) {
//				logger.info("else ch name");
//				fs.setF268_CHNAME(rec[8].toString());
//
//			}
//
//			if (rec[9] == null || rec[9].toString().isEmpty()) {
//				logger.info("if reference");
//				fs.setF270_ORN("");
//
//			} else if (rec[9] != null) {
//
//				logger.info("else reference");
//
//				fs.setF270_ORN(rec[9].toString());
//
//			}
//
//			if (rec[10] != null) {
//				logger.info("if status");
//				fs.setSTATUS("Failed");
//
//			} else {
//				logger.info("else status");
//
//				fs.setSTATUS("Failed");
//			}
//
//			if (rec[11] != null) {
//				logger.info("if card Type");
//				fs.setCardType(rec[11].toString());
//
//			} else {
//				logger.info("else card Type");
//				fs.setCardType("");
//			}
//
//			if (rec[12] != null) {
//				logger.info("if Txn Type");
//				fs.setTxnType(rec[12].toString());
//
//			} else {
//				logger.info("else Txn Type");
//				fs.setTxnType("");
//			}
//			if (rec[13] != null) {
//				logger.info("if MRN");
//				fs.setF263_MRN(rec[13].toString());
//
//			} else {
//				logger.info("else MRN");
//				fs.setF263_MRN("");
//			}
//
//			logger.info("before fss");
//
//			fss.add(fs);
//			logger.info("after fss");
//		}
//		logger.info("paginationBean");
//		paginationBean.setItemList(fss);
//		logger.info("No of Records: " + paginationBean.getItemList().size());
//
//	}

	@Override
	public void exportUMEzywayTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;
		String fiuuMid = "";

		String Ezywaymid = umEzywayMid;

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}
		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}


		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);

//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:Ezywaymid and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:Ezywaymid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			// added MRN
			sql = "select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "where res.F001_MID IN (:Ezywaymid,:fiuuMid) and res.TXN_TYPE IN ('EZYWAY') and res.H001_MTI in ('0290','0210','0200') and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) order by TIME_STAMP desc ";
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:Ezywaymid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("Ezywaymid", Ezywaymid);
//		 
		sqlQuery.setString("fiuuMid", fiuuMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}
			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setRespMessage("");
			} else if (rec[7] != null) {

				if (rec[12].toString().equals("EZYWAY")) {

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {
					logger.info("fpx");
					fs.setRespMessage(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {
				logger.info("if ch name");
				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				logger.info("else ch name");
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				logger.info("if reference");
				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				logger.info("else reference");

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {
				logger.info("if status");
				fs.setSTATUS("Failed");

			} else {
				logger.info("else status");

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {
				logger.info("if card Type");
				fs.setCardType(rec[11].toString());

			} else {
				logger.info("else card Type");
				fs.setCardType("");
			}

			if (rec[12] != null) {
				logger.info("if Txn Type");
				fs.setTxnType(rec[12].toString());

			} else {
				logger.info("else Txn Type");
				fs.setTxnType("");
			}
			if (rec[13] != null) {
				logger.info("if MRN");
				fs.setF263_MRN(rec[13].toString());

			} else {
				logger.info("else MRN");
				fs.setF263_MRN("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// Ezyway Failed Transaction - End

	// EzyLink Failed Transaction - Start

	@Override
	public void listUMLinkTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umMotoMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub
		int querySize = 0;
		List<Object[]> resultSet = null;

		logger.info("Inside list UMLink Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;

		String motomid = umMotoMid;
		String fiuuMid = null;
		
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}
		
		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			try {
				LocalDate Currentdate = LocalDate.now().minusDays(5);
				LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
				from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				logger.info("From date :" + from);
				logger.info("To date :" + to);
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception while date formating " + e);
			}

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMLink ALL " + txnType);

//          sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//                  + "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
//                  + "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//                  + "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//                  + "and res.H001_MTI in ('0290','0210') "
//                  + "where res.F001_MID =:motomid and res.H002_VNO ='03' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//                  + "UNION "
//                  + "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
//                  + " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			// added MRN
//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:motomid and res.H002_VNO ='03' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			sql = "select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.F001_MID IN (:motomid, :fiuuMid) and res.H002_VNO ='03' and res.TXN_TYPE IN ('EZYMOTO') and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) order by res.TIME_STAMP desc ";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("motomid", motomid);
		sqlQuery.setString("fiuuMid", fiuuMid);
//		sqlQuery.setString("fpxmid", fpxmid);

		querySize = sqlQuery.list().size();
		paginationBean.setQuerySize(String.valueOf(querySize));
		logger.info("size of search query is :: " + querySize);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] != null) {

				if (rec[12].toString().equals("EZYMOTO")) {

					fs.setRespcode(rec[7].toString());
					logger.info("setRespCode: " + (rec[7].toString()));

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {

					fs.setRespMessage(rec[7].toString());
					fs.setRespcode(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
				fs.setRespcode("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {

				fs.setSTATUS("Failed");

			} else {

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {

				fs.setCardType(rec[11].toString());

			} else {

				fs.setCardType("");
			}
			if (rec[12] != null) {

				fs.setTxnType(rec[12].toString());

			} else {

				fs.setTxnType("");
			}
			if (rec[13] != null) {

				fs.setF263_MRN(rec[13].toString());

			} else {

				fs.setF263_MRN("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void exportUMLinkTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umMotoMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMlink Transaction export: " + date + "  " + date1 + "  " + txnType + "  " + umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;

		String motomid = umMotoMid;
		
		String fiuuMid = null;

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}

		
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);

//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:motomid and res.H002_VNO ='03' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			// added MRN
			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0200') "
					+ "where res.F001_MID IN (:motomid, :fiuuMid) and res.H002_VNO ='03' and res.TXN_TYPE IN ('EZYMOTO') and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null )) )as temp order by TIME_STAMP desc ";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("motomid", motomid);
		//sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("fiuuMid", fiuuMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] != null) {

				if (rec[12].toString().equals("EZYMOTO")) {

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {

					fs.setRespMessage(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {

				fs.setSTATUS("Failed");

			} else {

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {

				fs.setCardType(rec[11].toString());

			} else {

				fs.setCardType("");
			}
			if (rec[12] != null) {

				fs.setTxnType(rec[12].toString());

			} else {

				fs.setTxnType("");
			}
			if (rec[13] != null) {

				fs.setF263_MRN(rec[13].toString());

			} else {

				fs.setF263_MRN("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// EzyLink Failed Transaction - End

	// EzyMoto Failed Transaction - Start
	@Override
	public void listUMMotoTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umMotoMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub
		int querySize = 0;
		List<Object[]> resultSet = null;

		logger.info("Inside list UMMoto Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;
		
		String fiuuMid = null;

		String motomid = umMotoMid;
		
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}
		
		if(merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			try {
				LocalDate Currentdate = LocalDate.now().minusDays(5);
				LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
				from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				logger.info("From date :" + from);
				logger.info("To date :" + to);
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception while date formating " + e);
			}

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		logger.info("fiuu mid is : "+fiuuMid);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto ALL " + txnType);

//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:motomid and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			// added MRN
//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:motomid and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			sql = "select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.F263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID or res.F001_MID = m.FIUU_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230','0200') "
					+ "where res.F001_MID IN (:motomid, :fiuuMid) and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) order by res.TIME_STAMP desc ";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("motomid", motomid);
		sqlQuery.setString("fiuuMid", fiuuMid);
//		sqlQuery.setString("fpxmid", fpxmid);

		querySize = sqlQuery.list().size();
		paginationBean.setQuerySize(String.valueOf(querySize));

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] != null) {
				
				logger.info("Resp code is : " + rec[7].toString());

				if (rec[12].toString().equals("EZYMOTO") || rec[12].toString().equals("AUTHSALE")) {

					fs.setRespcode(rec[7].toString());
					logger.info("Resp code is : " + rec[7].toString());

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {

					fs.setRespMessage(rec[7].toString());
					fs.setRespcode(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
				fs.setRespcode("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {

				fs.setSTATUS("Failed");

			} else {

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {

				fs.setCardType(rec[11].toString());

			} else {

				fs.setCardType("");
			}
			if (rec[12] != null) {

				fs.setTxnType(rec[12].toString());

			} else {

				fs.setTxnType("");
			}
			if (rec[13] != null) {

				fs.setF263_MRN(rec[13].toString());

			} else {

				fs.setF263_MRN("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void exportUMMotoTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umMotoMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMMoto Transaction export: " + date + "  " + date1 + "  " + txnType + "  " + umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;
		
		String fiuuMid = null;

		String motomid = umMotoMid;
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}
		
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);

//			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
//					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.F001_MID =:motomid and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

			// added MRN
			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE,res.f263_MRN from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "where res.F001_MID IN (:motomid, :fiuuMid) and res.H001_MTI in ('0290','0210','0230','0200') and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) )) as temp order by TIME_STAMP desc ";
//					+ "UNION "
//					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','','' "
//					+ " from FPX_TRANSACTION b where (b.MID =:motomid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("motomid", motomid);
		sqlQuery.setString("fiuuMid", fiuuMid);
		//sqlQuery.setString("fpxmid", fpxmid);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] != null) {

				if (rec[12].toString().equals("EZYMOTO")) {

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {

					fs.setRespMessage(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {

				fs.setSTATUS("Failed");

			} else {

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {

				fs.setCardType(rec[11].toString());

			} else {

				fs.setCardType("");
			}

			if (rec[12] != null) {

				fs.setTxnType(rec[12].toString());

			} else {

				fs.setTxnType("");
			}

			if (rec[13] != null) {

				fs.setF263_MRN(rec[13].toString());

			} else {

				fs.setF263_MRN("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// EzyMoto Failed Transaction - End

	// EzyRec Failed Transaction - Start

	@Override
	public void listUMEzyrecTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzyrecMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyrecTransaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umEzyrecMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;

		String ezyrecmid = umEzyrecMid;

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto ALL " + txnType);

			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.F001_MID =:ezyrecmid and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
					+ "UNION "
					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
					+ " from FPX_TRANSACTION b where (b.MID =:ezyrecmid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";
		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ezyrecmid", ezyrecmid);
		sqlQuery.setString("fpxmid", fpxmid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] != null) {

				if (rec[12].toString().equals("EZYREC")) {
					fs.setRespcode(rec[7].toString());
					logger.info("Resp code is : " + rec[7].toString());

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {

					fs.setRespMessage(rec[7].toString());
					fs.setRespcode(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
				fs.setRespcode("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {

				fs.setSTATUS("Failed");

			} else {

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {

				fs.setCardType(rec[11].toString());

			} else {

				fs.setCardType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void exportUMEzyrecTransactionFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzyrecMid, String txnType,
			Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside list umEzyrecMid Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
				+ umEzyrecMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		String fpxmid = null;

		String ezyrecmid = umEzyrecMid;

		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside umEzyrecMid ALL " + txnType);
			sql = "select * from ((select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0200','0210') "
					+ "where res.F001_MID =:ezyrecmid and res.H002_VNO ='05' and res.TIME_STAMP between :from  and :to and (res.STATUS in ('null') or res.STATUS is null) ) "
					+ "UNION "
					+ "(select b.MID,b.TXNAMOUNT,b.TID,'',b.FPXTXNID,'',b.TIME_STAMP,b.DEBITAUTHCODESTR,'',b.SELLERORDERNO,b.STATUS,'FPX','' "
					+ " from FPX_TRANSACTION b where (b.MID =:ezyrecmid OR b.MID = :fpxmid) and b.DEBITAUTHCODE NOT IN ('00') and  b.TIME_STAMP BETWEEN :from AND :to )) as temp order by TIME_STAMP desc ";
		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ezyrecmid", ezyrecmid);
		sqlQuery.setString("fpxmid", fpxmid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().contains(".")) {
					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
				} else {
					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setF354_TID(rec[2].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setPAN("");
			} else if (rec[3] != null || rec[3] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[3].toString().contains("f")) {

					int panlength = rec[3].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[3].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else if (rec[4] != null) {
				fs.setF011_AUTHIDRESP(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else if (rec[5] != null) {

				fs.setF023_RRN(rec[5].toString());
			}

			if (rec[6] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[7] != null) {

				if (rec[12].toString().equals("EZYREC")) {

					String respMsg = getResMsg(rec[7].toString());
					logger.info("respMsg" + respMsg);
					fs.setRespMessage(respMsg);
					logger.info("setRespMessage: " + fs.getRespMessage());
				} else {

					fs.setRespMessage(rec[7].toString());
				}
			} else {
				fs.setRespMessage("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setF268_CHNAME("");
			} else if (rec[8] != null) {
				fs.setF268_CHNAME(rec[8].toString());

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF270_ORN("");

			} else if (rec[9] != null) {

				fs.setF270_ORN(rec[9].toString());

			}

			if (rec[10] != null) {

				fs.setSTATUS("Failed");

			} else {

				fs.setSTATUS("Failed");
			}

			if (rec[11] != null) {

				fs.setCardType(rec[11].toString());

			} else {

				fs.setCardType("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// EzyRec Failed Transaction - End

	// EzyWire Failed Transaction - Start

	@Override
	public void getAllUMTransactionbyMerchantFailure(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> props, Merchant merchant) {

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;
		String ummid = null;
		String ummotoMid = null;
		String umezywayMid = null;
		String umezyrecMid = null;
		String umezypassMid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		logger.info("UMobile MID: " + ummid);

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDateToSearch = null, toDateToSearch = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDateToSearch = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDateToSearch.substring(0, fromDateToSearch.length() - 2);
		fromDateToSearch = from1 + String.format("%02d", -1 + Integer.valueOf(fromDateToSearch.substring(8, 10)));
		System.out.println("change date format:" + fromDateToSearch);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDateToSearch = dateFormat1.format(dt1);
		String to1 = toDateToSearch.substring(0, toDateToSearch.length() - 2);
		toDateToSearch = to1 + String.format("%02d", 1 + Integer.valueOf(toDateToSearch.substring(8, 10)));
		System.out.println("date format:" + toDateToSearch);

		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		sql = "select tr.MID , tr.TID , tr.AMOUNT , 'Failed' , trs.AID_RESPONSE,trs.RRN, tr.CARD_HOLDER_NAME , tr.MASKED_PAN , tr.CARD_SCHEME ,tr.CARD_TYPE,tr.TIME_STAMP,trs.RESPONSE_CODE , tr.INVOICE_ID "
				+ "from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
				+ "where tr.TXN_ID=trs.TXN_ID and trs.RESPONSE_CODE NOT IN ('00') and tr.MID =:ummid and tr.TIME_STAMP between :fromDateToSearch and :toDateToSearch order by tr.TIME_STAMP desc ";

		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("ummid", ummid);

		sqlQuery.setString("fromDateToSearch", fromDateToSearch);
		sqlQuery.setString("toDateToSearch", toDateToSearch);

		logger.info("Query : " + sql);

		String FromDate = paginationBean.setDateFromBackend(fromDateToSearch);
		String From1Date = paginationBean.setDate1FromBackend(toDateToSearch);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setF001_MID("");
			} else if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setF354_TID("");
			} else

			if (rec[1] != null || rec[1] != "") {
				fs.setF354_TID(rec[1].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setF007_TXNAMT("");
			} else if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {

				fs.setSTATUS(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setF011_AUTHIDRESP("");
			} else

			if (rec[4] != null) {

				int aidlength = rec[4].toString().length();

				logger.info("aidlength" + aidlength);

				String Aid = rec[4].toString();

				StringBuilder oddValue = new StringBuilder();
				int i = 1;
				for (i = 1; i <= aidlength; i++) {
					if (i % 2 != 0) {

						oddValue.append(Aid.charAt(i));
					}

				}

				logger.info("aid" + oddValue);

				fs.setF011_AUTHIDRESP(oddValue.toString());

			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setF023_RRN("");
			} else

			if (rec[5] != null) {

				int rrnlength = rec[5].toString().length();

				logger.info("rrnlength" + rrnlength);

				String Rrn = rec[5].toString();

				StringBuilder oddValue = new StringBuilder();
				int i = 1;
				for (i = 1; i <= rrnlength; i++) {
					if (i % 2 != 0) {

						oddValue.append(Rrn.charAt(i));
					}

				}

				logger.info("rrn" + oddValue);

				fs.setF023_RRN(oddValue.toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[6] != null) {
				fs.setF268_CHNAME(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[7] != null || rec[7] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[7].toString().contains("f")) {

					int panlength = rec[7].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[7].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				fs.setPAN("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {
				fs.setCardscheme("");
			} else if (rec[8] != null) {

				fs.setCardscheme(rec[8].toString());
			} else {
				fs.setCardscheme("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[9] != null) {
				fs.setCardType(rec[9].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setDate("");
				fs.setTime("");
			} else if (rec[10] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[10].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[10].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setRespMessage("");
			} else

			if (rec[11] != null) {

				fs.setRespMessage(HostResponse.getHostResponse(rec[11].toString()));
			} else {
				fs.setRespMessage("");
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setF270_ORN("");
			} else

			if (rec[12] != null) {
				fs.setF270_ORN(rec[12].toString());
			} else {
				fs.setF270_ORN("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void searchUMForSettlementFailure(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> props,
			String date, String date1, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + date + " toDate: " + date1);
		String ummid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		String from = null;
		String to = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("inside date criteriaelseif: " + "from date: " + from + "toDate: " + to);
		logger.info(ummid + "middd");
		sql = "select tr.MID , tr.TID , tr.AMOUNT , 'Failed' , trs.AID_RESPONSE,trs.RRN, tr.CARD_HOLDER_NAME , tr.MASKED_PAN , tr.CARD_SCHEME ,tr.CARD_TYPE,tr.TIME_STAMP,trs.RESPONSE_CODE , tr.INVOICE_ID "
				+ "from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
				+ "where tr.TXN_ID=trs.TXN_ID and trs.RESPONSE_CODE NOT IN ('00') and tr.MID =:ummid and tr.TIME_STAMP between :from and :to order by tr.TIME_STAMP desc ";
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ummid", ummid);
		logger.info(ummid + "midddb");

		logger.info("Search ezywire fail Query : " + sql);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				logger.info("1");
				fs.setF001_MID("");
			} else if (rec[0] != null || rec[0] != "") {
				logger.info("2");
				fs.setF001_MID(rec[0].toString());
			} else {
				logger.info("3");
				fs.setF001_MID("");
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				logger.info("4");
				fs.setF354_TID("");
			} else

			if (rec[1] != null || rec[1] != "") {
				logger.info("5");
				fs.setF354_TID(rec[1].toString());
			} else {
				logger.info("6");
				fs.setF354_TID("");
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				logger.info("6");
				fs.setF007_TXNAMT("");
			} else if (rec[2] != null) {
				logger.info("7");

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				logger.info("8");
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				logger.info("9");

				fs.setSTATUS(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				logger.info("10");

				fs.setF011_AUTHIDRESP("");
			} else

			if (rec[4] != null) {

				logger.info("11");

				int aidlength = rec[4].toString().length();

				logger.info("aidlength" + aidlength);

				String Aid = rec[4].toString();

				StringBuilder oddValue = new StringBuilder();
				int i = 1;
				for (i = 1; i <= aidlength; i++) {
					if (i % 2 != 0) {

						oddValue.append(Aid.charAt(i));
					}

				}

				logger.info("aid" + oddValue);

				fs.setF011_AUTHIDRESP(oddValue.toString());

			} else {
				logger.info("12");

				fs.setF011_AUTHIDRESP("");
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				logger.info("13");

				fs.setF023_RRN("");
			} else

			if (rec[5] != null) {

				logger.info("14");

				int rrnlength = rec[5].toString().length();

				logger.info("rrnlength" + rrnlength);

				String Rrn = rec[5].toString();

				StringBuilder evenValue = new StringBuilder();
				int i = 1;
				for (i = 1; i <= rrnlength; i++) {
					if (i % 2 != 0) {

						evenValue.append(Rrn.charAt(i));
					}

				}

				logger.info("rrn" + evenValue);

				fs.setF023_RRN(evenValue.toString());
			} else {
				logger.info("15");
				fs.setF023_RRN("");
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {
				logger.info("16");
				fs.setF268_CHNAME("");

			} else if (rec[6] != null) {
				logger.info("17");
				fs.setF268_CHNAME(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {
				logger.info("18");
				fs.setPAN("");
			} else if (rec[7] != null || rec[7] != "") {
				logger.info("19");
				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[7].toString().contains("f")) {

					int panlength = rec[7].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[7].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {
				logger.info("20");
				fs.setPAN("");
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {
				logger.info("21");
				fs.setCardscheme("");
			} else if (rec[8] != null) {
				logger.info("22");
				fs.setCardscheme(rec[8].toString());
			} else {
				logger.info("23");
				fs.setCardscheme("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				logger.info("24");
				fs.setCardType("");
			} else if (rec[9] != null) {
				logger.info("25");
				fs.setCardType(rec[9].toString());

			} else {
				logger.info("26");
				fs.setCardType("");

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				logger.info("27");
				fs.setDate("");
				fs.setTime("");
			} else if (rec[10] != null) {
				logger.info("28");
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[10].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[10].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				logger.info("29");
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				logger.info("30");
				fs.setRespMessage("");
			} else

			if (rec[11] != null) {
				logger.info("31");

				fs.setRespMessage(HostResponse.getHostResponse(rec[11].toString()));
			} else {
				fs.setRespMessage("");
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				logger.info("32");
				fs.setF270_ORN("");
			} else

			if (rec[12] != null) {
				logger.info("33");
				fs.setF270_ORN(rec[12].toString());
			} else {
				logger.info("34");
				fs.setF270_ORN("");
			}
			logger.info("before fss");
			fss.add(fs);

		}
		logger.info("after fss");
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void getAllUMTransactionbyMerchant(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> props,
			Merchant merchant) {

		// logger.info("mid for all transaction: "+merchant.getMid().getMid()+" :
		// "+merchant.getMid().getMotoMid());
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;
		String ummid = null;
		String ummotoMid = null;
		String umezywayMid = null;
		String umezyrecMid = null;
		String umezypassMid = null;
		String boostmid = null;
		String grabmid = null;

		// bnplezywire
		// String bnplMid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		logger.info("UMobile MID: " + ummid);

		// new date condition - 29/12/2020
		Date dt = new Date();

		String fromDateToSearch = null, toDateToSearch = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDateToSearch = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDateToSearch.substring(0, fromDateToSearch.length() - 2);
		fromDateToSearch = from1 + String.format("%02d", -1 + Integer.valueOf(fromDateToSearch.substring(8, 10)));
		System.out.println("change date format:" + fromDateToSearch);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDateToSearch = dateFormat1.format(dt1);
		String to1 = toDateToSearch.substring(0, toDateToSearch.length() - 2);
		toDateToSearch = to1 + String.format("%02d", 1 + Integer.valueOf(toDateToSearch.substring(8, 10)));
		System.out.println("date format:" + toDateToSearch);

		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		sql = " select * from ((select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE, "
				+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
				+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
				+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE , a.TIME_STAMP , a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR') and a.MID in (:ummid) and f.MERCHANT_TYPE IN ('U','FIUU') and a.TIME_STAMP between "
				+ ":fromDateToSearch and :toDateToSearch )" + "UNION "
				+ "(select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,'','','',a.TIME_STAMP ,a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE  from "
				+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','C') and a.MID in (:ummid) and f.MERCHANT_TYPE IN ('U','FIUU') and a.TIME_STAMP  between "
				+ ":fromDateToSearch and :toDateToSearch )" + ") as temp order by TIME_STAMP desc ";

		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("ummid", ummid);

		sqlQuery.setString("fromDateToSearch", fromDateToSearch);
		sqlQuery.setString("toDateToSearch", toDateToSearch);

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF354_TID(rec[1].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[3].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF270_ORN(rec[4].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[5] != null) {
				fs.setF011_AUTHIDRESP(rec[5].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[6] != null) {
				fs.setF023_RRN(rec[6].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[7] != null) {
				fs.setF268_CHNAME(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[8] != null || rec[8] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else {
				fs.setCardscheme(rec[9].toString());
			}

			if (rec[10] != null) {

				fs.setCardType(rec[10].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[13].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger number = new BigInteger(rec[15].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setTxnType("");
			}

			else if (rec[16] == "NULL") {
				fs.setTxnType("No");

			}

			else if (rec[16].toString().equalsIgnoreCase("Yes")) {
				logger.info("inside preauth sale");

				fs.setTxnType("Yes");

			}

			if (rec[17] == null || rec[17].toString().isEmpty() || rec[17].toString().equalsIgnoreCase("NULL")) {
				fs.setPreauthfee("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setPreauthfee(output);
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// EzyWire Transaction - End

	// EARLY SETTLEMENT - START

	@Override
	public List<String> tocheckholiday(String Currentdate, String CurrentTime) {

		List<HolidayHistory> checkholiday = (List<HolidayHistory>) sessionFactory.getCurrentSession()
				.createCriteria(HolidayHistory.class).list();

		List<String> Holidaydates = new ArrayList<String>();

		List<String> FinalSettleDates = new ArrayList<String>();

		int index = 0;
		System.out.println("SETTLED DATE: " + Currentdate + "CURR TIME: " + CurrentTime);
		for (HolidayHistory i : checkholiday) {

			System.out
					.println("From Database Holiday dates" + Holidaydates.add(checkholiday.get(index).getLeaveDate()));
			index++;

		}

		logger.info("Checking Business Date and Holiday Date");

//		String EzysettleCutoffTime = "17:00:00";
//
//		LocalTime CutoffTime = LocalTime.parse(EzysettleCutoffTime);
//		LocalTime LocalcurrentTime = LocalTime.parse(CurrentTime);
//
//		LocalDate result = null;
//
//		if (LocalcurrentTime.isBefore(CutoffTime)) {
//
//			logger.info("Loaded Dates Before CutoffTime");
//
//			result = LocalDate.parse(Currentdate);
//
//		} else if (LocalcurrentTime.isAfter(CutoffTime)) {
//
//			logger.info("Loaded Dates After CutoffTime");
//
//			LocalDate currentdate = LocalDate.parse(Currentdate);
//			result = currentdate.plusDays(1);
//
//		}

		LocalDate result = LocalDate.parse(Currentdate);
		int workdays = 5;
		int addedDays = 0;

		while (addedDays < workdays) {
			result = result.plusDays(1);

			if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {
				String flag = "exist";
				for (int j = 0; j < Holidaydates.size(); j++) {

					if (!(Holidaydates.get(j).equalsIgnoreCase(result.toString()))) {
						flag = "exist";
					} else {
						flag = "exit";
						break;
					}

				}

				if (flag.equalsIgnoreCase("exist")) {
					logger.info("Final Settlement Date :::::" + FinalSettleDates.add(result.toString()));

					logger.info("Final Date :::::" + result.toString());

					++addedDays;
				} else {
					System.out.println("Flag Exit ::::" + flag);
				}

			}

		}

		return FinalSettleDates;

	}

	@Override
	public List<SettlementMDR> loadNetAmountandsettlementdatebyCard(String settlementdate, Merchant merchant) {

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyCard  ");

		ArrayList<SettlementMDR> settlementmdr = new ArrayList<SettlementMDR>();

		String sql = "select replace(round(sum(e.TXN_AMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.NET_AMOUNT),2),',',''),e.SETTLEMENTDATE,e.STATUS from mobiversa.SETTLEMENT_MDR e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid) and e.STATUS in ('S','SLS','H') and e.SETTLEMENTDATE LIKE '"
				+ settlementdate + "%' and e.REASON is null ";

		logger.info("Card Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			SettlementMDR settledata = new SettlementMDR();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				settledata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				settledata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				settledata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				settledata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				settledata.setNetAmount("0.00");
			} else if (rec[2] != null || rec[2] != "") {

				if (rec[4].toString().equals("S") || rec[4].toString().equals("SLS")) {
					// Double d = new Double(rec[2].toString());
					// String pattern = "#,##0.00";
					// DecimalFormat myFormatter = new DecimalFormat(pattern);
					// String output = myFormatter.format(d);
					settledata.setNetAmount(rec[2].toString());
				} else {

					settledata.setNetAmount("0.00");

				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				settledata.setSettlementDate("");
			} else if (rec[3] != null || rec[3] != "") {

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				settledata.setSettlementDate(rd);

			}

			settlementmdr.add(settledata);

		}
		return settlementmdr;

	}

	@Override
	public List<BoostDailyRecon> loadNetAmountandsettlementdatebyBoost(String settlementdate, Merchant merchant) {

		String formatcurrentdate = null;
		try {
			formatcurrentdate = new SimpleDateFormat("yyyyMMdd")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		logger.info(" formatcurrentdate " + formatcurrentdate);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null, boostmid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyBoost  ");

		ArrayList<BoostDailyRecon> boostdlyrecon = new ArrayList<BoostDailyRecon>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDRAMOUNT),2),',',''),replace(round(sum(e.NETAMOUNT),2),',',''),e.SETTLE_DATE,e.PAYMENT from mobiversa.BOOST_DLY_RECON e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid,:boostmid) and e.PAYMENT in ('S','H') and e.SETTLE_DATE LIKE '"
				+ formatcurrentdate + "%' and e.REASON is null ";

		logger.info("Boost Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);
		sqlQuery.setString("boostmid", boostmid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			BoostDailyRecon boostdata = new BoostDailyRecon();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				boostdata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				boostdata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				boostdata.setMdrAmount("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				boostdata.setMdrAmount(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				boostdata.setNetAmount("0.00");
			} else if (rec[2] != null || rec[2] != "") {

				if (rec[4].toString().equals("S")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					boostdata.setNetAmount(rec[2].toString());

				} else {
					boostdata.setNetAmount("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				boostdata.setSettleDate("");
			} else if (rec[3].toString().contains("T")) {
				String rd = null;
				String rt = null;
				rd = rec[3].toString().substring(0, 8);

				logger.info("rd" + rd);

				try {
					rt = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				logger.info("rt" + rt);

				boostdata.setSettleDate(rt);
			}

			boostdlyrecon.add(boostdata);

		}
		return boostdlyrecon;

	}

	@Override
	public List<GrabPayFile> loadNetAmountandsettlementdatebyGrabpay(String settlementdate, Merchant merchant) {

		long currentMerchantid = merchant.getId();

		logger.info(" currentMerchantid " + currentMerchantid);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyGrabpay  ");

		ArrayList<GrabPayFile> GrabPayfile = new ArrayList<GrabPayFile>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR),2),',',''),replace(round(sum(e.NETAMT),2),',',''),e.SETTLEMENT_DATE,e.STATUS from mobiversa.GRABPAY_FILE e where e.MERCHANTID = :currentMerchantid and e.STATUS in ('A','H') and e.SETTLEMENT_DATE like '"
				+ settlementdate + "%' and e.REASON is null ";

		logger.info("Grabpay Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setLong("currentMerchantid", currentMerchantid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			GrabPayFile grabpaydata = new GrabPayFile();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				grabpaydata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				grabpaydata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				grabpaydata.setMdr("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				grabpaydata.setMdr(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				grabpaydata.setNetAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {

				if (rec[4].toString().equals("A")) {
//					Double d = new Double(rec[2].toString());
//					String pattern = "#,##0.00";
//					DecimalFormat myFormatter = new DecimalFormat(pattern);
//					String output = myFormatter.format(d);
					grabpaydata.setNetAmt(rec[2].toString());

				} else {
					grabpaydata.setNetAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				grabpaydata.setSettlementDate("");
			} else if (rec[3] != null || rec[3] != "") {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				grabpaydata.setSettlementDate(rd);
			}

			GrabPayfile.add(grabpaydata);

		}

		return GrabPayfile;
	}

	@Override
	public List<FpxTransaction> loadRefundAndsettlementdatebyFpx(String settlementdate, Merchant merchant) {

		String fpxformatcurrentdate = null;
		logger.info("settlementdate : " + settlementdate);
		try {
			fpxformatcurrentdate = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		logger.info("fpxformatcurrentdate : " + fpxformatcurrentdate);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null, fpxmid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
			logger.info("umMid : " + umMid);
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
			logger.info("umEzywayMid : " + umEzywayMid);
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
			logger.info("umMotoMid : " + umMotoMid);
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
			logger.info("umEzyrecMid : " + umEzyrecMid);
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();
			logger.info("umEzypassMid : " + umEzypassMid);

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
			logger.info("splitMid : " + splitMid);
		}
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
			logger.info("fpxmid : " + fpxmid);
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyFPX  ");

		ArrayList<FpxTransaction> Fpxtransactionlist = new ArrayList<FpxTransaction>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.FPX_TRANSACTION e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid,:fpxmid) and e.STATUS in ('S','H') and e.SETTLED_DATE = :fpxformatcurrentdate and e.DEBITAUTHCODE = '00' and e.REASON is null ";

		logger.info("Fpx Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);
		sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("fpxformatcurrentdate", fpxformatcurrentdate);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			FpxTransaction fpxdata = new FpxTransaction();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fpxdata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fpxdata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fpxdata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fpxdata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fpxdata.setPayableAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {
				if (rec[4].toString().equals("S")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					fpxdata.setPayableAmt(rec[2].toString());
				} else {
					fpxdata.setPayableAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fpxdata.setSettledDate("");
			} else if (rec[3] != null || rec[3] != "") {

				fpxdata.setSettledDate(rec[3].toString());
			}

			Fpxtransactionlist.add(fpxdata);

		}

		return Fpxtransactionlist;
	}

	@Override
	public List<FpxTransaction> loadNetAmountandsettlementdatebyFpx(String settlementdate, Merchant merchant) {

		String fpxformatcurrentdate = null;
		logger.info("settlementdate : " + settlementdate);
		try {
			fpxformatcurrentdate = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		logger.info("fpxformatcurrentdate : " + fpxformatcurrentdate);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null, fpxmid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
			logger.info("umMid : " + umMid);
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
			logger.info("umEzywayMid : " + umEzywayMid);
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
			logger.info("umMotoMid : " + umMotoMid);
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
			logger.info("umEzyrecMid : " + umEzyrecMid);
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();
			logger.info("umEzypassMid : " + umEzypassMid);

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
			logger.info("splitMid : " + splitMid);
		}
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
			logger.info("fpxmid : " + fpxmid);
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyFPX  ");

		ArrayList<FpxTransaction> Fpxtransactionlist = new ArrayList<FpxTransaction>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.FPX_TRANSACTION e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid,:fpxmid) and e.STATUS in ('S','H') and e.SETTLED_DATE = :fpxformatcurrentdate and e.DEBITAUTHCODE = '00' and e.REASON is null ";

		logger.info("Fpx Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);
		sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("fpxformatcurrentdate", fpxformatcurrentdate);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			FpxTransaction fpxdata = new FpxTransaction();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fpxdata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fpxdata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fpxdata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fpxdata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fpxdata.setPayableAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {
				if (rec[4].toString().equals("S")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					fpxdata.setPayableAmt(rec[2].toString());
				} else {
					fpxdata.setPayableAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fpxdata.setSettledDate("");
			} else if (rec[3] != null || rec[3] != "") {

				fpxdata.setSettledDate(rec[3].toString());
			}

			Fpxtransactionlist.add(fpxdata);

		}

		return Fpxtransactionlist;
	}

	@Override
	public List<EwalletTxnDetails> loadNetAmountandsettlementdatebym1Pay(String settlementdate, Merchant merchant) {

		String tngMid = null, shoppyMid = null, umEzywayMid = null, umMotoMid = null;

		if (merchant.getMid().getTngMid() != null) {
			tngMid = merchant.getMid().getTngMid();
		}
		if (merchant.getMid().getShoppyMid() != null) {
			shoppyMid = merchant.getMid().getShoppyMid();
		}

		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdateby Tng-Shoppy ");

		ArrayList<EwalletTxnDetails> etdtransactionlist = new ArrayList<EwalletTxnDetails>();

		String sql = "select '' As AMOUNT,replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.EWALLET_TXN_DETAILS e where e.MID in (:tngMid,:shoppyMid,:umEzywayMid,:umMotoMid) and e.STATUS in ('TPS','SPS','H') and e.SETTLED_DATE = :settlementdate and e.REASON is null ";

		logger.info("Tng-Shoppy Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("tngMid", tngMid);
		sqlQuery.setString("shoppyMid", shoppyMid);
		sqlQuery.setString("settlementdate", settlementdate);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			EwalletTxnDetails etxndata = new EwalletTxnDetails();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				etxndata.setAmount("");
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				etxndata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				etxndata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				etxndata.setPayableAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {
				if (rec[4].toString().equals("TPS") || rec[4].toString().equals("SPS")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					etxndata.setPayableAmt(rec[2].toString());
				} else {
					etxndata.setPayableAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				etxndata.setSettledDate("");
			} else if (rec[3] != null || rec[3] != "") {

				etxndata.setSettledDate(rec[3].toString());
			}

			etdtransactionlist.add(etxndata);

		}

		return etdtransactionlist;
	}

	@Override
	public List<EwalletTxnDetails> loadRefundsettlementdatebym1Pay(String settlementdate, Merchant merchant) {

		String tngMid = null, shoppyMid = null, umEzywayMid = null, umMotoMid = null;

		if (merchant.getMid().getTngMid() != null) {
			tngMid = merchant.getMid().getTngMid();
		}
		if (merchant.getMid().getShoppyMid() != null) {
			shoppyMid = merchant.getMid().getShoppyMid();
		}

		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdateby Tng-Shoppy ");

		ArrayList<EwalletTxnDetails> etdtransactionlist = new ArrayList<EwalletTxnDetails>();

		String sql = "select replace(round(sum(e.AMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.EWALLET_TXN_DETAILS e where e.MID in (:tngMid,:shoppyMid,:umEzywayMid,:umMotoMid) and e.STATUS in ('TPS','SPS','H') and e.SETTLED_DATE = :settlementdate and e.REASON is null ";

		logger.info("Tng-Shoppy Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("tngMid", tngMid);
		sqlQuery.setString("shoppyMid", shoppyMid);
		sqlQuery.setString("settlementdate", settlementdate);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			EwalletTxnDetails etxndata = new EwalletTxnDetails();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				etxndata.setAmount("");
			} else if (rec[0] != null || rec[0] != "") {

				Double d = new Double(rec[1].toString());
				String pattern = "##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				etxndata.setAmount(output);

			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				etxndata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				etxndata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				etxndata.setPayableAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {
				if (rec[4].toString().equals("TPS") || rec[4].toString().equals("SPS")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					etxndata.setPayableAmt(rec[2].toString());
				} else {
					etxndata.setPayableAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				etxndata.setSettledDate("");
			} else if (rec[3] != null || rec[3] != "") {

				etxndata.setSettledDate(rec[3].toString());
			}

			etdtransactionlist.add(etxndata);

		}

		return etdtransactionlist;
	}

	@Override
	public List<SettlementMDR> loadNetAmountbyCard(String settledate, double ezysettleFee, Merchant merchant) {

		double netAmt = 0, netAmount = 0, ezyfee = 0;

		String umMid = Optional.ofNullable(merchant.getMid().getUmMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String fiuuMid = Optional.ofNullable(merchant.getMid().getFiuuMid()).orElse(null);

		logger.info(" Inside loadNetAmountbycard  " + "Settlement Date : " + settledate + " Ezysettle Fee : "
				+ ezysettleFee);

		ArrayList<SettlementMDR> settlementmdr = new ArrayList<SettlementMDR>();

		String sql = "select e.NET_AMOUNT,e.STATUS from mobiversa.SETTLEMENT_MDR e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:fiuuMid) and e.STATUS in ('S','SLS','H') and e.SETTLEMENTDATE LIKE '"
				+ settledate + "%' ";
		logger.info("Card Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("fiuuMid", fiuuMid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Settlement MDR size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			SettlementMDR settledata = new SettlementMDR();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				settledata.setNetAmount("0.00");
			} else if (rec[0] != null || rec[0] != "") {

				if (rec[1].toString().equals("S") || rec[1].toString().equals("SLS")) {

					netAmt = Double.parseDouble(rec[0].toString());
					ezyfee = netAmt * ezysettleFee / 100;
					logger.info("Net Amount calc with ezysettle fee :" + ezyfee);
					netAmount = netAmt - ezyfee;
					logger.info("Final Net Amount calc :" + netAmount);

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(netAmount);

					settledata.setEzySettleAmt(output);
					settledata.setNetAmount(rec[0].toString());
					settledata.setStatus(rec[1].toString());
				} else {

					settledata.setNetAmount("0.00");
					settledata.setEzySettleAmt("0.00");
				}

			}

			settlementmdr.add(settledata);

		}
		return settlementmdr;

	}

	@Override
	public List<BoostDailyRecon> loadNetAmountbyBoost(String settledate, double ezysettleFee, Merchant merchant) {

		String umMid = Optional.ofNullable(merchant.getMid().getUmMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String boostmid = Optional.ofNullable(merchant.getMid().getBoostMid()).orElse(null);

		logger.info("umMid: " + umMid + ", umEzywayMid: " + umEzywayMid + ", umMotoMid: " + umMotoMid + ", boostmid: "
				+ boostmid);

		double netAmt = 0, netAmount = 0, ezyfee = 0;
		logger.info(" Inside loadNetAmountbyBoost  " + "Settlement Date : " + settledate + " Ezysettle Fee : "
				+ ezysettleFee);

		ArrayList<BoostDailyRecon> boostdlyrecon = new ArrayList<BoostDailyRecon>();

		String sql = "select e.NETAMOUNT,e.PAYMENT from mobiversa.BOOST_DLY_RECON e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:boostmid) and e.PAYMENT in ('S','H') and e.SETTLE_DATE LIKE '"
				+ settledate + "%' ";

		logger.info("Boost Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);

		sqlQuery.setString("boostmid", boostmid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			BoostDailyRecon boostdata = new BoostDailyRecon();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				boostdata.setNetAmount("0.00");
			} else if (rec[0] != null || rec[0] != "") {

				if (rec[1].toString().equals("S")) {

					netAmt = Double.parseDouble(rec[0].toString());
					ezyfee = netAmt * ezysettleFee / 100;
					logger.info("Net Amount calc with ezysettle fee :" + ezyfee);
					netAmount = netAmt - ezyfee;
					logger.info("Final Net Amount calc :" + netAmount);

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(netAmount);

					boostdata.setEzySettleAmt(output);
					boostdata.setNetAmount(rec[0].toString());
					boostdata.setStatus(rec[1].toString());
				} else {

					boostdata.setNetAmount("0.00");
					boostdata.setEzySettleAmt("0.00");
				}

			}
			boostdlyrecon.add(boostdata);

		}
		return boostdlyrecon;

	}

	@Override
	public List<GrabPayFile> loadNetAmountbyGrabpay(String settledate, double ezysettleFee, Merchant merchant) {

		long currentMerchantid = merchant.getId();

		logger.info(" currentMerchantid " + currentMerchantid);

		double netAmt = 0, netAmount = 0, ezyfee = 0;

		logger.info(" Inside loadNetAmountbyGrabpay  " + "Settlement Date : " + settledate + " Ezysettle Fee : "
				+ ezysettleFee);

		ArrayList<GrabPayFile> GrabPayfile = new ArrayList<GrabPayFile>();

		String sql = "select e.NETAMT,e.STATUS,e.PAYMENTDATE from mobiversa.GRABPAY_FILE e where e.MERCHANTID = :currentMerchantid and e.STATUS in ('A','H') and e.SETTLEMENT_DATE like '"
				+ settledate + "%' ";

		logger.info("Grabpay Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("currentMerchantid", String.valueOf(currentMerchantid));

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			GrabPayFile grabpaydata = new GrabPayFile();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				grabpaydata.setNetAmt("0.00");
			} else if (rec[0] != null || rec[0] != "") {

				if (rec[1].toString().equals("A")) {

					netAmt = Double.parseDouble(rec[0].toString());
					ezyfee = netAmt * ezysettleFee / 100;
					logger.info("Net Amount calc with ezysettle fee :" + ezyfee);
					netAmount = netAmt - ezyfee;
					logger.info("Final Net Amount calc :" + netAmount);

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(netAmount);

					grabpaydata.setEzySettleAmt(output);
					grabpaydata.setNetAmt(rec[0].toString());
					grabpaydata.setStatus(rec[1].toString());
				} else {

					grabpaydata.setNetAmt("0.00");
					grabpaydata.setEzySettleAmt("0.00");
				}

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {
				grabpaydata.setPaymentDate("00:00:0000");
			} else {
				grabpaydata.setPaymentDate(rec[2].toString());
			}

			GrabPayfile.add(grabpaydata);

		}

		return GrabPayfile;
	}

	@Override
	public List<FpxTransaction> loadNetAmountbyFpx(String settledate, double ezysettleFee, Merchant merchant) {

		double netAmt = 0, netAmount = 0, ezyfee = 0;

		String umMid = Optional.ofNullable(merchant.getMid().getUmMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String fpxmid = Optional.ofNullable(merchant.getMid().getFpxMid()).orElse(null);

		logger.info(" Inside loadNetAmountbyFpx  " + "Settlement Date : " + settledate + " Ezysettle Fee : "
				+ ezysettleFee);

		ArrayList<FpxTransaction> Fpxtransactionlist = new ArrayList<FpxTransaction>();

		String sql = "select e.PAYABLEAMT,e.STATUS,e.TX_DATE from mobiversa.FPX_TRANSACTION e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:fpxmid) and e.STATUS in ('S','H') and e.SETTLED_DATE = :settledate and e.DEBITAUTHCODE = '00' ";

		logger.info("Fpx Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("settledate", settledate);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			FpxTransaction fpxdata = new FpxTransaction();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fpxdata.setPayableAmt("0.00");
			} else if (rec[0] != null || rec[0] != "") {

				if (rec[1].toString().equals("S")) {

					netAmt = Double.parseDouble(rec[0].toString());
					ezyfee = netAmt * ezysettleFee / 100;
					logger.info("Net Amount calc with ezysettle fee :" + ezyfee);
					netAmount = netAmt - ezyfee;
					logger.info("Final Net Amount calc :" + netAmount);

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(netAmount);

					fpxdata.setEzySettleAmt(output);
					fpxdata.setPayableAmt(rec[0].toString());
					fpxdata.setStatus(rec[1].toString());
				} else {

					fpxdata.setPayableAmt("0.00");
					fpxdata.setEzySettleAmt("0.00");
				}

			}

			Fpxtransactionlist.add(fpxdata);

		}

		return Fpxtransactionlist;
	}

	@Override
	public List<EwalletTxnDetails> loadNetAmountbym1Pay(String settledate, double ezysettleFee, Merchant merchant) {

		double netAmt = 0, netAmount = 0, ezyfee = 0;

		String tngMid = Optional.ofNullable(merchant.getMid().getTngMid()).orElse(null);
		String shoppyMid = Optional.ofNullable(merchant.getMid().getShoppyMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);

		logger.info(" Inside loadNetAmountbyTng-Shoppy  " + "Settlement Date : " + settledate + " Ezysettle Fee : "
				+ ezysettleFee);

		ArrayList<EwalletTxnDetails> etdtransactionlist = new ArrayList<EwalletTxnDetails>();

		String sql = "select e.PAYABLEAMT,e.STATUS from mobiversa.EWALLET_TXN_DETAILS e where e.MID in (:tngMid,:shoppyMid,:umEzywayMid,:umMotoMid) and e.STATUS in ('TPS','SPS','H') and e.SETTLED_DATE = :settledate ";

		logger.info("Tng-Shoppy Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("tngMid", tngMid);
		sqlQuery.setString("shoppyMid", shoppyMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("settledate", settledate);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			EwalletTxnDetails etxndata = new EwalletTxnDetails();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				etxndata.setPayableAmt("0.00");
			} else if (rec[0] != null || rec[0] != "") {

				if (rec[1].toString().equals("TPS") || rec[1].toString().equals("SPS")) {

					netAmt = Double.parseDouble(rec[0].toString());
					ezyfee = netAmt * ezysettleFee / 100;
					logger.info("Net Amount calc with ezysettle fee :" + ezyfee);
					netAmount = netAmt - ezyfee;
					logger.info("Final Net Amount calc :" + netAmount);

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(netAmount);

					etxndata.setEzySettleAmt(output);

					etxndata.setPayableAmt(rec[0].toString());
					etxndata.setStatus(rec[1].toString());
				} else {

					etxndata.setPayableAmt("0.00");
					etxndata.setEzySettleAmt("0.00");
					etxndata.setStatus("");
				}

			}

			etdtransactionlist.add(etxndata);

		}

		return etdtransactionlist;
	}

	@Override
	public HolidayHistory loadHoliday(String currentdate) {
		logger.info("Inside load Holiday by Date : " + currentdate);
		return (HolidayHistory) sessionFactory.getCurrentSession().createCriteria(HolidayHistory.class)
				.add(Restrictions.eq("leaveDate", currentdate)).setMaxResults(1).uniqueResult();

	}

	@Override
	public List<GrabPayFile> loadGrabpayTxndatebySettledate(String settlementdate, long currentMerchantid) {

		String merchantid = String.valueOf(currentMerchantid);
		logger.info("Inside DAO Impl load Txndate by Settledate : " + settlementdate);
		logger.info("Inside DAO Impl load Txndate by merchantId : " + merchantid);
		List<GrabPayFile> GrabPayFile = sessionFactory.getCurrentSession().createCriteria(GrabPayFile.class)
				.add(Restrictions.like("settlementDate", settlementdate, MatchMode.START))
				.add(Restrictions.eq("status", "A")).add(Restrictions.eq("merchantId", merchantid)).list();

		return GrabPayFile;
	}

	@Override
	public List<FpxTransaction> loadFpxTxndatebySettledate(String settlementdate, Merchant merchant) {

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				fpxmid = null, splitMid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();
		}
		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
		}

		String sql = "select e.TX_DATE from mobiversa.FPX_TRANSACTION e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid,:fpxmid) and e.STATUS in ('S') and e.SETTLED_DATE = :settlementdate and e.DEBITAUTHCODE = '00' ";
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);
		sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("settlementdate", settlementdate);

		List<String> resultSet = sqlQuery.list();
		ArrayList<FpxTransaction> Fpxdatelist = new ArrayList<FpxTransaction>();
		for (String rec : resultSet) {
			FpxTransaction fpxdata = new FpxTransaction();
			fpxdata.setTxDate(rec);
			Fpxdatelist.add(fpxdata);
		}

		return Fpxdatelist;
	}

	// EARLY SETTLEMENT - END

	// EZYSETTLE SUMMARY BY ADMIN - START (27/03/2022)

	@Override
	@Transactional(readOnly = true)
	public void ListofEzySettleSummary(final PaginationBean<SettlementModel> paginationBean, final String date1,
			final String date2, final String txntype) {

		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txntype);

		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
		String sql = null;

		Date dt = new Date();
		String fromDate = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		logger.info(" Previous Date Format " + fromDate);

		// Fpx Date Format - Start

		String FormatpreviousDate = null;
		try {
			FormatpreviousDate = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(fromDate));
			System.out.println("FormatpreviousDate   " + FormatpreviousDate);
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		// Fpx Date Format - End

		String fromdate = null;
		String todate = null;
		if (date1 != null && date2 != null) {
			fromdate = date1.replace("-", "");
			todate = date2.replace("-", "");
		}

		// Date Variables
		String fromSearch = date1;
		String toSearch = date2;
		String previousDate = fromDate.replace("-", "");
		Query sqlQuery = null;

		if (txntype == null) {
			logger.info("Default Query Executed");

			sql = "(select s.DATE , s.MID , s.TID , s.TXN_AMOUNT , s.MASKED_PAN , s.RRN , s.INVOICE_ID , s.STATUS , "
					+ " s.CARD_BRAND , s.CARD_TYPE , s.MDR_AMT , s.NET_AMOUNT , s.SETTLEMENTDATE from SETTLEMENT_MDR s WHERE s.DATE = '"
					+ previousDate + "' And s.STATUS in ('H') And s.REASON = 'Just Settle' )" + "UNION "
					+ "(select b.DATE , b.MID , b.TID , b.TXNAMOUNT , '' As MASKED_PAN , b.BOOSTTXNID , '' As INVOICE_ID , b.PAYMENT , "
					+ " 'BOOST' , '' As CARD_TYPE ,  b.MDRAMOUNT , b.NETAMOUNT , b.SETTLE_DATE from BOOST_DLY_RECON b WHERE b.DATE LIKE '"
					+ previousDate + "%' And b.PAYMENT in ('H') And b.REASON = 'Just Settle' )" + "UNION "
					+ "(select  g.PAYMENTDATE , '' As MID , '' As TID , g.TXNAMOUNT , '' As MASKED_PAN , '' As RRN , '' As INVOICE_ID , g.STATUS ,"
					+ " 'GRABPAY' , '' As CARD_TYPE , g.MDR , g.NETAMT , g.SETTLEMENT_DATE from GRABPAY_FILE g WHERE g.PAYMENTDATE = '"
					+ FormatpreviousDate + "' And g.STATUS in ('H') And g.REASON = 'Just Settle' )" + "UNION "
					+ "(select f.TX_DATE , f.MID , f.TID , f.TXNAMOUNT , '' As MASKED_PAN , f.FPXTXNID , f.SELLERORDERNO , f.STATUS , "
					+ " 'FPX' , '' As CARD_TYPE , f.MDR_AMT , f.PAYABLEAMT , f.SETTLED_DATE from FPX_TRANSACTION f WHERE f.TX_DATE = '"
					+ FormatpreviousDate + "' And f.STATUS in ('H') And f.REASON = 'Just Settle' )";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("CARD")) {

			logger.info("CARD Query Executed");

			sql = "select s.DATE , s.MID , s.TID , s.TXN_AMOUNT , s.MASKED_PAN , s.RRN , s.INVOICE_ID , s.STATUS , "
					+ " s.CARD_BRAND , s.CARD_TYPE , s.MDR_AMT , s.NET_AMOUNT , s.SETTLEMENTDATE from SETTLEMENT_MDR s WHERE s.DATE BETWEEN '"
					+ fromdate + "' and '" + todate + "' And s.STATUS in ('H') And s.REASON = 'Just Settle' ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("BOOST")) {

			logger.info("BOOST Query Executed");

			sql = "select b.DATE , b.MID , b.TID , b.TXNAMOUNT , '' As MASKED_PAN , b.BOOSTTXNID , '' As INVOICE_ID , b.PAYMENT , "
					+ " 'BOOST' , '' As CARD_TYPE ,  b.MDRAMOUNT , b.NETAMOUNT , b.SETTLE_DATE from BOOST_DLY_RECON b WHERE b.DATE BETWEEN  '"
					+ fromdate + "%' and '" + todate + "%' And b.PAYMENT in ('H') And b.REASON = 'Just Settle' ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("GRABPAY")) {

			logger.info("FPX Query Executed");

			sql = " select  g.PAYMENTDATE , '' As MID , '' As TID , g.TXNAMOUNT , '' As MASKED_PAN , '' As RRN , '' As INVOICE_ID , g.STATUS ,"
					+ " 'GRABPAY' , '' As CARD_TYPE , g.MDR , g.NETAMT , g.SETTLEMENT_DATE from GRABPAY_FILE g WHERE g.TX_DATE_REFORMAT BETWEEN '"
					+ date1 + "' and '" + date2 + "' And g.STATUS in ('H') And g.REASON = 'Just Settle' ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (txntype.equals("FPX")) {

			logger.info("FPX Query Executed");
			sql = "select f.TX_DATE , f.MID , f.TID , f.TXNAMOUNT , '' As MASKED_PAN , f.FPXTXNID , f.SELLERORDERNO , f.STATUS , "
					+ " 'FPX' , '' As CARD_TYPE , f.MDR_AMT , f.PAYABLEAMT , f.SETTLED_DATE from FPX_TRANSACTION f WHERE f.TX_DATE_REFORMAT BETWEEN '"
					+ date1 + "' and '" + date2 + "' And f.STATUS in ('H') And f.REASON = 'Just Settle' ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementModel fs = new SettlementModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setDate("");

			} else if (rec[0] != null) {

				int datelength = rec[0].toString().length();

				if (datelength == 11) {

					String Fdate = null;
					try {
						Fdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("dd-MMM-yyyy").parse(rec[0].toString()));
						logger.info("Fdate   " + Fdate);
					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setDate(Fdate);
				} else if (rec[0].toString().contains("T")) {
					String rd = rec[0].toString().substring(0, 8);

					logger.info("rd" + rd);

					fs.setDate(rd);
				} else {
					fs.setDate(rec[0].toString());
				}

			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setMid("");

			} else if (rec[1] != null) {

				fs.setMid(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setTid("");

			} else if (rec[2] != null) {

				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setTxnAmount("");

			} else

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setMaskedPan("");

			} else if (rec[4] != null) {

				fs.setMaskedPan(rec[4].toString());

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setRrn("");

			} else if (rec[5] != null) {
				fs.setRrn(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setInvoiceId("");

			} else if (rec[6] != null) {
				fs.setInvoiceId(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setStatus("EZYSETTLE");

			} else if (rec[7] != null) {

				if (rec[7].toString().equals("H")) {
					fs.setStatus("EZYSETTLE");
				}
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setCardBrand("");

			} else if (rec[8] != null) {

				fs.setCardBrand(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setCardType("");

			} else if (rec[9] != null) {
				fs.setCardType(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setMdrAmount("");

			} else if (rec[10] != null) {

				Double d = new Double(rec[10].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrAmount(output);

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[11] != null) {

				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setPaymentDate("");
			} else if (rec[12] != null || rec[12] != "") {

				String rd = null;
				String rt = null;

				int datelength = rec[12].toString().length();

				logger.info("datelength" + datelength);

				if (datelength == 11) {
					fs.setPaymentDate(rec[12].toString());
				}

				else if (rec[12].toString().contains("T")) {
					rd = rec[12].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setPaymentDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[12].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setPaymentDate(rd);
				}

			} else {
				fs.setPaymentDate("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in EZYSETTLE: " + paginationBean.getItemList().size());

	}

	// EZYSETTLE SUMMARY BY ADMIN - END (27/03/2022)

	// M1 PAY SUMMARY BY ADMIN - END (29/07/2022)
	@Override
	@Transactional(readOnly = true)
	public void ListofM1PaySummary(final PaginationBean<SettlementModel> paginationBean, final String date1,
			final String date2, final String txntype, String export) {

		logger.info("Inside List of Ewallet Transaction Details : " + date1 + "     " + date2 + " " + txntype);

		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
		String sql = null;
		Query sqlQuery = null;
		String today = null;

		Date dt = new Date();
		String fromDate = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		logger.info(" Previous Date Format " + fromDate);

		LocalDate Currentdate = LocalDate.now();
		LocalDate Currentdate1 = Currentdate.plusDays(1);
		today = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		String tomo = Currentdate1.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		if (txntype == null || txntype == "") {
			logger.info("Default M1 PAY Query Executed");

			sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') and f.TIME_STAMP LIKE '"
					+ today + "%' order by f.TIME_STAMP desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(today);
			String From1Date = paginationBean.setDate1FromBackend(tomo);
			String TXNTYPE = paginationBean.setTXNtype("");

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txntype.equals("TNG")) {

			logger.info("TOUCH N GO Query Executed");

			sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('TPA','TPS','H') and f.TIME_STAMP BETWEEN '"
					+ date1 + "' and '" + date2 + "' order by f.TIME_STAMP desc ";
			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(date1);
			String From1Date = paginationBean.setDate1FromBackend(date2);
			String TXNTYPE = paginationBean.setTXNtype(txntype);

			// Dynamic changes for pagination count

			if (export == null) {
				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			}

		} else if (txntype.equals("SHOPPY")) {

			logger.info("SHOPEE PAY Query Executed");

			sql = "select f.MID AS MID,f.AMOUNT AS AMOUNT,f.TID AS TID,f.STATUS AS STATUS,f.TNG_TXN_ID AS AID_RESPONSE,f.TIME_STAMP AS TIME_STAMP,f.INVOICE_ID AS INVOICE_ID, f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from mobiversa.EWALLET_TXN_DETAILS f WHERE f.STATUS IN ('SPA','SPS','H') and f.TIME_STAMP BETWEEN '"
					+ date1 + "' and '" + date2 + "' order by f.TIME_STAMP desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(date1);
			String From1Date = paginationBean.setDate1FromBackend(date2);
			String TXNTYPE = paginationBean.setTXNtype(txntype);

			// Dynamic changes for pagination count
			if (export == null) {
				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);
			}

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementModel fs = new SettlementModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setMid("");

			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setTxnAmount("");

			} else

			if (rec[1] != null) {

				Double d = new Double(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setTid("");

			} else if (rec[2] != null) {

				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setStatus("");

			} else if (rec[3] != null) {

				if (rec[3].toString().equals("H")) {
					fs.setStatus("EZYSETTLE");
				} else if (rec[3].toString().equals("TPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("TPA")) {
					fs.setStatus("NOT SETTLED");
				}
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setRrn("");

			} else if (rec[4] != null) {
				fs.setRrn(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setDate("");
				fs.setTime("");

			} else if (rec[5] != null) {

				String Fdate = null;
				String Ftime = null;
				try {
					Fdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					Ftime = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					logger.info("Fdate   " + Fdate);
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setDate(Fdate);
				fs.setTime(Ftime);

			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setInvoiceId("");

			} else if (rec[6] != null) {
				fs.setInvoiceId(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[7] != null) {

				Double d = new Double(rec[7].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setMdrAmount("");

			} else if (rec[8] != null) {

				Double d = new Double(rec[8].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrAmount(output);

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setPaymentDate("");
			} else if (rec[9] != null || rec[9] != "") {

				String rt = null;

				try {
					rt = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[9].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				logger.info("rt" + rt);

				fs.setPaymentDate(rt);
			} else {
				fs.setPaymentDate("");
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setCardBrand("");

			} else if (rec[10] != null) {

				if (rec[10].toString().equals("TNG")) {
					fs.setCardBrand("TOUCH N GO");
				} else if (rec[10].toString().equals("SPP")) {
					fs.setCardBrand("SHOPEE PAY");
				} else {
					fs.setCardBrand("");
				}

			}

			if (rec[11] != null) {
				fs.setSubmerchantid(rec[11].toString());
			} else {
				fs.setSubmerchantid("");

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in M1 PAY SUMMARY: " + paginationBean.getItemList().size());

	}

	// M1 PAY SUMMARY BY ADMIN - END (29/07/2022)

	// BNPL SUMMARY BY ADMIN _ START (30-11-2022)

	// @Override
	@Transactional
	public void ListofBnplSummary(final PaginationBean<SettlementModel> paginationBean, final String date1,
			final String date2, final String txntype) {

		logger.info("Inside List of BNPL Summary Details : " + date1 + "    " + date2 + " " + txntype);

		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
		String sql = null;
		Query sqlQuery = null;
		String today = null;
		String prevDate = null;

		Date dt = new Date();
		String fromDate = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		logger.info(" Previous Date Format " + fromDate);

		LocalDate Currentdate = LocalDate.now();
		LocalDate Prev = Currentdate.minusDays(3);
		today = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		prevDate = Prev.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		if (txntype == null) {
			logger.info("Bnpl Query Admin summary default executed");
			sql = "SELECT b.MID,b.AMOUNT,b.TID,b.STATUS,b.BNPL_TXN_ID AS AID_RESPONSE,b.TIME_STAMP AS TIME_STAMP,b.INVOICE_ID AS INVOICE_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC') and b.TIME_STAMP BETWEEN '"
					+ prevDate + "' and '" + today + "' order by b.TIME_STAMP desc";

			logger.info("BNPL DEFAULT Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(prevDate);
			String From1Date = paginationBean.setDate1FromBackend(today);
			String TXNTYPE = paginationBean.setTXNtype("BNPL");

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
		}

		else if (txntype.equals("BNPL")) {
			logger.info("Bnpl Query Admin search executed");

			sql = "SELECT b.MID,b.AMOUNT,b.TID,b.STATUS,b.BNPL_TXN_ID AS AID_RESPONSE,b.TIME_STAMP AS TIME_STAMP,b.INVOICE_ID AS INVOICE_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC') and b.TIME_STAMP BETWEEN '"
					+ date1 + "' and '" + date2 + "' order by b.TIME_STAMP desc ";

			logger.info("BNPL ADMIN Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			String FromDate = paginationBean.setDateFromBackend(date1);
			String From1Date = paginationBean.setDate1FromBackend(date2);
			String TXNTYPE = paginationBean.setTXNtype(txntype);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementModel fs = new SettlementModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setMid("");

			} else if (rec[0] != null) {

				fs.setMid(rec[0].toString());
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setTxnAmount("");

			} else

			if (rec[1] != null) {

				Double d = new Double(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setTxnAmount(output);

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setTid("");

			} else if (rec[2] != null) {

				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setStatus("");

			} else if (rec[3] != null) {

				if (rec[3].toString().equals("BNS")) {
					fs.setStatus("SETTLED");
				} else if (rec[3].toString().equals("BNA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[3].toString().equals("BNC")) {
					fs.setStatus("VOIDED");
				}
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setRrn("");

			} else if (rec[4] != null) {
				fs.setRrn(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setDate("");
				fs.setTime("");

			} else if (rec[5] != null) {

				String Fdate = null;
				String Ftime = null;
				try {
					Fdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					Ftime = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					logger.info("Fdate   " + Fdate);
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setDate(Fdate);
				fs.setTime(Ftime);

			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setInvoiceId("");

			} else if (rec[6] != null) {
				fs.setInvoiceId(rec[6].toString());
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[7] != null) {

				Double d = new Double(rec[7].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setNetAmount(output);
			}
			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setMdrAmount("");

			} else if (rec[8] != null) {

				Double d = new Double(rec[8].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setMdrAmount(output);

			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setPaymentDate("");
			} else if (rec[9] != null || rec[9] != "") {

				String rt = null;

				try {
					rt = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[9].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				logger.info("rt" + rt);

				fs.setPaymentDate(rt);
			} else {
				fs.setPaymentDate("");
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setCardBrand("");

			} else if (rec[10] != null) {
				fs.setCardBrand(rec[10].toString());
			}

			if (rec[11] != null) {
				fs.setSubmerchantid(rec[11].toString());
			} else {
				fs.setSubmerchantid("");

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in BNPL SUMMARY: " + paginationBean.getItemList().size());

	}

	// BNPL ADMIN SUMMARY ENDS (30-11-22)

	// PREAUTH SUMMARY BY MERCHANT - START (04/05/2022)

	@Override
	public void PreAuthList(PaginationBean<PreauthModel> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, Merchant merchant) {
		logger.info("**** Paydee preauth list ****");
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<PreauthModel> fss = new ArrayList<PreauthModel>();
		String sql = null;

		String motomid = null;
		String ummotomid = null;
		String mid = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);

			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if (merchant.getMid().getMotoMid() != null) {
			motomid = merchant.getMid().getMotoMid();

		}

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();

		}

		logger.info("checked date: " + from + " : " + to);

		sql = "select p.TIME_STAMP ,p.STATUS , p.AMOUNT , t.MASKED_PAN , p.TID,p.AID_RESPONSE , p.INVOICE_ID,p.TRX_ID from mobiversa.PRE_AUTH p inner join mobiversa.TRANSACTION_REQUEST t on p.TRX_ID = t.TXN_ID "
				+ "where p.STATUS IN ('E','M','A','C') and p.MID IN (:motomid,:mid) and p.TIME_STAMP BETWEEN :from AND :to order by p.TIME_STAMP desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("motomid", motomid);
		sqlQuery.setString("mid", mid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			PreauthModel fs = new PreauthModel();

			if (rec[0] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().equals("P") || rec[1].toString().equals("A") || rec[1].toString().equals("S")) {
					fs.setStatus("PREAUTH SALE");
				} else if (rec[1].toString().equals("C")) {
					fs.setStatus("PREAUTH CANCEL");
				} else if (rec[1].toString().equals("D") || rec[1].toString().equals("E")
						|| rec[1].toString().equals("M")) {
					fs.setStatus("PRE-AUTHORIZATION");
				} else if (rec[1].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}

			} else {

				fs.setStatus("");
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			} else {
				fs.setAmount("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setCardNo("");
			} else if (rec[3] != null || rec[3] != "") {
				fs.setCardNo(rec[3].toString());
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[4] != null || rec[4] != "") {
				fs.setTid(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setApprovalCode("");
			} else if (rec[5] != null) {
				fs.setApprovalCode(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[6] != null) {

				fs.setReference(rec[6].toString());
			}
			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNotxnid("");
			} else if (rec[7] != null) {
				BigInteger bi = new BigInteger(rec[7].toString());

				fs.setItxnid(bi);
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records in PRE-AUTH: " + paginationBean.getItemList().size());

	}

	@Override
	public void PreAuthListExport(PaginationBean<PreauthModel> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, Merchant merchant) {
		logger.info("*** Paydee PreauthExport ***");
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<PreauthModel> fss = new ArrayList<PreauthModel>();
		String sql = null;

		String motomid = null;
		String ummotomid = null;
		String mid = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);

			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if (merchant.getMid().getMotoMid() != null) {
			motomid = merchant.getMid().getMotoMid();

		}

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();

		}

		logger.info("checked date: " + from + " : " + to);

		sql = "select p.TIME_STAMP ,p.STATUS , p.AMOUNT , t.MASKED_PAN , p.TID,p.AID_RESPONSE , p.INVOICE_ID,p.TRX_ID from mobiversa.PRE_AUTH p inner join mobiversa.TRANSACTION_REQUEST t on p.TRX_ID = t.TXN_ID "
				+ "where p.STATUS IN ('E','M','A','C') and p.MID IN (:motomid,:mid) and p.TIME_STAMP BETWEEN :from AND :to order by p.TIME_STAMP desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("motomid", motomid);
		sqlQuery.setString("mid", mid);

//		 String FromDate= paginationBean.setDateFromBackend(from);
//		  String From1Date= paginationBean.setDate1FromBackend(to);
//		 // String TXNTYPE = paginationBean.setTXNtype(txnType);
//		  
//		  
//		  int pageSize = 10; 
//		  int pageNumFromJsp = paginationBean.getCurrPage();
//		  logger.info("Page Number:" + pageNumFromJsp);
//		  
//		  sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
//		  sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			PreauthModel fs = new PreauthModel();

			if (rec[0] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().equals("P") || rec[1].toString().equals("A") || rec[1].toString().equals("S")) {
					fs.setStatus("PREAUTH SALE");
				} else if (rec[1].toString().equals("C")) {
					fs.setStatus("PREAUTH CANCEL");
				} else if (rec[1].toString().equals("D") || rec[1].toString().equals("E")
						|| rec[1].toString().equals("M")) {
					fs.setStatus("PRE-AUTHORIZATION");
				} else if (rec[1].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}

			} else {

				fs.setStatus("");
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			} else {
				fs.setAmount("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setCardNo("");
			} else if (rec[3] != null || rec[3] != "") {
				fs.setCardNo(rec[3].toString());
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[4] != null || rec[4] != "") {
				fs.setTid(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setApprovalCode("");
			} else if (rec[5] != null) {
				fs.setApprovalCode(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[6] != null) {

				fs.setReference(rec[6].toString());
			}
			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setNotxnid("");
			} else if (rec[7] != null) {
				BigInteger bi = new BigInteger(rec[7].toString());

				fs.setItxnid(bi);
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records in PRE-AUTH: " + paginationBean.getItemList().size());

	}

	@Override
	public PreAuthorization loadPreAuthorizationbyTxnId(BigInteger txid) {
		logger.info("load PreAuthorization By Txn ID: " + txid);
		return (PreAuthorization) sessionFactory.getCurrentSession().createCriteria(PreAuthorization.class)
				.add(Restrictions.eq("trxId", txid)).setMaxResults(1).uniqueResult();
	}

	@Override
	public UMEcomTxnResponse loadUMEcomTxnResponsebyTxnId(String txid) {
		logger.info("load UMEcomTxnResponse By Txn ID: " + txid);
		return (UMEcomTxnResponse) sessionFactory.getCurrentSession().createCriteria(UMEcomTxnResponse.class)
				.add(Restrictions.eq("f263_MRN", txid)).setMaxResults(1).uniqueResult();
	}

	// RK PORTAL(28/06/22) Ezysettle By Merchant Start
//	@Override
//	public void ListofEzySettleSummarymerchant(PaginationBean<SettlementModel> paginationBean, String date1,
//			String date2, String txntype, Merchant currentMerchant) {
//		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txntype);
//
//		ArrayList<SettlementModel> fss = new ArrayList<SettlementModel>();
//		String sql = null;
//
//		Date dt = new Date();
//		String fromDate = null;
//		String fromDate1 = null;
//		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//		fromDate = dateFormat.format(dt);
//		String from1 = fromDate.substring(0, fromDate.length() - 2);
//		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
//		fromDate1 = from1 + String.format("%02d", 1 + Integer.valueOf(fromDate.substring(8, 10)));
//		logger.info(" Previous Date Format " + fromDate);
//		logger.info(" next Date Format " + fromDate1);
//
//		// Fpx Date Format - Start
//
//		String FormatpreviousDate = null;
//		try {
//			FormatpreviousDate = new SimpleDateFormat("dd-MMM-yyyy")
//					.format(new SimpleDateFormat("yyyy-MM-dd").parse(fromDate));
//			System.out.println("FormatpreviousDate   " + FormatpreviousDate);
//		} catch (ParseException e1) {
//			e1.printStackTrace();
//		}
//
//		// Fpx Date Format - End
//
//		String fromdate = null;
//		String todate = null;
//		if (date1 != null && date2 != null) {
//			fromdate = date1.replace("-", "");
//			todate = date2.replace("-", "");
//		}
//
//		// Date Variables
//		String fromSearch = date1;
//		String toSearch = date2;
//		String previousDate = fromDate.replace("-", "");
//		Query sqlQuery = null;
//
//		String mid = null, ezywaymid = null, ezymotomid = null, ezysplitmid = null, ezyrecmid = null, ezypassmid = null,
//				ssmotomid = null, boostmid = null, grabmid = null, fpxmid = null;
//
//		// for grabpay purpose
//		long merchantid = currentMerchant.getId();
//
//		if (currentMerchant.getMerchantType() != null && currentMerchant.getMerchantType().equalsIgnoreCase("U")) {
//			logger.info("Inside Umobile " + currentMerchant.getMerchantType());
//
//			if (currentMerchant.getMid().getUmMid() != null) {
//				mid = currentMerchant.getMid().getUmMid();
//
//			}
//			if (currentMerchant.getMid().getUmEzywayMid() != null) {
//
//				ezywaymid = currentMerchant.getMid().getUmEzywayMid();
//			}
//
//			if (currentMerchant.getMid().getUmEzyrecMid() != null) {
//
//				ezyrecmid = currentMerchant.getMid().getUmEzyrecMid();
//			}
//
//			if (currentMerchant.getMid().getUmMotoMid() != null) {
//
//				ezymotomid = currentMerchant.getMid().getUmMotoMid();
//			}
//
//			if (currentMerchant.getMid().getUmEzypassMid() != null) {
//
//				ezypassmid = currentMerchant.getMid().getUmEzypassMid();
//			}
//
//			if (currentMerchant.getMid().getUmSsMotoMid() != null) {
//
//				ssmotomid = currentMerchant.getMid().getUmSsMotoMid();
//			}
//
//			if (currentMerchant.getMid().getBoostMid() != null) {
//				boostmid = currentMerchant.getMid().getBoostMid();
//
//			}
//
//			if (currentMerchant.getMid().getSplitMid() != null) {
//				ezysplitmid = currentMerchant.getMid().getSplitMid();
//
//			}
//
//			if (currentMerchant.getMid().getFpxMid() != null) {
//				fpxmid = currentMerchant.getMid().getFpxMid();
//
//			}
//
//		}
//
//		else {
//
//			logger.info("Inside paydee " + currentMerchant.getMerchantType());
//
//			if (currentMerchant.getMid().getMid() != null) {
//				mid = currentMerchant.getMid().getMid();
//
//			}
//			if (currentMerchant.getMid().getEzywayMid() != null) {
//
//				ezywaymid = currentMerchant.getMid().getEzywayMid();
//			}
//
//			if (currentMerchant.getMid().getEzyrecMid() != null) {
//
//				ezyrecmid = currentMerchant.getMid().getEzyrecMid();
//			}
//
//			if (currentMerchant.getMid().getMotoMid() != null) {
//
//				ezymotomid = currentMerchant.getMid().getMotoMid();
//			}
//
//			if (currentMerchant.getMid().getEzypassMid() != null) {
//
//				ezypassmid = currentMerchant.getMid().getEzypassMid();
//			}
//
//			if (currentMerchant.getMid().getSsMotoMid() != null) {
//
//				ssmotomid = currentMerchant.getMid().getSsMotoMid();
//			}
//
//			if (currentMerchant.getMid().getBoostMid() != null) {
//				boostmid = currentMerchant.getMid().getBoostMid();
//
//			}
//
//			if (currentMerchant.getMid().getFpxMid() != null) {
//				fpxmid = currentMerchant.getMid().getFpxMid();
//
//			}
//
//		}
//
//		if (txntype == null || txntype == "") {
//			logger.info("Default Query Executed");
//
//			sql = "(select s.DATE , s.MID , s.TID , s.TXN_AMOUNT , s.MASKED_PAN , s.RRN , s.INVOICE_ID , s.STATUS , "
//					+ " s.CARD_BRAND , s.CARD_TYPE , s.MDR_AMT , s.NET_AMOUNT , s.SETTLEMENTDATE from SETTLEMENT_MDR s WHERE s.DATE = '"
//					+ previousDate
//					+ "' And s.STATUS in ('H') And s.MID in (:mid,:ezywaymid,:ezyrecmid,:ezymotomid,:ezysplitmid,:ezypassmid,:ssmotomid) And s.REASON = 'Just Settle' )"
//					+ "UNION "
//					+ "(select b.DATE , b.MID , b.TID , b.TXNAMOUNT , '' As MASKED_PAN , b.BOOSTTXNID , '' As INVOICE_ID , b.PAYMENT , "
//					+ " 'BOOST' , '' As CARD_TYPE ,  b.MDRAMOUNT , b.NETAMOUNT , b.SETTLE_DATE from BOOST_DLY_RECON b WHERE b.DATE LIKE '"
//					+ previousDate
//					+ "%' And b.PAYMENT in ('H') And b.MID in (:mid,:ezywaymid,:ezyrecmid,:ezymotomid,:ezysplitmid,:ezypassmid,:ssmotomid,:boostmid) And b.REASON = 'Just Settle' )"
//					+ "UNION "
//					+ "(select  g.PAYMENTDATE , '' As MID , '' As TID , g.TXNAMOUNT , '' As MASKED_PAN , '' As RRN , '' As INVOICE_ID , g.STATUS ,"
//					+ " 'GRABPAY' , '' As CARD_TYPE , g.MDR , g.NETAMT , g.SETTLEMENT_DATE from GRABPAY_FILE g WHERE g.PAYMENTDATE = '"
//					+ FormatpreviousDate
//					+ "' And g.STATUS in ('H') And g.MERCHANTID =:merchantid And g.REASON = 'Just Settle' )" + "UNION "
//					+ "(select f.TX_DATE , f.MID , f.TID , f.TXNAMOUNT , '' As MASKED_PAN , f.FPXTXNID , f.SELLERORDERNO , f.STATUS , "
//					+ " 'FPX' , '' As CARD_TYPE , f.MDR_AMT , f.PAYABLEAMT , f.SETTLED_DATE from FPX_TRANSACTION f WHERE f.TX_DATE = '"
//					+ FormatpreviousDate
//					+ "' And f.STATUS in ('H') And f.MID in (:mid,:ezywaymid,:ezyrecmid,:ezymotomid,:ezysplitmid,:ezypassmid,:ssmotomid,:fpxmid) And f.REASON = 'Just Settle' )";
//
//			logger.info("Query : " + sql);
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setString("mid", mid);
//			sqlQuery.setString("ezywaymid", ezywaymid);
//			sqlQuery.setString("ezyrecmid", ezyrecmid);
//			sqlQuery.setString("ezymotomid", ezymotomid);
//			sqlQuery.setString("ezysplitmid", ezysplitmid);
//			sqlQuery.setString("ezypassmid", ezypassmid);
//			sqlQuery.setString("ssmotomid", ssmotomid);
//			sqlQuery.setString("boostmid", boostmid);
//			sqlQuery.setLong("merchantid", merchantid);
//			sqlQuery.setString("fpxmid", fpxmid);
//
//			String FromDate = paginationBean.setDateFromBackend(date1);
//			String From1Date = paginationBean.setDate1FromBackend(date2);
//			String TXNTYPE = paginationBean.setTXNtype(txntype);
//
//			// Dynamic changes for pagination count
//
//			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//			int pageSize = Integer.parseInt(DynamicPage);
//
//			int pageNumFromJsp = paginationBean.getCurrPage();
//			logger.info("Page Number:" + pageNumFromJsp);
//			logger.info("Max Count for Records:" + pageSize);
//
//			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//			sqlQuery.setMaxResults(pageSize);
//
//		} else if (txntype.equals("CARD")) {
//
//			logger.info("CARD Query Executed");
//
//			sql = "select s.DATE , s.MID , s.TID , s.TXN_AMOUNT , s.MASKED_PAN , s.RRN , s.INVOICE_ID , s.STATUS , "
//					+ " s.CARD_BRAND , s.CARD_TYPE , s.MDR_AMT , s.NET_AMOUNT , s.SETTLEMENTDATE from SETTLEMENT_MDR s WHERE s.DATE BETWEEN '"
//					+ fromdate + "' and '" + todate
//					+ "' And s.STATUS in ('H') And s.MID in (:mid,:ezywaymid,:ezyrecmid,:ezymotomid,:ezysplitmid,:ezypassmid,:ssmotomid) And s.REASON = 'Just Settle' ";
//			logger.info("Query : " + sql);
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setString("mid", mid);
//			sqlQuery.setString("ezywaymid", ezywaymid);
//			sqlQuery.setString("ezyrecmid", ezyrecmid);
//			sqlQuery.setString("ezymotomid", ezymotomid);
//			sqlQuery.setString("ezysplitmid", ezysplitmid);
//			sqlQuery.setString("ezypassmid", ezypassmid);
//			sqlQuery.setString("ssmotomid", ssmotomid);
//
//			String FromDate = paginationBean.setDateFromBackend(fromdate);
//			String From1Date = paginationBean.setDate1FromBackend(todate);
//			String TXNTYPE = paginationBean.setTXNtype(txntype);
//
//			// Dynamic changes for pagination count
//
//			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//			int pageSize = Integer.parseInt(DynamicPage);
//
//			int pageNumFromJsp = paginationBean.getCurrPage();
//			logger.info("Page Number:" + pageNumFromJsp);
//			logger.info("Max Count for Records:" + pageSize);
//
//			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//			sqlQuery.setMaxResults(pageSize);
//
//		} else if (txntype.equals("BOOST")) {
//
//			logger.info("BOOST Query Executed");
//
//			sql = "select b.DATE , b.MID , b.TID , b.TXNAMOUNT , '' As MASKED_PAN , b.BOOSTTXNID , '' As INVOICE_ID , b.PAYMENT , "
//					+ " 'BOOST' , '' As CARD_TYPE ,  b.MDRAMOUNT , b.NETAMOUNT , b.SETTLE_DATE from BOOST_DLY_RECON b WHERE b.DATE BETWEEN  '"
//					+ fromdate + "%' and '" + todate
//					+ "%' And b.PAYMENT in ('H')  And b.MID in (:mid,:ezywaymid,:ezyrecmid,:ezymotomid,:ezysplitmid,:ezypassmid,:ssmotomid,:boostmid) And b.REASON = 'Just Settle' ";
//
//			logger.info("Query : " + sql);
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setString("mid", mid);
//			sqlQuery.setString("ezywaymid", ezywaymid);
//			sqlQuery.setString("ezyrecmid", ezyrecmid);
//			sqlQuery.setString("ezymotomid", ezymotomid);
//			sqlQuery.setString("ezysplitmid", ezysplitmid);
//			sqlQuery.setString("ezypassmid", ezypassmid);
//			sqlQuery.setString("ssmotomid", ssmotomid);
//			sqlQuery.setString("boostmid", boostmid);
//
//			String FromDate = paginationBean.setDateFromBackend(fromdate);
//			String From1Date = paginationBean.setDate1FromBackend(todate);
//			String TXNTYPE = paginationBean.setTXNtype(txntype);
//
//			// Dynamic changes for pagination count
//
//			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//			int pageSize = Integer.parseInt(DynamicPage);
//
//			int pageNumFromJsp = paginationBean.getCurrPage();
//			logger.info("Page Number:" + pageNumFromJsp);
//			logger.info("Max Count for Records:" + pageSize);
//
//			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//			sqlQuery.setMaxResults(pageSize);
//
//		} else if (txntype.equals("GRABPAY")) {
//
//			logger.info("GRABPAY Query Executed");
//
//			sql = " select  g.PAYMENTDATE , '' As MID , '' As TID , g.TXNAMOUNT , '' As MASKED_PAN , '' As RRN , '' As INVOICE_ID , g.STATUS ,"
//					+ " 'GRABPAY' , '' As CARD_TYPE , g.MDR , g.NETAMT , g.SETTLEMENT_DATE from GRABPAY_FILE g WHERE g.TX_DATE_REFORMAT BETWEEN '"
//					+ date1 + "' and '" + date2
//					+ "' And g.STATUS in ('H') And g.MERCHANTID =:merchantid And g.REASON = 'Just Settle' ";
//
//			logger.info("Query : " + sql);
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setLong("merchantid", merchantid);
//
//			String FromDate = paginationBean.setDateFromBackend(date1);
//			String From1Date = paginationBean.setDate1FromBackend(date2);
//			String TXNTYPE = paginationBean.setTXNtype(txntype);
//
//			// Dynamic changes for pagination count
//
//			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//			int pageSize = Integer.parseInt(DynamicPage);
//
//			int pageNumFromJsp = paginationBean.getCurrPage();
//			logger.info("Page Number:" + pageNumFromJsp);
//			logger.info("Max Count for Records:" + pageSize);
//			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//			sqlQuery.setMaxResults(pageSize);
//
//		} else if (txntype.equals("FPX")) {
//
//			logger.info("FPX Query Executed");
//			sql = "select f.TX_DATE , f.MID , f.TID , f.TXNAMOUNT , '' As MASKED_PAN , f.FPXTXNID , f.SELLERORDERNO , f.STATUS , "
//					+ " 'FPX' , '' As CARD_TYPE , f.MDR_AMT , f.PAYABLEAMT , f.SETTLED_DATE from FPX_TRANSACTION f WHERE f.TX_DATE_REFORMAT BETWEEN '"
//					+ date1 + "' and '" + date2
//					+ "' And f.STATUS in ('H') And f.MID in (:mid,:ezywaymid,:ezyrecmid,:ezymotomid,:ezysplitmid,:ezypassmid,:ssmotomid,:fpxmid) And f.REASON = 'Just Settle' ";
//
//			logger.info("Query : " + sql);
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setString("mid", mid);
//			sqlQuery.setString("ezywaymid", ezywaymid);
//			sqlQuery.setString("ezyrecmid", ezyrecmid);
//			sqlQuery.setString("ezymotomid", ezymotomid);
//			sqlQuery.setString("ezysplitmid", ezysplitmid);
//			sqlQuery.setString("ezypassmid", ezypassmid);
//			sqlQuery.setString("ssmotomid", ssmotomid);
//			sqlQuery.setString("fpxmid", fpxmid);
//
//			String FromDate = paginationBean.setDateFromBackend(date1);
//			String From1Date = paginationBean.setDate1FromBackend(date2);
//			String TXNTYPE = paginationBean.setTXNtype(txntype);
//
//			// Dynamic changes for pagination count
//
//			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
//			int pageSize = Integer.parseInt(DynamicPage);
//
//			int pageNumFromJsp = paginationBean.getCurrPage();
//			logger.info("Page Number:" + pageNumFromJsp);
//			logger.info("Max Count for Records:" + pageSize);
//
//			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
//			sqlQuery.setMaxResults(pageSize);
//
//		}
//
//		@SuppressWarnings("unchecked")
//		List<Object[]> resultSet = sqlQuery.list();
//		logger.info("Number of records in the List : " + resultSet.size());
//
//		for (Object[] rec : resultSet) {
//
//			SettlementModel fs = new SettlementModel();
//
//			if (rec[0] == null || rec[0].toString().isEmpty()) {
//
//				fs.setDate("");
//
//			} else if (rec[0] != null) {
//
//				int datelength = rec[0].toString().length();
//
//				if (datelength == 11) {
//
//					String Fdate = null;
//					try {
//						Fdate = new SimpleDateFormat("yyyyMMdd")
//								.format(new SimpleDateFormat("dd-MMM-yyyy").parse(rec[0].toString()));
//						logger.info("Fdate   " + Fdate);
//					} catch (ParseException e1) {
//						e1.printStackTrace();
//					}
//
//					fs.setDate(Fdate);
//				} else if (rec[0].toString().contains("T")) {
//					String rd = rec[0].toString().substring(0, 8);
//
//					logger.info("rd" + rd);
//
//					fs.setDate(rd);
//				} else {
//					fs.setDate(rec[0].toString());
//				}
//
//			}
//
//			if (rec[1] == null || rec[1].toString().isEmpty()) {
//
//				fs.setMid("");
//
//			} else if (rec[1] != null) {
//
//				fs.setMid(rec[1].toString());
//			}
//
//			if (rec[2] == null || rec[2].toString().isEmpty()) {
//
//				fs.setTid("");
//
//			} else if (rec[2] != null) {
//
//				fs.setTid(rec[2].toString());
//			}
//
//			if (rec[3] == null || rec[3].toString().isEmpty()) {
//
//				fs.setTxnAmount("");
//
//			} else
//
//			if (rec[3] != null) {
//
//				Double d = new Double(rec[3].toString());
//				String pattern = "#,##0.00";
//				DecimalFormat myFormatter = new DecimalFormat(pattern);
//				String output = myFormatter.format(d);
//				fs.setTxnAmount(output);
//
//			}
//
//			if (rec[4] == null || rec[4].toString().isEmpty()) {
//
//				fs.setMaskedPan("");
//
//			} else if (rec[4] != null) {
//
//				fs.setMaskedPan(rec[4].toString());
//
//			}
//
//			if (rec[5] == null || rec[5].toString().isEmpty()) {
//
//				fs.setRrn("");
//
//			} else if (rec[5] != null) {
//				fs.setRrn(rec[5].toString());
//			}
//
//			if (rec[6] == null || rec[6].toString().isEmpty()) {
//
//				fs.setInvoiceId("");
//
//			} else if (rec[6] != null) {
//				fs.setInvoiceId(rec[6].toString());
//			}
//
//			if (rec[7] == null || rec[7].toString().isEmpty()) {
//
//				fs.setStatus("EZYSETTLE");
//
//			} else if (rec[7] != null) {
//
//				if (rec[7].toString().equals("H")) {
//					fs.setStatus("EZYSETTLE");
//				}
//			}
//
//			if (rec[8] == null || rec[8].toString().isEmpty()) {
//
//				fs.setCardBrand("");
//
//			} else if (rec[8] != null) {
//
//				fs.setCardBrand(rec[8].toString());
//			}
//
//			if (rec[9] == null || rec[9].toString().isEmpty()) {
//
//				fs.setCardType("");
//
//			} else if (rec[9] != null) {
//				fs.setCardType(rec[9].toString());
//			}
//
//			if (rec[10] == null || rec[10].toString().isEmpty()) {
//
//				fs.setMdrAmount("");
//
//			} else if (rec[10] != null) {
//
//				Double d = new Double(rec[10].toString());
//				String pattern = "#,##0.00";
//				DecimalFormat myFormatter = new DecimalFormat(pattern);
//				String output = myFormatter.format(d);
//				fs.setMdrAmount(output);
//
//			}
//
//			if (rec[11] == null || rec[11].toString().isEmpty()) {
//
//				fs.setNetAmount("");
//
//			} else if (rec[11] != null) {
//
//				Double d = new Double(rec[11].toString());
//				String pattern = "#,##0.00";
//				DecimalFormat myFormatter = new DecimalFormat(pattern);
//				String output = myFormatter.format(d);
//				fs.setNetAmount(output);
//			}
//
//			if (rec[12] == null || rec[12].toString().isEmpty()) {
//				fs.setPaymentDate("");
//			} else if (rec[12] != null || rec[12] != "") {
//
//				String rd = null;
//				String rt = null;
//
//				int datelength = rec[12].toString().length();
//
//				logger.info("datelength" + datelength);
//
//				if (datelength == 11) {
//					fs.setPaymentDate(rec[12].toString());
//				}
//
//				else if (rec[12].toString().contains("T")) {
//					rd = rec[12].toString().substring(0, 8);
//
//					logger.info("rd" + rd);
//
//					try {
//						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
//					} catch (ParseException e) {
//						e.printStackTrace();
//					}
//
//					logger.info("rt" + rt);
//
//					fs.setPaymentDate(rt);
//				}
//
//				else {
//					try {
//						rd = new SimpleDateFormat("dd/MM/yyyy")
//								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[12].toString()));
//					} catch (ParseException e) {
//						e.printStackTrace();
//					}
//					fs.setPaymentDate(rd);
//				}
//
//			} else {
//				fs.setPaymentDate("");
//			}
//
//			fss.add(fs);
//		}
//		paginationBean.setItemList(fss);
//		logger.info("No of Records in EZYSETTLE: " + paginationBean.getItemList().size());
//
//	}

	@Override
	public void ListofEzySettleSummarymerchant(PaginationBean<SettlementModel> paginationBean, String date1,
			String date2, Merchant currentMerchant, boolean isExport) {
		try {

			if (date1 == null) {
				LocalDate today = LocalDate.now();
				date1 = today.minusMonths(2).toString() + " 00:00:00";
				date2 = today.toString() + " 23:59:59";
			}
			logger.info("Searching for ezysettle summary for " + currentMerchant.getUsername() + "and from  " + date1
					+ "to  " + date2);

			String mid = null, ezywaymid = null, ezymotomid = null, ezysplitmid = null, ezyrecmid = null,
					ezypassmid = null, ssmotomid = null, boostmid = null, grabmid = null, fpxmid = null, tngmid = null,
					gpaymid = null, subgrambmid = null, shoppymid = null, fiuuMid = null;

			// for grabpay purpose
			long merchantid = currentMerchant.getId();

			if (currentMerchant.getMerchantType() != null && (currentMerchant.getMerchantType().equalsIgnoreCase("U") || currentMerchant.getMerchantType().equalsIgnoreCase("FIUU"))) {
				logger.info("Inside Umobile " + currentMerchant.getMerchantType());

				if (currentMerchant.getMid().getUmMid() != null) {
					mid = currentMerchant.getMid().getUmMid();

				}
				if (currentMerchant.getMid().getUmEzywayMid() != null) {

					ezywaymid = currentMerchant.getMid().getUmEzywayMid();
				}

				if (currentMerchant.getMid().getUmEzyrecMid() != null) {

					ezyrecmid = currentMerchant.getMid().getUmEzyrecMid();
				}

				if (currentMerchant.getMid().getUmMotoMid() != null) {

					ezymotomid = currentMerchant.getMid().getUmMotoMid();
				}

				if (currentMerchant.getMid().getUmEzypassMid() != null) {

					ezypassmid = currentMerchant.getMid().getUmEzypassMid();
				}

				if (currentMerchant.getMid().getUmSsMotoMid() != null) {

					ssmotomid = currentMerchant.getMid().getUmSsMotoMid();
				}

				if (currentMerchant.getMid().getBoostMid() != null) {
					boostmid = currentMerchant.getMid().getBoostMid();

				}

				if (currentMerchant.getMid().getSplitMid() != null) {
					ezysplitmid = currentMerchant.getMid().getSplitMid();

				}

				if (currentMerchant.getMid().getFpxMid() != null) {
					fpxmid = currentMerchant.getMid().getFpxMid();

				}
				if (currentMerchant.getMid().getGpayMid() != null) {
					gpaymid = currentMerchant.getMid().getGpayMid();

				}
				if (currentMerchant.getMid().getSubGrabMid() != null) {
					subgrambmid = currentMerchant.getMid().getSubGrabMid();

				}
				if (currentMerchant.getMid().getGrabMid() != null) {
					grabmid = currentMerchant.getMid().getGrabMid();

				}
				if (currentMerchant.getMid().getTngMid() != null) {
					tngmid = currentMerchant.getMid().getTngMid();

				}
				if (currentMerchant.getMid().getShoppyMid() != null) {
					shoppymid = currentMerchant.getMid().getShoppyMid();

				}
				
				if (currentMerchant.getMid().getFiuuMid() != null) {
					fiuuMid = currentMerchant.getMid().getFiuuMid();

				}

			} else {

				logger.info("Inside paydee " + currentMerchant.getMerchantType());

				if (currentMerchant.getMid().getMid() != null) {
					mid = currentMerchant.getMid().getMid();

				}
				if (currentMerchant.getMid().getEzywayMid() != null) {

					ezywaymid = currentMerchant.getMid().getEzywayMid();
				}

				if (currentMerchant.getMid().getEzyrecMid() != null) {

					ezyrecmid = currentMerchant.getMid().getEzyrecMid();
				}

				if (currentMerchant.getMid().getMotoMid() != null) {

					ezymotomid = currentMerchant.getMid().getMotoMid();
				}

				if (currentMerchant.getMid().getEzypassMid() != null) {

					ezypassmid = currentMerchant.getMid().getEzypassMid();
				}

				if (currentMerchant.getMid().getSsMotoMid() != null) {

					ssmotomid = currentMerchant.getMid().getSsMotoMid();
				}

				if (currentMerchant.getMid().getBoostMid() != null) {
					boostmid = currentMerchant.getMid().getBoostMid();

				}

				if (currentMerchant.getMid().getFpxMid() != null) {
					fpxmid = currentMerchant.getMid().getFpxMid();

				}
				if (currentMerchant.getMid().getGpayMid() != null) {
					gpaymid = currentMerchant.getMid().getGpayMid();

				}
				if (currentMerchant.getMid().getSubGrabMid() != null) {
					subgrambmid = currentMerchant.getMid().getSubGrabMid();

				}
				if (currentMerchant.getMid().getGrabMid() != null) {
					grabmid = currentMerchant.getMid().getGrabMid();

				}
				if (currentMerchant.getMid().getTngMid() != null) {
					tngmid = currentMerchant.getMid().getTngMid();

				}
				if (currentMerchant.getMid().getShoppyMid() != null) {
					shoppymid = currentMerchant.getMid().getShoppyMid();

				}

			}

			// Collect all the mids into a list
			List<String> mids = new ArrayList<>();
			if (mid != null)
				mids.add("'" + mid + "'");
			if (ezywaymid != null)
				mids.add("'" + ezywaymid + "'");
			if (ezymotomid != null)
				mids.add("'" + ezymotomid + "'");
			if (ezysplitmid != null)
				mids.add("'" + ezysplitmid + "'");
			if (ezyrecmid != null)
				mids.add("'" + ezyrecmid + "'");
			if (ezypassmid != null)
				mids.add("'" + ezypassmid + "'");
			if (ssmotomid != null)
				mids.add("'" + ssmotomid + "'");
			if (boostmid != null)
				mids.add("'" + boostmid + "'");
			if (grabmid != null)
				mids.add("'" + grabmid + "'");
			if (fpxmid != null)
				mids.add("'" + fpxmid + "'");
			if (tngmid != null)
				mids.add("'" + tngmid + "'");
			if (gpaymid != null)
				mids.add("'" + gpaymid + "'");
			if (subgrambmid != null)
				mids.add("'" + subgrambmid + "'");
			if (shoppymid != null)
				mids.add("'" + shoppymid + "'");
			
			if (fiuuMid != null)
				mids.add("'" + fiuuMid + "'");

			String midsList = String.join(", ", mids);

			logger.info(midsList);

			String sql = "SELECT " + "  j.TIME_STAMP, " + "  j.NET_AMOUNT, " + "  j.WITHDRAWFEE, "
					+ "  j.NET_AMOUNT_PAYABLE, " + "  j.MID, " + "  j.TID, " + "  j.STATUS, "
					+ "  j.EZYSETTLE_REFERENCE_NO " + "FROM " + "  mobiversa.JUST_SETTLE j " + "WHERE "
					+ "  j.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' " + "  AND j.STATUS IN ('R', 'P') "
					+ "  AND j.MID IN (" + midsList + ") " + "ORDER BY " + "  j.TIME_STAMP DESC";

			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			int size = sqlQuery.list().size();
			int requiredPages = (size / 20);
			if (size % 20 > 0)
				requiredPages++;
			paginationBean.setQuerySize(String.valueOf(size));
			paginationBean.setDateFromBackend(date1);
			paginationBean.setDate1FromBackend(date2);
//	            paginationBean.setTXNtype(txntype);

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();

			sqlQuery.setFirstResult((pageNumFromJsp - 1) * pageSize); // Adjust for zero-index
			if (!isExport) {
				sqlQuery.setMaxResults(pageSize);
			}

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();

			List<SettlementModel> fss = resultSet.stream().map(rec -> {
				SettlementModel fs = new SettlementModel();

				fs.setDate(rec[0] == null || rec[0].toString().isEmpty() ? ""
						: rec[0].toString().substring(0, Math.min(rec[0].toString().length(), 10)));
				fs.setNetAmount(rec[1] == null ? "" : rec[1].toString());
				fs.setMdrAmount(rec[2] == null ? "" : rec[2].toString());
				fs.setTxnAmount(rec[3] == null ? "" : rec[3].toString());
				fs.setMid(rec[4] == null ? "" : rec[4].toString());
				fs.setTid(rec[5] == null ? "" : rec[5].toString());

				if (rec[6] != null) {
					fs.setStatus(rec[6].toString().equalsIgnoreCase("R") ? "Success" : "Pending");
				}

				fs.setInvoiceId(rec[7] == null ? "" : rec[7].toString());

				return fs;
			}).collect(Collectors.toList());

			// Dynamic changes for pagination count

			paginationBean.setItemList(fss);

		} catch (Exception e) {

			logger.info(e.getMessage());
			e.printStackTrace();
		}
	}
	// RK PORTAL(28/06/22) End

	@Override
	public void PreAuthList1(PaginationBean<PreauthModel> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, Merchant merchant) {
		logger.info("**** Umobile preauth list ****");
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<PreauthModel> fss = new ArrayList<PreauthModel>();
		String sql = null;

		String motomid = null;
		String ummotomid = null;
		String ummid = null;
		
		String fiuuMid = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);

			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if (merchant.getMid().getUmMotoMid() != null) {
			ummotomid = merchant.getMid().getUmMotoMid();
		}

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		
		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}
		

		logger.info("checked date: " + from + " : " + to);

		sql = "SELECT * FROM(select res.TIME_STAMP AS TIME_STAMP,res.STATUS AS STATUS,res.F007_TXNAMT AS AMOUNT,res.MASKED_PAN AS PAN,res.F354_TID AS TID,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F270_ORN AS INVOICE_ID,res.F263_MRN AS MRN,'MOTO' AS TXN_TYPE, res.F260_SERVID AS SERV_ID from mobiversa.UM_ECOM_TXNRESPONSE res where (res.STATUS = 'E' or res.STATUS = 'EE' ) and res.F001_MID IN (:ummotomid, :fiuuMid) and res.TIME_STAMP BETWEEN :from AND :to "
				+ "UNION "
				+ "SELECT p.TIME_STAMP AS TIME_STAMP,p.STATUS AS STATUS,p.AMOUNT AS AMOUNT,p.PAN AS PAN,p.TID AS TID,p.AID_RESPONSE AS AID_RESPONSE,p.INVOICE_ID AS INVOICE_ID,p.TRX_ID AS MRN,'WIRE' AS TXN_TYPE,'' AS SERV_ID from mobiversa.PRE_AUTH p where p.STATUS= 'E' AND p.MID = :ummid and p.TIME_STAMP BETWEEN :from AND :to) AS subalias ORDER BY TIME_STAMP desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ummotomid", ummotomid);
		sqlQuery.setString("ummid", ummid);
		sqlQuery.setString("fiuuMid", fiuuMid);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
		// String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			PreauthModel fs = new PreauthModel();

			if (rec[0] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().equals("P") || rec[1].toString().equals("A") || rec[1].toString().equals("S")) {
					fs.setStatus("PREAUTH SALE");
				} else if (rec[1].toString().equals("C")) {
					fs.setStatus("PREAUTH CANCEL");
				} else if (rec[1].toString().equals("D") || rec[1].toString().equals("E")
						|| rec[1].toString().equals("M")) {
					fs.setStatus("PRE-AUTHORIZATION");
				} else if (rec[1].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				} else if (rec[1].toString().equals("EE")) {
					fs.setStatus("EXPIRED");
				}

			} else {

				fs.setStatus("");
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			} else {
				fs.setAmount("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setCardNo("");
			} else if (rec[3] != null || rec[3] != "") {

				if (rec[8].toString().equalsIgnoreCase("MOTO")) {
					logger.info("inside moto");
					fs.setCardNo(rec[3].toString());
				}

				else if (rec[8].toString().equalsIgnoreCase("WIRE"))

				{
					logger.info("inside wire");
					ThalesControl t = new ThalesControl();
					String decryptpan = t.panDecrypt(rec[3].toString());

					String maskPan = decryptpan.substring(0, 6) + "ffffff" + decryptpan.substring(12);

					fs.setCardNo(maskPan);
					// fs.setCardNo("inside wire" +rec[3].toString());

				}

			}
			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[4] != null || rec[4] != "") {
				fs.setTid(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setApprovalCode("");
			} else if (rec[5] != null) {
				fs.setApprovalCode(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[6] != null) {

				fs.setReference(rec[6].toString());
			}
			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setTxnid("");
			} else if (rec[7] != null) {

				fs.setTxnid(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setTxntype("");
			} else if (rec[8] != null) {

				logger.info("txn type is " + rec[8].toString());

				fs.setTxntype(rec[8].toString());
			}
			
			//service id
			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setServiceId("");
			} else if (rec[9] != null) {
				fs.setServiceId(rec[9].toString());
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records in PRE-AUTH: " + paginationBean.getItemList().size());

	}

	@Override
	public void PreAuthList1Export(PaginationBean<PreauthModel> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, Merchant merchant) {
		logger.info("**** Umobile preauth list export ****");
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<PreauthModel> fss = new ArrayList<PreauthModel>();
		String sql = null;

		String motomid = null;
		String ummotomid = null;
		String ummid = null;
		
		String fiuuMid = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);

			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if (merchant.getMid().getUmMotoMid() != null) {
			ummotomid = merchant.getMid().getUmMotoMid();
		}

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		
		if (merchant.getMid().getFiuuMid() != null) {
			fiuuMid = merchant.getMid().getFiuuMid();
		}

		logger.info("checked date: " + from + " : " + to);

		sql = "SELECT * FROM(select res.TIME_STAMP AS TIME_STAMP,res.STATUS AS STATUS,res.F007_TXNAMT AS AMOUNT,res.MASKED_PAN AS PAN,res.F354_TID AS TID,res.F011_AUTHIDRESP AS AID_RESPONSE,res.F270_ORN AS INVOICE_ID,res.F263_MRN AS MRN,'MOTO' AS TXN_TYPE, res.F260_SERVID as SERV_ID from mobiversa.UM_ECOM_TXNRESPONSE res where res.STATUS = 'E' and res.F001_MID IN (:ummotomid,:fiuuMid) and res.TIME_STAMP BETWEEN :from AND :to "
				+ "UNION "
				+ "SELECT p.TIME_STAMP AS TIME_STAMP,p.STATUS AS STATUS,p.AMOUNT AS AMOUNT,p.PAN AS PAN,p.TID AS TID,p.AID_RESPONSE AS AID_RESPONSE,p.INVOICE_ID AS INVOICE_ID,p.TRX_ID AS MRN,'WIRE' AS TXN_TYPE, '' as SERV_ID from mobiversa.PRE_AUTH p where p.STATUS= 'E' AND p.MID = :ummid and p.TIME_STAMP BETWEEN :from AND :to) AS subalias ORDER BY TIME_STAMP desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("ummotomid", ummotomid);
		sqlQuery.setString("ummid", ummid);
		sqlQuery.setString("fiuuMid", fiuuMid);

//		  String FromDate= paginationBean.setDateFromBackend(from);
//		  String From1Date= paginationBean.setDate1FromBackend(to);
//		 // String TXNTYPE = paginationBean.setTXNtype(txnType);
//		  
//		  
//		  int pageSize = 10; 
//		  int pageNumFromJsp = paginationBean.getCurrPage();
//		  logger.info("Page Number:" + pageNumFromJsp);
//		  
//		  sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
//		  sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			PreauthModel fs = new PreauthModel();

			if (rec[0] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				logger.info(" ***Date :***" + rd);
				logger.info(" ***Date :***" + rt);
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[1] != null) {

				if (rec[1].toString().equals("P") || rec[1].toString().equals("A") || rec[1].toString().equals("S")) {
					fs.setStatus("PREAUTH SALE");
				} else if (rec[1].toString().equals("C")) {
					fs.setStatus("PREAUTH CANCEL");
				} else if (rec[1].toString().equals("D") || rec[1].toString().equals("E")
						|| rec[1].toString().equals("M")) {
					fs.setStatus("PRE-AUTHORIZATION");
				} else if (rec[1].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}

			} else {

				fs.setStatus("");
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			} else {
				fs.setAmount("");
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fs.setCardNo("");
			} else if (rec[3] != null || rec[3] != "") {

				if (rec[8].toString().equalsIgnoreCase("MOTO")) {
					logger.info("inside moto :" + rec[3].toString());
					fs.setCardNo(rec[3].toString());

				}

				else if (rec[8].toString().equalsIgnoreCase("WIRE"))

				{
					logger.info("inside wire :" + rec[3].toString());
					ThalesControl t = new ThalesControl();
					String decryptpan = t.panDecrypt(rec[3].toString());

					String maskPan = decryptpan.substring(0, 6) + "ffffff" + decryptpan.substring(12);

					fs.setCardNo(maskPan);
					// fs.setCardNo(rec[3].toString());

				}

			}
			if (rec[4] == null || rec[4].toString().isEmpty()) {
				fs.setTid("");
			} else if (rec[4] != null || rec[4] != "") {
				fs.setTid(rec[4].toString());
			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {
				fs.setApprovalCode("");
			} else if (rec[5] != null) {
				fs.setApprovalCode(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {
				fs.setReference("");
			} else if (rec[6] != null) {

				fs.setReference(rec[6].toString());
			}
			if (rec[7] == null || rec[7].toString().isEmpty()) {
				fs.setTxnid("");
			} else if (rec[7] != null) {

				fs.setTxnid(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setTxntype("");
			} else if (rec[8] != null) {

				logger.info("txn type is " + rec[8].toString());

				fs.setTxntype(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setServiceId("");
			} else if (rec[9] != null) {

				logger.info("service id is " + rec[9].toString());

				fs.setServiceId(rec[9].toString());
			}
			
			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records in PRE-AUTH: " + paginationBean.getItemList().size());

	}

	// PAYOUT BY DHINESH & RK - START
	@Override
	@Transactional(readOnly = true)
	public void listPayoutTransactionByMerchant(final PaginationBean<PayoutModel> paginationBean, final String date1,
			final String date2, String merchant) {
		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;
		int querySize = 0;

		Date now = new Date();
		Date currentDate = new DateTime(now).toDate();
		logger.info("Current Date : " + now + " : " + currentDate);
		String fromDate = new SimpleDateFormat("yyyy-MM-dd").format(currentDate);

		Query sqlQuery = null;
		List<Object[]> resultSet = null;

		logger.info("MERCHANT BUSINESS NAME :" + merchant);

		if (date1 != null && date2 != null)

		{

			logger.info("search query From " + date1 + " To " + date2);

			// old query
//
//                     sql = "SELECT p.CREATED_BY,p.CREATED_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//                                  + "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,MERCHANT_FK,p.PAID_TIME,p.PAID_DATE FROM PAYOUT_DETAIL p WHERE p.MODIFIED_BY BETWEEN '"
//                                  + date1 + "' and '" + date2 + "' ORDER BY p.CREATED_DATE desc ";

			sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
					+ "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUT_FEE,p.PAYOUTTYPE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml on ml.ID = p.MERCHANT_FK  WHERE p.MERCHANT_FK = '"
					+ merchant + "' AND p.PAYOUT_STATUS IN ('pp','pd','pbd','pending','On Process') "
					+ " AND p.CREATED_DATE BETWEEN '" + date1 + " 00:00:00' AND '" + date2
					+ " 23:59:59' ORDER BY p.REQUEST_DATE desc ";

//	         "AND p.CREATED_DATE BETWEEN '" + date1 + " 00:00:00' AND '" + date2 + " 23:59:59' " 			

			logger.info("Search Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		else {

			logger.info("Current Date " + fromDate);

			// old query
//                     sql = "SELECT p.CREATED_BY,p.CREATED_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//                                  + "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,MERCHANT_FK,p.PAID_TIME,p.PAID_DATE FROM PAYOUT_DETAIL p WHERE p.MODIFIED_BY ='"
//                                  + fromDate + "' ORDER BY p.CREATED_DATE desc ";
			sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
					+ "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUT_FEE,p.PAYOUTTYPE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.CREATED_BY = '"
					+ merchant + "' AND p.PAYOUT_STATUS IN ('pp','pd','pbd','pending') AND p.MODIFIED_BY ='" + fromDate
					+ "' ORDER BY p.REQUEST_DATE desc ";

			logger.info("Default Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		try {

			for (Object[] rec : resultSet) {

				PayoutModel fs = new PayoutModel();

				if (rec[0] == null || rec[0].toString().isEmpty()) {

					fs.setCreatedby("");

				} else if (rec[0] != null) {
					fs.setCreatedby(rec[0].toString());
				}

//                   if (rec[1] == null || rec[1].toString().isEmpty()) {
				//
//                          fs.setCreateddate("");
				//
//                   }
				//
//                   else if (rec[1] != null) {
				//
//                          fs.setCreateddate(rec[1].toString());

				// }

				if (rec[1] == null || rec[1].toString().isEmpty()) {

					fs.setCreateddate("");
				}

				else if (rec[1] != null) {

					// Sheik Changes

					String time = null;
					String date = null;
					String stamp = null;
					try {

						time = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
						date = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					} catch (Exception e) {
						// TODO: handle exception
						logger.info("Time throws error and Can't extract time from date time payout detail table");
					}
					stamp = date + " " + time;
					fs.setCreateddate(stamp);

				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setModifieddate("");

				} else if (rec[2] != null) {

					fs.setModifieddate(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setPayeeaccnumber("");

				} else if (rec[3] != null) {

					fs.setPayeeaccnumber(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPayeebrn("");

				} else

				if (rec[4] != null) {

					fs.setPayeebrn(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setPayeebankname("");

				} else

				if (rec[5] != null) {

					fs.setPayeebankname(rec[5].toString());
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setPayeeemail("");

				} else

				if (rec[6] != null) {

					fs.setPayeeemail(rec[6].toString());

				}

				if (rec[7] == null || rec[7].toString().isEmpty()) {

					fs.setPayeeic("");

				} else if (rec[7] != null) {

					fs.setPayeeic(rec[7].toString());
				}

				if (rec[8] == null || rec[8].toString().isEmpty()) {

					fs.setPayeemobile("");

				} else if (rec[8] != null) {
					fs.setPayeemobile(rec[8].toString());
				}

				if (rec[9] == null || rec[9].toString().isEmpty()) {

					fs.setPayeename("");

				} else if (rec[9] != null) {
					fs.setPayeename(rec[9].toString());
				}

				if (rec[10] == null || rec[10].toString().isEmpty()) {

					fs.setPayoutamount("");

				} else if (rec[10] != null) {
					Double d = new Double(rec[10].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setPayoutamount(output);

				}

				if (rec[11] == null || rec[11].toString().isEmpty()) {

					fs.setPayoutdate("");

				} else if (rec[11] != null) {

					String pdate = null;
					try {
						pdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));

					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setPayoutdate(pdate);

				}

				if (rec[12] == null) {

					fs.setPayoutstatus("Requested");

				} else if (rec[12] != null) {

					if (rec[12].toString().equals("A")) {
						fs.setPayoutstatus("To Process");

					} else if (rec[12].toString().equals("F")) {
						fs.setPayoutstatus("Failed");
					} else if (rec[12].toString().equals("S")) {
						fs.setPayoutstatus("Processing");
					} else if (rec[12].toString().equals("pp")) {
						fs.setPayoutstatus("Paid");
					} else if (rec[12].toString().equals("pd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[12].toString().equals("pbd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[12].toString().equals("pending")) {
						fs.setPayoutstatus("Pending");
					}

				}

				if (rec[13] == null || rec[13].toString().isEmpty()) {

					fs.setSettledate("");

				} else if (rec[13] != null) {

					String sdate = null;
					try {
						sdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setSettledate(sdate);
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setSettlenetamount("");

				} else if (rec[14] != null) {

					Double d = new Double(rec[14].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setSettlenetamount(output);
				}

				if (rec[15] == null || rec[15].toString().isEmpty()) {

					fs.setInvoiceidproof("");

				} else if (rec[15] != null) {
					fs.setInvoiceidproof(rec[15].toString());
				}

				if (rec[16] == null || rec[16].toString().isEmpty()) {

					fs.setPaymentreason("");

				} else if (rec[16] != null) {
					fs.setPaymentreason(rec[16].toString());
				}

				if (rec[17] == null || rec[17].toString().isEmpty()) {

					fs.setSourceoffund("");

				} else if (rec[17] != null) {
					fs.setSourceoffund(rec[17].toString());
				}

				if (rec[18] == null || rec[18].toString().isEmpty()) {

					fs.setSwiftifsccode("");

				} else if (rec[18] != null) {
					fs.setSwiftifsccode(rec[18].toString());
				}

				if (rec[19] == null || rec[19].toString().isEmpty()) {
					fs.setMerchantId("");
				} else {
					fs.setMerchantId(rec[19].toString());
				}

				if (rec[20] == null || rec[20].toString().isEmpty()) {
					fs.setPaidTime("");
				} else {
					fs.setPaidTime(rec[20].toString());
				}

				if (rec[21] == null || rec[21].toString().isEmpty()) {
					fs.setPaidDate("");
				} else {
					fs.setPaidDate(rec[21].toString());
				}

				if (rec[22] == null || rec[22].toString().isEmpty()) {
					fs.setSubmerchantMid("");
				} else {
					fs.setSubmerchantMid(rec[22].toString());
				}
				if (rec[23] == null || rec[23].toString().isEmpty()) {
					fs.setMmId("");
				} else {
					fs.setMmId(rec[23].toString());
				}
				if (rec[24] == null || rec[24].toString().isEmpty()) {
					fs.setPayoutId("");
				} else {
					fs.setPayoutId(rec[24].toString());
				}
				if (rec[25] == null || rec[25].toString().isEmpty()) {
					fs.setFailurereason("");
				} else {
					fs.setFailurereason(rec[25].toString());
				}
				if (rec[26] == null || rec[26].toString().isEmpty()) {
					fs.setPayoutfee("");
				} else {
					fs.setPayoutfee(rec[26].toString());
				}
				if (rec[27] == null || rec[27].toString().isEmpty()) {
					fs.setPayouttype("");
				} else {
					fs.setPayouttype(rec[27].toString());
				}

				fss.add(fs);
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records in the PAYOUT_DETAIL : " + paginationBean.getItemList().size());
		} catch (Exception e) {

			logger.info("Exception in Payout login dao imp " + e.getMessage() + " " + e);

			paginationBean.setItemList(new ArrayList<>());

		}
	}

	// With Draw

	@Override
	@Transactional(readOnly = true)
	public void withDrawAmount(final PaginationBean<PayoutModel> paginationBean, String merchant) {
		logger.info("===>INSIDE WITHDRAW DAO IMPL<===");
	}

	@Override
	public PayoutDetail loadPayoutDetailByTxnId(String txnId) {

		return (PayoutDetail) sessionFactory.getCurrentSession().createCriteria(PayoutDetail.class)
				.add(Restrictions.eq("invoiceIdProof", txnId)).setMaxResults(1).uniqueResult();
	}

	// PAYOUT BY DHINESH & RK - END

	@Override
	public EwalletTxnDetails loadEwalletTxnDetails(String mrn) {
		logger.info("load ewallettxndetails By Tng MRN : " + mrn);
		return (EwalletTxnDetails) sessionFactory.getCurrentSession().createCriteria(EwalletTxnDetails.class)
				.add(Restrictions.eq("mobiTxnId", mrn)).setMaxResults(1).uniqueResult();
	}

	// BNPL loadBnplTxnDetails

	@Override
	public BnplTxnDetails loadBnplTxnDetails(String mrn) {
		logger.info("load BnpltxnDetails By bnpl MRN : " + mrn);
		return (BnplTxnDetails) sessionFactory.getCurrentSession().createCriteria(BnplTxnDetails.class)
				.add(Restrictions.eq("mobiTxnId", mrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public void merchantEwallet(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String paydeeEzywaymid, String ummid, String motomid,
			String ezyrecmid, String mid, String bnplMid, String boostmid, String tngMid, String shoppyMid,
			String grabmid, String txnType, Merchant merchant) {
        try {
            logger.info(" Grab Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
            String from = null;
            String to = null;
            String fdate = null;
            String tdate = null;
            String year1 = null;
            String year2 = null;
            Query sqlQuery = null;
//			String paydeeEzywaymid = null;
            ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
            String sql = null;

            String VALUE = date;

            // String grabmid = null;

            String Ezywaymid = umEzywayMid;
            if (merchant.getMid().getGrabMid() != null) {
                grabmid = merchant.getMid().getGrabMid();
            }
            // logger.info("walmid" + grabmid);

            if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

//			LocalDate Currentdate = LocalDate.now();
//			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
//			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
//			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                LocalDate Currentdate = LocalDate.now().minusDays(5);
                LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
                from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                logger.info("From date :" + from);
                logger.info("To date :" + to);

            } else {

                from = date;
                fdate = date;
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
                try {
                    from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
                    fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
                    logger.info("date format:" + date);
                } catch (ParseException e) {

                    e.printStackTrace();
                }

                to = date1;
                tdate = date1;
                SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
                try {
                    to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
                    tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
                } catch (ParseException e) {

                    e.printStackTrace();
                }

            }
            if (txnType.equals("GRABPAY")) {
                logger.info("*** GRABPAY *** :");
                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,gpf.NETAMT ,gpf.MDR,gpf.SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " from mobiversa.MID m INNER JOIN mobiversa.MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN mobiversa.MERCHANT c ON c.ID = m.MERCHANT_FK "
                        + "INNER JOIN mobiversa.FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
                        + "INNER JOIN mobiversa.GRABPAY_FILE gpf ON (gpf.PARTNERID = a.RRN) "
                        + "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'FIUU' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
                        + "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc ";

                logger.info("GRABPAY Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("from", from);
                sqlQuery.setString("to", to);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("paydeeEzywaymid", paydeeEzywaymid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ezyrecmid", ezyrecmid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("grabmid", grabmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("paydeeEzywaymid :" + paydeeEzywaymid);
                logger.info("ummid :" + ummid);
                logger.info("motomid :" + motomid);
                logger.info("ezyrecmid :" + ezyrecmid);
                logger.info("mid :" + mid);
                logger.info("grabmid :" + grabmid);

                String FromDate = paginationBean.setDateFromBackend(from);
                String From1Date = paginationBean.setDate1FromBackend(to);
                String TXNTYPE = paginationBean.setTXNtype(txnType);

                // Dynamic changes for pagination count

                String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
                int pageSize = Integer.parseInt(DynamicPage);

                int pageNumFromJsp = paginationBean.getCurrPage();
                logger.info("Page Number:" + pageNumFromJsp);
                logger.info("Max Count for Records:" + pageSize);

                sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
                sqlQuery.setMaxResults(pageSize);

            } else if (txnType.equals("BOOST")) {




                logger.info("*** BOOST *** :");
//				 sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
//						 	+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
//						 	+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
//						 	+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
//						 	+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID "
//						 	+ "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
//						 	+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//						 	+ "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC') AND "
//						 	+ "a.MID IN (a.MID = :Ezywaymid , a.MID = :boostmid , a.MID = :motomid , a.MID = :ummid , a.MID = :mid) AND a.TIME_STAMP BETWEEN "
//						 	+ " :from and :to order by a.TIME_STAMP desc ";

                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
                        + "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
                        + "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
                        + "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID, a.TRX_ID "
                        + "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID OR a.MID=m.UM_MOTO_MID) "
                        + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
                        + "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC','BPR') AND "
                        + "a.MID IN (:Ezywaymid ,:boostmid ,:motomid ,:ummid ,:mid) AND a.TIME_STAMP BETWEEN "
                        + " :from and :to order by a.TIME_STAMP desc ";

                logger.info("BOOST Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("from", from);
                sqlQuery.setString("to", to);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("boostmid", boostmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("ummid :" + ummid);
                logger.info("mid :" + mid);
                logger.info("boostmid :" + boostmid);

                String FromDate = paginationBean.setDateFromBackend(from);
                String From1Date = paginationBean.setDate1FromBackend(to);
                String TXNTYPE = paginationBean.setTXNtype(txnType);

                logger.info("From Date :" + FromDate);
                logger.info("To Date :" + From1Date);

                // Dynamic changes for pagination count

                String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
                int pageSize = Integer.parseInt(DynamicPage);

                int pageNumFromJsp = paginationBean.getCurrPage();
                logger.info("Page Number:" + pageNumFromJsp);
                logger.info("Max Count for Records:" + pageSize);

                sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
                sqlQuery.setMaxResults(pageSize);
            }

            else if (txnType.equals("TNG")) {

                logger.info("*** TNG *** :");

//				 	sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
//				 			+"'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
//				 			+"WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') AND f.MID IN (f.MID = :tngMid , f.MID = :shoppyMid , f.MID = :Ezywaymid  , f.MID = :motomid , f.MID = :mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";
//
                sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
                        + "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID,f.TNG_TXN_ID  from mobiversa.EWALLET_TXN_DETAILS f "
                        + "WHERE f.STATUS IN ('TPA','TPS','H','TPR') AND f.TXN_TYPE = 'TNG' AND f.MID IN (:tngMid ,:Ezywaymid ,:motomid ,:mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";

                logger.info(" SHOPPY Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("tngMid :" + tngMid);
//				 logger.info("shoppyMid :" + shoppyMid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                sqlQuery.setString("from", from);
                sqlQuery.setString("to", to);
                sqlQuery.setString("tngMid", tngMid);
                // sqlQuery.setString("shoppyMid", shoppyMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                String FromDate = paginationBean.setDateFromBackend(from);
                String From1Date = paginationBean.setDate1FromBackend(to);
                String TXNTYPE = paginationBean.setTXNtype(txnType);

                // Dynamic changes for pagination count

                String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
                int pageSize = Integer.parseInt(DynamicPage);

                int pageNumFromJsp = paginationBean.getCurrPage();
                logger.info("Page Number:" + pageNumFromJsp);
                logger.info("Max Count for Records:" + pageSize);

                sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
                sqlQuery.setMaxResults(pageSize);

            } else if (txnType.equals("SHOPPY")) {

                logger.info("*** SHOPPY *** :");

//				 	sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
//				 			+"'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
//				 			+"WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') AND f.MID IN (f.MID = :tngMid , f.MID = :shoppyMid , f.MID = :Ezywaymid  , f.MID = :motomid , f.MID = :mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";
//
                sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
                        + "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID,f.TNG_TXN_ID from mobiversa.EWALLET_TXN_DETAILS f "
                        + "WHERE f.STATUS IN ('SPA','SPS','H','SPR') AND f.TXN_TYPE = 'SPP' AND f.MID IN (:shoppyMid ,:Ezywaymid ,:motomid ,:mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";

                logger.info("SHOPPY Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                // logger.info("tngMid :" + tngMid);
                logger.info("shoppyMid :" + shoppyMid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                sqlQuery.setString("from", from);
                sqlQuery.setString("to", to);
                // sqlQuery.setString("tngMid", tngMid);
                sqlQuery.setString("shoppyMid", shoppyMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                String FromDate = paginationBean.setDateFromBackend(from);
                String From1Date = paginationBean.setDate1FromBackend(to);
                String TXNTYPE = paginationBean.setTXNtype(txnType);

                // Dynamic changes for pagination count

                String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
                int pageSize = Integer.parseInt(DynamicPage);

                int pageNumFromJsp = paginationBean.getCurrPage();
                logger.info("Page Number:" + pageNumFromJsp);
                logger.info("Max Count for Records:" + pageSize);

                sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
                sqlQuery.setMaxResults(pageSize);

            } else if (txnType.equals("BNPL")) {
                logger.info("*** BNPL *** :");
//				 sql= "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID" +
//					  " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND b.MID IN (b.MID = :bnplMid , b.MID = :Ezywaymid , b.MID = :motomid , b.MID = :mid) AND b.TIME_STAMP BETWEEN :from and :to order by b.TIME_STAMP desc ";

                sql = "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND b.MID IN (:bnplMid , :Ezywaymid , :motomid ,:mid) AND b.TIME_STAMP BETWEEN :from and :to order by b.TIME_STAMP desc ";

                logger.info(" BNPL Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("from", from);
                sqlQuery.setString("to", to);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                logger.info("bnplMid :" + bnplMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("bnplMid", bnplMid);
                String FromDate = paginationBean.setDateFromBackend(from);
                String From1Date = paginationBean.setDate1FromBackend(to);
                String TXNTYPE = paginationBean.setTXNtype(txnType);

                // Dynamic changes for pagination count

                String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
                int pageSize = Integer.parseInt(DynamicPage);

                int pageNumFromJsp = paginationBean.getCurrPage();
                logger.info("Page Number:" + pageNumFromJsp);
                logger.info("Max Count for Records:" + pageSize);

                sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
                sqlQuery.setMaxResults(pageSize);

            }

            // TNG SEARCH STARTS

            else if (txnType.equals("TNG_REF")) {

                logger.info("*** TNG REFERENCE SEARCH IMPLEMENTATION *** :");

                sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
                        + "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID,f.TNG_TXN_ID  from mobiversa.EWALLET_TXN_DETAILS f "
                        + "WHERE f.STATUS IN ('TPA','TPS','H','TPR') AND f.TXN_TYPE = 'TNG' AND f.MID IN (:tngMid ,:Ezywaymid ,:motomid ,:mid) AND f.INVOICE_ID like '"
                        + VALUE + "%' order by f.TIME_STAMP DESC";

                logger.info(" TNG SEARCH Query with INVOICE ID : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("tngMid :" + tngMid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);

                sqlQuery.setString("tngMid", tngMid);

                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);

                logger.info("INVOICE ID value from USER is :" + VALUE);

            }

            else if (txnType.equals("TNG_AP")) {

                logger.info("*** TNG APPROVAL CODE  SEARCH IMPLEMENTATION *** ");
if (getStart2PayMerchantCondition(merchant.getId())) {
sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.TNG_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
+ "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
+ "WHERE f.STATUS IN ('TPA','TPS','H','TPR') AND f.TXN_TYPE = 'TNG' AND f.MID IN (:tngMid ,:Ezywaymid ,:motomid ,:mid) AND f.TNG_TXN_ID like '"
+ VALUE + "%' order by f.TIME_STAMP DESC";
} else {
sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
+ "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
+ "WHERE f.STATUS IN ('TPA','TPS','H','TPR') AND f.TXN_TYPE = 'TNG' AND f.MID IN (:tngMid ,:Ezywaymid ,:motomid ,:mid) AND f.MOBI_TXN_ID like '"
+ VALUE + "%' order by f.TIME_STAMP DESC";
}

                logger.info(" TNG SEARCH Query with INVOICE ID : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("tngMid :" + tngMid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);

                sqlQuery.setString("tngMid", tngMid);

                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);

                logger.info("APPROVAL CODE value from USER is :" + VALUE);

            }

            /// SHOPPEE PAY SEARCH STARTS

            else if (txnType.equals("SHOPPEE_REF")) {

                logger.info("*** SHOPPEEPAY SEARCH BY REFERENCE *** :");

                sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
                        + "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID,f.TNG_TXN_ID from mobiversa.EWALLET_TXN_DETAILS f "
                        + "WHERE f.STATUS IN ('SPA','SPS','H','SPR') AND f.TXN_TYPE = 'SPP' AND f.MID IN (:shoppyMid ,:Ezywaymid ,:motomid ,:mid) and f.INVOICE_ID like '"
                        + VALUE + "%' order by f.TIME_STAMP DESC";

                logger.info("SHOPPY Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("shoppyMid :" + shoppyMid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                sqlQuery.setString("shoppyMid", shoppyMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                logger.info("SHOPPEE SEARCH BY REFERENCE VALUE : " + VALUE);
            }

            else if (txnType.equals("SHOPPEE_AP")) {

                logger.info("*** SHOPPEEPAY SEARCH BY APPROVAL CODE *** :");

if(getStart2PayMerchantCondition(merchant.getId()))
{
sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.TNG_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
+ "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
+ "WHERE f.STATUS IN ('SPA','SPS','H','SPR') AND f.TXN_TYPE = 'SPP' AND f.MID IN (:shoppyMid ,:Ezywaymid ,:motomid ,:mid) and f.TNG_TXN_ID like '"
+ VALUE + "%' order by f.TIME_STAMP DESC";
}
else {

sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
+ "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
+ "WHERE f.STATUS IN ('SPA','SPS','H','SPR') AND f.TXN_TYPE = 'SPP' AND f.MID IN (:shoppyMid ,:Ezywaymid ,:motomid ,:mid) and f.MOBI_TXN_ID like '"
+ VALUE + "%' order by f.TIME_STAMP DESC";
}

                logger.info("SHOPPY Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("shoppyMid :" + shoppyMid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                sqlQuery.setString("shoppyMid", shoppyMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                logger.info("SHOPPEE SEARCH BY APPROVAL CODE VALUE : " + VALUE);
            }

            // GRABPAY SEARCH STARTS

            else if (txnType.equals("GRABPAY_REF")) {

                logger.info("*** GRABPAY SEARCH BY REFERENCE INVOICE ID *** :");
                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,gpf.NETAMT ,gpf.MDR ,gpf.SETTLEMENT_DATE ,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " from mobiversa.MID m INNER JOIN mobiversa.MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN mobiversa.MERCHANT c ON c.ID = m.MERCHANT_FK "
                        + "INNER JOIN mobiversa.FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
                        + "INNER JOIN mobiversa.GRABPAY_FILE gpf ON (gpf.PARTNERID = a.RRN) "
                        + "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'FIUU' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
                        + "a.INVOICE_ID like '" + VALUE + "%' order by a.TIME_STAMP desc ";

                logger.info("GRABPAY SEARCH BY REFERENCE Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("paydeeEzywaymid", paydeeEzywaymid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ezyrecmid", ezyrecmid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("grabmid", grabmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("paydeeEzywaymid :" + paydeeEzywaymid);
                logger.info("ummid :" + ummid);
                logger.info("motomid :" + motomid);
                logger.info("ezyrecmid :" + ezyrecmid);
                logger.info("mid :" + mid);
                logger.info("grabmid :" + grabmid);

                logger.info("REFERENCE VALUE USER GIVES :" + VALUE);

            }

            else if (txnType.equals("GRABPAY_RRN")) {

                logger.info("*** GRABPAY SEARCH BY RRN *** :");
                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
                        + "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
                        + "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'FIUU' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
                        + "a.RRN like '" + VALUE + "%' order by a.TIME_STAMP desc ";

                logger.info("GRABPAY SEARCH BY RRN Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("paydeeEzywaymid", paydeeEzywaymid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ezyrecmid", ezyrecmid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("grabmid", grabmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("paydeeEzywaymid :" + paydeeEzywaymid);
                logger.info("ummid :" + ummid);
                logger.info("motomid :" + motomid);
                logger.info("ezyrecmid :" + ezyrecmid);
                logger.info("mid :" + mid);
                logger.info("grabmid :" + grabmid);

                logger.info("RRN VALUE USER GIVES :" + VALUE);

            }

            else if (txnType.equals("GRABPAY_AP")) {

                logger.info("*** GRABPAY SEARCH BY APPROVAL CODE *** :");
                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,gpf.NETAMT ,gpf.MDR,gpf.SETTLEMENT_DATE, a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " from mobiversa.MID m INNER JOIN mobiversa.MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN mobiversa.MERCHANT c ON c.ID = m.MERCHANT_FK "
                        + "INNER JOIN mobiversa.FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
                        + "INNER JOIN mobiversa.GRABPAY_FILE gpf ON (gpf.PARTNERID = a.RRN) "
                        + "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'FIUU' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
                        + "a.RRN like '" + VALUE + "%' order by a.TIME_STAMP desc ";

                logger.info("GRABPAY SEARCH BY APPROVAL CODE Query : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("paydeeEzywaymid", paydeeEzywaymid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ezyrecmid", ezyrecmid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("grabmid", grabmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("paydeeEzywaymid :" + paydeeEzywaymid);
                logger.info("ummid :" + ummid);
                logger.info("motomid :" + motomid);
                logger.info("ezyrecmid :" + ezyrecmid);
                logger.info("mid :" + mid);
                logger.info("grabmid :" + grabmid);

                logger.info("APPROVAL CODE VALUE USER GIVES :" + VALUE);

            }

            // BOOST SEARCH IMPLEMENTATION

            else if (txnType.equals("BOOST_REF")) {

                logger.info("<<<===========BOOST_SEARCH_BY_REFERENCE===========>>>");

                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
                        + "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
                        + "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
                        + "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID,a.TRX_ID "
                        + "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
                        + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
                        + "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC','BPR') AND "
                        + "a.MID IN (:Ezywaymid ,:boostmid ,:motomid ,:ummid ,:mid) AND " + "a.INVOICE_ID like '" + VALUE
                        + "%' order by a.TIME_STAMP desc ";

                logger.info("BOOST SEARCH Query BY REFERENCE : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("boostmid", boostmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("ummid :" + ummid);
                logger.info("mid :" + mid);
                logger.info("boostmid :" + boostmid);
                logger.info("SEARCH REF VALUE USER PASSES IS ::: " + VALUE);

            }

            else if (txnType.equals("BOOST_AP")) {
logger.info("<<<===========BOOST_SEARCH_BY_APPROVAL_CODE===========>>>");

if(merchant.getId() == 1 || merchant.getId()== 2 || merchant.getId()== 3)
{
sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.TRX_ID AS AID_RESPONSE, "
+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
+ "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID "
+ "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
+ "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC','BPR') AND "
+ "a.MID IN (:Ezywaymid ,:boostmid ,:motomid ,:ummid ,:mid) AND " + "a.TRX_ID like '" + VALUE
+ "%' order by a.TIME_STAMP desc ";
}
else {


sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
+ "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID "
+ "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
+ "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC','BPR') AND "
+ "a.MID IN (:Ezywaymid ,:boostmid ,:motomid ,:ummid ,:mid) AND " + "a.AID_RESPONSE like '" + VALUE
+ "%' order by a.TIME_STAMP desc ";
}

                logger.info("BOOST SEARCH Query BY APPROVAL CODE : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("boostmid", boostmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("ummid :" + ummid);
                logger.info("mid :" + mid);
                logger.info("boostmid :" + boostmid);
                logger.info("SEARCH APPROVAL CODE VALUE USER PASSES IS ::: " + VALUE);

            }

            else if (txnType.equals("BOOST_RRN")) {

                logger.info("<<<===========BOOST_SEARCH_BY_RRN===========>>>");

                sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
                        + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
                        + "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
                        + "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
                        + "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID "
                        + "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
                        + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
                        + "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC',BPR') AND "
                        + "a.MID IN (:Ezywaymid ,:boostmid ,:motomid ,:ummid ,:mid) AND " + "a.RRN like '" + VALUE
                        + "%' order by a.TIME_STAMP desc ";

                logger.info("BOOST SEARCH Query BY RRN : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("ummid", ummid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("boostmid", boostmid);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("ummid :" + ummid);
                logger.info("mid :" + mid);
                logger.info("boostmid :" + boostmid);
                logger.info("SEARCH RRN VALUE USER PASSES IS ::: " + VALUE);

            }

            // BNPL SEARCH IMPLEMENTATION

            else if (txnType.equals("BNPL_REF")) {

                logger.info("==========>>>>BNPL SEARCH BY REFERENCE<<<<============");

                sql = "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND b.MID IN (:bnplMid , :Ezywaymid , :motomid ,:mid) and b.INVOICE_ID like '"
                        + VALUE + "%' order by b.TIME_STAMP desc ";

                logger.info(" BNPL SEARCH Query BY INVOICE ID : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                logger.info("bnplMid :" + bnplMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("bnplMid", bnplMid);
                logger.info("THE REFERENCE VALUE USER GIVES :" + VALUE);

            }

            else if (txnType.equals("BNPL_AP")) {

                logger.info("==========>>>> BNPL SEARCH BY APPROVAL CODE <<<<============");

                sql = "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
                        + " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND b.MID IN (:bnplMid , :Ezywaymid , :motomid ,:mid) and b.BNPL_TXN_ID like '"
                        + VALUE + "%' order by b.TIME_STAMP desc ";

                logger.info(" BNPL SEARCH Query BY APPROVAL CODE : " + sql);
                sqlQuery = super.getSessionFactory().createSQLQuery(sql);
                logger.info("Ezywaymid :" + Ezywaymid);
                logger.info("motomid :" + motomid);
                logger.info("mid :" + mid);
                logger.info("bnplMid :" + bnplMid);
                sqlQuery.setString("Ezywaymid", Ezywaymid);
                sqlQuery.setString("motomid", motomid);
                sqlQuery.setString("mid", mid);
                sqlQuery.setString("bnplMid", bnplMid);
                logger.info("THE APPROVAL CODE VALUE USER GIVES :" + VALUE);

            }

            @SuppressWarnings("unchecked")
            List<Object[]> resultSet = sqlQuery.list();
            logger.info("Number of records in the List : " + resultSet.size());
            try {
            for (Object[] rec : resultSet)

                    {

                        UMEzyway fs = new UMEzyway();

                        if (rec[0] != null || rec[0] != "") {
                            fs.setF001_MID(rec[0].toString());
                        } else {
                            fs.setF001_MID("");
                        }

                        if (rec[1] != null || rec[1] != "") {
                            fs.setF005_EXPDATE(rec[1].toString());
                        } else {
                            fs.setF005_EXPDATE("");
                        }

                        if (rec[2] != null) {
                            if (rec[2].toString().contains(".")) {

                                Double d = new Double(rec[2].toString());
                                String pattern = "#,##0.00";
                                DecimalFormat myFormatter = new DecimalFormat(pattern);
                                String output = myFormatter.format(d);

                                fs.setF007_TXNAMT(output);

                            } else {

                                double amount = 0;
                                amount = Double.parseDouble(rec[2].toString()) / 100;
                                String pattern = "#,##0.00";
                                DecimalFormat myFormatter = new DecimalFormat(pattern);
                                String output = myFormatter.format(amount);
                                fs.setF007_TXNAMT(output);

                            }
                        } else {
                            fs.setF007_TXNAMT("");
                        }

                        if (rec[3] != null && rec[3] != "") {
                            logger.info("check "+rec[3]);

                            fs.setF354_TID(rec[3].toString());
                        } else {
                            fs.setF354_TID("");
                        }

                        if (rec[4] == null || rec[4].toString().isEmpty()) {

                            fs.setPAN("");
                        } else if (rec[4] != null || rec[4] != "") {

                            String rt = null;
                            String rd = null;
                            String lasteightDigits = null;

                            if (rec[4].toString().contains("f")) {

                                int panlength = rec[4].toString().length();

                                String replacefpan = rec[4].toString().replace("f", "*");

                                if (panlength > 13) {

                                    lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

                                }
                                fs.setPAN(lasteightDigits);
                            }

                        } else {

                            fs.setPAN("");
                        }

                        if (rec[5] != null) {

                            String status = rec[5].toString();

                            if (rec[5].toString().equals("A")) {
                                fs.setSTATUS("NOT SETTLED");
                            } else if (rec[5].toString().equals("C")) {
                                fs.setSTATUS("VOIDED");
                            } else if (rec[5].toString().equals("S")) {
                                fs.setSTATUS("SETTLED");
                            } else if (rec[5].toString().equals("CB")) {
                                fs.setSTATUS("CHARGE BACK");
                            } else if (rec[5].toString().equals("FR")) {
                                fs.setSTATUS("REFUNDED");
                            } else if (rec[5].toString().equals("BPS")) {
                                fs.setSTATUS("SETTLED");
                            } else if (rec[5].toString().equals("BPA")) {
                                fs.setSTATUS("NOT SETTLED");
                            } else if (rec[5].toString().equals("BPR")) {
                                fs.setSTATUS("REFUNDED");
                            } else if (rec[5].toString().equals("BPC")) {
                                fs.setSTATUS("VOIDED");
                            } else if (rec[5].toString().equals("GPS")) {
                                fs.setSTATUS("SETTLED");

                            } else if (rec[5].toString().equals("GRF")) {
                                fs.setSTATUS("REFUNDED");

                            } else if (rec[5].toString().equals("GPT")) {
                                fs.setSTATUS("SETTLED");

                            } else if (rec[5].toString().equals("GBC")) {
                                fs.setSTATUS("VOIDED");
                            } else if (rec[5].toString().equals("R")) {
                                fs.setSTATUS("REFUNDED");
                            } else if (rec[5].toString().equals("PR")) {
                                fs.setSTATUS("REFUNDED");
                            } else if (rec[5].toString().equals("H")) {
                                fs.setSTATUS("EZYSETTLE");
                            } else if (rec[5].toString().equals("PPA")) {
                                fs.setSTATUS("PAYOUT");
                            } else if (rec[5].toString().equals("TPA")) {
                                fs.setSTATUS("NOT SETTLED");
                            } else if (rec[5].toString().equals("TPR")) {
                                fs.setSTATUS("REFUNDED");
                            } else if (rec[5].toString().equals("SPA")) {
                                fs.setSTATUS("NOT SETTLED");
                            } else if (rec[5].toString().equals("TPS")) {
                                fs.setSTATUS("SETTLED");
                            } else if (rec[5].toString().equals("SPR")) {
                                fs.setSTATUS("REFUNDED");
                            } else if (rec[5].toString().equals("SPS")) {
                                fs.setSTATUS("SETTLED");
                            }

                            else if (rec[5].toString().equals("BNA")) {
                                fs.setSTATUS("NOT SETTLED");
                            } else if (rec[5].toString().equals("BNS")) {
                                fs.setSTATUS("SETTLED");
                            } else if (rec[5].toString().equals("BNC")) {
                                fs.setSTATUS("VOIDED");
                            }

                        } else {
                            fs.setSTATUS("NOT SETTLED");
                        }

                        if (rec[6] == null || rec[6].toString().isEmpty()) {

                            fs.setF263_MRN("");
                        } else if (rec[6] != null || rec[6] != "") {

                            fs.setF263_MRN(rec[6].toString());
                        } else {
                            fs.setF263_MRN("");
                        }

                        if (rec[9] == null || rec[9].toString().isEmpty()) {

                            fs.setF011_AUTHIDRESP("");
                        } else if (rec[9] != null) {

                            fs.setF011_AUTHIDRESP(rec[9].toString());
                        } else {
                            fs.setF011_AUTHIDRESP("");
                        }

                        if (rec[10] != null) {

                            fs.setF023_RRN(rec[10].toString());
                        } else {
                            fs.setF023_RRN("");
                        }
                        if (rec[11] != null && rec[5] != null) {

                            String rd = null;
                            String rt = "";

                            if (rec[5].toString().equals("S")) {
    //							if (rec[5].toString().equals("S") && !rec[20].toString().equals("FPX"))

                                try {
                                    rd = new SimpleDateFormat("dd/MM/yyyy")
                                            .format(new SimpleDateFormat("yyyyMMdd").parse(rec[11].toString()));
                                } catch (ParseException e) {
                                    // TODO Auto-generated catch block
                                    e.printStackTrace();
                                }

                                fs.setDate(rd);
                            } else {

                                try {
                                    rd = new SimpleDateFormat("dd/MM/yyyy")
                                            .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                                    rt = new SimpleDateFormat("HH:mm:ss")
                                            .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                                } catch (ParseException e) {
                                    // TODO Auto-generated catch block
                                    e.printStackTrace();
                                }
                                fs.setDate(rd);
                                fs.setTime(rt);
                            }
                        } else {

                            String rd = null;
                            String rt = "";
                            try {
                                rd = new SimpleDateFormat("dd/MM/yyyy")
                                        .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                                rt = new SimpleDateFormat("HH:mm:ss")
                                        .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                            } catch (ParseException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                            fs.setDate(rd);
                            fs.setTime(rt);
                        }

                        if (rec[12] != null) {

                            fs.setMerchantName(rec[12].toString());
                        } else {
                            fs.setMerchantName("");
                        }

                        if (rec[13] != null) {

                            fs.setF270_ORN(rec[13].toString());
                        } else {
                            fs.setF270_ORN("");
                        }

                        if (rec[14] == null || rec[14].toString().isEmpty()) {

                            fs.setF268_CHNAME("");

                        } else if (rec[14] != null) {

                            fs.setF268_CHNAME(rec[14].toString());
                        }

                        if (rec[15] == null || rec[15].toString().isEmpty()) {

                            fs.setFraudScore("");

                        } else if (rec[15] != null || rec[15] != "") {

                            if (rec[15].toString().equalsIgnoreCase("null")) {
                                fs.setFraudScore("");
                            } else {
                                fs.setFraudScore(rec[15].toString());
                            }

                        } else {
                            fs.setFraudScore("");
                        }

                        if (rec[16] == null || rec[16].toString().isEmpty()) {

                            fs.setFraudId("");

                        } else if (rec[16] != null || rec[16] != "") {

                            if (rec[16].toString().equalsIgnoreCase("null")) {
                                fs.setFraudId("");
                            } else {
                                fs.setFraudId(rec[16].toString());
                            }

                        } else {
                            fs.setFraudId("");
                        }

                        // NEW FIELDS

                        if (rec[17] == null || rec[17].toString().isEmpty()) {
                            fs.setNetAmount("");
                        } else if (rec[17] != null || rec[17] != "") {

                            Double d = new Double(rec[17].toString());
                            String pattern = "#,##0.00";
                            DecimalFormat myFormatter = new DecimalFormat(pattern);
                            String output = myFormatter.format(d);
                            // logger.info(d + " " + pattern + " " + output);
                            fs.setNetAmount(output);
                        }

                        if (rec[18] == null || rec[18].toString().isEmpty()) {
                            fs.setMdrAmt("");
                        } else if (rec[18] != null || rec[18] != "") {

                            Double d = new Double(rec[18].toString());
                            String pattern = "#,##0.00";
                            DecimalFormat myFormatter = new DecimalFormat(pattern);
                            String output = myFormatter.format(d);
                            // logger.info(d + " " + pattern + " " + output);
                            fs.setMdrAmt(output);
                        }
                        String rd = null;
                        String rt = null;

                        if (rec[19] == null || rec[19].toString().isEmpty()) {
                            fs.setSettlementDate("");
                        } else if (rec[19] != null || rec[19] != "") {

                            int datelength = rec[19].toString().length();

                            if (datelength == 11) {
                                fs.setSettlementDate(rec[19].toString());
                            }

                            else if (rec[19].toString().contains("T")) {
                                rd = rec[19].toString().substring(0, 8);

                                try {
                                    rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }

                                fs.setSettlementDate(rt);
                            } else if (datelength == 10) {

                                try {
                                    rd = new SimpleDateFormat("dd/MM/yyyy")
                                            .format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }
                                fs.setSettlementDate(rd);
                            } else {

                                try {
                                    rd = new SimpleDateFormat("dd/MM/yyyy")
                                            .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }
                                fs.setSettlementDate(rd);
                            }
                        } else {
                            fs.setSettlementDate("");
                        }

                        if (rec[20] == null || rec[20].toString().isEmpty()) {
                            fs.setCardType("");
                        } else if (rec[20] != null) {

                            if (rec[21].toString().equals("NULL")) {
                                fs.setCardType(rec[20].toString());
                            } else if (rec[21] != null && !rec[21].toString().isEmpty()) {
                                fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
                            }

                            else {
                                fs.setCardType(rec[20].toString());
                            }
                        }

                        else {
                            fs.setCardType("");
                        }

                        if (rec[22] == null || rec[22].toString().isEmpty()) {
                            fs.setEzysettleAmt("");
                        } else if (rec[22] != null) {

                            Double d = new Double(rec[22].toString());
                            String pattern = "#,##0.00";
                            DecimalFormat myFormatter = new DecimalFormat(pattern);
                            String output = myFormatter.format(d);

                            fs.setEzysettleAmt(output);

                        }
                        if (rec[23] != null) {
                            fs.setSubmerchantmid(rec[23].toString());
                        } else {
                            fs.setSubmerchantmid("");
                        }

                        if (getStart2PayMerchantCondition(merchant.getId()) &&
                                (txnType.equals("BOOST") || txnType.equals("BOOST_REF"))) {
                            if (rec[24] != null) {
                                fs.setF011_AUTHIDRESP(rec[24].toString());

                            }
                        }
                        if (getStart2PayMerchantCondition(merchant.getId()) &&
                                (txnType.equals("TNG") || txnType.equals("SHOPPY") ||
                                        txnType.equals("TNG_REF") || txnType.equals("SHOPPEE_REF"))) {
                            if (rec[24] != null) {
                                fs.setF263_MRN(rec[24].toString());
                            }
                        }


                        fss.add(fs);

                    }
                } catch (Exception e) {
                    logger.error("Exception occured in summary for merchant ",e);

                }
            paginationBean.setItemList(fss);
            logger.info("No of Records: " + paginationBean.getItemList().size());
        }  catch (Exception e) {
            logger.error("Exception occured while summary in e -wallet ",e);
        }

    }

	@Override
	public void merchantEwallet1(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String paydeeEzywaymid, String ummid, String motomid,
			String ezyrecmid, String mid, String bnplMid, String boostmid, String tngMid, String shoppyMid,
			String grabmid, String txnType, Merchant merchant) {
		logger.info(" Grab Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;
//			String paydeeEzywaymid = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		// String grabmid = null;

		String Ezywaymid = umEzywayMid;
		if (merchant.getMid().getGrabMid() != null) {
			grabmid = merchant.getMid().getGrabMid();
		}
		// logger.info("walmid" + grabmid);

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now();
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (txnType.equals("GRABPAY")) {
			logger.info("*** GRABPAY *** :");
			sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,gpf.NETAMT ,gpf.MDR ,gpf.SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " from mobiversa.MID m INNER JOIN mobiversa.MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN mobiversa.MERCHANT c ON c.ID = m.MERCHANT_FK "
					+ "INNER JOIN mobiversa.FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
					+ "INNER JOIN mobiversa.GRABPAY_FILE gpf ON (gpf.PARTNERID = a.RRN) "
					+ "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'FIUU' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
					+ "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc ";

			logger.info("GRABPAY Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("paydeeEzywaymid", paydeeEzywaymid);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("grabmid", grabmid);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("paydeeEzywaymid :" + paydeeEzywaymid);
			logger.info("ummid :" + ummid);
			logger.info("motomid :" + motomid);
			logger.info("ezyrecmid :" + ezyrecmid);
			logger.info("mid :" + mid);
			logger.info("grabmid :" + grabmid);
			/*
			 * String FromDate= paginationBean.setDateFromBackend(from); String From1Date=
			 * paginationBean.setDate1FromBackend(to); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 * 
			 * 
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 */
		} else if (txnType.equals("BOOST")) {

			logger.info("*** BOOST *** :");
//				 sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
//						 	+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
//						 	+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
//						 	+ "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
//						 	+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID "
//						 	+ "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
//						 	+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//						 	+ "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC') AND "
//						 	+ "a.MID IN (a.MID = :Ezywaymid , a.MID = :boostmid , a.MID = :motomid , a.MID = :ummid , a.MID = :mid) AND a.TIME_STAMP BETWEEN "
//						 	+ " :from and :to order by a.TIME_STAMP desc ";

			sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,a.TID AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
					+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,f.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,"
					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT,"
					+ "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT,"
					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE,a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , (select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT,a.SUB_MERCHANT_MID as SUB_MERCHANT_MID,a.TRX_ID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID) "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') AND a.STATUS IN ('BPS','BPA','BPC') AND "
					+ "a.MID IN (:Ezywaymid ,:boostmid ,:motomid ,:ummid ,:mid) AND a.TIME_STAMP BETWEEN "
					+ " :from and :to order by a.TIME_STAMP DESC ";

			logger.info("BOOST Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("boostmid", boostmid);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + motomid);
			logger.info("ummid :" + ummid);
			logger.info("mid :" + mid);
			logger.info("boostmid :" + boostmid);

			/*
			 * String FromDate= paginationBean.setDateFromBackend(from); String From1Date=
			 * paginationBean.setDate1FromBackend(to); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 * 
			 * 
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 */
		}

		else if (txnType.equals("TNG")) {

			logger.info("*** TNG *** :");

//				 	sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID," 
//				 			+"'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
//				 			+"WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') AND f.MID IN (f.MID = :tngMid , f.MID = :shoppyMid , f.MID = :Ezywaymid  , f.MID = :motomid , f.MID = :mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";
//				 			
			sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
					+ "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID,f.TNG_TXN_ID from mobiversa.EWALLET_TXN_DETAILS f "
					+ "WHERE f.STATUS IN ('TPA','TPS','H') AND f.MID IN (:tngMid,:Ezywaymid ,:motomid ,:mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";

			logger.info(" TNG-SHOPPY Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("tngMid :" + tngMid);
			// logger.info("shoppyMid :" + shoppyMid);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + motomid);
			logger.info("mid :" + mid);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("tngMid", tngMid);
			// sqlQuery.setString("shoppyMid", shoppyMid);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("mid", mid);
			/*
			 * String FromDate= paginationBean.setDateFromBackend(from); String From1Date=
			 * paginationBean.setDate1FromBackend(to); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 * 
			 * 
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 * 
			 */

		}

		else if (txnType.equals("SHOPPY")) {

			logger.info("*** SHOPPY *** :");

//				 	sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID," 
//				 			+"'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID from mobiversa.EWALLET_TXN_DETAILS f "
//				 			+"WHERE f.STATUS IN ('TPA','SPA','TPS','SPS','H') AND f.MID IN (f.MID = :tngMid , f.MID = :shoppyMid , f.MID = :Ezywaymid  , f.MID = :motomid , f.MID = :mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";
//				 			
			sql = "select f.MID AS MID,'' AS EXPDATE,f.AMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN,f.STATUS AS STATUS,f.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,f.TNG_TXN_ID AS AID_RESPONSE,'' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME,f.INVOICE_ID AS INVOICE_ID,"
					+ "'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE,f.TXN_TYPE AS CARD_SCHEME,'NULL' AS BANK_NAME ,f.EZYSETTLE_AMOUNT,f.SUB_MERCHANT_MID as SUB_MERCHANT_MID,f.TNG_TXN_ID from mobiversa.EWALLET_TXN_DETAILS f "
					+ "WHERE f.STATUS IN ('SPA','SPS','H') AND f.MID IN (:shoppyMid ,:Ezywaymid ,:motomid ,:mid) and f.TIME_STAMP BETWEEN :from AND :to order by f.TIME_STAMP DESC";

			logger.info(" TNG-SHOPPY Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// logger.info("tngMid :" + tngMid);
			logger.info("shoppyMid :" + shoppyMid);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + motomid);
			logger.info("mid :" + mid);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			// sqlQuery.setString("tngMid", tngMid);
			sqlQuery.setString("shoppyMid", shoppyMid);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("mid", mid);
			/*
			 * String FromDate= paginationBean.setDateFromBackend(from); String From1Date=
			 * paginationBean.setDate1FromBackend(to); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 * 
			 * 
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 * 
			 */

		}

		else if (txnType.equals("BNPL")) {
			logger.info("*** BNPL *** :");
//				 sql= "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID" + 
//					  " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND b.MID IN (b.MID = :bnplMid , b.MID = :Ezywaymid , b.MID = :motomid , b.MID = :mid) AND b.TIME_STAMP BETWEEN :from and :to order by b.TIME_STAMP desc ";

			sql = "SELECT b.MID as MID,'' AS EXPDATE,b.AMOUNT AS AMOUNT,b.TID,'' AS MASKED_PAN,b.STATUS AS STATUS,b.MOBI_TXN_ID AS TRX_ID,'' AS TDT,'' AS TTM,b.BNPL_TXN_ID AS AID_RESPONSE,'' AS RRN,b.TIME_STAMP AS TIME_STAMP,b.MERCHANT_NAME AS BUSINESS_NAME,b.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,'' AS FRAUD_ID,b.PAYABLEAMT AS NETAMOUNT,b.MDR_AMT AS MDRAMT,b.SETTLED_DATE AS SETTLE_DATE,'BNPL' AS TXN_TYPE,'NULL' AS BANK_NAME,b.EZYSETTLE_AMOUNT,b.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
					+ " FROM mobiversa.BNPL_TXN_DETAILS b WHERE b.STATUS IN ('BNA','BNS','BNC','H') AND b.MID IN (:bnplMid , :Ezywaymid , :motomid ,:mid) AND b.TIME_STAMP BETWEEN :from and :to order by b.TIME_STAMP desc ";

			logger.info(" BNPL Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + motomid);
			logger.info("mid :" + mid);
			logger.info("bnplMid :" + bnplMid);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", motomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("bnplMid", bnplMid);
			/*
			 * String FromDate= paginationBean.setDateFromBackend(from); String From1Date=
			 * paginationBean.setDate1FromBackend(to); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 * 
			 * 
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 */
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

        try {
            for (Object[] rec : resultSet)

                {

                    UMEzyway fs = new UMEzyway();

                    if (rec[0] != null || rec[0] != "") {
                        fs.setF001_MID(rec[0].toString());
                    } else {
                        fs.setF001_MID("");
                    }

                    if (rec[1] != null || rec[1] != "") {
                        fs.setF005_EXPDATE(rec[1].toString());
                    } else {
                        fs.setF005_EXPDATE("");
                    }

                    if (rec[2] != null) {
                        if (rec[2].toString().contains(".")) {

                            Double d = new Double(rec[2].toString());
                            String pattern = "#,##0.00";
                            DecimalFormat myFormatter = new DecimalFormat(pattern);
                            String output = myFormatter.format(d);

                            fs.setF007_TXNAMT(output);

                        } else {

                            double amount = 0;
                            amount = Double.parseDouble(rec[2].toString()) / 100;
                            String pattern = "#,##0.00";
                            DecimalFormat myFormatter = new DecimalFormat(pattern);
                            String output = myFormatter.format(amount);
                            fs.setF007_TXNAMT(output);

                        }
                    } else {
                        fs.setF007_TXNAMT("");
                    }

                    if (rec[3] != null && rec[3] != "") {

                        fs.setF354_TID(rec[3].toString());
                    } else {
                        fs.setF354_TID("");
                    }

                    if (rec[4] == null || rec[4].toString().isEmpty()) {

                        fs.setPAN("");
                    } else if (rec[4] != null || rec[4] != "") {

                        String rt = null;
                        String rd = null;
                        String lasteightDigits = null;

                        if (rec[4].toString().contains("f")) {

                            int panlength = rec[4].toString().length();

                            String replacefpan = rec[4].toString().replace("f", "*");

                            if (panlength > 13) {

                                lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

                            }
                            fs.setPAN(lasteightDigits);
                        }

                    } else {

                        fs.setPAN("");
                    }

                    if (rec[5] != null) {

                        String status = rec[5].toString();

                        if (rec[5].toString().equals("A")) {
                            fs.setSTATUS("NOT SETTLED");
                        } else if (rec[5].toString().equals("C")) {
                            fs.setSTATUS("VOIDED");
                        } else if (rec[5].toString().equals("S")) {
                            fs.setSTATUS("SETTLED");
                        } else if (rec[5].toString().equals("CB")) {
                            fs.setSTATUS("CHARGE BACK");
                        } else if (rec[5].toString().equals("FR")) {
                            fs.setSTATUS("REFUNDED");
                        } else if (rec[5].toString().equals("BPS")) {
                            fs.setSTATUS("SETTLED");
                        } else if (rec[5].toString().equals("BPA")) {
                            fs.setSTATUS("NOT SETTLED");
                        } else if (rec[5].toString().equals("BPC")) {
                            fs.setSTATUS("VOIDED");
                        } else if (rec[5].toString().equals("GPS")) {
                            fs.setSTATUS("SETTLED");

                        } else if (rec[5].toString().equals("GRF")) {
                            fs.setSTATUS("VOIDED");

                        } else if (rec[5].toString().equals("GPT")) {
                            fs.setSTATUS("SETTLED");

                        } else if (rec[5].toString().equals("GBC")) {
                            fs.setSTATUS("VOIDED");
                        } else if (rec[5].toString().equals("R")) {
                            fs.setSTATUS("REFUNDED");
                        } else if (rec[5].toString().equals("PR")) {
                            fs.setSTATUS("REFUNDED");
                        } else if (rec[5].toString().equals("H")) {
                            fs.setSTATUS("EZYSETTLE");
                        } else if (rec[5].toString().equals("PPA")) {
                            fs.setSTATUS("PAYOUT");
                        } else if (rec[5].toString().equals("TPA")) {
                            fs.setSTATUS("NOT SETTLED");
                        } else if (rec[5].toString().equals("SPA")) {
                            fs.setSTATUS("NOT SETTLED");
                        } else if (rec[5].toString().equals("TPS")) {
                            fs.setSTATUS("SETTLED");
                        } else if (rec[5].toString().equals("SPS")) {
                            fs.setSTATUS("SETTLED");
                        }

                        else if (rec[5].toString().equals("BNA")) {
                            fs.setSTATUS("NOT SETTLED");
                        } else if (rec[5].toString().equals("BNS")) {
                            fs.setSTATUS("SETTLED");
                        } else if (rec[5].toString().equals("BNC")) {
                            fs.setSTATUS("VOIDED");
                        }

                    } else {
                        fs.setSTATUS("NOT SETTLED");
                    }

                    if (rec[6] == null || rec[6].toString().isEmpty()) {

                        fs.setF263_MRN("");
                    } else if (rec[6] != null || rec[6] != "") {

                        fs.setF263_MRN(rec[6].toString());
                    } else {
                        fs.setF263_MRN("");
                    }

                    if (rec[9] == null || rec[9].toString().isEmpty()) {

                        fs.setF011_AUTHIDRESP("");
                    } else if (rec[9] != null) {

                        fs.setF011_AUTHIDRESP(rec[9].toString());
                    } else {
                        fs.setF011_AUTHIDRESP("");
                    }

                    if (rec[10] != null) {

                        fs.setF023_RRN(rec[10].toString());
                    } else {
                        fs.setF023_RRN("");
                    }
                    if (rec[11] != null && rec[5] != null) {

                        String rd = null;
                        String rt = "";

                        if (rec[5].toString().equals("S")) {
//							if (rec[5].toString().equals("S") && !rec[20].toString().equals("FPX"))

                            try {
                                rd = new SimpleDateFormat("dd/MM/yyyy")
                                        .format(new SimpleDateFormat("yyyyMMdd").parse(rec[11].toString()));
                            } catch (ParseException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }

                            fs.setDate(rd);
                        } else {

                            try {
                                rd = new SimpleDateFormat("dd/MM/yyyy")
                                        .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                                rt = new SimpleDateFormat("HH:mm:ss")
                                        .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                            } catch (ParseException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                            fs.setDate(rd);
                            fs.setTime(rt);
                        }
                    } else {

                        String rd = null;
                        String rt = "";
                        try {
                            rd = new SimpleDateFormat("dd/MM/yyyy")
                                    .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                            rt = new SimpleDateFormat("HH:mm:ss")
                                    .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                        } catch (ParseException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        fs.setDate(rd);
                        fs.setTime(rt);
                    }

                    if (rec[12] != null) {

                        fs.setMerchantName(rec[12].toString());
                    } else {
                        fs.setMerchantName("");
                    }

                    if (rec[13] != null) {

                        fs.setF270_ORN(rec[13].toString());
                    } else {
                        fs.setF270_ORN("");
                    }

                    if (rec[14] == null || rec[14].toString().isEmpty()) {

                        fs.setF268_CHNAME("");

                    } else if (rec[14] != null) {

                        fs.setF268_CHNAME(rec[14].toString());
                    }

                    if (rec[15] == null || rec[15].toString().isEmpty()) {

                        fs.setFraudScore("");

                    } else if (rec[15] != null || rec[15] != "") {

                        if (rec[15].toString().equalsIgnoreCase("null")) {
                            fs.setFraudScore("");
                        } else {
                            fs.setFraudScore(rec[15].toString());
                        }

                    } else {
                        fs.setFraudScore("");
                    }

                    if (rec[16] == null || rec[16].toString().isEmpty()) {

                        fs.setFraudId("");

                    } else if (rec[16] != null || rec[16] != "") {

                        if (rec[16].toString().equalsIgnoreCase("null")) {
                            fs.setFraudId("");
                        } else {
                            fs.setFraudId(rec[16].toString());
                        }

                    } else {
                        fs.setFraudId("");
                    }

                    // NEW FIELDS

                    if (rec[17] == null || rec[17].toString().isEmpty()) {
                        fs.setNetAmount("");
                    } else if (rec[17] != null || rec[17] != "") {

                        Double d = new Double(rec[17].toString());
                        String pattern = "#,##0.00";
                        DecimalFormat myFormatter = new DecimalFormat(pattern);
                        String output = myFormatter.format(d);
                        // logger.info(d + " " + pattern + " " + output);
                        fs.setNetAmount(output);
                    }

                    if (rec[18] == null || rec[18].toString().isEmpty()) {
                        fs.setMdrAmt("");
                    } else if (rec[18] != null || rec[18] != "") {

                        Double d = new Double(rec[18].toString());
                        String pattern = "#,##0.00";
                        DecimalFormat myFormatter = new DecimalFormat(pattern);
                        String output = myFormatter.format(d);
                        // logger.info(d + " " + pattern + " " + output);
                        fs.setMdrAmt(output);
                    }
                    String rd = null;
                    String rt = null;

                    if (rec[19] == null || rec[19].toString().isEmpty()) {
                        fs.setSettlementDate("");
                    } else if (rec[19] != null || rec[19] != "") {

                        int datelength = rec[19].toString().length();

                        if (datelength == 11) {
                            fs.setSettlementDate(rec[19].toString());
                        }

                        else if (rec[19].toString().contains("T")) {
                            rd = rec[19].toString().substring(0, 8);

                            try {
                                rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }

                            fs.setSettlementDate(rt);
                        } else if (datelength == 10) {

                            try {
                                rd = new SimpleDateFormat("dd/MM/yyyy")
                                        .format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                            fs.setSettlementDate(rd);
                        } else {

                            try {
                                rd = new SimpleDateFormat("dd/MM/yyyy")
                                        .format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                            fs.setSettlementDate(rd);
                        }
                    } else {
                        fs.setSettlementDate("");
                    }

                    if (rec[20] == null || rec[20].toString().isEmpty()) {
                        fs.setCardType("");
                    } else if (rec[20] != null) {

                        if (rec[21].toString().equals("NULL")) {
                            fs.setCardType(rec[20].toString());
                        } else if (rec[21] != null && !rec[21].toString().isEmpty()) {
                            fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
                        }

                        else {
                            fs.setCardType(rec[20].toString());
                        }
                    }

                    else {
                        fs.setCardType("");
                    }

                    if (rec[22] == null || rec[22].toString().isEmpty()) {
                        fs.setEzysettleAmt("");
                    } else if (rec[22] != null) {

                        Double d = new Double(rec[22].toString());
                        String pattern = "#,##0.00";
                        DecimalFormat myFormatter = new DecimalFormat(pattern);
                        String output = myFormatter.format(d);

                        fs.setEzysettleAmt(output);

                    }
                    if (rec[23] != null) {
                        fs.setSubmerchantmid(rec[23].toString());
                    } else {
                        fs.setSubmerchantmid("");
                    }

                    if(getStart2PayMerchantCondition(merchant.getId()) && (txnType.equals("BOOST")))
                    {
                        if (rec[24] != null) {
                            fs.setF011_AUTHIDRESP(rec[24].toString());
                        } else {
                            fs.setF011_AUTHIDRESP("");
                        }
                    }
                    if(getStart2PayMerchantCondition(merchant.getId()) && (txnType.equals("TNG") || (txnType.equals("SHOPPY"))))
                    {
                        if (rec[24] != null) {
                            fs.setF263_MRN(rec[24].toString());
                        } else {
                            fs.setF263_MRN("");
                        }
                    }

                    fss.add(fs);

                }
            } catch (Exception e) {
                logger.error("Exception occure while exporting ",e);
            }
        paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void merchantFpxtranscation(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String fpxmid, String ummotomid, String mid, String txnType,
			Merchant merchant) {
		logger.info(" FPX Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;
		int querySize = 0;
//            String paydeeEzywaymid = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		String searchValue = mid;

		String Ezywaymid = umEzywayMid;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (txnType.equals("FPX")) {
			logger.info("*** FPX *** :");
//                   sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
//                                 + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
//                                 + " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//                                 + "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
//                                 + "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
//                                 + "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc ";
			sql = "select f.MID AS MID,'NULL' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID ,f.SELLEREXORDERNO AS PPID "
					+ "from FPX_TRANSACTION f " + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to order by f.TIME_STAMP desc";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);
			logger.info("FROM date :" + from);
			logger.info("to date :" + to);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + ummotomid);
			logger.info("mid :" + mid);
			logger.info("fpxmid :" + fpxmid);
            logger.info("FPX Query : " + sqlQuery);

            String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

//
//            int pageSize = 10; 
////          int pageNumFromJsp = paginationBean.getCurrPage();
////          logger.info("Page Number:" + pageNumFromJsp);
//
//            sqlQuery.setFirstResult((1*pageSize)-pageSize);
//            sqlQuery.setMaxResults(pageSize);

			// Dynamic changes for pagination count

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));
			logger.info("Total Number of records:" + paginationBean.getQuerySize());

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

//		else if (txnType.equals("FPX1")) {
//
//			logger.info("<===SEARCH FPX By REF No ===>");
//
//			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
//					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID,f.SELLEREXORDERNO AS PPID "
//					+ "from FPX_TRANSACTION f " + "WHERE f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) AND f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND f.SELLERORDERNO like '" + searchValue + "%' ";
//
//			logger.info("Search Fpx Query for Ref No: " + sql);
//
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setString("Ezywaymid", Ezywaymid);
//			sqlQuery.setString("motomid", ummotomid);
//			sqlQuery.setString("mid", mid);
//			sqlQuery.setString("fpxmid", fpxmid);
//			
//			
//			logger.info("Ezywaymid for Reference search :" + Ezywaymid);
//			logger.info("motomid for Reference search :" + ummotomid);
//			logger.info("mid for Reference search :" + mid);
//			logger.info("Reference Number in Query :" + searchValue);
//			// sqlQuery.setString("refNo", REF_No);
//
//		}
//
//		else if (txnType.equals("FPX2")) {
//
//			logger.info("<===SEARCH FPX BY APPROVAL CODE ===>");
//
//			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
//					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID,f.SELLEREXORDERNO AS PPID "
//					+ "from FPX_TRANSACTION f " + "WHERE f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) AND f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
//					+ "f.FPXTXNID like '" + searchValue + "%' ";
//
//			logger.info("Search Fpx Query for Approval Code: " + sql);
//
//			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
//			sqlQuery.setString("Ezywaymid", Ezywaymid);
//			sqlQuery.setString("motomid", ummotomid);
//			sqlQuery.setString("mid", mid);
//			sqlQuery.setString("fpxmid", fpxmid);
//			
//			logger.info("Ezywaymid for APPROVAL search :" + Ezywaymid);
//			logger.info("motomid for APPROVAL search :" + ummotomid);
//			logger.info("mid for APPROVAL search :" + mid);
//			
//			logger.info("Approval Code in Query :" + searchValue);
//			// sqlQuery.setString("refNo", REF_No);
//
//		}

		@SuppressWarnings("unchecked")
//		List<Object[]> resultSet = sqlQuery.list();
//		logger.info("Number of records in the List : " + resultSet.size());
//
//		for (Object[] rec : resultSet) {
//
//			UMEzyway fs = new UMEzyway();
//
//			if (rec[0] != null || rec[0] != "") {
//				fs.setF001_MID(rec[0].toString());
//			} else {
//				fs.setF001_MID("");
//			}
//
//			if (rec[1] != null || rec[1] != "" || rec[1].equals("NULL")) {
//				fs.setF005_EXPDATE(rec[1].toString());
//			} else {
//				fs.setF005_EXPDATE("");
//			}
//
//			if (rec[2] != null) {
//				if (rec[2].toString().contains(".")) {
//
//					Double d = new Double(rec[2].toString());
//					String pattern = "#,##0.00";
//					DecimalFormat myFormatter = new DecimalFormat(pattern);
//					String output = myFormatter.format(d);
//
//					fs.setF007_TXNAMT(output);
//
//				} else {
//
//					double amount = 0;
//					amount = Double.parseDouble(rec[2].toString()) / 100;
//					String pattern = "#,##0.00";
//					DecimalFormat myFormatter = new DecimalFormat(pattern);
//					String output = myFormatter.format(amount);
//					fs.setF007_TXNAMT(output);
//
//				}
//			} else {
//				fs.setF007_TXNAMT("");
//			}
//
//			if (rec[3] != null || rec[3] != "") {
//
//				fs.setF354_TID(rec[3].toString());
//			} else {
//				fs.setF354_TID("");
//			}
//
//			if (rec[4] == null || rec[4].toString().isEmpty()) {
//
//				fs.setPAN("");
//			} else if (rec[4] != null || rec[4] != "") {
//
//				String rt = null;
//				String rd = null;
//				String lasteightDigits = null;
//
//				if (rec[4].toString().contains("f")) {
//
//					int panlength = rec[4].toString().length();
//
//					String replacefpan = rec[4].toString().replace("f", "*");
//
//					if (panlength > 13) {
//
//						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);
//
//					}
//					fs.setPAN(lasteightDigits);
//				}
//
//			} else {
//
//				fs.setPAN("");
//			}
//
//			if (rec[5] != null) {
//
//				String status = rec[5].toString();
//
//				if (rec[5].toString().equals("A")) {
//					fs.setSTATUS("NOT SETTLED");
//				} else if (rec[5].toString().equals("C")) {
//					fs.setSTATUS("VOIDED");
//				} else if (rec[5].toString().equals("S")) {
//					fs.setSTATUS("SETTLED");
//				} else if (rec[5].toString().equals("CB")) {
//					fs.setSTATUS("CHARGE BACK");
//				} else if (rec[5].toString().equals("FR")) {
//					fs.setSTATUS("REFUNDED");
//				} else if (rec[5].toString().equals("BPS")) {
//					fs.setSTATUS("SETTLED");
//				} else if (rec[5].toString().equals("BPA")) {
//					fs.setSTATUS("NOT SETTLED");
//				} else if (rec[5].toString().equals("BPC")) {
//					fs.setSTATUS("VOIDED");
//				} else if (rec[5].toString().equals("GPS")) {
//					fs.setSTATUS("SETTLED");
//
//				} else if (rec[5].toString().equals("GRF")) {
//					fs.setSTATUS("VOIDED");
//
//				} else if (rec[5].toString().equals("GPT")) {
//					fs.setSTATUS("SETTLED");
//
//				} else if (rec[5].toString().equals("GBC")) {
//					fs.setSTATUS("VOIDED");
//				} else if (rec[5].toString().equals("R")) {
//					fs.setSTATUS("REFUNDED");
//				} else if (rec[5].toString().equals("PR")) {
//					fs.setSTATUS("REFUNDED");
//				} else if (rec[5].toString().equals("H")) {
//					fs.setSTATUS("EZYSETTLE");
//				} else if (rec[5].toString().equals("PPA")) {
//					fs.setSTATUS("PAYOUT");
//				} else if (rec[5].toString().equals("TPA")) {
//					fs.setSTATUS("NOT SETTLED");
//				} else if (rec[5].toString().equals("SPA")) {
//					fs.setSTATUS("NOT SETTLED");
//				} else if (rec[5].toString().equals("TPS")) {
//					fs.setSTATUS("SETTLED");
//				} else if (rec[5].toString().equals("SPS")) {
//					fs.setSTATUS("SETTLED");
//				}
//
//				else if (rec[5].toString().equals("BNA")) {
//					fs.setSTATUS("NOT SETTLED");
//				} else if (rec[5].toString().equals("BNS")) {
//					fs.setSTATUS("SETTLED");
//				} else if (rec[5].toString().equals("BNC")) {
//					fs.setSTATUS("VOIDED");
//				}
////						 else if (rec[5].toString().equals("00")) {
////								fs.setSTATUS("SETTLED");
////							}
////						 else if (rec[5].toString().equals("01")) {
////								fs.setSTATUS("NOT SETTLED");
////							}
//
//			} else {
//				fs.setSTATUS("NOT SETTLED");
//			}
//
//			if (rec[6] == null || rec[6].toString().isEmpty()) {
//
//				fs.setF263_MRN("");
//			} else if (rec[6] != null || rec[6] != "") {
//
//				fs.setF263_MRN(rec[6].toString());
//			} else {
//				fs.setF263_MRN("");
//			}
//
//			if (rec[9] == null || rec[9].toString().isEmpty()) {
//
//				fs.setF011_AUTHIDRESP("");
//			} else if (rec[9] != null) {
//
//				fs.setF011_AUTHIDRESP(rec[9].toString());
//			} else {
//				fs.setF011_AUTHIDRESP("");
//			}
//
//			if (rec[10] != null) {
//
//				fs.setF023_RRN(rec[10].toString());
//			} else {
//				fs.setF023_RRN("");
//			}
//			if (rec[11] != null) {
//
//				String rd = null;
//				String rt = "";
//
//				try {
//					rd = new SimpleDateFormat("dd/MM/yyyy")
//							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
//					rt = new SimpleDateFormat("HH:mm:ss")
//							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
//				} catch (ParseException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				logger.info("date : **" + rd);
//				fs.setDate(rd);
//				fs.setTime(rt);
//
//			}
//			if (rec[12] != null) {
//
//				fs.setMerchantName(rec[12].toString());
//			} else {
//				fs.setMerchantName("");
//			}
//
//			if (rec[13] != null) {
//
//				fs.setF270_ORN(rec[13].toString());
//			} else {
//				fs.setF270_ORN("");
//			}
//
//			if (rec[14] == null || rec[14].toString().isEmpty()) {
//
//				fs.setF268_CHNAME("");
//
//			} else if (rec[14] != null) {
//
//				fs.setF268_CHNAME(rec[14].toString());
//			}
//
//			if (rec[15] == null || rec[15].toString().isEmpty()) {
//
//				fs.setFraudScore("");
//
//			} else if (rec[15] != null || rec[15] != "") {
//
//				if (rec[15].toString().equalsIgnoreCase("null")) {
//					fs.setFraudScore("");
//				} else {
//					fs.setFraudScore(rec[15].toString());
//				}
//
//			} else {
//				fs.setFraudScore("");
//			}
//
//			if (rec[16] == null || rec[16].toString().isEmpty()) {
//
//				fs.setFraudId("");
//
//			} else if (rec[16] != null || rec[16] != "") {
//
//				if (rec[16].toString().equalsIgnoreCase("null")) {
//					fs.setFraudId("");
//				} else {
//					fs.setFraudId(rec[16].toString());
//				}
//
//			} else {
//				fs.setFraudId("");
//			}
//
//			// NEW FIELDS
//
//			if (rec[17] == null || rec[17].toString().isEmpty()) {
//				fs.setNetAmount("");
//			} else if (rec[17] != null || rec[17] != "") {
//
//				Double d = new Double(rec[17].toString());
//				String pattern = "#,##0.00";
//				DecimalFormat myFormatter = new DecimalFormat(pattern);
//				String output = myFormatter.format(d);
//				// logger.info(d + " " + pattern + " " + output);
//				fs.setNetAmount(output);
//			}
//
//			if (rec[18] == null || rec[18].toString().isEmpty()) {
//				fs.setMdrAmt("");
//			} else if (rec[18] != null || rec[18] != "") {
//
//				Double d = new Double(rec[18].toString());
//				String pattern = "#,##0.00";
//				DecimalFormat myFormatter = new DecimalFormat(pattern);
//				String output = myFormatter.format(d);
//				// logger.info(d + " " + pattern + " " + output);
//				fs.setMdrAmt(output);
//			}
//			String rd = null;
//			String rt = null;
//
//			if (rec[19] == null || rec[19].toString().isEmpty()) {
//				fs.setSettlementDate("");
//			} else if (rec[19] != null || rec[19] != "") {
//
//				int datelength = rec[19].toString().length();
//
//				if (datelength == 11) {
//					fs.setSettlementDate(rec[19].toString());
//				}
//
//				else if (rec[19].toString().contains("T")) {
//					rd = rec[19].toString().substring(0, 8);
//
//					try {
//						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
//					} catch (ParseException e) {
//						e.printStackTrace();
//					}
//
//					fs.setSettlementDate(rt);
//				} else if (datelength == 10) {
//
//					try {
//						rd = new SimpleDateFormat("dd/MM/yyyy")
//								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
//					} catch (ParseException e) {
//						e.printStackTrace();
//					}
//					fs.setSettlementDate(rd);
//				} else {
//
//					try {
//						rd = new SimpleDateFormat("dd/MM/yyyy")
//								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
//					} catch (ParseException e) {
//						e.printStackTrace();
//					}
//					fs.setSettlementDate(rd);
//				}
//			} else {
//				fs.setSettlementDate("");
//			}
//
//			if (rec[20] == null || rec[20].toString().isEmpty()) {
//				fs.setCardType("");
//			} else if (rec[20] != null) {
//
//				if (rec[21].toString().equals("NULL")) {
//					fs.setCardType(rec[20].toString());
//				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
//					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
//				}
//
//				else {
//					fs.setCardType(rec[20].toString());
//				}
//			}
//
//			else {
//				fs.setCardType("");
//			}
//
//			if (rec[22] == null || rec[22].toString().isEmpty()) {
//				fs.setEzysettleAmt("");
//			} else if (rec[22] != null) {
//
//				Double d = new Double(rec[22].toString());
//				String pattern = "#,##0.00";
//				DecimalFormat myFormatter = new DecimalFormat(pattern);
//				String output = myFormatter.format(d);
//
//				fs.setEzysettleAmt(output);
//
//			}
//			if (rec[23] != null) {
//				fs.setSubmerchantmid(rec[23].toString());
//			} else {
//				fs.setSubmerchantmid("");
//			}
//			if (rec[24] != null) {
//				fs.setPpid(rec[24].toString());
//			} else {
//				fs.setPpid("");
//			}
//
//			fss.add(fs);
//
//		}
//		paginationBean.setItemList(fss);
//		logger.info("No of Records: " + paginationBean.getItemList().size());

        List<Object[]> resultSet = sqlQuery.list();
        logger.info("Number of records in the List : " + resultSet.size());

        for (Object[] rec : resultSet) {

            UMEzyway fs = new UMEzyway();

            fs.setF001_MID(rec[0] != null && !rec[0].toString().isEmpty() ? rec[0].toString() : "");
            fs.setF005_EXPDATE(rec[1] != null && !rec[1].toString().equalsIgnoreCase("NULL") ? rec[1].toString() : "");

            if (rec[2] != null) {
                double amount = Double.parseDouble(rec[2].toString());
                String pattern = "#,##0.00";
                DecimalFormat myFormatter = new DecimalFormat(pattern);
                fs.setF007_TXNAMT(myFormatter.format(amount));
            } else {
                fs.setF007_TXNAMT("");
            }

            fs.setF354_TID(rec[3] != null && !rec[3].toString().isEmpty() ? rec[3].toString() : "");

            if (rec[4] != null && !rec[4].toString().isEmpty() && rec[4].toString().contains("f")) {
                String pan = rec[4].toString().replace("f", "*");
                fs.setPAN(pan.length() > 13 ? pan.substring(pan.length() - 8) : pan);
            } else {
                fs.setPAN("");
            }

            fs.setSTATUS(getStatusDescription(rec[5]));
            fs.setF263_MRN(rec[6] != null && !rec[6].toString().isEmpty() ? rec[6].toString() : "");
            fs.setF011_AUTHIDRESP(rec[9] != null && !rec[9].toString().isEmpty() ? rec[9].toString() : "");
            fs.setF023_RRN(rec[10] != null ? rec[10].toString() : "");

            if (rec[11] != null) {
                try {
                    String formattedDate = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                    String formattedTime = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
                    fs.setDate(formattedDate);
                    fs.setTime(formattedTime);
                } catch (ParseException e) {
                    logger.error("Error parsing timestamp: " + rec[11], e);
                }
            }

            fs.setMerchantName(rec[12] != null ? rec[12].toString() : "");
            fs.setF270_ORN(rec[13] != null ? rec[13].toString() : "");
            fs.setF268_CHNAME(rec[14] != null && !rec[14].toString().equalsIgnoreCase("null") ? rec[14].toString() : "");

            fs.setFraudScore(getStringValue(rec[15]));
            fs.setFraudId(getStringValue(rec[16]));

            fs.setNetAmount(formatDecimal(rec[17]));
            fs.setMdrAmt(formatDecimal(rec[18]));

            if (rec[19] != null) {
                fs.setSettlementDate(formatSettlementDate(rec[19].toString()));
            } else {
                fs.setSettlementDate("");
            }

            if (rec[20] != null) {
                fs.setCardType(getCardType(rec[20].toString(), rec[21]));
            } else {
                fs.setCardType("");
            }

            fs.setEzysettleAmt(formatDecimal(rec[22]));
            fs.setSubmerchantmid(rec[23] != null ? rec[23].toString() : "");
            fs.setPpid(rec[24] != null ? rec[24].toString() : "");

            fss.add(fs);
        }

        paginationBean.setItemList(fss);
        logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void merchantFpxtranscation1(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String fpxmid, String ummotomid, String mid, String txnType,
			Merchant merchant) {
		try {
		logger.info(" FPX Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;
//			String paydeeEzywaymid = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		String Ezywaymid = umEzywayMid;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now();
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (txnType.equals("FPX")) {
			logger.info("*** FPX *** :");
//				sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
//						+ "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
//						+ " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//						+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
//						+ "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
//						+ "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc ";
			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID "
					+ "from FPX_TRANSACTION f " + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to order by f.TIME_STAMP desc ";

			logger.info("FPX Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + ummotomid);
			logger.info("mid :" + mid);
			logger.info("fpxmid :" + fpxmid);
			/*
			 * String FromDate= paginationBean.setDateFromBackend(from); String From1Date=
			 * paginationBean.setDate1FromBackend(to); String TXNTYPE =
			 * paginationBean.setTXNtype(txnType);
			 * 
			 * 
			 * int pageSize = 10; int pageNumFromJsp = paginationBean.getCurrPage();
			 * logger.info("Page Number:" + pageNumFromJsp);
			 * 
			 * sqlQuery.setFirstResult((pageNumFromJsp*pageSize)-pageSize);
			 * sqlQuery.setMaxResults(pageSize);
			 */

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {

					try {
					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);
					}catch(Exception e) {
						logger.error("When formatting Double::"+e.getMessage(),e);					

					}
				} else {
					try {
					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);
					}catch(Exception e) {
						logger.error("When formatting Double Else::"+e.getMessage(),e);					

					}
				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {

				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					String replacefpan = rec[4].toString().replace("f", "*");

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {

				String status = rec[5].toString();

				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("H")) {
					fs.setSTATUS("EZYSETTLE");
				} else if (rec[5].toString().equals("PPA")) {
					fs.setSTATUS("PAYOUT");
				} else if (rec[5].toString().equals("TPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("SPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("TPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("SPS")) {
					fs.setSTATUS("SETTLED");
				}

				else if (rec[5].toString().equals("BNA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BNS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BNC")) {
					fs.setSTATUS("VOIDED");
				}
//						 else if (rec[5].toString().equals("00")) {
//								fs.setSTATUS("SETTLED");
//							}
//						 else if (rec[5].toString().equals("01")) {
//								fs.setSTATUS("NOT SETTLED");
//							}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setF263_MRN("");
			} else if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF011_AUTHIDRESP("");
			} else if (rec[9] != null) {

				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {

				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {

				String rd = null;
				String rt = "";

				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}

			if (rec[12] != null) {

				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {

				fs.setF268_CHNAME(rec[14].toString());
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setFraudScore("");

			} else if (rec[15] != null || rec[15] != "") {

				if (rec[15].toString().equalsIgnoreCase("null")) {
					fs.setFraudScore("");
				} else {
					fs.setFraudScore(rec[15].toString());
				}

			} else {
				fs.setFraudScore("");
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setFraudId("");

			} else if (rec[16] != null || rec[16] != "") {

				if (rec[16].toString().equalsIgnoreCase("null")) {
					fs.setFraudId("");
				} else {
					fs.setFraudId(rec[16].toString());
				}

			} else {
				fs.setFraudId("");
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {

				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {

				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					fs.setSettlementDate(rt);
				} else if (datelength == 10) {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				} else {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {

				if (rec[21] == null || rec[21].toString().isEmpty() ) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				}

				else {
					fs.setCardType(rec[20].toString());
				}
			}

			else {
				fs.setCardType("");
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setEzysettleAmt("");
			} else if (rec[22] != null) {

				Double d = new Double(rec[22].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setEzysettleAmt(output);

			}
			if (rec[23] != null) {
				fs.setSubmerchantmid(rec[23].toString());
			} else {
				fs.setSubmerchantmid("");
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		}catch(Exception e) {
			logger.error("merchantFpxtranscation1 Error::"+e.getMessage(),e);
		}
	}

	// UM-EZYWIRE PAGINATION CHANGES

	@Override
	public void listUMEzywireTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType, Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywireTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		Query sqlQuery = null;

		String VALUE = date;

		String Ezywiremid = umEzywayMid;

//			if (merchant.getMid().getBoostMid() != null) {
//				boostmid = merchant.getMid().getBoostMid();
//			}
		//
//			if (merchant.getMid().getGrabMid() != null) {
//				grabmid = merchant.getMid().getGrabMid();
//			}
		//
//			if (merchant.getMid().getFpxMid() != null) {
//				fpxmid = merchant.getMid().getFpxMid();
//			}
		//
//			if (merchant.getMid().getTngMid() != null) {
//				tngMid = merchant.getMid().getTngMid();
//			}
//			if (merchant.getMid().getShoppyMid() != null) {
//				shoppyMid = merchant.getMid().getShoppyMid();
//			}
//			//BNPL INTEGRATION
//			if (merchant.getMid().getBnplMid() != null) {
//				bnplMid = merchant.getMid().getBnplMid();
//			}

		logger.info("umEzywireMid" + Ezywiremid);
//			logger.info("boostmid" + boostmid);
//			logger.info("grabmid" + grabmid);
//			logger.info("fpxmid" + fpxmid);
//			logger.info("tngMid" + tngMid);
//			logger.info("shoppyMid" + shoppyMid);
//			
//			logger.info("BnplMid " + bnplMid);

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzywire ALL " + txnType);

//				sql = " select * from ((select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE, "
//						+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
//						+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
//						+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE , a.TIME_STAMP , a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from "
//						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP between "
//						+ ":from and :to )" + "UNION "
//						+ "(select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,'','','',a.TIME_STAMP ,a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE  from "
//						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','C') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP  between "
//						+ ":from and :to )"
//						+ ") as temp order by TIME_STAMP desc ";

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and f.MERCHANT_TYPE IN ('U','FIUU') and a.TIME_STAMP BETWEEN :from AND :to ) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ummid", Ezywiremid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		}

		else if (txnType.equals("CARD")) {
			logger.info("Inside UMEzywire ALL " + txnType);

//				sql = " select * from ((select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE, "
//						+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
//						+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
//						+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE , a.TIME_STAMP , a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from "
//						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP between "
//						+ ":from and :to )" + "UNION "
//						+ "(select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,'','','',a.TIME_STAMP ,a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE  from "
//						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','C') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP  between "
//						+ ":from and :to )"
//						+ ") as temp order by TIME_STAMP desc ";

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and f.MERCHANT_TYPE IN ('U','FIUU') and a.TIME_STAMP BETWEEN :from AND :to ) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ummid", Ezywiremid);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			// sqlQuery.setFirstResult(CountResult-(pageNumFromJsp*pageSize)); //(put this
			// if desc not working)

		}

		else if (txnType.equals("UM_EZYWIRE_CARD_RRN")) {
			logger.info(
					"<<<<<======================  INSIDE SEARCH CARD EZYWIRE BY RRN =========================>>>>>> ");

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and a.RRN like '" + VALUE
					+ "%' and f.MERCHANT_TYPE IN ('U','FIUU')) as temp order by TIME_STAMP desc";

			logger.info("SEARCH RRN EZYWIRE Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			sqlQuery.setString("ummid", Ezywiremid);

		}

		else if (txnType.equals("UM_EZYWIRE_CARD_CARDNO")) {
			logger.info(
					"<<<<<======================  INSIDE SEARCH CARD EZYWIRE BY CARD NUMBER =========================>>>>>> ");

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and t.MASKED_PAN like '%" + VALUE
					+ "' and f.MERCHANT_TYPE IN ('U','FIUU')) as temp order by TIME_STAMP desc";

			logger.info("SEARCH CARD NUMBER EZYWIRE Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			sqlQuery.setString("ummid", Ezywiremid);

		}

		else if (txnType.equals("UM_EZYWIRE_CARD_AP")) {
			logger.info(
					"<<<<<======================  INSIDE SEARCH CARD EZYWIRE BY APPROVAL CODE =========================>>>>>> ");

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and a.AID_RESPONSE like '" + VALUE
					+ "%' and f.MERCHANT_TYPE IN ('U','FIUU')) as temp order by TIME_STAMP desc";

			logger.info("SEARCH APPROVAL CODE EZYWIRE Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			sqlQuery.setString("ummid", Ezywiremid);

		}

		else if (txnType.equals("UM_EZYWIRE_CARD_REF")) {
			logger.info(
					"<<<<<======================  INSIDE SEARCH CARD EZYWIRE BY REFERENCE =========================>>>>>> ");

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and a.INVOICE_ID like '" + VALUE
					+ "%' and f.MERCHANT_TYPE IN ('U','FIUU')) as temp order by TIME_STAMP desc";

			logger.info("SEARCH APPROVAL CODE EZYWIRE Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			sqlQuery.setString("ummid", Ezywiremid);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();
			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF354_TID(rec[1].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[3].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF270_ORN(rec[4].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[5] != null) {
				fs.setF011_AUTHIDRESP(rec[5].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[6] != null) {
				fs.setF023_RRN(rec[6].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[7] != null) {
				fs.setF268_CHNAME(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[8] != null || rec[8] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else {
				fs.setCardscheme(rec[9].toString());
			}

			if (rec[10] != null) {

				fs.setCardType(rec[10].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[13].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger number = new BigInteger(rec[15].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setTxnType("");
			}

			else if (rec[16] == "NULL") {
				fs.setTxnType("No");

			}

			else if (rec[16].toString().equalsIgnoreCase("Yes")) {
				logger.info("inside preauth sale");

				fs.setTxnType("Yes");

			}

			if (rec[17] == null || rec[17].toString().isEmpty() || rec[17].toString().equalsIgnoreCase("NULL")) {
				fs.setPreauthfee("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setPreauthfee(output);
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void exportUMEzywireTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType, Merchant merchant) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywireTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		Query sqlQuery = null;

		String Ezywiremid = umEzywayMid;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));

				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to + fdate + tdate);
		if (txnType.equals("CARD")) {

//				sql = " select * from ((select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE, "
//						+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
//						+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
//						+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE , a.TIME_STAMP , a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from "
//						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP between "
//						+ ":from and :to )" + "UNION "
//						+ "(select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,'','','',a.TIME_STAMP ,a.TRX_ID, a.PREAUTH,(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE  from "
//						+ "FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
//						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','C') and a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP  between "
//						+ ":from and :to )"
//						+ ") as temp order by TIME_STAMP desc ";

			sql = "select * from (select a.MID , a.TID , a.AMOUNT , a.STATUS , a.INVOICE_ID ,a.AID_RESPONSE,a.RRN, t.CARD_HOLDER_NAME , t.MASKED_PAN , t.CARD_SCHEME ,t.CARD_TYPE,"
					+ "(select st.NET_AMOUNT from SETTLEMENT_MDR st where st.RRN = a.RRN and st.AID = a.AID_RESPONSE) AS NET_AMOUNT,"
					+ "(select st.MDR_AMT from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS MDR_AMT,"
					+ "(select st.SETTLEMENTDATE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS SETTLEMENTDATE ,"
					+ " a.TIME_STAMP , a.TRX_ID, a.PREAUTH,"
					+ "(select st.PREAUTH_FEE from SETTLEMENT_MDR st where st.RRN = a.RRN  and st.AID = a.AID_RESPONSE) AS PREAUTH_FEE from FOR_SETTLEMENT a "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('S','FR','R','PR','A','C') and "
					+ "a.MID IN (:ummid) and f.MERCHANT_TYPE IN ('U','FIUU') and a.TIME_STAMP BETWEEN :from AND :to ) as temp order by TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("ummid", Ezywiremid);

		}
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "") {
				fs.setF354_TID(rec[1].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {

				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[3].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[3].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[3].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[3].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				}

			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF270_ORN(rec[4].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[5] != null) {
				fs.setF011_AUTHIDRESP(rec[5].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[6] != null) {
				fs.setF023_RRN(rec[6].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[7] != null) {
				fs.setF268_CHNAME(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[8] != null || rec[8] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[8].toString().contains("f")) {

					int panlength = rec[8].toString().length();

					logger.info("panlength" + panlength);
					String replacefpan = rec[8].toString().replace("f", "*");
					logger.info("replacefpan" + replacefpan);

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

						logger.info("lasteightDigits" + lasteightDigits);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {
				fs.setCardscheme("");
			} else {
				fs.setCardscheme(rec[9].toString());
			}

			if (rec[10] != null) {

				fs.setCardType(rec[10].toString());

			} else {
				fs.setCardType("");

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[11] != null || rec[11] != "") {
				Double d = new Double(rec[11].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[12] != null || rec[12] != "") {
				Double d = new Double(rec[12].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[13] != null || rec[13] != "") {

				if (rec[13].toString().contains("T")) {
					rd = rec[13].toString().substring(0, 8);

					logger.info("rd" + rd);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					logger.info("rt" + rt);

					fs.setSettlementDate(rt);
				}

				else {
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[13].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}

			} else {
				fs.setSettlementDate("");
			}

			if (rec[14] != null) {
				String rn = null;
				String rv = null;
				try {
					rn = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
					rv = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[14].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rn);
				fs.setTime(rv);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setNotrxid("");

			} else if (rec[15] != null) {
				BigInteger number = new BigInteger(rec[15].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setTxnType("");
			}

			else if (rec[16] == "NULL") {
				fs.setTxnType("No");

			}

			else if (rec[16].toString().equalsIgnoreCase("Yes")) {
				logger.info("inside preauth sale");

				fs.setTxnType("Yes");

			}

			if (rec[17] == null || rec[17].toString().isEmpty() || rec[17].toString().equalsIgnoreCase("NULL")) {
				fs.setPreauthfee("");
			} else if (rec[17] != null || rec[17] != "") {
				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setPreauthfee(output);
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	/*
	 * @Override public void listPayoutTransaction(PaginationBean<PayoutModel>
	 * paginationBean, String date1, String date2) { // TODO Auto-generated method
	 * stub
	 * 
	 * }
	 */

	@Override
	@Transactional(readOnly = true)
	public void listPayoutTransaction(final PaginationBean<PayoutModel> paginationBean, final String date1,
			final String date2, String export) {

		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;
		int querySize = 0;

		Date now = new Date();
		Date currentDate = new DateTime(now).toDate();
		logger.info("Current Date : " + now + " : " + currentDate);
		String fromDate = new SimpleDateFormat("yyyy-MM-dd").format(currentDate);

		Query sqlQuery = null;
		List<Object[]> resultSet = null;

		if (date1 != null && date2 != null)

		{

			logger.info("search query From " + date1 + " To " + date2);

			// old query
			//
//	                     sql = "SELECT p.CREATED_BY,p.CREATED_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//	                                  + "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,MERCHANT_FK,p.PAID_TIME,p.PAID_DATE FROM PAYOUT_DETAIL p WHERE p.MODIFIED_BY BETWEEN '"
//	                                  + date1 + "' and '" + date2 + "' ORDER BY p.CREATED_DATE desc ";

			// added pending
			sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
					+ "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.CURLEC_FAILURE_REASON,p.PAYOUT_FEE,p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE,p.PAYMENTREFERENCE,p.CURLEC_RECIPIENTREFERENCE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml on ml.ID = p.MERCHANT_FK  "

					+ "WHERE p.PAYOUT_STATUS IN ('pp','pd','pbd','pending','On Process') AND p.CREATED_DATE BETWEEN '"
					+ date1 + " 00:00:00' AND '" + date2 + " 23:59:59' ORDER BY p.CREATED_DATE desc ";

//	         "AND p.CREATED_DATE BETWEEN '" + date1 + " 00:00:00' AND '" + date2 + " 23:59:59' " +

			logger.info("Search Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));
			logger.info("size of search query is :: " + querySize);

			if (export == null) {
				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);
				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);
				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);
			}

			resultSet = sqlQuery.list();

		}

		else {

			logger.info("Current Date " + fromDate);

			// old queryn
//	                     sql = "SELECT p.CREATED_BY,p.CREATED_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//	                                  + "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,MERCHANT_FK,p.PAID_TIME,p.PAID_DATE FROM PAYOUT_DETAIL p WHERE p.MODIFIED_BY ='"
//	                                  + fromDate + "' ORDER BY p.CREATED_DATE desc ";
//			sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//					+ "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.FAILUREREASON,p.PAYOUT_ID,p.PAYOUTTYPE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.PAYOUT_STATUS IN('pp','pd','pbd') AND p.MODIFIED_BY ='"
//					+ fromDate + "' ORDER BY p.REQUEST_DATE desc ";

			// added pending
			sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
					+ "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.CURLEC_FAILURE_REASON,p.PAYOUT_FEE,p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE,p.PAYMENTREFERENCE,p.CURLEC_RECIPIENTREFERENCE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml on  "
					+ "ml.ID = p.MERCHANT_FK  "
					+ "WHERE p.PAYOUT_STATUS IN ('pp','pd','pbd','pending','On Process') AND p.CREATED_DATE LIKE '"
					+ fromDate + "%' ORDER BY p.CREATED_DATE desc ";

			logger.info("Default Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));
			logger.info("size of current query is :: " + querySize);

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);
			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);
			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
			resultSet = sqlQuery.list();

		}

		try {
//		@SuppressWarnings("unchecked")
			for (Object[] rec : resultSet) {

				PayoutModel fs = new PayoutModel();
				if (rec[23] == null || rec[23].toString().isEmpty()) {
					fs.setCreatedby("");

				} else if (rec[23] != null) {
					fs.setCreatedby(rec[23].toString());
				}
				if (rec[1] == null || rec[1].toString().isEmpty()) {
					fs.setCreateddate("");
				} else if (rec[1] != null) {
					// Sheik Changes
					String time = null;
					String date = null;
					String stamp = null;
					try {

						time = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
						date = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					} catch (Exception e) {
						// TODO: handle exception
						logger.info("Time throws error and Can't extract time from date time payout detail table");
					}
					stamp = date + " " + time;
					fs.setCreateddate(stamp);

				}
				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setModifieddate("");

				} else if (rec[2] != null) {

					fs.setModifieddate(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setPayeeaccnumber("");

				} else if (rec[3] != null) {

					fs.setPayeeaccnumber(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPayeebrn("");

				} else

				if (rec[4] != null) {

					fs.setPayeebrn(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setPayeebankname("");

				} else

				if (rec[5] != null) {

					fs.setPayeebankname(rec[5].toString());
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setPayeeemail("");

				} else

				if (rec[6] != null) {

					fs.setPayeeemail(rec[6].toString());

				}

				if (rec[7] == null || rec[7].toString().isEmpty()) {

					fs.setPayeeic("");

				} else if (rec[7] != null) {

					fs.setPayeeic(rec[7].toString());
				}

				if (rec[8] == null || rec[8].toString().isEmpty()) {

					fs.setPayeemobile("");

				} else if (rec[8] != null) {
					fs.setPayeemobile(rec[8].toString());
				}

				if (rec[9] == null || rec[9].toString().isEmpty()) {

					fs.setPayeename("");

				} else if (rec[9] != null) {
					fs.setPayeename(rec[9].toString());
				}

				if (rec[10] == null || rec[10].toString().isEmpty()) {

					fs.setPayoutamount("");

				} else if (rec[10] != null) {
					Double d = new Double(rec[10].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setPayoutamount(output);

				}

				if (rec[11] == null || rec[11].toString().isEmpty()) {

					if (rec[29] == null) {
						fs.setPayoutdate("");
					} else {
						String timeStamp = convertTimeStampDateFormat(rec[29].toString());
						fs.setPayoutdate(timeStamp);
					}

//					fs.setPayoutdate("");

				} else if (rec[11] != null) {

					String pdate = null;
					try {
						pdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));

					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setPayoutdate(pdate);

				}

				if (rec[12] == null) {

					fs.setPayoutstatus("Requested");

				} else if (rec[12] != null) {

					if (rec[12].toString().equals("A")) {
						fs.setPayoutstatus("To Process");

					} else if (rec[12].toString().equals("F")) {
						fs.setPayoutstatus("Failed");
					} else if (rec[12].toString().equals("S")) {
						fs.setPayoutstatus("Processing");
					} else if (rec[12].toString().equals("pp")) {
						fs.setPayoutstatus("Paid");
					} else if (rec[12].toString().equals("pd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[12].toString().equals("pbd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[12].toString().equals("pending")) {
						fs.setPayoutstatus("Pending");
					} else if (rec[12].toString().equals("On Process")) {
						fs.setPayoutstatus("In Process");
					}
				}

				if (rec[13] == null || rec[13].toString().isEmpty()) {

					fs.setSettledate("");

				} else if (rec[13] != null) {

					String sdate = null;
					try {
						sdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setSettledate(sdate);
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setSettlenetamount("");

				} else if (rec[14] != null) {

					Double d = new Double(rec[14].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setSettlenetamount(output);
				}

				if (rec[15] == null || rec[15].toString().isEmpty()) {

					fs.setInvoiceidproof("");

				} else if (rec[15] != null) {
					fs.setInvoiceidproof(rec[15].toString());
				}

				if (rec[16] == null || rec[16].toString().isEmpty()) {

					fs.setPaymentreason("");

				} else if (rec[16] != null) {
					fs.setPaymentreason(rec[16].toString());
				}
				if (rec[17] == null || rec[17].toString().isEmpty()) {

					fs.setSourceoffund("");

				} else if (rec[17] != null) {
					fs.setSourceoffund(rec[17].toString());
				}

				if (rec[18] == null || rec[18].toString().isEmpty()) {

					fs.setSwiftifsccode("");

				} else if (rec[18] != null) {
					fs.setSwiftifsccode(rec[18].toString());
				}

				if (rec[19] == null || rec[19].toString().isEmpty()) {
					fs.setMerchantId("");
				} else {
					fs.setMerchantId(rec[19].toString());
				}

				if (rec[20] == null || rec[20].toString().isEmpty()) {
					fs.setPaidTime("");
				} else {
					fs.setPaidTime(rec[20].toString());
				}

				if (rec[21] == null || rec[21].toString().isEmpty()) {
					fs.setPaidDate("");
				} else {
					fs.setPaidDate(rec[21].toString());
				}

				if (rec[22] == null || rec[22].toString().isEmpty()) {
					fs.setSubmerchantMid("");
				} else {
					fs.setSubmerchantMid(rec[22].toString());
				}
				if (rec[23] == null || rec[23].toString().isEmpty()) {
					fs.setMmId("");
				} else {
					fs.setMmId(rec[23].toString());
				}
				if (rec[24] == null || rec[24].toString().isEmpty() || rec[24].toString().equals("null")) {
					fs.setPayoutId("");
				} else {
					fs.setPayoutId(rec[24].toString());
				}
				if (rec[25] == null || rec[25].toString().isEmpty()) {
					fs.setFailurereason("");
				} else {
					fs.setFailurereason(capitalizeFirstLetter(rec[25].toString()));
				}
				if (rec[26] == null || rec[26].toString().isEmpty()) {
					fs.setPayoutfee("");
				} else {
					fs.setPayoutfee(rec[26].toString());
				}
				if (rec[27] == null || rec[27].toString().isEmpty()) {
					fs.setPayouttype("");
				} else {
					fs.setPayouttype(rec[27].toString());
				}

				if (rec[28] == null || rec[28].toString().isEmpty()) {
					fs.setSrcrefno("");
				} else {
					fs.setSrcrefno(rec[28].toString());
				}

				if (rec.length > 29 && rec[29] != null && !rec[29].toString().isEmpty()) {
					fs.setTimeStamp(rec[29].toString());
				} else {
					fs.setTimeStamp("");
				}

				if (rec[30] == null || rec[30].toString().isEmpty()) {
					fs.setPaymentReference("");
				} else {
					fs.setPaymentReference(rec[30].toString());
				}
				
				if (rec[31] == null || rec[31].toString().isEmpty()) {
					fs.setCurlecRefNo("");
				} else {
					fs.setCurlecRefNo(rec[31].toString());
				}


				fss.add(fs);

			}
			paginationBean.setItemList(fss);
			logger.info("No of Records in the PAYOUT_DETAIL : " + paginationBean.getItemList().size());
		} catch (Exception e) {
			logger.info("Exception in Payout login dao imp " + e.getMessage() + " " + e);
			paginationBean.setItemList(new ArrayList<>());

		}

	}

	// PAYOUT BALANCE

	@Override
	public void loadPayoutbalance(PaginationBean<PayoutModel> paginationBean, Long id) {

		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();

		String sql1 = null;
		sql1 = "SELECT t1.NET_AMOUNT, t1.MERCHANTID, t1.DEPOSIT_AMOUNT, t1.SETTLEMENT_DATE, t1.TOTAL_AMOUNT,t1.BALANCE_NET_AMOUNT,t1.OVERDRAFT_AMOUNT FROM mobiversa.SETTLEMENT_BALANCE t1 INNER JOIN MERCHANT t2 ON t1.MERCHANTID = t2.ID WHERE t2.ID= "
				+ id;

		logger.info("Query : " + sql1);

		logger.info("***********" + fss);

		logger.info("***********" + id);

		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);// .addEntity(ForSettlement.class);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery1.list();
		for (Object[] rec : resultSet) {

			PayoutModel fs = new PayoutModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setNetAmount("");

			} else if (rec[0] != null) {

				String NetAmt = rec[0].toString();
				String amountWithoutCommas = NetAmt.replace(",", "");
				double amount;
				try {
					NumberFormat numberFormat = NumberFormat.getInstance();
					amount = numberFormat.parse(amountWithoutCommas).doubleValue();
				} catch (ParseException e) {
					logger.info("Invalid Net amount format: " + NetAmt);
					return;
				}

				// Format the amount with comma separators
				DecimalFormat decimalFormat = new DecimalFormat("##,##,##0.00");
				String formattedNetAmount = decimalFormat.format(amount);

				logger.info("Formatted Net amount: " + formattedNetAmount);

				fs.setNetAmount(formattedNetAmount);
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setMerchantId("");
			}

			else if (rec[1] != null) {

				fs.setMerchantId(rec[1].toString());

			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setDepositamount("");

			} else if (rec[2] != null) {

				String deposit = rec[2].toString();
				String amountWithoutCommas = deposit.replace(",", "");
				double amount;
				try {
					NumberFormat numberFormat = NumberFormat.getInstance();
					amount = numberFormat.parse(amountWithoutCommas).doubleValue();
				} catch (ParseException e) {
					logger.info("Invalid Deopsit amount format: " + deposit);
					return;
				}

				// Format the amount with comma separators
				DecimalFormat decimalFormat = new DecimalFormat("##,##,##0.00");
				String formattedDepositAmount = decimalFormat.format(amount);

				logger.info("Formatted Deposit amount: " + formattedDepositAmount);

				fs.setDepositamount(formattedDepositAmount);
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setSettlementdate("");

			} else if (rec[3] != null) {

				fs.setSettlementdate(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setTotalamount("");

			} else

			if (rec[4] != null) {

				String TotalAmt = rec[4].toString();
				String amountWithoutCommas = TotalAmt.replace(",", "");
				double amount;
				try {
					NumberFormat numberFormat = NumberFormat.getInstance();
					amount = numberFormat.parse(amountWithoutCommas).doubleValue();
				} catch (ParseException e) {
					logger.info("Invalid Total amount format: " + TotalAmt);
					return;
				}

				// Format the amount with comma separators
				DecimalFormat decimalFormat = new DecimalFormat("##,##,##0.00");
				String formattedTotalAmount = decimalFormat.format(amount);

				logger.info("Formatted Total amount: " + formattedTotalAmount);

				fs.setTotalamount(formattedTotalAmount);

			}

			if (rec[5] != null) {

				String BalanceNetAmt = rec[5].toString();
				String amountWithoutCommas = BalanceNetAmt.replace(",", "");
				double amount;
				try {
					NumberFormat numberFormat = NumberFormat.getInstance();
					amount = numberFormat.parse(amountWithoutCommas).doubleValue();
				} catch (ParseException e) {
					logger.info("Invalid Total amount format: " + BalanceNetAmt);
					return;
				}

				// Format the amount with comma separators
				DecimalFormat decimalFormat = new DecimalFormat("##,##,##0.00");
				String formattedTotalAmount = decimalFormat.format(amount);

				logger.info("Formatted Total amount: " + formattedTotalAmount);

				fs.setBalanceNetAmt(formattedTotalAmount);

			}
//	             if (rec[5] == null || rec[5].toString().isEmpty()) {
//
//	                 fs.setMid("");
//
//	          } else
//
//	          if (rec[5] != null) {
//
//	                 fs.setMid(rec[5].toString());
//
//	          }

			if (rec[6] != null) {

				String overdraftNetAmt = rec[6].toString();
				String amountWithoutCommas = overdraftNetAmt.replace(",", "");
				double overdraftamount;
				try {
					NumberFormat numberFormat = NumberFormat.getInstance();
					overdraftamount = numberFormat.parse(amountWithoutCommas).doubleValue();
				} catch (ParseException e) {
					logger.info("Invalid overdraft amount format: " + overdraftNetAmt);
					return;
				}

				// Format the amount with comma separators
				DecimalFormat decimalFormat = new DecimalFormat("##,##,##0.00");
				String formattedTotalAmount = decimalFormat.format(overdraftamount);

				logger.info("Formatted overdraft amount: " + formattedTotalAmount);

				fs.setOverDraftAmt(formattedTotalAmount);

			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in the PAYOUT_BALANCE : " + paginationBean.getItemList().size());

	}

	@Override
	public List<Settlementbalance> loadbankbalance() {

		List<Settlementbalance> balancedetails = new ArrayList<>();

		logger.info("No of Records in the PAYOUT_BALANCE : ");

		String sql1 = null;
		sql1 = "SELECT b.AMOUNT,b.UPDATED_DATE,b.BANK_ACC_NO FROM mobiversa.PAYOUT_BANK_BALANCE b";

		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);
		logger.info("No of Records " + sqlQuery1);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery1.list();
		for (Object[] rec : resultSet) {

			Settlementbalance fs = new Settlementbalance();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fs.setAmount("");
			} else if (rec[0] != null) {
				logger.info("amount : " + rec[0].toString());

				String amount = rec[0].toString();
				String amountWithoutCommas = amount.replace(",", "");
				double amount1 = 0.00;
				try {
					NumberFormat numberFormat = NumberFormat.getInstance();
					amount1 = numberFormat.parse(amountWithoutCommas).doubleValue();
				} catch (ParseException e) {
					logger.info("Invalid OverDraftAmt format: " + e);

				}

				// Format the amount with comma separators
				logger.info("amount in double formate : " + amount1);
				DecimalFormat decimalFormat = new DecimalFormat("##,##,##0.00");
				String formattedDraftAmount = decimalFormat.format(amount1);

				logger.info("Formatted OverDraft amount: " + formattedDraftAmount);

				fs.setAmount(formattedDraftAmount);
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setUpdatedDate("");
			} else if (rec[1] != null) {
				fs.setUpdatedDate(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setBankAccNumber("");
			} else if (rec[2] != null) {
				fs.setBankAccNumber(rec[2].toString());
			}
			balancedetails.add(fs);
		}

		return balancedetails;

	}

	@Override
	public PayoutBankBalance oldbankbalance() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> tocheckholidayList(String currentDate1) {

		List<HolidayHistory> checkholiday = (List<HolidayHistory>) sessionFactory.getCurrentSession()
				.createCriteria(HolidayHistory.class).list();
		Set<String> holidayDates = new HashSet<>();
		for (HolidayHistory holiday : checkholiday) {
			holidayDates.add(holiday.getLeaveDate());
		}

		// Get current date
		LocalDate currentDate = LocalDate.now();
		int workdays = 5;
		int addedDays = 0;
		List<String> finalSettleDates = new ArrayList<>();

		while (addedDays < workdays) {
			currentDate = currentDate.plusDays(1);

			if (currentDate.getDayOfWeek() != DayOfWeek.SATURDAY && currentDate.getDayOfWeek() != DayOfWeek.SUNDAY) {
				// Check if the date is not a holiday
				if (!holidayDates.contains(currentDate.toString())) {
					finalSettleDates.add(currentDate.toString());
					++addedDays;
				}
			}
		}
		return finalSettleDates;
	}

	@Override
	public List<FpxTransaction> loadRefundAndSettlementdatebyFpx(String settlementdate, Merchant merchant) {

		String fpxformatcurrentdate = null;
		logger.info("settlementdate : " + settlementdate);
		try {
			fpxformatcurrentdate = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		logger.info("fpxformatcurrentdate : " + fpxformatcurrentdate);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null, fpxmid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
			logger.info("umMid : " + umMid);
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
			logger.info("umEzywayMid : " + umEzywayMid);
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
			logger.info("umMotoMid : " + umMotoMid);
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
			logger.info("umEzyrecMid : " + umEzyrecMid);
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();
			logger.info("umEzypassMid : " + umEzypassMid);

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
			logger.info("splitMid : " + splitMid);
		}
		if (merchant.getMid().getFpxMid() != null) {
			fpxmid = merchant.getMid().getFpxMid();
			logger.info("fpxmid : " + fpxmid);
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyFPX  ");

		ArrayList<FpxTransaction> Fpxtransactionlist = new ArrayList<FpxTransaction>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.FPX_TRANSACTION e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid,:fpxmid) and e.STATUS in ('S','H') and e.SETTLED_DATE = :fpxformatcurrentdate and e.DEBITAUTHCODE = '00' and e.REASON is null ";

		logger.info("Fpx Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);
		sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("fpxformatcurrentdate", fpxformatcurrentdate);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			FpxTransaction fpxdata = new FpxTransaction();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				fpxdata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fpxdata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fpxdata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fpxdata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fpxdata.setPayableAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {
				if (rec[4].toString().equals("S")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					fpxdata.setPayableAmt(rec[2].toString());
				} else {
					fpxdata.setPayableAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				fpxdata.setSettledDate("");
			} else if (rec[3] != null || rec[3] != "") {

				fpxdata.setSettledDate(rec[3].toString());
			}

			Fpxtransactionlist.add(fpxdata);

		}

		return Fpxtransactionlist;
	}

	@Override
	public List<GrabPayFile> loadRefundAndSettlementdatebyGrabpay(String settlementdate, Merchant merchant) {

		long currentMerchantid = merchant.getId();

		logger.info(" currentMerchantid " + currentMerchantid);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyGrabpay  ");

		ArrayList<GrabPayFile> GrabPayfile = new ArrayList<GrabPayFile>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR),2),',',''),replace(round(sum(e.NETAMT),2),',',''),e.SETTLEMENT_DATE,e.STATUS from mobiversa.GRABPAY_FILE e where e.MERCHANTID = :currentMerchantid and e.STATUS in ('A') and e.SETTLEMENT_DATE like '"
				+ settlementdate + "%' and e.REASON is null ";

		logger.info("Grabpay Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setLong("currentMerchantid", currentMerchantid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			GrabPayFile grabpaydata = new GrabPayFile();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				grabpaydata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				grabpaydata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				grabpaydata.setMdr("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				grabpaydata.setMdr(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				grabpaydata.setNetAmt("0.00");
			} else if (rec[2] != null || rec[2] != "") {

				if (rec[4].toString().equals("A")) {
//					Double d = new Double(rec[2].toString());
//					String pattern = "#,##0.00";
//					DecimalFormat myFormatter = new DecimalFormat(pattern);
//					String output = myFormatter.format(d);
					grabpaydata.setNetAmt(rec[2].toString());

				} else {
					grabpaydata.setNetAmt("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				grabpaydata.setSettlementDate("");
			} else if (rec[3] != null || rec[3] != "") {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				grabpaydata.setSettlementDate(rd);
			}

			GrabPayfile.add(grabpaydata);

		}

		return GrabPayfile;
	}

	@Override
	public List<BoostDailyRecon> loadRefundAndSettlementdatebyBoost(String settlementdate, Merchant merchant) {

		String formatcurrentdate = null;
		try {
			formatcurrentdate = new SimpleDateFormat("yyyyMMdd")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		logger.info(" formatcurrentdate " + formatcurrentdate);

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null, boostmid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		if (merchant.getMid().getBoostMid() != null) {
			boostmid = merchant.getMid().getBoostMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyBoost  ");

		ArrayList<BoostDailyRecon> boostdlyrecon = new ArrayList<BoostDailyRecon>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDRAMOUNT),2),',',''),replace(round(sum(e.NETAMOUNT),2),',',''),e.SETTLE_DATE,e.PAYMENT from mobiversa.BOOST_DLY_RECON e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid,:boostmid) and e.PAYMENT in ('S','A') and e.SETTLE_DATE LIKE '"
				+ formatcurrentdate + "%' and e.REASON is null ";

		logger.info("Boost Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);
		sqlQuery.setString("boostmid", boostmid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			BoostDailyRecon boostdata = new BoostDailyRecon();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				boostdata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				boostdata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				boostdata.setMdrAmount("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				boostdata.setMdrAmount(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				boostdata.setNetAmount("0.00");
			} else if (rec[2] != null || rec[2] != "") {

				if (rec[4].toString().equals("S")) {
//						Double d = new Double(rec[2].toString());
//						String pattern = "#,##0.00";
//						DecimalFormat myFormatter = new DecimalFormat(pattern);
//						String output = myFormatter.format(d);
					boostdata.setNetAmount(rec[2].toString());

				} else {
					boostdata.setNetAmount("0.00");
				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				boostdata.setSettleDate("");
			} else if (rec[3].toString().contains("T")) {
				String rd = null;
				String rt = null;
				rd = rec[3].toString().substring(0, 8);

				logger.info("rd" + rd);

				try {
					rt = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				logger.info("rt" + rt);

				boostdata.setSettleDate(rt);
			}

			boostdlyrecon.add(boostdata);

		}
		return boostdlyrecon;

	}

	@Override
	public List<SettlementMDR> loadRefundAndSettlementdatebyCard(String settlementdate, Merchant merchant) {

		String umMid = null, umEzywayMid = null, umMotoMid = null, umEzyrecMid = null, umEzypassMid = null,
				splitMid = null;

		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid();
		}
		if (merchant.getMid().getUmEzyrecMid() != null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid() != null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();

		}

		if (merchant.getMid().getSplitMid() != null) {
			splitMid = merchant.getMid().getSplitMid();
		}

		logger.info(" Inside loadNetAmountandsettlementdatebyCard  ");

		ArrayList<SettlementMDR> settlementmdr = new ArrayList<SettlementMDR>();

		String sql = "select replace(round(sum(e.TXN_AMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.NET_AMOUNT),2),',',''),e.SETTLEMENTDATE,e.STATUS from mobiversa.SETTLEMENT_MDR e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid,:splitMid) and e.STATUS in ('S','SLS','H') and e.SETTLEMENTDATE LIKE '"
				+ settlementdate + "%' and e.REASON is null ";

		logger.info("Card Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("umEzyrecMid", umEzyrecMid);
		sqlQuery.setString("umEzypassMid", umEzypassMid);
		sqlQuery.setString("splitMid", splitMid);

		logger.info("umMid :" + umMid);
		logger.info("umEzywayMid :" + umEzywayMid);
		logger.info("umMotoMid :" + umMotoMid);
		logger.info("umEzyrecMid :" + umEzyrecMid);
		logger.info("umEzypassMid :" + umEzypassMid);
		logger.info("splitMid :" + splitMid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			SettlementMDR settledata = new SettlementMDR();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				settledata.setTxnAmount("");
			} else if (rec[0] != null || rec[0] != "") {
				Double d = new Double(rec[0].toString());
				String pattern = "##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				settledata.setTxnAmount(output);
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				settledata.setMdrAmt("");
			} else if (rec[1] != null || rec[1] != "") {
				Double d = new Double(rec[1].toString());
				String pattern = "##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				settledata.setMdrAmt(output);
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {
				settledata.setNetAmount("0.00");
			} else if (rec[2] != null || rec[2] != "") {

				if (rec[4].toString().equals("S") || rec[4].toString().equals("SLS")) {
					// Double d = new Double(rec[2].toString());
					// String pattern = "#,##0.00";
					// DecimalFormat myFormatter = new DecimalFormat(pattern);
					// String output = myFormatter.format(d);
					settledata.setNetAmount(rec[2].toString());
				} else {

					settledata.setNetAmount("0.00");

				}

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				settledata.setSettlementDate("");
			} else if (rec[3] != null || rec[3] != "") {

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				settledata.setSettlementDate(rd);

			}

			settlementmdr.add(settledata);

		}
		return settlementmdr;

	}

	@Override
	public void listRefund(PaginationBean<RefundRequest> paginationBean, String date) {

		logger.info(" Inside listRefund ");
		logger.info(" date " + date);

		ArrayList<RefundRequest> refundRequestList = new ArrayList<RefundRequest>();

		String sql = "SELECT r.INITIATE_DATE,r.REQUEST_REFUND_AMOUNT,r.TXN_ID,r.BUSINESS_NAME,r.`STATUS`,r.`MID`,r.PRODUCT_TYPE FROM mobiversa.REFUND_REQUEST r WHERE r.STATUS IN ('RI','RIP','RS')";

		logger.info("List refund Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");

		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();

		logger.info("Page Number:" + pageNumFromJsp);

		logger.info("Max Count for Records:" + pageSize);
		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);

		sqlQuery.setMaxResults(pageSize);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			RefundRequest refund = new RefundRequest();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				refund.setInitiateDate("");
			} else if (rec[0] != null || rec[0] != "") {

				refund.setInitiateDate(rec[0].toString());

			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				refund.setRequestRefundAmount("");
			} else if (rec[1] != null || rec[1] != "") {

				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				refund.setRequestRefundAmount(output);
			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {
				refund.setTxnId("");
			} else if (rec[2] != null || rec[2] != "") {

				refund.setTxnId(rec[2].toString());

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				refund.setMerchantName("");
			} else if (rec[3] != null || rec[3] != "") {

				refund.setMerchantName(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				refund.setStatus("");
			} else if (rec[4] != null || rec[4] != "") {
				refund.setStatus(rec[4].toString());
			}
			if (rec[5] == null || rec[5].toString().isEmpty()) {
				refund.setMid("");
			} else if (rec[5] != null || rec[5] != "") {

				refund.setMid(rec[5].toString());

			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				refund.setProductType("");
			} else if (rec[6] != null || rec[6] != "") {

				refund.setProductType(rec[6].toString());

			}

			refundRequestList.add(refund);

		}

		paginationBean.setItemList(refundRequestList);

	}

	@Override
	public void searchRefundTransaction(PaginationBean<RefundRequest> paginationBean, String transactionId,
			String selectType) {

		logger.info(" Inside listRefund ");

		ArrayList<RefundRequest> refundRequestList = new ArrayList<RefundRequest>();
		Query sqlQuery = null;

		if (selectType.equalsIgnoreCase("transactionId")) {
			logger.info(" transactionId " + transactionId);
			String sql = "SELECT r.INITIATE_DATE,r.REQUEST_REFUND_AMOUNT,r.TXN_ID,r.BUSINESS_NAME,r.`STATUS`,r.`MID`,r.PRODUCT_TYPE  FROM mobiversa.REFUND_REQUEST r WHERE r.STATUS IN ('RI','RIP','RS') AND r.TXN_ID like '"
					+ transactionId + "%'";

			logger.info("List refund Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (selectType.equalsIgnoreCase("invoiceId")) {
			logger.info(" invoice Id " + transactionId);
			String sql = "SELECT r.INITIATE_DATE,r.REQUEST_REFUND_AMOUNT,r.TXN_ID,r.BUSINESS_NAME,r.`STATUS`,r.`MID`,r.PRODUCT_TYPE  FROM mobiversa.REFUND_REQUEST r WHERE r.STATUS IN ('RI','RIP','RS') AND r.INVOICE_ID like '"
					+ transactionId + "%'";

			logger.info("List refund Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());
		for (Object[] rec : resultSet) {

			RefundRequest refund = new RefundRequest();

			if (rec[0] == null || rec[0].toString().isEmpty()) {
				refund.setInitiateDate("");
			} else if (rec[0] != null || rec[0] != "") {

				refund.setInitiateDate(rec[0].toString());

			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				refund.setRequestRefundAmount("");
			} else if (rec[1] != null || rec[1] != "") {

				Double d = new Double(rec[1].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				refund.setRequestRefundAmount(output);
			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {
				refund.setTxnId("");
			} else if (rec[2] != null || rec[2] != "") {

				refund.setTxnId(rec[2].toString());

			}
			if (rec[3] == null || rec[3].toString().isEmpty()) {
				refund.setMerchantName("");
			} else if (rec[3] != null || rec[3] != "") {

				refund.setMerchantName(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {
				refund.setStatus("");
			} else if (rec[4] != null || rec[4] != "") {
				refund.setStatus(rec[4].toString());
			}
			if (rec[5] == null || rec[5].toString().isEmpty()) {
				refund.setMid("");
			} else if (rec[5] != null || rec[5] != "") {

				refund.setMid(rec[5].toString());

			}
			if (rec[6] == null || rec[6].toString().isEmpty()) {
				refund.setMid("");
			} else if (rec[6] != null || rec[6] != "") {

				refund.setMid(rec[6].toString());

			}

			refundRequestList.add(refund);

		}

		paginationBean.setItemList(refundRequestList);

	}

	@Override
	public void merchantFpxtranscationSearch(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String fpxmid,
			String ummotomid, String mid, String txnType, Merchant merchant, String value) {
		logger.info(" FPX Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;
//            String paydeeEzywaymid = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		String searchValue = value;

		String Ezywaymid = umEzywayMid;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now();
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (txnType.equals("FPX")) {
			logger.info("*** FPX *** :");
//                   sql = "select a.MID AS MID,'' AS EXPDATE ,a.AMOUNT AS AMOUNT,'' AS TID,'' AS MASKED_PAN ,a.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,a.AID_RESPONSE AS AID_RESPONSE, "
//                                 + "a.RRN AS RRN,a.TIME_STAMP AS TIME_STAMP,c.BUSINESS_NAME AS BUSINESS_NAME ,a.INVOICE_ID AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,'' AS NETAMOUNT ,'' AS MDRAMT,'' AS SETTLEMENT_DATE , a.TXN_TYPE AS TXN_TYPE , 'NULL' AS BANK_NAME , '' AS EZYSETTLEAMOUNT , a.SUB_MERCHANT_MID AS SUB_MERCHANT_MID"
//                                 + " from MID m INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//                                 + "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
//                                 + "WHERE (m.UM_EZYWAY_MID=:Ezywaymid OR m.GRAB_MID = :grabmid OR m.EZYWAY_MID=:paydeeEzywaymid OR m.MID=:mid OR m.MOTO_MID = :mid OR m.EZYWAY_MID = :mid OR m.EZYREC_MID = :mid OR m.UM_MID=:ummid OR m.UM_MOTO_MID=:motomid OR m.UM_EZYREC_MID=:ezyrecmid) and (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') and a.STATUS in ('GPS','GRF','GBC','GPT') and "
//                                 + "a.TIME_STAMP BETWEEN :from and :to order by a.TIME_STAMP desc ";
			sql = "select f.MID AS MID,'NULL' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID ,f.SELLEREXORDERNO AS PPID "
					+ "from FPX_TRANSACTION f " + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) And f.TIME_STAMP BETWEEN "
					+ " :from and :to order by f.TIME_STAMP desc";

			logger.info("FPX Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);
			logger.info("FROM date :" + from);
			logger.info("to date :" + to);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + ummotomid);
			logger.info("mid :" + mid);
			logger.info("fpxmid :" + fpxmid);
			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

//
//            int pageSize = 10; 
////          int pageNumFromJsp = paginationBean.getCurrPage();
////          logger.info("Page Number:" + pageNumFromJsp);
//
//            sqlQuery.setFirstResult((1*pageSize)-pageSize);
//            sqlQuery.setMaxResults(pageSize);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		else if (txnType.equals("FPX1")) {

			logger.info("<===SEARCH FPX By REF No ===>");

			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID,f.SELLEREXORDERNO AS PPID "
					+ "from FPX_TRANSACTION f "
					+ "WHERE f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) AND f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND f.SELLERORDERNO like '"
					+ searchValue + "%' ";

			logger.info("Search Fpx Query for Ref No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);

			logger.info("Ezywaymid for Reference search :" + Ezywaymid);
			logger.info("motomid for Reference search :" + ummotomid);
			logger.info("mid for Reference search :" + mid);
			logger.info("Reference Number in Query :" + searchValue);
			// sqlQuery.setString("refNo", REF_No);

		}

		else if (txnType.equals("FPX2")) {

			logger.info("<===SEARCH FPX BY APPROVAL CODE ===>");

			sql = "select f.MID AS MID,'' AS EXPDATE ,f.TXNAMOUNT AS AMOUNT,f.TID AS TID,'' AS MASKED_PAN ,f.STATUS AS STATUS,'' AS MRN,'' AS TDT,'' AS TTM,f.FPXTXNID AS AID_RESPONSE, "
					+ " '' AS RRN,f.TIME_STAMP AS TIME_STAMP,'' AS BUSINESS_NAME ,f.SELLERORDERNO AS INVOICE_ID,'' AS CARD_HOLDER_NAME,'' AS FRAUD_SCORE,''AS FRAUD_ID,f.PAYABLEAMT AS NETAMOUNT ,f.MDR_AMT AS MDRAMT,f.SETTLED_DATE AS SETTLE_DATE , 'FPX' AS TXN_TYPE , f.BANK_NAME AS BANK_NAME , f.EZYSETTLE_AMOUNT, f.SUB_MERCHANT_MID AS SUB_MERCHANT_MID,f.SELLEREXORDERNO AS PPID "
					+ "from FPX_TRANSACTION f "
					+ "WHERE f.MID IN (:Ezywaymid ,:fpxmid ,:motomid ,:mid) AND f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND "
					+ "f.FPXTXNID like '" + searchValue + "%' ";

			logger.info("Search Fpx Query for Approval Code: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);

			logger.info("Ezywaymid for APPROVAL search :" + Ezywaymid);
			logger.info("motomid for APPROVAL search :" + ummotomid);
			logger.info("mid for APPROVAL search :" + mid);

			logger.info("Approval Code in Query :" + searchValue);
			// sqlQuery.setString("refNo", REF_No);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null || rec[0] != "") {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null || rec[1] != "" || rec[1].equals("NULL")) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				if (rec[2].toString().contains(".")) {

					Double d = new Double(rec[2].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setF007_TXNAMT(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[2].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setF007_TXNAMT(output);

				}
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null || rec[3] != "") {

				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPAN("");
			} else if (rec[4] != null || rec[4] != "") {

				String rt = null;
				String rd = null;
				String lasteightDigits = null;

				if (rec[4].toString().contains("f")) {

					int panlength = rec[4].toString().length();

					String replacefpan = rec[4].toString().replace("f", "*");

					if (panlength > 13) {

						lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

					}
					fs.setPAN(lasteightDigits);
				}

			} else {

				fs.setPAN("");
			}

			if (rec[5] != null) {

				String status = rec[5].toString();

				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("BPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BPC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("GPS")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GRF")) {
					fs.setSTATUS("VOIDED");

				} else if (rec[5].toString().equals("GPT")) {
					fs.setSTATUS("SETTLED");

				} else if (rec[5].toString().equals("GBC")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("R")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("PR")) {
					fs.setSTATUS("REFUNDED");
				} else if (rec[5].toString().equals("H")) {
					fs.setSTATUS("EZYSETTLE");
				} else if (rec[5].toString().equals("PPA")) {
					fs.setSTATUS("PAYOUT");
				} else if (rec[5].toString().equals("TPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("SPA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("TPS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("SPS")) {
					fs.setSTATUS("SETTLED");
				}

				else if (rec[5].toString().equals("BNA")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("BNS")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("BNC")) {
					fs.setSTATUS("VOIDED");
				}
//						 else if (rec[5].toString().equals("00")) {
//								fs.setSTATUS("SETTLED");
//							}
//						 else if (rec[5].toString().equals("01")) {
//								fs.setSTATUS("NOT SETTLED");
//							}

			} else {
				fs.setSTATUS("NOT SETTLED");
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setF263_MRN("");
			} else if (rec[6] != null || rec[6] != "") {

				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setF011_AUTHIDRESP("");
			} else if (rec[9] != null) {

				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {

				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {

				String rd = null;
				String rt = "";

				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				logger.info("date : **" + rd);
				fs.setDate(rd);
				fs.setTime(rt);

			}
			if (rec[12] != null) {

				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setF268_CHNAME("");

			} else if (rec[14] != null) {

				fs.setF268_CHNAME(rec[14].toString());
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setFraudScore("");

			} else if (rec[15] != null || rec[15] != "") {

				if (rec[15].toString().equalsIgnoreCase("null")) {
					fs.setFraudScore("");
				} else {
					fs.setFraudScore(rec[15].toString());
				}

			} else {
				fs.setFraudScore("");
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setFraudId("");

			} else if (rec[16] != null || rec[16] != "") {

				if (rec[16].toString().equalsIgnoreCase("null")) {
					fs.setFraudId("");
				} else {
					fs.setFraudId(rec[16].toString());
				}

			} else {
				fs.setFraudId("");
			}

			// NEW FIELDS

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setNetAmount("");
			} else if (rec[17] != null || rec[17] != "") {

				Double d = new Double(rec[17].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setNetAmount(output);
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMdrAmt("");
			} else if (rec[18] != null || rec[18] != "") {

				Double d = new Double(rec[18].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setMdrAmt(output);
			}
			String rd = null;
			String rt = null;

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setSettlementDate("");
			} else if (rec[19] != null || rec[19] != "") {

				int datelength = rec[19].toString().length();

				if (datelength == 11) {
					fs.setSettlementDate(rec[19].toString());
				}

				else if (rec[19].toString().contains("T")) {
					rd = rec[19].toString().substring(0, 8);

					try {
						rt = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(rd));
					} catch (ParseException e) {
						e.printStackTrace();
					}

					fs.setSettlementDate(rt);
				} else if (datelength == 10) {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				} else {

					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[19].toString()));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					fs.setSettlementDate(rd);
				}
			} else {
				fs.setSettlementDate("");
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setCardType("");
			} else if (rec[20] != null) {

				if (rec[21].toString().equals("NULL")) {
					fs.setCardType(rec[20].toString());
				} else if (rec[21] != null && !rec[21].toString().isEmpty()) {
					fs.setCardType(rec[20].toString() + " - " + rec[21].toString());
				}

				else {
					fs.setCardType(rec[20].toString());
				}
			}

			else {
				fs.setCardType("");
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setEzysettleAmt("");
			} else if (rec[22] != null) {

				Double d = new Double(rec[22].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setEzysettleAmt(output);

			}
			if (rec[23] != null) {
				fs.setSubmerchantmid(rec[23].toString());
			} else {
				fs.setSubmerchantmid("");
			}
			if (rec[24] != null) {
				fs.setPpid(rec[24].toString());
			} else {
				fs.setPpid("");
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	@Transactional(readOnly = true)
	public void searchPayoutTransactionList(final PaginationBean<PayoutModel> paginationBean, final String payoutId) {
		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;

		Date now = new Date();
		Date currentDate = new DateTime(now).toDate();
		logger.info("Current Date : " + now + " : " + currentDate);
		String fromDate = new SimpleDateFormat("yyyy-MM-dd").format(currentDate);

		Query sqlQuery = null;

		logger.info("search query From " + payoutId);

		sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,"
				+ "p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.PAYOUT_ID = "
				+ payoutId + "";

		logger.info("Search Query : " + sql);
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {

			PayoutModel fs = new PayoutModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setCreatedby("");

			} else if (rec[0] != null) {
				fs.setCreatedby(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setCreateddate("");
			}

			else if (rec[1] != null) {

				// Sheik Changes

				String time = null;
				String date = null;
				String stamp = null;
				try {

					time = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					date = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (Exception e) {
					// TODO: handle exception
					logger.info("Time throws error and Can't extract time from date time payout detail table");
				}
				stamp = date + " " + time;
				fs.setCreateddate(stamp);

			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setModifieddate("");

			} else if (rec[2] != null) {

				fs.setModifieddate(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setPayeeaccnumber("");

			} else if (rec[3] != null) {

				fs.setPayeeaccnumber(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPayeebrn("");

			} else

			if (rec[4] != null) {

				fs.setPayeebrn(rec[4].toString());

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setPayeebankname("");

			} else

			if (rec[5] != null) {

				fs.setPayeebankname(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setPayeeemail("");

			} else

			if (rec[6] != null) {

				fs.setPayeeemail(rec[6].toString());

			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setPayeeic("");

			} else if (rec[7] != null) {

				fs.setPayeeic(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPayeemobile("");

			} else if (rec[8] != null) {
				fs.setPayeemobile(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setPayeename("");

			} else if (rec[9] != null) {
				fs.setPayeename(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setPayoutamount("");

			} else if (rec[10] != null) {
				Double d = new Double(rec[10].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setPayoutamount(output);

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {

				fs.setPayoutdate("");

			} else if (rec[11] != null) {

				String pdate = null;
				try {
					pdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));

				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setPayoutdate(pdate);

			}

			if (rec[12] == null) {

				fs.setPayoutstatus("Requested");

			} else if (rec[12] != null) {

				if (rec[12].toString().equals("A")) {
					fs.setPayoutstatus("To Process");

				} else if (rec[12].toString().equals("F")) {
					fs.setPayoutstatus("Failed");
				} else if (rec[12].toString().equals("S")) {
					fs.setPayoutstatus("Processing");
				} else if (rec[12].toString().equals("pp")) {
					fs.setPayoutstatus("Paid");
				} else if (rec[12].toString().equals("pd")) {
					fs.setPayoutstatus("Declined");
				}

			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {

				fs.setSettledate("");

			} else if (rec[13] != null) {

				String sdate = null;
				try {
					sdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setSettledate(sdate);
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setSettlenetamount("");

			} else if (rec[14] != null) {

				Double d = new Double(rec[14].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setSettlenetamount(output);
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setInvoiceidproof("");

			} else if (rec[15] != null) {
				fs.setInvoiceidproof(rec[15].toString());
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setPaymentreason("");

			} else if (rec[16] != null) {
				fs.setPaymentreason(rec[16].toString());
			}

			if (rec[17] == null || rec[17].toString().isEmpty()) {

				fs.setSourceoffund("");

			} else if (rec[17] != null) {
				fs.setSourceoffund(rec[17].toString());
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {

				fs.setSwiftifsccode("");

			} else if (rec[18] != null) {
				fs.setSwiftifsccode(rec[18].toString());
			}

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setMerchantId("");
			} else {
				fs.setMerchantId(rec[19].toString());
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setPaidTime("");
			} else {
				fs.setPaidTime(rec[20].toString());
			}

			if (rec[21] == null || rec[21].toString().isEmpty()) {
				fs.setPaidDate("");
			} else {
				fs.setPaidDate(rec[21].toString());
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setSubmerchantMid("");
			} else {
				fs.setSubmerchantMid(rec[22].toString());
			}
			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setMmId("");
			} else {
				fs.setMmId(rec[23].toString());
			}
			if (rec[24] == null || rec[24].toString().isEmpty()) {
				fs.setPayoutId("");
			} else {
				fs.setPayoutId(rec[24].toString());
			}
			if (rec[25] == null || rec[25].toString().isEmpty()) {
				fs.setFailurereason("");
			} else {
				fs.setFailurereason(rec[25].toString());
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in the PAYOUT_DETAIL : " + paginationBean.getItemList().size());

	}

	@Override
	public void listFPXSettlementsearchexport(PaginationBean<FpxTransaction> paginationBean, String from) {

		logger.info("Inside listFPXTransaction : " + from);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

//		sql = "SELECT f.FPXTXNID, f.TXNAMOUNT FROM mobiversa.FPX_TRANSACTION f WHERE f.DEBITAUTHCODE = '00' AND f.FPXTXNID LIKE :fromDatePrefix";
		sql = "SELECT f.FPXTXNID, f.TXNAMOUNT,f.SELLERORDERNO, f.TX_DATE,f.PAYABLEAMT,f.SETTLED_DATE FROM mobiversa.FPX_TRANSACTION f WHERE f.DEBITAUTHCODE = '00' AND f.FPXTXNID LIKE :fromDatePrefix";
		logger.info("Query: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("fromDatePrefix", from + "%");

		logger.info("Querylast : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxnAmount(rec[0].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[1] != null) {
				boostss.setFpxTxnId(rec[1].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[2] != null) {
				boostss.setSellerOrderNo(rec[2].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[3] != null) {
				boostss.setTxDate(rec[3].toString());
			} else {
				boostss.setTxDate("");
			}
			if (rec[4] != null) {
				boostss.setPayableAmt(rec[4].toString());
			} else {
				boostss.setPayableAmt("");
			}
			if (rec[5] != null) {
				boostss.setSettledDate(rec[5].toString());
			} else {
				boostss.setSettledDate("");
			}

			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void payoutTxnList(PaginationBean<PayoutModel> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1) {
		logger.info(" Grab Transaction : " + date + "  ");
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;

		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;

		String VALUE = date;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now();
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("*** PAYOUT TEST *** :");
		sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.MODIFIED_BY BETWEEN :from and :to ORDER BY p.REQUEST_DATE desc";

		logger.info("PAYOUT test Query : " + sql);
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		String FromDate = paginationBean.setDateFromBackend(from);
		String From1Date = paginationBean.setDate1FromBackend(to);
//			String TXNTYPE = paginationBean.setTXNtype(txnType);

		// Dynamic changes for pagination count

		String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
		int pageSize = Integer.parseInt(DynamicPage);

		int pageNumFromJsp = paginationBean.getCurrPage();
		logger.info("Page Number:" + pageNumFromJsp);
		logger.info("Max Count for Records:" + pageSize);

		sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
		sqlQuery.setMaxResults(pageSize);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			PayoutModel fs = new PayoutModel();

			if (rec[0] == null || rec[0].toString().isEmpty()) {

				fs.setCreatedby("");

			} else if (rec[0] != null) {
				fs.setCreatedby(rec[0].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setCreateddate("");
			}

			else if (rec[1] != null) {
				String time = null;
				String date2 = null;
				String stamp = null;
				try {

					time = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					date2 = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (Exception e) {
					// TODO: handle exception
					logger.info("Time throws error and Can't extract time from date time payout detail table");
				}
				stamp = date2 + " " + time;
				fs.setCreateddate(stamp);

			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setModifieddate("");

			} else if (rec[2] != null) {

				fs.setModifieddate(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setPayeeaccnumber("");

			} else if (rec[3] != null) {

				fs.setPayeeaccnumber(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPayeebrn("");

			} else

			if (rec[4] != null) {

				fs.setPayeebrn(rec[4].toString());

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setPayeebankname("");

			} else

			if (rec[5] != null) {

				fs.setPayeebankname(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setPayeeemail("");

			} else

			if (rec[6] != null) {

				fs.setPayeeemail(rec[6].toString());

			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setPayeeic("");

			} else if (rec[7] != null) {

				fs.setPayeeic(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPayeemobile("");

			} else if (rec[8] != null) {
				fs.setPayeemobile(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setPayeename("");

			} else if (rec[9] != null) {
				fs.setPayeename(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setPayoutamount("");

			} else if (rec[10] != null) {
				Double d = new Double(rec[10].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setPayoutamount(output);

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {

				fs.setPayoutdate("");

			} else if (rec[11] != null) {

				String pdate = null;
				try {
					pdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));

				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setPayoutdate(pdate);

			}

			if (rec[12] == null) {

				fs.setPayoutstatus("Requested");

			} else if (rec[12] != null) {

				if (rec[12].toString().equals("A")) {
					fs.setPayoutstatus("To Process");

				} else if (rec[12].toString().equals("F")) {
					fs.setPayoutstatus("Failed");
				} else if (rec[12].toString().equals("S")) {
					fs.setPayoutstatus("Processing");
				} else if (rec[12].toString().equals("pp")) {
					fs.setPayoutstatus("Paid");
				} else if (rec[12].toString().equals("pd")) {
					fs.setPayoutstatus("Declined");
				}

			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {

				fs.setSettledate("");

			} else if (rec[13] != null) {

				String sdate = null;
				try {
					sdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setSettledate(sdate);
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setSettlenetamount("");

			} else if (rec[14] != null) {

				Double d = new Double(rec[14].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setSettlenetamount(output);
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setInvoiceidproof("");

			} else if (rec[15] != null) {
				fs.setInvoiceidproof(rec[15].toString());
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setPaymentreason("");

			} else if (rec[16] != null) {
				fs.setPaymentreason(rec[16].toString());
			}

			if (rec[17] == null || rec[17].toString().isEmpty()) {

				fs.setSourceoffund("");

			} else if (rec[17] != null) {
				fs.setSourceoffund(rec[17].toString());
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {

				fs.setSwiftifsccode("");

			} else if (rec[18] != null) {
				fs.setSwiftifsccode(rec[18].toString());
			}

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setMerchantId("");
			} else {
				fs.setMerchantId(rec[19].toString());
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setPaidTime("");
			} else {
				fs.setPaidTime(rec[20].toString());
			}

			if (rec[21] == null || rec[21].toString().isEmpty()) {
				fs.setPaidDate("");
			} else {
				fs.setPaidDate(rec[21].toString());
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setSubmerchantMid("");
			} else {
				fs.setSubmerchantMid(rec[22].toString());
			}
			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setMmId("");
			} else {
				fs.setMmId(rec[23].toString());
			}
			if (rec[24] == null || rec[24].toString().isEmpty()) {
				fs.setPayoutId("");
			} else {
				fs.setPayoutId(rec[24].toString());
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public GrabPayFile loadGrabPayFile(String rrn) {

		return (GrabPayFile) sessionFactory.getCurrentSession().createCriteria(GrabPayFile.class)
				.add(Restrictions.eq("partnerId", rrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public String getTotalRefundAmountProcessed(String settlementDate, String merchant) {

		String refundNet = (String) sessionFactory.getCurrentSession().createCriteria(RefundRequest.class)
				.add(Restrictions.eq("mid", merchant)).add(Restrictions.eq("settlementDate", settlementDate))
				.setProjection(Projections.sum("requestRefundAmount")).setMaxResults(1).uniqueResult();

		if (refundNet != null) {

		} else {
			refundNet = "0";
		}

		return refundNet;
	}

	@Override
	public List<Object[]> getBusinessNamesAndUsernames() {
		String sql = "SELECT f.BUSINESS_NAME, f.USERNAME FROM mobiversa.MERCHANT f ORDER BY f.BUSINESS_NAME ASC";

		logger.info("Query: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		logger.info("Query Runned Successfully: " + sql);
		return resultSet;
	}

//FpxMonthlySettlementSummaryexport

	@Override
	public void FpxMonthlySettlementSummaryexport(PaginationBean<FpxTransaction> paginationBean, String from,
			String businessName, String username) {

		logger.info("Inside listFPXTransaction : " + from);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		sql = "SELECT f.MID, f.TID, f.TX_DATE, f.TXNAMOUNT, f.MDR_AMT, f.MOBI_MDR_AMT, f.HOST_MDR_AMT, f.PAYABLEAMT, f.SETTLED_DATE FROM mobiversa.MERCHANT m "
				+ "JOIN mobiversa.MID mi ON m.MID_FK = mi.ID JOIN mobiversa.FPX_TRANSACTION f ON (mi.FPX_MID = f.MID OR mi.UM_EZYWAY_MID = f.MID OR mi.UM_MOTO_MID = f.MID) "
				+ "WHERE m.USERNAME = :username AND f.DEBITAUTHCODE = '00' AND f.TIME_STAMP LIKE :fromDatePrefix";

		logger.info("Query: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("fromDatePrefix", from + "%");
		sqlQuery.setString("username", username);

		logger.info("Username: " + username);
		logger.info("Querylast : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setMid(rec[0].toString());
			} else {
				boostss.setMid("");
			}

			if (rec[1] != null) {
				boostss.setTid(rec[1].toString());
			} else {
				boostss.setTid("");
			}

			if (rec[2] != null) {
				boostss.setTxDate(rec[2].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setMdrAmt(rec[4].toString());
			} else {
				boostss.setMdrAmt("");
			}

			if (rec[5] != null) {
				boostss.setMobiMdrAmt(rec[5].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[6] != null) {
				boostss.setHostMdrAmt(rec[6].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[7] != null) {
				boostss.setPayableAmt(rec[7].toString());
			} else {
				boostss.setPayableAmt("");
			}

			if (rec[8] != null) {
				boostss.setSettledDate(rec[8].toString());
			} else {
				boostss.setSettledDate("");
			}

			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// BoostMonthlySettlementSummaryexport

	@Override
	public void BoostMonthlySettlementSummaryexport(PaginationBean<BoostDailyRecon> paginationBean, String from,
			String businessName, String username) {

		logger.info("Inside listboostdlyrecon : " + from);

		ArrayList<BoostDailyRecon> fss = new ArrayList<BoostDailyRecon>();
		String sql = null;

		sql = "SELECT f.DATE, f.ONLINEPTRTXNID, f.TXNAMOUNT, f.MDRAMOUNT, f.MDRREBATEAMOUNT, f.NETAMOUNT,  f.SETTLE_DATE "
				+ " FROM mobiversa.MERCHANT m JOIN mobiversa.MID mi ON m.MID_FK = mi.ID JOIN mobiversa.BOOST_DLY_RECON f ON (mi.BOOST_MID = f.MID OR mi.UM_EZYWAY_MID = f.MID OR mi.UM_MOTO_MID = f.MID)"
				+ " WHERE m.USERNAME = :username AND f.DATE LIKE :fromDatePrefix ";

		logger.info("Query: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("fromDatePrefix", from + "%");
		sqlQuery.setString("username", username);

		logger.info("Username: " + username);
		logger.info("Querylast : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BoostDailyRecon boostss = new BoostDailyRecon();

			if (rec[0] != null) {
				boostss.setDate(rec[0].toString());
			} else {
				boostss.setDate("");
			}

			if (rec[1] != null) {
				boostss.setOnlinePtrTxnID(rec[1].toString());
				;
			} else {
				boostss.setOnlinePtrTxnID("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setMdrAmount(rec[3].toString());
			} else {
				boostss.setMdrAmount("");
			}

			if (rec[4] != null) {
				boostss.setMdrRebateAmount(rec[4].toString());
			} else {
				boostss.setMdrRebateAmount("");
			}

			if (rec[3] != null && rec[4] != null) {
				// Assuming rec[5] is MDRAMOUNT and rec[6] is MDRREBATEAMOUNT
				BigDecimal mobiMdrAmt = new BigDecimal(rec[3].toString()).add(new BigDecimal(rec[4].toString()));
				boostss.setMdrRate(mobiMdrAmt.toString());
			} else {
				boostss.setMdrRate("");
			}

			if (rec[5] != null) {
				boostss.setNetAmount(rec[5].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[6] != null) {
				boostss.setSettleDate(rec[6].toString());
			} else {
				boostss.setSettleDate("");
			}

			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public List<String> getHostBankList() {

		ArrayList<String> bankList = new ArrayList<String>();

//		String sql = "SELECT b.BANK_NAME FROM mobiversa.host_bank_details b";
		String sql = "SELECT b.BANK_NAME FROM mobiversa.HOST_BANK_DETAILS b";
		logger.info("Query: " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		@SuppressWarnings("unchecked")
		List<String> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		return resultSet;
	}

	@Override
	public String getSellerIdByBankName(String selectedBank) {

//		String sql = "SELECT b.SELLER_ID FROM mobiversa.host_bank_details b WHERE b.BANK_NAME = :selectedBank";

		String sql = "SELECT b.SELLER_ID FROM mobiversa.HOST_BANK_DETAILS b WHERE b.BANK_NAME = :selectedBank";

		logger.info("Get SellerId By BankName : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("selectedBank", selectedBank);

		String sellerId = (String) sqlQuery.uniqueResult();
		logger.info("Bank : " + selectedBank + ",SellerID : " + sellerId);

		return sellerId;
	}

	@Override
	public List<Object[]> loadpayoutTxn(String invoiceid) {

		String sql = "SELECT p.CREATED_DATE,p.PAYOUT_AMOUNT,p.PAYOUTTYPE,p.INVOICE_ID_PROOF,p.SRCREFNO,p.PAYOUT_STATUS,p.FAILUREREASON,m.BUSINESS_NAME,p.PAYMENTDESCRIPTION FROM mobiversa.PAYOUT_DETAIL p "
				+ "JOIN mobiversa.MERCHANT m ON m.ID=p.MERCHANT_FK WHERE p.INVOICE_ID_PROOF= :invoiceid";

		logger.info("Query: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setParameter("invoiceid", invoiceid);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		logger.info("Query Runned Successfully: " + sql);
		return resultSet;
	}

	@Override
	public void listPayoutIdSearchApi(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String Txntype, String VALUE) {
		// TODO Auto-generated method stub
		String SearchValue = VALUE;
		String Searchvalue = VALUE;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		if (Txntype.equals("PAYOUT_ID")) {

			sql = "SELECT pd.CREATED_DATE, pd.CREATED_BY, pd.PAYEE_NAME, pd.PAYEE_ACC_NUMBER, pd.PAYOUT_STATUS, pd.PAYOUT_AMOUNT, pd.PAYEE_BANK_NAME, pd.PAYOUT_ID,"
					+ " pd.INVOICE_ID_PROOF, mpd.ASSIGNEE_NAME, pd.FAILUREREASON FROM mobiversa.payout_detail pd JOIN mobiversa.manual_payout_details mpd on mpd.INVOICE_ID = pd.INVOICE_ID_PROOF"
					+ " WHERE pd.PAYOUT_ID like '" + SearchValue + "%'";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (Txntype.equals("TXN_ID")) {

			sql = "SELECT pd.CREATED_DATE, pd.CREATED_BY, pd.PAYEE_NAME, pd.PAYEE_ACC_NUMBER, pd.PAYOUT_STATUS, pd.PAYOUT_AMOUNT, pd.PAYEE_BANK_NAME, pd.PAYOUT_ID,"
					+ " pd.INVOICE_ID_PROOF, mpd.ASSIGNEE_NAME, pd.FAILUREREASON FROM mobiversa.payout_detail pd JOIN mobiversa.manual_payout_details mpd on mpd.INVOICE_ID = pd.INVOICE_ID_PROOF"
					+ " WHERE pd.INVOICE_ID_PROOF like '" + SearchValue + "%'";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		} else if (Txntype.equals("ASSIGNEE_NAME")) {

			sql = "SELECT pd.CREATED_DATE, pd.CREATED_BY, pd.PAYEE_NAME, pd.PAYEE_ACC_NUMBER, pd.PAYOUT_STATUS, pd.PAYOUT_AMOUNT, pd.PAYEE_BANK_NAME, pd.PAYOUT_ID, pd.INVOICE_ID_PROOF,"
					+ " mpd.ASSIGNEE_NAME, pd.FAILUREREASON FROM mobiversa.payout_detail pd JOIN mobiversa.manual_payout_details mpd on mpd.INVOICE_ID = pd.INVOICE_ID_PROOF"
					+ " WHERE mpd.ASSIGNEE_NAME LIKE '" + SearchValue + "%'";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:SS").parse(rec[0].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setCreatedDate(rd);
			} else {
				fs.setCreatedDate("");
			}

			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("HH:mm:SS")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:SS").parse(rec[0].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setCreatedDate(rd);
			} else {
				fs.setCreatedDate("");
			}

			if (rec[1] != null) {
				fs.setCreatedBy(rec[1].toString());
			} else {
				fs.setCreatedBy("");
			}

			if (rec[2] != null) {
				fs.setPayeeName(rec[2].toString());
			} else {
				fs.setPayeeName("");
			}

			if (rec[3] != null) {
				fs.setPayeeAccNumber(rec[3].toString());
			} else {
				fs.setPayeeAccNumber("");
			}

			if (rec[4] != null) {
				fs.setPayoutStatus(rec[4].toString());
			} else {
				fs.setPayoutStatus("");
			}

			if (rec[5] != null) {
				fs.setPayoutAmount(rec[5].toString());
				;
			} else {
				fs.setPayoutAmount("");
			}

			if (rec[6] != null) {
				fs.setPayeeBankName(rec[6].toString());
			} else {
				fs.setPayeeBankName("");
			}

			if (rec[7] != null) {
				fs.setPayoutId(rec[7].toString());
			} else {
				fs.setPayoutId("");
			}

			if (rec[8] != null) {

				fs.setInvoiceId(rec[8].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[9] != null) {
				fs.setAssigneeName(rec[9].toString());
			} else {
				fs.setAssigneeName("");
			}

			if (rec[10] != null) {
				fs.setFailureReason(rec[10].toString());
			} else {
				fs.setFailureReason("");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	/* FPX Failed Summary Start */

	@Override
	public void merchantfailedFpxtranscation(PaginationBean<FpxTransaction> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String fpxmid,
			String ummotomid, String mid, String txnType, Merchant merchant) {
		logger.info(" FPX Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;
		int querySize = 0;
//            String paydeeEzywaymid = null;
		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		String searchValue = mid;

		String Ezywaymid = umEzywayMid;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

//			LocalDate Currentdate = LocalDate.now();
//			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
//			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
//			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

			LocalDate Currentdate = LocalDate.now().minusDays(5);
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("From date :" + from);
			logger.info("To date :" + to);

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (txnType.equals("FPX")) {
			logger.info("*** FPX *** :");

			sql = "SELECT f.MID, f.TXNAMOUNT, f.TID, f.FPXTXNID, f.TIME_STAMP, f.DEBITAUTHCODESTR, f.SELLERORDERNO, f.STATUS, f.DEBITAUTHNO "
					+ "FROM FPX_TRANSACTION f WHERE f.DEBITAUTHCODE NOT IN ('00') AND "
					+ "f.MID IN (:Ezywaymid, :fpxmid, :motomid, :mid) AND f.TIME_STAMP BETWEEN "
					+ ":from AND :to ORDER BY f.TIME_STAMP DESC";

			// logger.info("FPX Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);
			logger.info("FROM date :" + from);
			logger.info("to date :" + to);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + ummotomid);
			logger.info("mid :" + mid);
			logger.info("fpxmid :" + fpxmid);
			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));
			logger.info("Total Number of records:" + paginationBean.getQuerySize());

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction fs = new FpxTransaction();

			if (rec[0] == null || rec[0] == "") {
				fs.setMid("");
			} else {
				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1] == "" || rec[1].toString().trim().isEmpty()) {
				fs.setTxnAmount("");
			} else {

				if (rec[1].toString().contains(".")) {

					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setTxnAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setTxnAmount(output);

				}

			}

			if (rec[2] == null || rec[2] == "") {
				fs.setTid("");
			} else {
				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3] == "") {
				fs.setFpxTxnId("");
			} else {
				fs.setFpxTxnId(rec[3].toString());
			}

			if (rec[4] == null || rec[4] == "") {
				fs.setTimestamp("");
			} else {
				fs.setTimestamp(rec[4].toString());
			}

			if (rec[5] == null || rec[5] == "") {
				fs.setDebitAuthCodeStr("");
			} else {
				fs.setDebitAuthCodeStr(rec[5].toString());
			}

			if (rec[6] == null || rec[6] == "") {
				fs.setSellerOrderNo("");
			} else {
				fs.setSellerOrderNo(rec[6].toString());
			}

			if (rec[8] == null || rec[8] == "") {
				fs.setDebitAuthNo("");
			} else {
				fs.setDebitAuthNo(rec[8].toString());
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void merchantfailedFpxtranscationexport(PaginationBean<FpxTransaction> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String fpxmid,
			String ummotomid, String mid, String txnType, Merchant merchant) {
		logger.info(" FPX Transaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String fdate = null;
		String tdate = null;
		String year1 = null;
		String year2 = null;
		Query sqlQuery = null;
//			String paydeeEzywaymid = null;
		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		String Ezywaymid = umEzywayMid;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			LocalDate Currentdate = LocalDate.now();
			LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
			from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		} else {

			from = date;
			fdate = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				fdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(fdate));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			tdate = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
				tdate = dateFormat2.format(new SimpleDateFormat("dd/MM/yyyy").parse(tdate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (txnType.equals("FPX")) {
			logger.info("*** FPX *** :");

			sql = "SELECT f.MID, f.TXNAMOUNT, f.TID, f.FPXTXNID, f.TIME_STAMP, f.DEBITAUTHCODESTR, f.SELLERORDERNO, f.STATUS, f.DEBITAUTHNO "
					+ "FROM FPX_TRANSACTION f WHERE f.DEBITAUTHCODE NOT IN ('00') AND "
					+ "f.MID IN (:Ezywaymid, :fpxmid, :motomid, :mid) AND f.TIME_STAMP BETWEEN "
					+ ":from AND :to ORDER BY f.TIME_STAMP DESC";

			logger.info("FPX Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);
			logger.info("Ezywaymid :" + Ezywaymid);
			logger.info("motomid :" + ummotomid);
			logger.info("mid :" + mid);
			logger.info("fpxmid :" + fpxmid);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction fs = new FpxTransaction();

			if (rec[0] == null || rec[0] == "") {
				fs.setMid("");
			} else {
				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1] == "" || rec[1].toString().trim().isEmpty()) {
				fs.setTxnAmount("");
			} else {

				if (rec[1].toString().contains(".")) {

					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setTxnAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setTxnAmount(output);

				}

			}

			if (rec[2] == null || rec[2] == "") {
				fs.setTid("");
			} else {
				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3] == "") {
				fs.setFpxTxnId("");
			} else {
				fs.setFpxTxnId(rec[3].toString());
			}

			if (rec[4] == null || rec[4] == "") {
				fs.setTimestamp("");
			} else {
				fs.setTimestamp(rec[4].toString());
			}

			if (rec[5] == null || rec[5] == "") {
				fs.setDebitAuthCodeStr("");
			} else {
				fs.setDebitAuthCodeStr(rec[5].toString());
			}

			if (rec[6] == null || rec[6] == "") {
				fs.setSellerOrderNo("");
			} else {
				fs.setSellerOrderNo(rec[6].toString());
			}

			if (rec[8] == null || rec[8] == "") {
				fs.setDebitAuthNo("");
			} else {
				fs.setDebitAuthNo(rec[8].toString());
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	/* FPX Failed Summary end */

	/* filter */

	@Override
	public void listFPXfailedTransaction(PaginationBean<FpxTransaction> paginationBean, String from, String to,
			String VALUE, String TXNTYPE) {

//      date="2020-01-29";

// TODO Auto-generated method stub

		String searchvalue = VALUE;
		Query sqlQuery = null;
		logger.info("Inside listFPXTransaction : " + from + ":::" + to);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
// Date date = new Date();

		int year = calendar.getWeekYear();
// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		int daybefore1 = date.getDate() + 1;
		String currentdate = null;
		String currentdate1 = null;

		String dateorg1 = daybefore + "/" + mon + "/" + year;
		String dateorg2 = daybefore1 + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1);
		try {
			currentdate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			currentdate1 = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			System.out.println(" currentdate   " + currentdate);
			System.out.println(" currentdate 1  " + currentdate1);
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		logger.info("current date " + currentdate);

		if (TXNTYPE.equals("NULL")) {

			sql = "select b.MID, b.TXNAMOUNT, b.TID, b.FPXTXNID, b.TIME_STAMP, b.DEBITAUTHCODESTR, b.SELLERORDERNO, b.STATUS, b.DEBITAUTHNO from FPX_TRANSACTION b  "
					+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
					+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
					+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
					+ "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " + "where b.TIME_STAMP LIKE '" + currentdate
					+ "%' " + "and b.DEBITAUTHCODE NOT IN ('00') order by b.TIME_STAMP desc";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

			logger.info("Querylast : " + sql);

			String FromDate = paginationBean.setDateFromBackend(currentdate);
			String From1Date = paginationBean.setDate1FromBackend(currentdate1);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (TXNTYPE.equals("FPX3")) {

			logger.info("<=== SEARCH FPX By SellerOrderNo ===>");

			sql = "select b.MID, b.TXNAMOUNT, b.TID, b.FPXTXNID, b.TIME_STAMP, b.DEBITAUTHCODESTR, b.SELLERORDERNO, b.STATUS, b.DEBITAUTHNO from FPX_TRANSACTION b  "
					+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
					+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
					+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
					+ "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " + "where b.SELLERORDERNO LIKE '" + searchvalue
					+ "%' " + "and b.DEBITAUTHCODE NOT IN ('00') order by b.TIME_STAMP desc";

			logger.info("Search Fpx Query for Ref No: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Reference Number in Query :" + searchvalue);

		} else if (TXNTYPE.equals("FPX4")) {

			logger.info("<=== SEARCH FPX BY FpxTxnId===>");

			sql = "select b.MID, b.TXNAMOUNT, b.TID, b.FPXTXNID, b.TIME_STAMP, b.DEBITAUTHCODESTR, b.SELLERORDERNO, b.STATUS, b.DEBITAUTHNO from FPX_TRANSACTION b   "
					+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
					+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
					+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID or b.MID = mi.FPX_MID "
					+ "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " + "where b.FPXTXNID LIKE '" + searchvalue
					+ "%' " + "and b.DEBITAUTHCODE NOT IN ('00') order by b.TIME_STAMP desc";

			logger.info("Search Fpx Query for FpxTxnId: " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			logger.info("Approval Code in Query :" + searchvalue);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction fs = new FpxTransaction();

			if (rec[0] == null || rec[0] == "") {
				fs.setMid("");
			} else {
				fs.setMid(rec[0].toString());
			}

			if (rec[1] == null || rec[1] == "" || rec[1].toString().trim().isEmpty()) {
				fs.setTxnAmount("");
			} else {

				if (rec[1].toString().contains(".")) {

					Double d = new Double(rec[1].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					fs.setTxnAmount(output);

				} else {

					double amount = 0;
					amount = Double.parseDouble(rec[1].toString()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					fs.setTxnAmount(output);

				}

			}

			if (rec[2] == null || rec[2] == "") {
				fs.setTid("");
			} else {
				fs.setTid(rec[2].toString());
			}

			if (rec[3] == null || rec[3] == "") {
				fs.setFpxTxnId("");
			} else {
				fs.setFpxTxnId(rec[3].toString());
			}

			if (rec[4] == null || rec[4] == "") {
				fs.setTimestamp("");
			} else {
				fs.setTimestamp(rec[4].toString());
			}

			if (rec[5] == null || rec[5] == "") {
				fs.setDebitAuthCodeStr("");
			} else {
				fs.setDebitAuthCodeStr(rec[5].toString());
			}

			if (rec[6] == null || rec[6] == "") {
				fs.setSellerOrderNo("");
			} else {
				fs.setSellerOrderNo(rec[6].toString());
			}

			if (rec[8] == null || rec[8] == "") {
				fs.setDebitAuthNo("");
			} else {
				fs.setDebitAuthNo(rec[8].toString());
			}

			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
// paginationBean.setTotalRowCount(fss.size());

	}

	/* filter */

	@Override
	public Settlementbalance loadOCBCBankBalance(Settlementbalance fs) throws MobiException {

		try {

			// The OCBCBankBalance is stored in the PAYOUT_BANK_BALANCE table with ID:2
			String sql1 = "SELECT b.AMOUNT,b.UPDATED_DATE,b.BANK_ACC_NO FROM mobiversa.PAYOUT_BANK_BALANCE b WHERE b.ID = '2'";
			Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery1.list();
			logger.info("Payout OCBCBankBalance query : " + sql1 + ", Rows affected : " + resultSet.size());

			for (Object[] rec : resultSet) {

				if (rec[0] == null || rec[0].toString().isEmpty()) {
					fs.setOcbcBankBalance("0.00");
				} else if (rec[0] != null) {

					String amount = rec[0].toString();
					String amountWithoutCommas = amount.replace(",", "");
					double amount1 = 0.00;

					try {
						NumberFormat numberFormat = NumberFormat.getInstance();
						amount1 = numberFormat.parse(amountWithoutCommas).doubleValue();
					} catch (ParseException e) {
						logger.error("Invalid OCBC Bank Balance amount format: " + e.getMessage());
					}

					// Format the amount with comma separators
					DecimalFormat decimalFormat = new DecimalFormat("#,###,###,##0.00");
					String formattedDraftAmount = decimalFormat.format(amount1);

					logger.info("Formatted OCBCBankBalance Amount : " + formattedDraftAmount);

					fs.setOcbcBankBalance(formattedDraftAmount);
				}

				if (rec[1] == null || rec[1].toString().trim().isEmpty()) {
					fs.setOcbcBankUpdatedDate("");
				} else if (rec[1] != null) {
					fs.setOcbcBankUpdatedDate(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().trim().isEmpty()) {
					fs.setOcbcBankAccNumber("");
				} else if (rec[2] != null) {
					fs.setOcbcBankAccNumber(rec[2].toString());
				}
			}
			return fs;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Error in Payout OCBC Bank Balance : " + e.getMessage());
			throw new MobiException(Status.SQL_EXCEPTION);
		}
	}

	@Override
	public Settlementbalance loadAmBankBalance(Settlementbalance fs) throws MobiException {

		try {

			// The AMBankBalance is stored in the PAYOUT_BANK_BALANCE table with ID:1
			String sql1 = "SELECT b.AMOUNT,b.UPDATED_DATE,b.BANK_ACC_NO FROM mobiversa.PAYOUT_BANK_BALANCE b WHERE b.ID = '1'";
			Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery1.list();

			logger.info("AmBank Balance Query : " + sql1 + ", Rows affected : " + resultSet.size());

			for (Object[] rec : resultSet) {

				if (rec[0] == null || rec[0].toString().trim().isEmpty()) {
					fs.setAmBankBalance("0.00");
				} else if (rec[0] != null) {

					String amount = rec[0].toString();
					String amountWithoutCommas = amount.replace(",", "");
					double amount1 = 0.00;

					try {
						NumberFormat numberFormat = NumberFormat.getInstance();
						amount1 = numberFormat.parse(amountWithoutCommas).doubleValue();
					} catch (ParseException e) {
						logger.error("Invalid AmBankBalance Format found in DB: " + e.getMessage());
					}

					// Format the amount with comma separators
					DecimalFormat decimalFormat = new DecimalFormat("#,###,###,##0.00");
					String formattedDraftAmount = decimalFormat.format(amount1);

					logger.info("Formatted AmBankBalance Amount: " + formattedDraftAmount);

					fs.setAmBankBalance(formattedDraftAmount);
				}

				if (rec[1] == null || rec[1].toString().isEmpty()) {
					fs.setAmBankUpdatedDate("");
				} else if (rec[1] != null) {
					fs.setAmBankUpdatedDate(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {
					fs.setAmBankAccNumber("");
				} else if (rec[2] != null) {
					fs.setAmBankAccNumber(rec[2].toString());
				}
			}
			return fs;
		} catch (Exception e) {
			logger.error("Error in Payout OCBC Bank Balance : " + e.getMessage());
			throw new MobiException(Status.SQL_EXCEPTION);
		}
	}

	@Override
	public Object updateloadPayoutbalance(Long id) {

		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();

		String sql1 = null;
		sql1 = "SELECT ab.Available_Balance from mobiversa.AVAILABLE_BALANCE ab where ab.MERCHANT_ID =" + id;

		logger.info("Query : " + sql1);

		logger.info("***********" + id);

		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);

		logger.info("*********** unique result : " + sqlQuery1.uniqueResult());

		return sqlQuery1.uniqueResult();
//		

	}

	// added new code for Export Boost txn summary
	@Override
	@Transactional(readOnly = true)
	public void searchAllForsettlementTransactionForBoostExport(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType,
			String export) {
		logger.info("Inside   listAllForsettlementTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		String dummy = null;
		Query sqlQuery = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);

		// sravanan changes
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' and IFNULL(f.MERCHANT_TYPE,'') not like 'FIUU' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			if (export == null) {

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);
			}

		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
			//
		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a  "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

		} else if (txnType.equals("BOOST")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a  "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BPC','BPA','BPS') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc ";

			logger.info("Inside Boost Pagination");
			sqlQuery = super.getSessionFactory().createSQLQuery(sql); // .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			logger.info("Query : " + sql);
			String FromDate = paginationBean.setDateFromBackend(from);
			String From1Date = paginationBean.setDate1FromBackend(to);
			String TXNTYPE = paginationBean.setTXNtype(txnType);

			// Dynamic changes for pagination count

			if (export == null) {
				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);
			}

		} else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,a.MERCHANT_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.CARD_HOLDER_NAME,a.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID,a.SUB_MERCHANT_MID " + "from FOR_SETTLEMENT a "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 10000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			if (rec[15] != null) {
				fs.setSubMerchantMID(rec[15].toString());

			} else {
				fs.setSubMerchantMID("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
	}

	// Ezyway Failed Search filter

	@Override
	public void listcardfailedTransaction(PaginationBean<UMEzyway> paginationBean, String from, String to, String VALUE,
			String TXNTYPE) {

//		      date="2020-01-29";

		// TODO Auto-generated method stub

		try {
			String searchvalue = VALUE;
			Query sqlQuery = null;
			logger.info("Inside listcardfailedTransaction : " + from + ":::" + to);

			ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
			String sql = null;

			Date date = new Date();

			Calendar calendar = Calendar.getInstance();
			date = calendar.getTime();
			// Date date = new Date();

			int year = calendar.getWeekYear();
			// int year=2017;
			long mon = date.getMonth() + 1;
			int day = date.getDate() + 1;
			int daybefore = date.getDate();
			int daybefore1 = date.getDate() + 1;
			String currentdate = null;
			String currentdate1 = null;

			String dateorg1 = daybefore + "/" + mon + "/" + year;
			String dateorg2 = daybefore1 + "/" + mon + "/" + year;
			logger.info("date to find: " + dateorg1);
			try {
				currentdate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
				currentdate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
				System.out.println(" currentdate   " + currentdate);
				System.out.println(" currentdate 1  " + currentdate1);
			} catch (ParseException e1) {
				e1.printStackTrace();
			}

			logger.info("current date " + currentdate);

			// new

			if (TXNTYPE.equals("NULL")) {

				sql = " select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
						+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
						+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
						+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
						+ "and res.H001_MTI in ('0290','0210','0200') " + "where res.TIME_STAMP LIKE '" + currentdate + "%' "
						+ "and (res.STATUS in ('null') or res.STATUS is null)  " + " order by res.TIME_STAMP desc ";

				logger.info("Query : " + sql);
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

				logger.info("Querylast : " + sql);

				String FromDate = paginationBean.setDateFromBackend(currentdate);
				String From1Date = paginationBean.setDate1FromBackend(currentdate1);

				// Dynamic changes for pagination count

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);

			} else if (TXNTYPE.equals("EZYWAY_FAIL1")) {

				logger.info("<=== SEARCH CARD By REF No ===>");

				sql = " select res.F001_MID,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
						+ "res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F009_RESPCODE,res.F268_CHNAME,res.F270_ORN,res.STATUS,res.F350_CRDTYP,res.TXN_TYPE from mobiversa.UM_ECOM_TXNRESPONSE as res "
						+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID or res.F001_MID = m.FIUU_MID "
						+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
						+ "and res.H001_MTI in ('0290','0210') " + "where res.F023_RRN LIKE '" + searchvalue + "%' "
						+ "and (res.STATUS in ('null') or res.STATUS is null)  " + " order by res.TIME_STAMP desc ";

				logger.info("Search Fpx Query for Ref No: " + sql);

				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				logger.info("Reference Number in Query :" + searchvalue);

			}

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				UMEzyway fs = new UMEzyway();

				if (rec[0] != null) {
					fs.setF001_MID(rec[0].toString());
				} else {
					fs.setF001_MID("");
				}

				if (rec[1] != null) {

					if (rec[1].toString().contains(".")) {
						Double d = new Double(rec[1].toString());
						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(d);

						fs.setF007_TXNAMT(output);
					} else {
						double amount = 0;
						amount = Double.parseDouble(rec[1].toString()) / 100;
						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(amount);
						fs.setF007_TXNAMT(output);

					}
				} else {
					fs.setF007_TXNAMT("");
				}

				if (rec[2] != null) {
					fs.setF354_TID(rec[2].toString());
				} else {
					fs.setF354_TID("");
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {
					fs.setPAN("");
				} else if (rec[3] != null || rec[3] != "") {

					String rt = null;
					String rd = null;
					String lasteightDigits = null;

					if (rec[3].toString().contains("f")) {

						int panlength = rec[3].toString().length();

						logger.info("panlength" + panlength);
						String replacefpan = rec[3].toString().replace("f", "*");
						logger.info("replacefpan" + replacefpan);

						if (panlength > 13) {

							lasteightDigits = replacefpan.substring(replacefpan.length() - 8);

							logger.info("lasteightDigits" + lasteightDigits);

						}
						fs.setPAN(lasteightDigits);
					}

				} else {
					fs.setPAN("");
				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {
					fs.setF011_AUTHIDRESP("");
				} else if (rec[4] != null) {
					fs.setF011_AUTHIDRESP(rec[4].toString());
				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {
					fs.setF023_RRN("");
				} else if (rec[5] != null) {

					fs.setF023_RRN(rec[5].toString());
				}

				if (rec[6] != null) {
					String rd = null;
					String rt = null;
					try {
						rd = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
						rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
					} catch (ParseException e) {

						e.printStackTrace();
					}
					fs.setDate(rd);
					fs.setTime(rt);
				} else {
					fs.setDate("");
					fs.setTime("");
				}

				if (rec[7] == null || rec[7].toString().isEmpty()) {

					fs.setRespMessage("");
					fs.setRespcode("");
				} else if (rec[7] != null) {

					if (rec[12].toString().equals("EZYWAY")) {

						fs.setRespcode(rec[7].toString());
						logger.info("setRespCode: " + (rec[7].toString()));
						String respMsg = getResMsg(rec[7].toString());
						logger.info("respMsg" + respMsg);
						fs.setRespMessage(respMsg);
						logger.info("setRespMessage: " + fs.getRespMessage());

					} else {
						logger.info("fpx");
						fs.setRespMessage(rec[7].toString());
						fs.setRespcode(rec[7].toString());
					}
				} else {
					fs.setRespMessage("");
					fs.setRespcode("");
				}

				if (rec[8] == null || rec[8].toString().isEmpty()) {
					logger.info("if ch name");
					fs.setF268_CHNAME("");
				} else if (rec[8] != null) {
					logger.info("else ch name");
					fs.setF268_CHNAME(rec[8].toString());

				}

				if (rec[9] == null || rec[9].toString().isEmpty()) {
					logger.info("if reference");
					fs.setF270_ORN("");

				} else if (rec[9] != null) {

					logger.info("else reference");

					fs.setF270_ORN(rec[9].toString());

				}

				if (rec[10] != null) {
					logger.info("if status");
					fs.setSTATUS("Failed");

				} else {
					logger.info("else status");

					fs.setSTATUS("Failed");
				}

				if (rec[11] != null) {
					logger.info("if card Type");
					fs.setCardType(rec[11].toString());

				} else {
					logger.info("else card Type");
					fs.setCardType("");
				}

				if (rec[12] != null) {
					logger.info("if Txn Type");
					fs.setTxnType(rec[12].toString());

				} else {
					logger.info("else Txn Type");
					fs.setTxnType("");
				}

				logger.info("before fss");

				fss.add(fs);
				logger.info("after fss");
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + paginationBean.getItemList().size());
			// paginationBean.setTotalRowCount(fss.size());

		} catch (Exception e) {
			// Handle any exceptions that might occur during execution
			logger.error("An error occurred in listcardfailedTransaction method: " + e.getMessage(), e);
		}
	}

	@Override
	public String loadPayoutbalanceView(Long id) {

		try {
			String sql1 = "SELECT ab.AVAILABLE_BALANCE from mobiversa.AVAILABLE_BALANCE ab where ab.MERCHANT_ID =" + id;
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql1);
			String availableBalance = sqlQuery.uniqueResult().toString();

			return availableBalance;
		} catch (Exception e) {
			logger.error("Exception in loading AVAILABLE_BALANCE: " + e.getMessage(), e);
			return null;
		}
	}

	@Override
	public List<Merchant> getListOfMerchantsByMerchantId(List<Long> ids) {
		try {
			Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Merchant.class)
					.add(Restrictions.in("id", ids));

			return criteria.list();
		} catch (Exception e) {
			logger.error("Error in getting list of merchants by MerchantId: " + e.getMessage(), e);
			return new ArrayList<Merchant>();
		}
	}

	@Override
	public String getBankNameByMerchantId(String id) {
		try {
			String sql = "SELECT hbd.BANK_NAME FROM mobiversa.HOST_BANK_DETAILS hbd WHERE hbd.SELLER_ID = ("
					+ "SELECT mu.FPX_SELLER_ID FROM mobiversa.MOBILE_USER mu WHERE mu.MERCHANT_FK = '" + id
					+ "' Limit 1)";
			Object result = sessionFactory.getCurrentSession().createSQLQuery(sql).uniqueResult();
			return result != null ? result.toString() : "N/A";
		} catch (Exception e) {
			logger.error("Error in getting bank name by merchant ID: " + e.getMessage(), e);
			return "N/A";
		}
	}

	@Override
	public SettlementDetails getDataFromSettlementDetails(String id) {

		try {
			return (SettlementDetails) sessionFactory.getCurrentSession().createCriteria(SettlementDetails.class)
					.add(Restrictions.eq("merchantId", id)).setMaxResults(1).uniqueResult();
		} catch (Exception e) {
			logger.error("Exception in loading SettlementDetails table: " + e.getMessage(), e);
			return null;
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<PayoutModel> getPayoutTxnDetailsBetweenDates(final String date1, final String date2) {

		try {
			ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
			String sql = "SELECT p.CREATED_DATE,p.CREATED_BY,p.PAYEE_NAME,p.PAYEE_BRN,"
					+ "p.PAYEE_ACC_NUMBER,p.PAYEE_BANK_NAME,p.INVOICE_ID_PROOF,p.PAYOUT_AMOUNT,"
					+ "p.PAYOUT_FEE,p.PAYOUT_STATUS,p.PAID_DATE,p.PAID_TIME,p.SUB_MERCHANT_MID,"
					+ "ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUTTYPE,p.CURLEC_RECIPIENTREFERENCE FROM "
					+ "PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID = m.SUB_MERCHANT_MID "
					+ "INNER JOIN MERCHANT ml ON m.MERCHANT_FK = ml.ID WHERE "
					+ "p.PAYOUT_STATUS IN ('pp', 'pd', 'pbd','pending') AND p.MODIFIED_BY BETWEEN '" + date1 + "' AND '" + date2
					+ "' " + "ORDER BY " + "p.REQUEST_DATE DESC;";

			logger.info("GetPayoutTxnDetailsBetweenDates Query : " + sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			for (Object[] rec : resultSet) {

				PayoutModel fs = new PayoutModel();

				if (rec[0] == null || rec[1].toString().trim().isEmpty()) {
					fs.setCreateddate("");
				} else {
					fs.setCreateddate(rec[0].toString());
				}

				if (rec[1] == null || rec[1].toString().trim().isEmpty()) {
					fs.setCreatedby("");
				} else {
					fs.setCreatedby(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().trim().isEmpty()) {
					fs.setPayeename("");
				} else {
					fs.setPayeename(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().trim().isEmpty()) {
					fs.setPayeebrn("");
				} else {
					fs.setPayeebrn(rec[3].toString());
				}

				if (rec[4] == null || rec[4].toString().trim().isEmpty()) {
					fs.setPayeeaccnumber("");
				} else {
					fs.setPayeeaccnumber(rec[4].toString());
				}

				if (rec[5] == null || rec[5].toString().trim().isEmpty()) {
					fs.setPayeebankname("");
				} else {
					fs.setPayeebankname(rec[5].toString());
				}

				if (rec[6] == null || rec[6].toString().trim().isEmpty()) {
					fs.setInvoiceidproof("");
				} else {
					fs.setInvoiceidproof(rec[6].toString());
				}

				if (rec[7] == null || rec[7].toString().trim().isEmpty()) {
					fs.setPayoutamount("");
				} else if (rec[7] != null) {
					fs.setPayoutamount(rec[7].toString());
				}

				if (rec[8] == null || rec[8].toString().trim().isEmpty()) {
					fs.setPayoutfee("");
				} else {
					fs.setPayoutfee(rec[8].toString());
				}

				if (rec[9] == null || rec[8].toString().trim().isEmpty()) {
					fs.setPayoutstatus("Requested");
				} else {
					if (rec[9].toString().equals("A")) {
						fs.setPayoutstatus("To Process");
					} else if (rec[9].toString().equals("F")) {
						fs.setPayoutstatus("Failed");
					} else if (rec[9].toString().equals("S")) {
						fs.setPayoutstatus("Processing");
					} else if (rec[9].toString().equals("pp")) {
						fs.setPayoutstatus("Paid");
					} else if (rec[9].toString().equals("pd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[9].toString().equals("pbd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[9].toString().equals("pending")) {
						fs.setPayoutstatus("Pending");
					}
				}

				if (rec[10] == null || rec[10].toString().trim().isEmpty()) {
					fs.setPaidDate("");
				} else {
					fs.setPaidDate(rec[10].toString());
				}

				if (rec[11] == null || rec[11].toString().trim().isEmpty()) {
					fs.setPaidTime("");
				} else {
					fs.setPaidTime(rec[11].toString());
				}

				if (rec[12] == null || rec[12].toString().trim().isEmpty()) {
					fs.setSubmerchantMid("");
				} else {
					fs.setSubmerchantMid(rec[12].toString());
				}

				if (rec[13] == null || rec[13].toString().trim().isEmpty()) {
					fs.setBusinessname("");
				} else {
					fs.setBusinessname(rec[13].toString());
				}

				if (rec[14] == null || rec[14].toString().trim().isEmpty()) {
					fs.setPayoutId("");
				} else {
					fs.setPayoutId(rec[14].toString());
				}

				if (rec[15] == null || rec[15].toString().trim().isEmpty()) {
					fs.setFailurereason("");
				} else {
					fs.setFailurereason(rec[15].toString());
				}

				if (rec[16] == null || rec[16].toString().trim().isEmpty()) {
					fs.setPayouttype("");
				} else {
					fs.setPayouttype(rec[16].toString());
				}
				
				if (rec[17] == null || rec[17].toString().trim().isEmpty()) {
					fs.setCurlecRefNo("");
				} else {
					fs.setCurlecRefNo(rec[17].toString());
				}

				fss.add(fs);
			}
//			logger.info("Reterived datas from db and binded...................................."+fss);
			return fss;
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("Exception while reteriving the data's from PAYOUT_DETAIL table");
		}
	}

	@Override
	public boolean loadAllMerchantPayoutbalanceView() {

		try {
			String sql1 = "SELECT ab.AVAILABLE_BALANCE from mobiversa.AVAILABLE_BALANCE ab ";
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql1);
			List<Object[]> availableBalance = sqlQuery.list();
			logger.info("Check Available balance Is Empty : " + availableBalance == null && availableBalance.isEmpty()
					? false
					: true);

			return availableBalance == null && availableBalance.isEmpty() ? false : true;
		} catch (Exception e) {
			logger.error("Exception in loading AVAILABLE_BALANCE: " + e.getMessage(), e);
			return false;
		}
	}

	@Override
	@Transactional(readOnly = true)
	public void listPayoutTransactionByMerchantData(final PaginationBean<PayoutModel> paginationBean,
			final String date1, final String date2, String merchantID, int currPage, String export) {
		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;
		int querySize = 0;
		logger.info("Export is :" + export);
		/*
		 * Date now = new Date(); Date currentDate = new DateTime(now).toDate();
		 * logger.info("Current Date : " + now + " : " + currentDate); String fromDate =
		 * new SimpleDateFormat("yyyy-MM-dd").format(currentDate);
		 */
		Query sqlQuery = null;
		List<Object[]> resultSet = null;
		logger.info("MERCHANT ID :" + merchantID);
		if (date1 != null && date2 != null) {
			logger.info("search query From " + date1 + " To " + date2);

			// old query
//
//                     sql = "SELECT p.CREATED_BY,p.CREATED_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//                                  + "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,MERCHANT_FK,p.PAID_TIME,p.PAID_DATE FROM PAYOUT_DETAIL p WHERE p.MODIFIED_BY BETWEEN '"
//                                  + date1 + "' and '" + date2 + "' ORDER BY p.CREATED_DATE desc ";

			sql = "SELECT DISTINCT " + "    p.CREATED_BY, " + "    p.REQUEST_DATE, " + "    p.MODIFIED_DATE, "
					+ "    p.PAYEE_ACC_NUMBER, " + "    p.PAYEE_BRN, " + "    p.PAYEE_BANK_NAME, "
					+ "    p.PAYEE_EMAIL, " + "    p.PAYEE_IC, " + "    p.PAYEE_MOBILE, " + "    p.PAYEE_NAME, "
					+ "    p.PAYOUT_AMOUNT, " + "    p.MODIFIED_BY, " + "    p.PAYOUT_STATUS, " + "    p.SETTLE_DATE, "
					+ "    p.SETTLE_NET_AMOUNT, " + "    p.INVOICE_ID_PROOF, " + "    p.PAYMENT_REASON, "
					+ "    p.SOURCE_OF_FUND, " + "    p.SWIFT_IFSC_CODE, " + "    p.MERCHANT_FK, " + "    p.PAID_TIME, "
					+ "    p.PAID_DATE, " + "    p.SUB_MERCHANT_MID, " + "    (SELECT m.BUSINESS_NAME "
					+ "     FROM mobiversa.`MID` mi " + "     INNER JOIN mobiversa.MERCHANT m ON m.ID = mi.MERCHANT_FK "
					+ "     WHERE mi.SUB_MERCHANT_MID = p.SUB_MERCHANT_MID " + "     LIMIT 1) AS SUB_MERCHANT_NAME, "
					+ "    p.PAYOUT_ID, " + "    p.CURLEC_FAILURE_REASON, " + "    p.PAYOUT_FEE, " + "    p.PAYOUTTYPE, "
					+ "    p.SRCREFNO, " + "    p.CREATED_DATE, " + "    p.PAYMENTREFERENCE " + "FROM "
					+ "    PAYOUT_DETAIL p " + "    INNER JOIN mobiversa.MERCHANT m ON m.ID = p.MERCHANT_FK " + "WHERE "
					+ "    p.MERCHANT_FK = '" + merchantID + "' "
					+ "    AND p.PAYOUT_STATUS IN ('pp', 'pd', 'pbd', 'pending', 'On Process') "
					+ "AND p.CREATED_DATE BETWEEN '" + date1 + " 00:00:00' AND '" + date2 + " 23:59:59' " +
//		             "    AND p.CREATED_DATE BETWEEN '" + date1 + "%' AND '" + date2 + "%' " +
					"ORDER BY " + "    p.CREATED_DATE DESC";

			logger.info("Default Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));

			// Dynamic changes for pagination count
			if (export == null) {
				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);
				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);
				sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
				sqlQuery.setMaxResults(pageSize);
			}
			resultSet = sqlQuery.list();

		} else if ((date1 == null || date2 == null) || (date1.equals("") || date2.equals(""))) {
			LocalDate Currentdate = LocalDate.now();
			LocalDate FiveDaysAgo = LocalDate.now().minusDays(5);
			String from = FiveDaysAgo.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			String to = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			logger.info("from  Date -------->" + from);
			logger.info("to  Date ----------->" + to);

			// old query
//                     sql = "SELECT p.CREATED_BY,p.CREATED_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
//                                  + "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,MERCHANT_FK,p.PAID_TIME,p.PAID_DATE FROM PAYOUT_DETAIL p WHERE p.MODIFIED_BY ='"
//                                  + fromDate + "' ORDER BY p.CREATED_DATE desc ";

			/*
			 * sql =
			 * "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,"
			 * +
			 * "p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUT_FEE,p.PAYOUTTYPE, p.SRCREFNO ,p.CREATED_DATE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.CREATED_BY = '"
			 * + merchant +
			 * "' AND p.PAYOUT_STATUS IN ('pp','pd','pbd') AND p.MODIFIED_BY ='" + fromDate
			 * + "' ORDER BY p.REQUEST_DATE desc ";
			 */

			sql = "SELECT p.CREATED_BY, p.REQUEST_DATE, p.MODIFIED_DATE, p.PAYEE_ACC_NUMBER, p.PAYEE_BRN, p.PAYEE_BANK_NAME, "
					+ "p.PAYEE_EMAIL, p.PAYEE_IC, p.PAYEE_MOBILE, p.PAYEE_NAME, p.PAYOUT_AMOUNT, p.MODIFIED_BY, p.PAYOUT_STATUS, "
					+ "p.SETTLE_DATE, p.SETTLE_NET_AMOUNT, p.INVOICE_ID_PROOF, p.PAYMENT_REASON, p.SOURCE_OF_FUND, p.SWIFT_IFSC_CODE, "
					+ "p.MERCHANT_FK, p.PAID_TIME, p.PAID_DATE, p.SUB_MERCHANT_MID, ml.BUSINESS_NAME, p.PAYOUT_ID, p.CURLEC_FAILURE_REASON, "
					+ "p.PAYOUT_FEE, p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE,p.PAYMENTREFERENCE "
					+ "FROM PAYOUT_DETAIL p " + "INNER JOIN MERCHANT ml ON ml.ID = p.MERCHANT_FK "
					+ "WHERE p.MERCHANT_FK = '" + merchantID + "' "
					+ "AND p.PAYOUT_STATUS IN ('pp', 'pd', 'pbd', 'pending', 'On Process') "
					+ "AND p.CREATED_DATE BETWEEN '" + from + " 00:00:00' AND '" + to + " 23:59:59' " +
//				      "AND p.CREATED_DATE BETWEEN '" + from + "%' AND '" + to + "%' " +
					"ORDER BY p.CREATED_DATE DESC";

			logger.info("Search Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));

			// Dynamic changes for pagination count
			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);
			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);
			logger.info("FirstResult:" + String.valueOf((pageNumFromJsp * pageSize) - pageSize));

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);
			resultSet = sqlQuery.list();
			logger.info(String.valueOf(resultSet.size()));

		}

//        @SuppressWarnings("unchecked")
//        List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			PayoutModel fs = new PayoutModel();
			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setCreatedby("");

			} else if (rec[23] != null) {
				fs.setCreatedby(rec[23].toString());
			}
			if (rec[1] == null || rec[1].toString().isEmpty()) {
				fs.setCreateddate("");
			} else if (rec[1] != null) {
				// Sheik Changes
				String time = null;
				String date = null;
				String stamp = null;
				try {

					time = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					date = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (Exception e) {
					// TODO: handle exception
					logger.info("Time throws error and Can't extract time from date time payout detail table");
				}
				stamp = date + " " + time;
				fs.setCreateddate(stamp);

			}
			if (rec[2] == null || rec[2].toString().isEmpty()) {
				fs.setModifieddate("");
			} else {

				fs.setModifieddate(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setPayeeaccnumber("");

			} else if (rec[3] != null) {

				fs.setPayeeaccnumber(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPayeebrn("");

			} else

			if (rec[4] != null) {

				fs.setPayeebrn(rec[4].toString());

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setPayeebankname("");

			} else

			if (rec[5] != null) {

				fs.setPayeebankname(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setPayeeemail("");

			} else

			if (rec[6] != null) {

				fs.setPayeeemail(rec[6].toString());

			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setPayeeic("");

			} else if (rec[7] != null) {

				fs.setPayeeic(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPayeemobile("");

			} else if (rec[8] != null) {
				fs.setPayeemobile(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setPayeename("");

			} else if (rec[9] != null) {
				fs.setPayeename(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setPayoutamount("");

			} else if (rec[10] != null) {
				Double d = new Double(rec[10].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setPayoutamount(output);

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				if (rec[29] == null) {
					fs.setPayoutdate("");
				} else {
					String timeStamp = convertTimeStampDateFormat(rec[29].toString());
					fs.setPayoutdate(timeStamp);
				}
//				fs.setPayoutdate("");
			} else if (rec[11] != null) {

				String pdate = null;
				try {
					pdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));

				} catch (ParseException e1) {
					logger.error("Parse Ex: " + e1.getMessage() + e1);
				}

				fs.setPayoutdate(pdate);
			}

			if (rec[12] == null) {

				fs.setPayoutstatus("Requested");

			} else {
				if (rec[12].toString().equals("A")) {
					fs.setPayoutstatus("To Process");
				} else if (rec[12].toString().equals("F")) {
					fs.setPayoutstatus("Failed");
				} else if (rec[12].toString().equals("S")) {
					fs.setPayoutstatus("Processing");
				} else if (rec[12].toString().equals("pp")) {
					fs.setPayoutstatus("Paid");
				} else if (rec[12].toString().equals("pd")) {
					fs.setPayoutstatus("Declined");
				} else if (rec[12].toString().equals("pbd")) {
					fs.setPayoutstatus("Declined");
				} else if (rec[12].toString().equals("pending")) {
					fs.setPayoutstatus("Pending");
				} else if (rec[12].toString().equals("On Process")) {
					fs.setPayoutstatus("In Process");
				}
			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSettledate("");
			} else if (rec[13] != null) {

				String sdate = null;
				try {
					sdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
				} catch (ParseException e1) {
					e1.printStackTrace();
				}
				fs.setSettledate(sdate);
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setSettlenetamount("");
			} else if (rec[14] != null) {
				Double d = new Double(rec[14].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setSettlenetamount(output);
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {
				fs.setInvoiceidproof("");
			} else if (rec[15] != null) {
				fs.setInvoiceidproof(rec[15].toString());
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {
				fs.setPaymentreason("");
			} else if (rec[16] != null) {
				fs.setPaymentreason(rec[16].toString());
			}

			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setSourceoffund("");
			} else if (rec[17] != null) {
				fs.setSourceoffund(rec[17].toString());
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setSwiftifsccode("");
			} else if (rec[18] != null) {
				fs.setSwiftifsccode(rec[18].toString());
			}

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setMerchantId("");
			} else {
				fs.setMerchantId(rec[19].toString());
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setPaidTime("");
			} else {
				fs.setPaidTime(rec[20].toString());
			}

			if (rec[21] == null || rec[21].toString().isEmpty()) {
				fs.setPaidDate("");
			} else {
				fs.setPaidDate(rec[21].toString());
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setSubmerchantMid("");
			} else {
				fs.setSubmerchantMid(rec[22].toString());
			}

			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setMmId("");
			} else {
				fs.setMmId(rec[23].toString());
			}

			if (rec[24] == null || rec[24].toString().isEmpty() || rec[24].toString().equals("null")) {
				fs.setPayoutId("");
			} else {
				fs.setPayoutId(rec[24].toString());
			}

			if (rec[25] == null || rec[25].toString().isEmpty()) {
				fs.setFailurereason("");
			} else {
				fs.setFailurereason(rec[25].toString());
                if(rec[25].toString().trim().equalsIgnoreCase("account name mismatch"))
                {
                    logger.info("Rejected Payout found : "+fs.getPayoutstatus());
                    fs.setPayoutstatus("Rejected");
                    logger.info("Rejected Payout found : "+fs.getPayoutstatus());
                }
			}

			if (rec[26] == null || rec[26].toString().isEmpty()) {
				fs.setPayoutfee("");
			} else {
				fs.setPayoutfee(rec[26].toString());
			}

			if (rec[27] == null || rec[27].toString().isEmpty()) {
				fs.setPayouttype("");
			} else {
				fs.setPayouttype(rec[27].toString());
			}

			if (rec[28] == null || rec[28].toString().isEmpty()) {
				fs.setSrcrefno("");
			} else {
				fs.setSrcrefno(rec[28].toString());
			}

			if (rec.length > 29 && rec[29] != null && !rec[29].toString().isEmpty()) {
				fs.setTimeStamp(rec[29].toString());
			} else {
				fs.setTimeStamp("");
			}
			if (rec[30] == null || rec[30].toString().isEmpty()) {
				fs.setPaymentReference("");
			} else {
				fs.setPaymentReference(rec[30].toString());
			}

			logger.info("rmarks is :" + fs.getPaymentReference() + " " + rec[30]);
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in the PAYOUT_DETAIL : " + paginationBean.getItemList().size());

	}

	@Override
	@Transactional(readOnly = true)
	public void searchPayoutTransactionList(final PaginationBean<PayoutModel> paginationBean, final String value,
			String transaction_type, String merchant) {
		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;
		Date now = new Date();
		Date currentDate = new DateTime(now).toDate();
		logger.info("Current Date : " + now + " : " + currentDate);
		String fromDate = new SimpleDateFormat("yyyy-MM-dd").format(currentDate);
		Query sqlQuery = null;
		logger.info("search query From " + value);
		logger.info("search query From " + transaction_type);
		if (transaction_type != null && !transaction_type.trim().isEmpty() && value != null
				&& !value.trim().isEmpty()) {
			if (transaction_type.equalsIgnoreCase("payout-id")) {

//                sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,"
//                        + "p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUTTYPE,P.SRCREFNO,P.CREATED_DATE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.PAYOUT_ID = "
//                        + value + "";

				sql = "SELECT p.CREATED_BY, p.REQUEST_DATE, p.MODIFIED_DATE, p.PAYEE_ACC_NUMBER, p.PAYEE_BRN, p.PAYEE_BANK_NAME, p.PAYEE_EMAIL, p.PAYEE_IC, p.PAYEE_MOBILE, p.PAYEE_NAME, p.PAYOUT_AMOUNT, p.MODIFIED_BY, p.PAYOUT_STATUS, p.SETTLE_DATE, p.SETTLE_NET_AMOUNT, p.INVOICE_ID_PROOF,"
						+ " p.PAYMENT_REASON, p.SOURCE_OF_FUND, p.SWIFT_IFSC_CODE, p.MERCHANT_FK, p.PAID_TIME, p.PAID_DATE, p.SUB_MERCHANT_MID, ml.BUSINESS_NAME, p.PAYOUT_ID, p.CURLEC_FAILURE_REASON, p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE, p.PAYMENTREFERENCE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON ml.ID = p.MERCHANT_FK WHERE p.PAYOUT_ID = '"
						+ value + "' AND p.MERCHANT_FK = '" + merchant + "'";

				logger.info("Payout summary, Search Query for PAYOUT-ID : " + sql);
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			} else if (transaction_type.equalsIgnoreCase("transaction-id")) {

//                sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,"
//                        + "p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUTTYPE,P.SRCREFNO,P.CREATED_DATE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.INVOICE_ID_PROOF = "
//                        + value + "";

				sql = "SELECT p.CREATED_BY, p.REQUEST_DATE, p.MODIFIED_DATE, p.PAYEE_ACC_NUMBER, p.PAYEE_BRN, p.PAYEE_BANK_NAME, p.PAYEE_EMAIL, p.PAYEE_IC, p.PAYEE_MOBILE, p.PAYEE_NAME, p.PAYOUT_AMOUNT, p.MODIFIED_BY, p.PAYOUT_STATUS, p.SETTLE_DATE, p.SETTLE_NET_AMOUNT, p.INVOICE_ID_PROOF,"
						+ " p.PAYMENT_REASON, p.SOURCE_OF_FUND, p.SWIFT_IFSC_CODE, p.MERCHANT_FK, p.PAID_TIME, p.PAID_DATE, p.SUB_MERCHANT_MID, ml.BUSINESS_NAME, p.PAYOUT_ID, p.CURLEC_FAILURE_REASON, p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE, p.PAYMENTREFERENCE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON ml.ID = p.MERCHANT_FK WHERE p.INVOICE_ID_PROOF = '"
						+ value + "' AND p.MERCHANT_FK = '" + merchant + "'";

				logger.info("Payout summary, Search Query for TRANSACTION-ID : " + sql);
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			}
		} else {
			logger.info("Transaction type or value is");
		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {

			PayoutModel fs = new PayoutModel();

			if (rec[23] == null || rec[23].toString().isEmpty()) {

				fs.setCreatedby("");

			} else if (rec[23] != null) {
				fs.setCreatedby(rec[23].toString());
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setCreateddate("");
			}

			else if (rec[1] != null) {

				// Sheik Changes

				String time = null;
				String date = null;
				String stamp = null;
				try {

					time = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					date = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (Exception e) {
					// TODO: handle exception
					logger.info("Time throws error and Can't extract time from date time payout detail table");
				}
				stamp = date + " " + time;
				fs.setCreateddate(stamp);

			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setModifieddate("");

			} else if (rec[2] != null) {

				fs.setModifieddate(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setPayeeaccnumber("");

			} else if (rec[3] != null) {

				fs.setPayeeaccnumber(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setPayeebrn("");

			} else

			if (rec[4] != null) {

				fs.setPayeebrn(rec[4].toString());

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setPayeebankname("");

			} else

			if (rec[5] != null) {

				fs.setPayeebankname(rec[5].toString());
			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setPayeeemail("");

			} else

			if (rec[6] != null) {

				fs.setPayeeemail(rec[6].toString());

			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setPayeeic("");

			} else if (rec[7] != null) {

				fs.setPayeeic(rec[7].toString());
			}

			if (rec[8] == null || rec[8].toString().isEmpty()) {

				fs.setPayeemobile("");

			} else if (rec[8] != null) {
				fs.setPayeemobile(rec[8].toString());
			}

			if (rec[9] == null || rec[9].toString().isEmpty()) {

				fs.setPayeename("");

			} else if (rec[9] != null) {
				fs.setPayeename(rec[9].toString());
			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {

				fs.setPayoutamount("");

			} else if (rec[10] != null) {
				Double d = new Double(rec[10].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setPayoutamount(output);

			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {

				if (rec[28] == null) {
					fs.setPayoutdate("");
				} else {
					String timeStamp = convertTimeStampDateFormat(rec[28].toString());
					fs.setPayoutdate(timeStamp);
				}
			} else if (rec[11] != null) {

				String pdate = null;
				try {
					pdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setPayoutdate(pdate);

			}

			if (rec[12] == null) {

				fs.setPayoutstatus("Requested");

			} else if (rec[12] != null) {

				if (rec[12].toString().equals("A")) {
					fs.setPayoutstatus("To Process");

				} else if (rec[12].toString().equals("F")) {
					fs.setPayoutstatus("Failed");
				} else if (rec[12].toString().equals("S")) {
					fs.setPayoutstatus("Processing");
				} else if (rec[12].toString().equals("pp")) {
					fs.setPayoutstatus("Paid");
				} else if (rec[12].toString().equals("pd")) {
					fs.setPayoutstatus("Declined");
				} else if (rec[12].toString().equals("pending")) {
					fs.setPayoutstatus("Pending");
				} else if (rec[12].toString().equals("On Process")) {
					fs.setPayoutstatus("In Process");
				}

			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {

				fs.setSettledate("");

			} else if (rec[13] != null) {

				String sdate = null;
				try {
					sdate = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
				} catch (ParseException e1) {
					e1.printStackTrace();
				}

				fs.setSettledate(sdate);
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {

				fs.setSettlenetamount("");

			} else if (rec[14] != null) {

				Double d = new Double(rec[14].toString());
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				fs.setSettlenetamount(output);
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {

				fs.setInvoiceidproof("");

			} else if (rec[15] != null) {
				fs.setInvoiceidproof(rec[15].toString());
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {

				fs.setPaymentreason("");

			} else if (rec[16] != null) {
				fs.setPaymentreason(rec[16].toString());
			}

			if (rec[17] == null || rec[17].toString().isEmpty()) {

				fs.setSourceoffund("");

			} else if (rec[17] != null) {
				fs.setSourceoffund(rec[17].toString());
			}

			if (rec[18] == null || rec[18].toString().isEmpty()) {

				fs.setSwiftifsccode("");

			} else if (rec[18] != null) {
				fs.setSwiftifsccode(rec[18].toString());
			}

			if (rec[19] == null || rec[19].toString().isEmpty()) {
				fs.setMerchantId("");
			} else {
				fs.setMerchantId(rec[19].toString());
			}

			if (rec[20] == null || rec[20].toString().isEmpty()) {
				fs.setPaidTime("");
			} else {
				fs.setPaidTime(rec[20].toString());
			}

			if (rec[21] == null || rec[21].toString().isEmpty()) {
				fs.setPaidDate("");
			} else {
				fs.setPaidDate(rec[21].toString());
			}

			if (rec[22] == null || rec[22].toString().isEmpty()) {
				fs.setSubmerchantMid("");
			} else {
				fs.setSubmerchantMid(rec[22].toString());
			}
			if (rec[23] == null || rec[23].toString().isEmpty()) {
				fs.setMmId("");
			} else {
				fs.setMmId(rec[23].toString());
			}
			if (rec[24] == null || rec[24].toString().isEmpty()) {
				fs.setPayoutId("");
			} else {
				fs.setPayoutId(rec[24].toString());
			}
			if (rec[25] == null || rec[25].toString().isEmpty()) {
				fs.setFailurereason("");
			} else {
				fs.setFailurereason(rec[25].toString());
			}
			if (rec[26] == null || rec[26].toString().isEmpty()) {
				fs.setPayouttype("");
			} else {
				fs.setPayouttype(rec[26].toString());
			}
			if (rec[27] == null || rec[27].toString().isEmpty()) {
				fs.setSrcrefno("");
			} else {
				fs.setSrcrefno(rec[27].toString());
			}
			if (rec[28] == null || rec[28].toString().isEmpty()) {
				fs.setTimeStamp("");
			} else {
				fs.setTimeStamp(rec[28].toString());
			}
			if (rec[29] == null || rec[29].toString().isEmpty()) {
				fs.setPaymentReference("");
			} else {
				fs.setPaymentReference(rec[29].toString());
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records in the PAYOUT_DETAIL : " + paginationBean.getItemList().size());
	}

	public static String convertTimeStampDateFormat(String inputDate) {

		DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss[.S]");
		DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

		try {
			LocalDateTime date = LocalDateTime.parse(inputDate, inputFormatter);
			return date.format(outputFormatter);
		} catch (DateTimeParseException e) {
			logger.error("Parse Exception: " + e.getMessage() + e);
			return null;
		}

//		DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
//		DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
//
//		try {
//			LocalDateTime date = LocalDateTime.parse(inputDate, inputFormatter);
//			return date.format(outputFormatter);
//		} catch (DateTimeParseException e) {
//			logger.error("Parse Exception: " + e.getMessage() + e);
//			return null;
//		}
	}

	@Override
	@Transactional(readOnly = true)
	public void searchPayoutLoginTransactionList(PaginationBean<PayoutModel> paginationBean, String value,
			String transaction_type) {

		ArrayList<PayoutModel> fss = new ArrayList<PayoutModel>();
		String sql = null;
		Date now = new Date();
		Date currentDate = new DateTime(now).toDate();
		logger.info("Current Date : " + now + " : " + currentDate);
		String fromDate = new SimpleDateFormat("yyyy-MM-dd").format(currentDate);
		Query sqlQuery = null;
		logger.info("search query From " + value);
		logger.info("search query From " + transaction_type);
		if (transaction_type != null && !transaction_type.trim().isEmpty() && value != null
				&& !value.trim().isEmpty()) {
			if (transaction_type.equalsIgnoreCase("payout-id")) {

//                sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,"
//                        + "p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUTTYPE,P.SRCREFNO,P.CREATED_DATE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.PAYOUT_ID = "
//                        + value + "";

				sql = "SELECT p.CREATED_BY, p.REQUEST_DATE, p.MODIFIED_DATE, p.PAYEE_ACC_NUMBER, p.PAYEE_BRN, p.PAYEE_BANK_NAME, p.PAYEE_EMAIL, p.PAYEE_IC, p.PAYEE_MOBILE, p.PAYEE_NAME, p.PAYOUT_AMOUNT, p.MODIFIED_BY, p.PAYOUT_STATUS, p.SETTLE_DATE, p.SETTLE_NET_AMOUNT, p.INVOICE_ID_PROOF,"
						+ " p.PAYMENT_REASON, p.SOURCE_OF_FUND, p.SWIFT_IFSC_CODE, p.MERCHANT_FK, p.PAID_TIME, p.PAID_DATE, p.SUB_MERCHANT_MID, ml.BUSINESS_NAME, p.PAYOUT_ID, p.CURLEC_FAILURE_REASON, p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE,p.PAYMENTREFERENCE,p.CURLEC_RECIPIENTREFERENCE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON ml.ID = p.MERCHANT_FK WHERE p.PAYOUT_ID = '"
						+ value + "'";

				logger.info("Search Query : " + sql);
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			} else if (transaction_type.equalsIgnoreCase("transaction-id")) {

//                sql = "SELECT p.CREATED_BY,p.REQUEST_DATE,p.MODIFIED_DATE,p.PAYEE_ACC_NUMBER,p.PAYEE_BRN,p.PAYEE_BANK_NAME,p.PAYEE_EMAIL,p.PAYEE_IC,p.PAYEE_MOBILE,p.PAYEE_NAME,p.PAYOUT_AMOUNT,p.MODIFIED_BY,p.PAYOUT_STATUS,p.SETTLE_DATE,p.SETTLE_NET_AMOUNT,p.INVOICE_ID_PROOF,"
//                        + "p.PAYMENT_REASON,p.SOURCE_OF_FUND,p.SWIFT_IFSC_CODE,p.MERCHANT_FK,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.FAILUREREASON,p.PAYOUTTYPE,P.SRCREFNO,P.CREATED_DATE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.INVOICE_ID_PROOF = "
//                        + value + "";

//                sql = "SELECT p.CREATED_BY, p.REQUEST_DATE, p.MODIFIED_DATE, p.PAYEE_ACC_NUMBER, p.PAYEE_BRN, p.PAYEE_BANK_NAME, p.PAYEE_EMAIL, p.PAYEE_IC, p.PAYEE_MOBILE, p.PAYEE_NAME, p.PAYOUT_AMOUNT, p.MODIFIED_BY, p.PAYOUT_STATUS, p.SETTLE_DATE, p.SETTLE_NET_AMOUNT, p.INVOICE_ID_PROOF,"
//                        + " p.PAYMENT_REASON, p.SOURCE_OF_FUND, p.SWIFT_IFSC_CODE, p.MERCHANT_FK, p.PAID_TIME, p.PAID_DATE, p.SUB_MERCHANT_MID, ml.BUSINESS_NAME, p.PAYOUT_ID, p.FAILUREREASON, p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE FROM PAYOUT_DETAIL p INNER JOIN MID m ON p.SUB_MERCHANT_MID=m.SUB_MERCHANT_MID INNER JOIN MERCHANT ml ON m.MERCHANT_FK=ml.ID WHERE p.INVOICE_ID_PROOF = '" + value + "' AND p.CREATED_BY = '" + merchant + "'";

				sql = "SELECT p.CREATED_BY, p.REQUEST_DATE, p.MODIFIED_DATE, p.PAYEE_ACC_NUMBER, p.PAYEE_BRN, p.PAYEE_BANK_NAME, p.PAYEE_EMAIL, p.PAYEE_IC, p.PAYEE_MOBILE, p.PAYEE_NAME, p.PAYOUT_AMOUNT, p.MODIFIED_BY, p.PAYOUT_STATUS, p.SETTLE_DATE, p.SETTLE_NET_AMOUNT, p.INVOICE_ID_PROOF,"
						+ " p.PAYMENT_REASON, p.SOURCE_OF_FUND, p.SWIFT_IFSC_CODE, p.MERCHANT_FK, p.PAID_TIME, p.PAID_DATE, p.SUB_MERCHANT_MID, ml.BUSINESS_NAME, p.PAYOUT_ID, p.CURLEC_FAILURE_REASON, p.PAYOUTTYPE, p.SRCREFNO, p.CREATED_DATE,p.PAYMENTREFERENCE,p.CURLEC_RECIPIENTREFERENCE FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON ml.ID = p.MERCHANT_FK WHERE p.INVOICE_ID_PROOF = '"
						+ value + "'";

				logger.info("Search Query : " + sql);
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			}
		} else {
			logger.info("Transaction type or value is");
		}

		try {

			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			for (Object[] rec : resultSet) {

				PayoutModel fs = new PayoutModel();

				if (rec[23] == null || rec[23].toString().isEmpty()) {

					fs.setCreatedby("");

				} else if (rec[23] != null) {
					fs.setCreatedby(rec[23].toString());
				}

				if (rec[1] == null || rec[1].toString().isEmpty()) {

					fs.setCreateddate("");
				}

				else if (rec[1] != null) {

					// Sheik Changes

					String time = null;
					String date = null;
					String stamp = null;
					try {

						time = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
						date = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					} catch (Exception e) {
						// TODO: handle exception
						logger.info("Time throws error and Can't extract time from date time payout detail table");
					}
					stamp = date + " " + time;
					fs.setCreateddate(stamp);

				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setModifieddate("");

				} else if (rec[2] != null) {

					fs.setModifieddate(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setPayeeaccnumber("");

				} else if (rec[3] != null) {

					fs.setPayeeaccnumber(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setPayeebrn("");

				} else

				if (rec[4] != null) {

					fs.setPayeebrn(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setPayeebankname("");

				} else

				if (rec[5] != null) {

					fs.setPayeebankname(rec[5].toString());
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setPayeeemail("");

				} else

				if (rec[6] != null) {

					fs.setPayeeemail(rec[6].toString());

				}

				if (rec[7] == null || rec[7].toString().isEmpty()) {

					fs.setPayeeic("");

				} else if (rec[7] != null) {

					fs.setPayeeic(rec[7].toString());
				}

				if (rec[8] == null || rec[8].toString().isEmpty()) {

					fs.setPayeemobile("");

				} else if (rec[8] != null) {
					fs.setPayeemobile(rec[8].toString());
				}

				if (rec[9] == null || rec[9].toString().isEmpty()) {

					fs.setPayeename("");

				} else if (rec[9] != null) {
					fs.setPayeename(rec[9].toString());
				}

				if (rec[10] == null || rec[10].toString().isEmpty()) {

					fs.setPayoutamount("");

				} else if (rec[10] != null) {
					Double d = new Double(rec[10].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setPayoutamount(output);

				}

				if (rec[11] == null || rec[11].toString().isEmpty()) {

					fs.setPayoutdate("");

				} else if (rec[11] != null) {

					String pdate = null;
					try {
						pdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));

					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setPayoutdate(pdate);

				}

				if (rec[12] == null) {

					fs.setPayoutstatus("Requested");

				} else if (rec[12] != null) {

					if (rec[12].toString().equals("A")) {
						fs.setPayoutstatus("To Process");

					} else if (rec[12].toString().equals("F")) {
						fs.setPayoutstatus("Failed");
					} else if (rec[12].toString().equals("S")) {
						fs.setPayoutstatus("Processing");
					} else if (rec[12].toString().equals("pp")) {
						fs.setPayoutstatus("Paid");
					} else if (rec[12].toString().equals("pd")) {
						fs.setPayoutstatus("Declined");
					} else if (rec[12].toString().equals("pending")) {
						fs.setPayoutstatus("Pending");
					} else if (rec[12].toString().equals("On Process")) {
						fs.setPayoutstatus("In Process");
					}
				}

				if (rec[13] == null || rec[13].toString().isEmpty()) {

					fs.setSettledate("");

				} else if (rec[13] != null) {

					String sdate = null;
					try {
						sdate = new SimpleDateFormat("dd/MM/yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(rec[11].toString()));
					} catch (ParseException e1) {
						e1.printStackTrace();
					}

					fs.setSettledate(sdate);
				}

				if (rec[14] == null || rec[14].toString().isEmpty()) {

					fs.setSettlenetamount("");

				} else if (rec[14] != null) {

					Double d = new Double(rec[14].toString());
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setSettlenetamount(output);
				}

				if (rec[15] == null || rec[15].toString().isEmpty()) {

					fs.setInvoiceidproof("");

				} else if (rec[15] != null) {
					fs.setInvoiceidproof(rec[15].toString());
				}

				if (rec[16] == null || rec[16].toString().isEmpty()) {

					fs.setPaymentreason("");

				} else if (rec[16] != null) {
					fs.setPaymentreason(rec[16].toString());
				}

				if (rec[17] == null || rec[17].toString().isEmpty()) {

					fs.setSourceoffund("");

				} else if (rec[17] != null) {
					fs.setSourceoffund(rec[17].toString());
				}

				if (rec[18] == null || rec[18].toString().isEmpty()) {

					fs.setSwiftifsccode("");

				} else if (rec[18] != null) {
					fs.setSwiftifsccode(rec[18].toString());
				}

				if (rec[19] == null || rec[19].toString().isEmpty()) {
					fs.setMerchantId("");
				} else {
					fs.setMerchantId(rec[19].toString());
				}

				if (rec[20] == null || rec[20].toString().isEmpty()) {
					fs.setPaidTime("");
				} else {
					fs.setPaidTime(rec[20].toString());
				}

				if (rec[21] == null || rec[21].toString().isEmpty()) {
					fs.setPaidDate("");
				} else {
					fs.setPaidDate(rec[21].toString());
				}

				if (rec[22] == null || rec[22].toString().isEmpty()) {
					fs.setSubmerchantMid("");
				} else {
					fs.setSubmerchantMid(rec[22].toString());
				}
				if (rec[23] == null || rec[23].toString().isEmpty()) {
					fs.setMmId("");
				} else {
					fs.setMmId(rec[23].toString());
				}
				if (rec[24] == null || rec[24].toString().isEmpty()) {
					fs.setPayoutId("");
				} else {
					fs.setPayoutId(rec[24].toString());
				}
				if (rec[25] == null || rec[25].toString().isEmpty()) {
					fs.setFailurereason("");
				} else {
					fs.setFailurereason(rec[25].toString());
				}
				if (rec[26] == null || rec[26].toString().isEmpty()) {
					fs.setPayouttype("");
				} else {
					fs.setPayouttype(rec[26].toString());
				}
				if (rec[27] == null || rec[27].toString().isEmpty()) {
					fs.setSrcrefno("");
				} else {
					fs.setSrcrefno(rec[27].toString());
				}
				if (rec[28] == null || rec[28].toString().isEmpty()) {
					fs.setTimeStamp("");
				} else {
					fs.setTimeStamp(rec[28].toString());
				}
				if (rec[29] == null || rec[29].toString().isEmpty()) {
					fs.setPaymentReference("");
				} else {
					fs.setPaymentReference(rec[29].toString());
				}
				if (rec[30] == null || rec[30].toString().isEmpty()) {
					fs.setCurlecRefNo("");
				} else {
					fs.setCurlecRefNo(rec[30].toString());
				}


				fss.add(fs);
			}
			paginationBean.setItemList(fss);
			logger.info("No of Records in the PAYOUT_DETAIL : " + paginationBean.getItemList().size());

		} catch (Exception e) {
			logger.info("Exception in Payout login dao imp " + e.getMessage() + " " + e);
			paginationBean.setItemList(new ArrayList<>());

		}
	}

	public static String capitalizeFirstLetter(String sentence) {
		if (sentence == null || sentence.isEmpty()) {
			return sentence;
		}
		return sentence;
	}

	// Ezysettle v2

	@Override
	public SettlementMDR loadNetAmountandsettlementdatebyCardEzysettle(String settlementdate, Merchant merchant) {
		logger.info("Card Settlement Date format =>  " + settlementdate);

		String umMid = Optional.ofNullable(merchant.getMid().getUmMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String fiuuMid = Optional.ofNullable(merchant.getMid().getFiuuMid()).orElse(null);
		
		logger.info("Inside loadNetAmountandsettlementdatebyCard");

		String sql = "select replace(round(sum(e.TXN_AMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.NET_AMOUNT),2),',',''),e.SETTLEMENTDATE,e.STATUS from mobiversa.SETTLEMENT_MDR e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:fiuuMid) and e.STATUS in ('S') and e.SETTLEMENTDATE LIKE '"
				+ settlementdate + "%' and e.REASON is null ";

		logger.info("Card Query : "
				+ "select replace(round(sum(e.TXN_AMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.NET_AMOUNT),2),',',''),e.SETTLEMENTDATE,e.STATUS from mobiversa.SETTLEMENT_MDR e where e.MID in ("
				+ umMid + "," + umEzywayMid + "," + umMotoMid +","+fiuuMid+ ") and e.STATUS in ('S') and e.SETTLEMENTDATE LIKE '"
				+ settlementdate + "%' and e.REASON is null");
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("fiuuMid", fiuuMid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());

		SettlementMDR settlementmdr = resultSet.stream().map(rec -> {
			Utils util = new Utils();
			SettlementMDR settledata = new SettlementMDR();

			String txnAmount = rec[0] == null ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[0].toString()));
			settledata.setTxnAmount(txnAmount);

			String mdrAmount = (rec[1] == null || rec[1].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[1].toString()));
			settledata.setMdrAmt(mdrAmount);

			String netAmount = (rec[2] == null || rec[2].toString().isEmpty()) ? "0.00"
					: (rec[4].toString().equals("S") || rec[4].toString().equals("SLS")) ? rec[2].toString() : "0.00";
			settledata.setNetAmount(netAmount);

			try {
				String settlementDate = (rec[3] == null || rec[3].toString().isEmpty()) ? ""
						: new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
				settledata.setSettlementDate(settlementDate);
			} catch (ParseException e) {
				e.printStackTrace();
				logger.error(e.getMessage());
				settledata.setSettlementDate(""); // Set default value or handle the error appropriately
			}

			return settledata;
		}).findFirst() // Returns the first SettlementMDR object from the stream
				.orElse(null); // Returns null if no object is found;

		return settlementmdr;

	}

	@Override
	public BoostDailyRecon loadNetAmountandsettlementdatebyBoostEzysettle(String settlementdate, Merchant merchant) {

		String formatcurrentdate = null;
		try {
			formatcurrentdate = new SimpleDateFormat("yyyyMMdd")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			logger.error(e.getMessage());
			e.printStackTrace();
		}
		logger.info("Boost Settlement Date format =>  " + formatcurrentdate);

		String umMid = Optional.ofNullable(merchant.getMid().getUmMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String boostmid = Optional.ofNullable(merchant.getMid().getBoostMid()).orElse(null);
//		logger.info(" Inside loadNetAmountandsettlementdatebyBoost  ");

		ArrayList<BoostDailyRecon> boostdlyrecon = new ArrayList<BoostDailyRecon>();

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDRAMOUNT),2),',',''),replace(round(sum(e.NETAMOUNT),2),',',''),e.SETTLE_DATE,e.PAYMENT from mobiversa.BOOST_DLY_RECON e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:boostmid) and e.PAYMENT in ('S') and e.SETTLE_DATE LIKE '"
				+ formatcurrentdate + "%' and e.REASON is null ";

//		String sql ="SELECT REPLACE(ROUND(SUM(b.TXNAMOUNT), 2), ',', ''),REPLACE(ROUND(SUM(b.MDRAMOUNT),2),',',''), "
//				+ " replace(round(sum(b.NETAMOUNT),2),',',''),b.SETTLE_DATE,b.PAYMENT "
//				+ " FROM mobiversa.BOOST_DLY_RECON b "
//				+ " INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_FK = m.ID "
//				+ " WHERE b.PAYMENT IN ('S', 'H') AND b.SETTLE_DATE LIKE '"+formatcurrentdate+"%' AND  b.REASON IS NULL GROUP BY b.SETTLE_DATE";
		logger.info("BOOST QUERY: " + sql);
//		logger.info("Boost Query : "
//				+ "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDRAMOUNT),2),',',''),replace(round(sum(e.NETAMOUNT),2),',',''),e.SETTLE_DATE,e.PAYMENT from mobiversa.BOOST_DLY_RECON e where e.MID in ("
//				+ umMid + "," + umEzywayMid + "," + umMotoMid + "," + boostmid
//				+ ") and e.PAYMENT in ('S') and e.SETTLE_DATE LIKE '" + formatcurrentdate + "%' and e.REASON is null");

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("boostmid", boostmid);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());

		BoostDailyRecon boostDailyRecon = resultSet.stream().map(rec -> {
			BoostDailyRecon boostdata = new BoostDailyRecon();
			Utils util = new Utils();

			String txnAmount = (rec[0] == null || rec[0].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[0].toString()));
			boostdata.setTxnAmount(txnAmount);

			String mdrAmount = (rec[1] == null || rec[1].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[1].toString()));
			boostdata.setMdrAmount(mdrAmount);

			String netAmount = (rec[2] == null || rec[2].toString().isEmpty()) ? "0.00"
					: (rec[4].toString().equals("S")) ? rec[2].toString() : "0.00";
			boostdata.setNetAmount(netAmount);

			try {
				String settlementDate = (rec[3] == null || rec[3].toString().isEmpty()) ? ""
						: new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyyMMdd").parse(rec[3].toString().substring(0, 8)));
				boostdata.setSettleDate(settlementDate);
			} catch (ParseException e) {
				logger.error(e.getMessage());
				boostdata.setSettleDate(""); // Set default value or handle the error appropriately
			}

			return boostdata;

		}).findFirst().orElse(null);

		return boostDailyRecon;

	}

	@Override
	public GrabPayFile loadNetAmountandsettlementdatebyGrabpayEzysettle(String settlementdate, Merchant merchant) {

		try {
			long currentMerchantid = merchant.getId();

			logger.info(
					"Grab Settlement Date format =>  " + settlementdate + " currentMerchantid " + currentMerchantid);

			String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR),2),',',''),replace(round(sum(e.NETAMT),2),',',''),e.SETTLEMENT_DATE,e.STATUS from mobiversa.GRABPAY_FILE e where e.MERCHANTID = :currentMerchantid and e.STATUS in ('A') and e.SETTLEMENT_DATE like '"
					+ settlementdate + "%' and e.REASON is null ";
//		logger.info("Grabpay Query : "
//				+ "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR),2),',',''),replace(round(sum(e.NETAMT),2),',',''),e.SETTLEMENT_DATE,e.STATUS from mobiversa.GRABPAY_FILE e where e.MERCHANTID = "
//				+ currentMerchantid + " and e.STATUS in ('A') and e.SETTLEMENT_DATE like '" + settlementdate
//				+ "%' and e.REASON is null");
//		String sql = "SELECT REPLACE(ROUND(SUM(g.TXNAMOUNT), 2), ',', ''),replace(round(sum(g.MDR),2),',',''),replace(round(sum(g.NETAMT),2),',',''),g.SETTLEMENT_DATE,g.STATUS "
//				+ "FROM mobiversa.GRABPAY_FILE g "
//				+ "INNER JOIN mobiversa.MERCHANT m ON m.ID = g.MERCHANTID "
//				+ "WHERE g.STATUS IN ('A', 'H') "
//				+ "AND g.SETTLEMENT_DATE like '"+settlementdate+"%' "
//				+ "AND g.REASON IS NULL "
//				+ "GROUP BY g.SETTLEMENT_DATE";
			logger.info("GRAB QUERY: " + sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setLong("currentMerchantid", currentMerchantid);

			List<Object[]> resultSet = sqlQuery.list();
			logger.info("resultset size:" + resultSet.size());

			GrabPayFile grabPayFile = resultSet.stream().map(rec -> {
				GrabPayFile grabpaydata = new GrabPayFile();
				Utils util = new Utils();

				String txnAmount = (rec[0] == null || rec[0].toString().isEmpty()) ? "0.00"
						: util.amountFormatWithcomma(Double.parseDouble(rec[0].toString()));
				grabpaydata.setTxnAmount(txnAmount);

				String mdrAmount = (rec[1] == null || rec[1].toString().isEmpty()) ? "0.00"
						: util.amountFormatWithcomma(Double.parseDouble(rec[1].toString()));
				grabpaydata.setMdr(mdrAmount);

				String netAmount = (rec[2] == null || rec[2].toString().isEmpty()) ? "0.00"
						: (rec[4].toString().equals("A")) ? rec[2].toString() : "0.00";
				grabpaydata.setNetAmt(netAmount);

				try {
					String settlementDate = (rec[3] == null || rec[3].toString().isEmpty()) ? ""
							: new SimpleDateFormat("dd-MMM-yyyy")
									.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
					grabpaydata.setSettlementDate(settlementDate);
				} catch (ParseException e) {
					logger.error(e.getMessage());
					grabpaydata.setSettlementDate(""); // Set default value or handle the error appropriately
				}
				return grabpaydata;

			}).findFirst().orElse(null);

			return grabPayFile;
		} catch (Exception e) {
			logger.error("Exception in loading net amount from GRABPAY_FILE for Ezysettle: " + e);
			return new GrabPayFile();
		}

	}

	@Override
	public FpxTransaction loadNetAmountandsettlementdatebyFpxEzysettle(String settlementdate, Merchant merchant) {

		String fpxformatcurrentdate = null;
//		logger.info("Settlement Date : " + settlementdate);
		try {
			fpxformatcurrentdate = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd").parse(settlementdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		logger.info("Fpx Settlement Date Format  : " + fpxformatcurrentdate);

		String umMid = Optional.ofNullable(merchant.getMid().getUmMid()).orElse(null);
		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String fpxmid = Optional.ofNullable(merchant.getMid().getFpxMid()).orElse(null);
		Long merchantId = Optional.ofNullable(merchant.getId()).orElse(null);

//		logger.info("Inside loadNetAmountandsettlementdatebyFPX");

		String sql = "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.FPX_TRANSACTION e where e.MID in (:umMid,:umEzywayMid,:umMotoMid,:fpxmid) and e.STATUS in ('S') and e.SETTLED_DATE = :fpxformatcurrentdate and e.DEBITAUTHCODE = '00' and e.REASON is null ";
//
//		logger.info("Fpx Query : "
//				+ "select replace(round(sum(e.TXNAMOUNT),2),',',''),replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.FPX_TRANSACTION e where e.MID in ("
//				+ umMid + "," + umEzywayMid + "," + umMotoMid + "," + fpxmid
//				+ ") and e.STATUS in ('S') and e.SETTLED_DATE = " + fpxformatcurrentdate
//				+ " and e.DEBITAUTHCODE = '00' and e.REASON is null ");

//		String sql = "select replace(round(sum(f.TXNAMOUNT),2),',',''),replace(round(sum(f.MDR_AMT),2),',',''),replace(round(sum(f.PAYABLEAMT),2),',',''),f.SETTLED_DATE,f.STATUS "
//				+ "FROM mobiversa.FPX_TRANSACTION f "
//				+ "INNER JOIN mobiversa.MERCHANT m ON f.MERCHANT_ID = m.ID "
//				+ "WHERE f.STATUS IN ('S', 'H') AND f.SETTLED_DATE = '"+fpxformatcurrentdate+"' AND "
//				+ "f.DEBITAUTHCODE = '00' AND f.REASON IS NULL AND f.MERCHANT_ID = '"+merchantId+"' "
//				+ "GROUP BY f.SETTLED_DATE";
		logger.info("FPX QUERY: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		sqlQuery.setString("fpxmid", fpxmid);
		sqlQuery.setString("fpxformatcurrentdate", fpxformatcurrentdate);

		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());

		FpxTransaction fpxTransaction = resultSet.stream().map(rec -> {
			FpxTransaction fpxTransactionData = new FpxTransaction();
			Utils util = new Utils();

			String txnAmount = (rec[0] == null || rec[0].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[0].toString()));
			fpxTransactionData.setTxnAmount(txnAmount);

			String mdrAmount = (rec[1] == null || rec[1].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[1].toString()));
			fpxTransactionData.setMdrAmt(mdrAmount);

			String netAmount = (rec[2] == null || rec[2].toString().isEmpty()) ? "0.00"
					: (rec[4].toString().equals("S")) ? rec[2].toString() : "0.00";
			fpxTransactionData.setPayableAmt(netAmount);

			String settlementDate = (rec[3] == null || rec[3].toString().isEmpty()) ? "" : rec[3].toString();
			fpxTransactionData.setSettledDate(settlementDate);

			return fpxTransactionData;

		}).findFirst().orElse(null);

		return fpxTransaction;

	}

	@Override
	public EwalletTxnDetails loadNetAmountandsettlementdatebym1PayEzysettle(String settlementdate, Merchant merchant) {

		String umEzywayMid = Optional.ofNullable(merchant.getMid().getUmEzywayMid()).orElse(null);
		String umMotoMid = Optional.ofNullable(merchant.getMid().getUmMotoMid()).orElse(null);
		String tngMid = Optional.ofNullable(merchant.getMid().getTngMid()).orElse(null);
		String shoppyMid = Optional.ofNullable(merchant.getMid().getShoppyMid()).orElse(null);
		logger.info("Inside loadNetAmountandsettlementdateby Tng-Shoppy");
		logger.info("Tng-Shoppy Settlement Date format = > " + settlementdate);

		ArrayList<EwalletTxnDetails> etdtransactionlist = new ArrayList<EwalletTxnDetails>();

		String sql = "select '' As AMOUNT,replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.EWALLET_TXN_DETAILS e where e.MID in (:tngMid,:shoppyMid,:umEzywayMid,:umMotoMid) and e.STATUS in ('TPS','SPS') and e.SETTLED_DATE = :settlementdate and e.REASON is null ";

//		logger.info("Tng-Shoppy Query : "
//				+ "select '' As AMOUNT,replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS from mobiversa.EWALLET_TXN_DETAILS e where e.MID in ("
//				+ tngMid + "," + shoppyMid + "," + umEzywayMid + "," + umMotoMid
//				+ ") and e.STATUS in ('TPS','SPS') and e.SETTLED_DATE = " + settlementdate + " and e.REASON is null ");
//		String sql = "select '' As AMOUNT,replace(round(sum(e.MDR_AMT),2),',',''),replace(round(sum(e.PAYABLEAMT),2),',',''),e.SETTLED_DATE,e.STATUS "
//				+ "FROM mobiversa.EWALLET_TXN_DETAILS e "
//				+ "INNER JOIN mobiversa.MERCHANT m ON e.MERCHANT_FK = m.ID "
//				+ "WHERE e.STATUS IN ('TPS','SPS') "
//				+ "AND e.SETTLED_DATE = '"+settlementdate+"' "
//				+ "AND e.REASON IS NULL "
//				+ "GROUP BY e.MID";

		logger.info("TNG-SHOPPY QUERY: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("settlementdate", settlementdate);
		sqlQuery.setString("tngMid", tngMid);
		sqlQuery.setString("shoppyMid", shoppyMid);
		sqlQuery.setString("umEzywayMid", umEzywayMid);
		sqlQuery.setString("umMotoMid", umMotoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultset size:" + resultSet.size());

		EwalletTxnDetails ewalletTxnDetails = resultSet.stream().map(rec -> {
			EwalletTxnDetails EwalletTxnDetailsData = new EwalletTxnDetails();
			Utils util = new Utils();

			String txnAmount = (rec[0] == null || rec[0].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[0].toString()));
			EwalletTxnDetailsData.setAmount(txnAmount);

			String mdrAmount = (rec[1] == null || rec[1].toString().isEmpty()) ? "0.00"
					: util.amountFormatWithcomma(Double.parseDouble(rec[1].toString()));
			EwalletTxnDetailsData.setMdrAmt(mdrAmount);

			String netAmount = (rec[2] == null || rec[2].toString().isEmpty()) ? "0.00"
					: (rec[4].toString().equals("TPS") || rec[4].toString().equals("SPS")) ? rec[2].toString() : "0.00";
			EwalletTxnDetailsData.setPayableAmt(netAmount);

			String settlementDate = (rec[3] == null || rec[3].toString().isEmpty()) ? "" : rec[3].toString();
			EwalletTxnDetailsData.setSettledDate(settlementDate);

			return EwalletTxnDetailsData;

		}).findFirst().orElse(null);

		return ewalletTxnDetails;
	}

	public void saveJustSettle(JustSettle updatejsdata) {

		PreparedStatement pstmt = null;
		try (Connection conn = DBConnection.getConnection()) {
			String query = "INSERT INTO JUST_SETTLE (MERCHANTNAME,MERCHANTEMAIL,`MID`,TID,NET_AMOUNT_PAYABLE,WITHDRAWFEE,NET_AMOUNT,WITHDRAW_DATES,`STATUS`,SETTLEMENTDATE,TIME_STAMP,BANK_REQUEST_AMOUNT,BANK_FEE,EZYSETTLE_REFERENCE_NO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?, ?)";
			pstmt = conn.prepareStatement(query);

			// Set parameters
			pstmt.setString(1, updatejsdata.getMerchantName());
			pstmt.setString(2, updatejsdata.getMerchantEmail());
			pstmt.setString(3, updatejsdata.getMid());
			pstmt.setString(4, updatejsdata.getTid());
			pstmt.setString(5, updatejsdata.getNetAmountPayable());
			pstmt.setString(6, updatejsdata.getWithDrawFee());
			pstmt.setString(7, updatejsdata.getNetAmount());
			pstmt.setString(8, updatejsdata.getWithDrawDate());
			pstmt.setString(9, updatejsdata.getStatus());
			pstmt.setString(10, updatejsdata.getSettlementDate());
			pstmt.setString(11, updatejsdata.getTimeStamp());
			pstmt.setString(12, updatejsdata.getBankRequestAmount());
			pstmt.setString(13, updatejsdata.getBankFee());
			pstmt.setString(14, updatejsdata.getEzysettleReferenceNo());

			logger.info("Executing update query: " + pstmt.toString());
			int affectedRows = pstmt.executeUpdate();
			logger.info("Just settle Table Intial Entry Affected Rows: " + affectedRows);

		} catch (Exception e) {
			logger.error("Exception Justsettle Insert Time : " + e.getMessage());
		}
	}

	// withdraw and Deposit Summary

	@Override
	public void listDepositDetails(PaginationBean<WithdrawDeposit> paginationBean, String fromDate, String toDate,
			int currPage) {

		Query sqlQuery = null;
		logger.info("Inside listDepositDetails : " + fromDate + ":::" + toDate);

		List<WithdrawDeposit> fss = new ArrayList<>();
		String sql = null;
		int querySize = 0;
		String VALUE = null;
		List<Object[]> resultSet = null;
		String from = null;
		String to = null;

		try {
			if ((fromDate == null || toDate == null) || (fromDate.equals("") || toDate.equals(""))) {

				LocalDate Currentdate = LocalDate.now().minusDays(5);
				LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
				from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				logger.info("Null -> from date:  " + from);
				logger.info("Null -> from date:  " + to);

			} else {

				from = fromDate;
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				try {
					from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
					logger.info("date format from is :" + from);
				} catch (ParseException e) {

					e.printStackTrace();
				}

				to = toDate;
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				try {
					to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
					logger.info("date format To is :" + to);
				} catch (ParseException e) {

					e.printStackTrace();
				}

			}

			logger.info("search query From " + from + " To " + to);

			sql = "SELECT p.TIMESTAMP,ml.BUSINESS_NAME,p.PREVIOUS_BALANCE,p.DEPOSIT_AMOUNT,p.AVAILABLE_BALANCE,"
					+ "p.EMAIL_STATUS,p.REFERENCE_NO FROM mobiversa.PAYOUT_DEPOSIT_DETAILS p INNER JOIN "
					+ " mobiversa.MERCHANT ml ON ml.ID=p.MERCHANT_ID WHERE p.TIMESTAMP BETWEEN '" + from + "' and '"
					+ to + "'" + " ORDER BY p.TIMESTAMP DESC";

			logger.info("Search Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));

			logger.info("Querysize : " + querySize);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			resultSet = sqlQuery.list();
			logger.info(String.valueOf(resultSet.size()));

			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				WithdrawDeposit fs = new WithdrawDeposit();

				if (rec[0] == null || rec[0].toString().isEmpty()) {
					fs.setTimeStamp("");

				} else if (rec[0] != null) {
					String timestamp = rec[0].toString();
					try {
						SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
						SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						Date date = inputFormat.parse(timestamp);
						fs.setTimeStamp(outputFormat.format(date));
					} catch (ParseException e) {
						e.printStackTrace();
						fs.setTimeStamp(timestamp); // fallback to original format if parsing fails
					}
				}

				if (rec[1] == null || rec[1].toString().isEmpty()) {

					fs.setMerchantName("");

				} else if (rec[1] != null) {

					fs.setMerchantName(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setPreviousBalance("0.00");

				} else if (rec[2] != null) {

					fs.setPreviousBalance(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setDepositAmount("0.00");

				} else if (rec[3] != null) {

					fs.setDepositAmount(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setAvailableBalance("0.00");

				} else

				if (rec[4] != null) {

					fs.setAvailableBalance(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setEmailStatus("");

				} else if (rec[5] != null) {

					if (rec[5].toString().equals("1")) {
						fs.setEmailStatus("Sent");

					} else if (rec[5].toString().equals("0")) {
						fs.setEmailStatus("Failed");
					}
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setReferenceNo("");

				} else

				if (rec[6] != null) {

					fs.setReferenceNo(rec[6].toString());

				}

				fss.add(fs);

			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + fss.size());

		} catch (Exception ex) {
			logger.error("Error in listDepositDetails: " + ex.getMessage(), ex);
			// Handle the exception appropriately
		}
	}

	@Override
	public void listDepositDetailsUsingId(PaginationBean<WithdrawDeposit> paginationBean, int currPage,
			String merchantId) {

		// String searchvalue = VALUE;
		Query sqlQuery = null;
		logger.info("Curr Page : " + currPage + "Merchant Id : " + merchantId);

		List<WithdrawDeposit> fss = new ArrayList<>();
		String sql = null;
		int querySize = 0;
		String VALUE = null;
		List<Object[]> resultSet = null;

		try {

			logger.info("MERCHANT ID IS  :" + merchantId);

			sql = " SELECT p.TIMESTAMP,ml.BUSINESS_NAME,p.PREVIOUS_BALANCE,p.DEPOSIT_AMOUNT,p.AVAILABLE_BALANCE,"
					+ " p.EMAIL_STATUS,p.REFERENCE_NO FROM mobiversa.PAYOUT_DEPOSIT_DETAILS p INNER JOIN mobiversa.MERCHANT ml"
					+ " ON ml.ID=p.MERCHANT_ID WHERE p.MERCHANT_ID = '" + merchantId + "'  ORDER BY p.TIMESTAMP DESC";
			logger.info("Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

			logger.info("Querylast : " + sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));

			logger.info("Querysize : " + querySize);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			resultSet = sqlQuery.list();
			logger.info(String.valueOf(resultSet.size()));

			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				WithdrawDeposit fs = new WithdrawDeposit();

				if (rec[0] == null || rec[0].toString().isEmpty()) {
					fs.setTimeStamp("");

				} else if (rec[0] != null) {
					String timestamp = rec[0].toString();
					try {
						SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
						SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						Date date = inputFormat.parse(timestamp);
						fs.setTimeStamp(outputFormat.format(date));
					} catch (ParseException e) {
						e.printStackTrace();
						fs.setTimeStamp(timestamp); // fallback to original format if parsing fails
					}
				}

				if (rec[1] == null || rec[1].toString().isEmpty()) {

					fs.setMerchantName("");

				} else if (rec[1] != null) {

					fs.setMerchantName(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setPreviousBalance("0.00");

				} else if (rec[2] != null) {

					fs.setPreviousBalance(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setDepositAmount("0.00");

				} else if (rec[3] != null) {

					fs.setDepositAmount(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setAvailableBalance("0.00");

				} else

				if (rec[4] != null) {

					fs.setAvailableBalance(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setEmailStatus("");

				} else

				if (rec[5] != null) {

					if (rec[5].toString().equals("1")) {
						fs.setEmailStatus("Sent");

					} else if (rec[5].toString().equals("0")) {
						fs.setEmailStatus("Failed");
					}
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setReferenceNo("");

				} else

				if (rec[6] != null) {

					fs.setReferenceNo(rec[6].toString());

				}

				fss.add(fs);

			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + fss.size());

		} catch (Exception ex) {
			logger.error("Error in listDepositDetails: " + ex.getMessage(), ex);
			// Handle the exception appropriately
		}
	}

	@Override
	public void listWithdrawDetails(PaginationBean<WithdrawDeposit> paginationBean, String fromDate, String toDate,
			int currPage) {

		Query sqlQuery = null;
		logger.info("Inside listWithdrawDetails : " + fromDate + ":::" + toDate);

		List<WithdrawDeposit> fss = new ArrayList<>();
		String sql = null;
		int querySize = 0;
		List<Object[]> resultSet = null;
		String from = null;
		String to = null;

		try {
			if ((fromDate == null || toDate == null) || (fromDate.equals("") || toDate.equals(""))) {

				LocalDate Currentdate = LocalDate.now().minusDays(5);
				LocalDate Tomorrowdate = LocalDate.now().plusDays(1);
				from = Currentdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				to = Tomorrowdate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				logger.info("Null -> from date:  " + from);
				logger.info("Null -> from date:  " + to);

			} else {

				from = fromDate;
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				try {
					from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
					logger.info("date format from is :" + from);
				} catch (ParseException e) {

					e.printStackTrace();
				}

				to = toDate;
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				try {
					to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
					logger.info("date format To is :" + to);
				} catch (ParseException e) {

					e.printStackTrace();
				}

			}

			logger.info("search query From " + from + " To " + to);

			sql = " SELECT p.CREATED_DATE,ml.BUSINESS_NAME,p.PRE_ADJUSTMENT_AVAILABLE_BALANCE,p.WITHDRAW_AMOUNT,"
					+ "p.POST_ADJUSTMENT_AVAILABLE_BALANCE,p.PAYOUT_FUND_DISBURSMENT_STATUS,p.`COMMENT`,p.WITHDRAW_TYPE,p.PAYOUT_ID "
					+ "FROM mobiversa.WITHDRAWAL_TRANSACTION_DETAILS p INNER JOIN mobiversa.MERCHANT ml "
					+ "ON ml.ID=p.MERCHANTID WHERE p.CREATED_DATE BETWEEN '" + from + "' and '" + to + "'"
					+ " ORDER BY p.CREATED_DATE DESC";

			logger.info("Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

			logger.info("Querylast : " + sql);

			querySize = sqlQuery.list().size();
			paginationBean.setQuerySize(String.valueOf(querySize));
			logger.info("querySize :" + querySize);

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			resultSet = sqlQuery.list();
			logger.info(String.valueOf(resultSet.size()));

			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				WithdrawDeposit fs = new WithdrawDeposit();

				if (rec[0] == null || rec[0].toString().isEmpty()) {
					fs.setTimeStamp("");

				} else if (rec[0] != null) {
					String timestamp = rec[0].toString();
					try {
						SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
						SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						Date date = inputFormat.parse(timestamp);
						fs.setTimeStamp(outputFormat.format(date));
					} catch (ParseException e) {
						e.printStackTrace();
						fs.setTimeStamp(timestamp); // fallback to original format if parsing fails
					}
				}

				if (rec[1] == null || rec[1].toString().isEmpty()) {

					fs.setMerchantName("");

				} else if (rec[1] != null) {

					fs.setMerchantName(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setPreviousBalance("0.00");

				} else if (rec[2] != null) {

					fs.setPreviousBalance(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setWithdrawAmount("0.00");

				} else if (rec[3] != null) {

					fs.setWithdrawAmount(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setAvailableBalance("0.00");

				} else

				if (rec[4] != null) {

					fs.setAvailableBalance(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setStatus("");

				} else

				if (rec[5] != null) {

					if (rec[5].toString().equals("Success")) {
						fs.setStatus("Completed");

					} else if (rec[5].toString().equals("WithdrawFailed")) {
						fs.setStatus("Failed");
					}
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setReason("");

				} else

				if (rec[6] != null) {

					fs.setReason(rec[6].toString());

				}

				if (rec[7] == null || rec[7].toString().isEmpty()) {

					fs.setType("");

				} else

				if (rec[7] != null) {

					fs.setType(rec[7].toString());

				}

				if (rec[8] == null || rec[8].toString().isEmpty()) {

					fs.setReferenceNo("");

				} else

				if (rec[8] != null) {

					fs.setReferenceNo(rec[8].toString());

				}

				fss.add(fs);

			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + fss.size());

		} catch (Exception ex) {
			logger.error("Error in listWithdrawalDetails: " + ex.getMessage(), ex);
			// Handle the exception appropriately
		}
	}

	@Override
	public void listWithdrawDetailsUsingId(PaginationBean<WithdrawDeposit> paginationBean, int currPage,
			String merchantId) {

		Query sqlQuery = null;
		logger.info("Curr Page : " + currPage + "Merchant Id : " + merchantId);

		List<WithdrawDeposit> fss = new ArrayList<>();
		String sql = null;
		int querySize = 0;
		List<Object[]> resultSet = null;

		try {

			logger.info("MERCHANT ID IS :" + merchantId);

			sql = " SELECT p.CREATED_DATE,ml.BUSINESS_NAME,p.PRE_ADJUSTMENT_AVAILABLE_BALANCE,p.WITHDRAW_AMOUNT,"
					+ "p.POST_ADJUSTMENT_AVAILABLE_BALANCE,p.PAYOUT_FUND_DISBURSMENT_STATUS,p.`COMMENT`,p.WITHDRAW_TYPE,p.PAYOUT_ID "
					+ "FROM mobiversa.WITHDRAWAL_TRANSACTION_DETAILS p INNER JOIN mobiversa.MERCHANT ml"
					+ " ON ml.ID=p.MERCHANTID WHERE p.MERCHANTID = '" + merchantId + "'  ORDER BY p.CREATED_DATE DESC";

			logger.info("Query : " + sql);

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

			logger.info("Querylast : " + sql);

			querySize = sqlQuery.list().size();

			logger.info("Querysize : " + querySize);

			paginationBean.setQuerySize(String.valueOf(querySize));

			// Dynamic changes for pagination count

			String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
			int pageSize = Integer.parseInt(DynamicPage);

			int pageNumFromJsp = paginationBean.getCurrPage();
			logger.info("Page Number:" + pageNumFromJsp);
			logger.info("Max Count for Records:" + pageSize);

			sqlQuery.setFirstResult((pageNumFromJsp * pageSize) - pageSize);
			sqlQuery.setMaxResults(pageSize);

			resultSet = sqlQuery.list();
			logger.info(String.valueOf(resultSet.size()));

			logger.info("Number of records in the List : " + resultSet.size());

			for (Object[] rec : resultSet) {

				WithdrawDeposit fs = new WithdrawDeposit();

				if (rec[0] == null || rec[0].toString().isEmpty()) {
					fs.setTimeStamp("");

				} else if (rec[0] != null) {
					String timestamp = rec[0].toString();
					try {
						SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
						SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						Date date = inputFormat.parse(timestamp);
						fs.setTimeStamp(outputFormat.format(date));
					} catch (ParseException e) {
						e.printStackTrace();
						fs.setTimeStamp(timestamp); // fallback to original format if parsing fails
					}
				}

				if (rec[1] == null || rec[1].toString().isEmpty()) {

					fs.setMerchantName("");

				} else if (rec[1] != null) {

					fs.setMerchantName(rec[1].toString());
				}

				if (rec[2] == null || rec[2].toString().isEmpty()) {

					fs.setPreviousBalance("0.00");

				} else if (rec[2] != null) {

					fs.setPreviousBalance(rec[2].toString());
				}

				if (rec[3] == null || rec[3].toString().isEmpty()) {

					fs.setWithdrawAmount("0.00");

				} else if (rec[3] != null) {

					fs.setWithdrawAmount(rec[3].toString());

				}

				if (rec[4] == null || rec[4].toString().isEmpty()) {

					fs.setAvailableBalance("0.00");

				} else

				if (rec[4] != null) {

					fs.setAvailableBalance(rec[4].toString());

				}

				if (rec[5] == null || rec[5].toString().isEmpty()) {

					fs.setStatus("");

				} else

				if (rec[5] != null) {

					if (rec[5].toString().equals("Success")) {
						fs.setStatus("Completed");

					} else if (rec[5].toString().equals("WithdrawFailed")) {
						fs.setStatus("Failed");
					}
				}

				if (rec[6] == null || rec[6].toString().isEmpty()) {

					fs.setReason("");

				} else

				if (rec[6] != null) {

					fs.setReason(rec[6].toString());

				}

				if (rec[7] == null || rec[7].toString().isEmpty()) {

					fs.setType("");

				} else

				if (rec[7] != null) {

					fs.setType(rec[7].toString());

				}

				if (rec[8] == null || rec[8].toString().isEmpty()) {

					fs.setReferenceNo("");

				} else

				if (rec[8] != null) {

					fs.setReferenceNo(rec[8].toString());

				}

				fss.add(fs);

			}
			paginationBean.setItemList(fss);
			logger.info("No of Records: " + fss.size());

		} catch (Exception ex) {
			logger.error("Error in listWithdrawalDetails: " + ex.getMessage(), ex);
			// Handle the exception appropriately
		}
	}

	@Override
	public List<Object[]> getBusinessNamesAndIds() {
		String sql = "SELECT f.BUSINESS_NAME, f.ID FROM mobiversa.MERCHANT f ORDER BY f.BUSINESS_NAME ASC";
		logger.info("Query: " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Query Run Successfully: " + sql);
		return resultSet;
	}

	@Override
	@Transactional(readOnly = true)
	public List<FinanceReport> getPayinTxnDetailsBetweenDates(String date1, String date2, String umEzywayMid,
			String fpxmid, String ummotomid, String ummid, String mid, String paydeeEzywaymid, String ezyrecmid,
			String bnplMid, String boostmid, String tngMid, String shoppyMid, String grabmid, String fiuuMid,
			Merchant currentMerchant) {

		logger.info("date1::" + date1);
		logger.info("date2::" + date2);

		String formattedDate1 = null;
		String formattedDate2 = null;

		try {
			DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyyMMdd");

			// Parse the input dates and format them to the desired output format
			formattedDate1 = LocalDate.parse(date1, inputFormatter).format(outputFormatter);
			formattedDate2 = LocalDate.parse(date2, inputFormatter).format(outputFormatter);

			// Log the formatted dates
			logger.info("formattedDate1::" + formattedDate1);
			logger.info("formattedDate2::" + formattedDate2);

		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("Exception while formating the date from Settlement table");
		}

		try {
			logger.info("getPayinTxnDetailsBetweenDates Query:::");
			String Ezywaymid = umEzywayMid;
			ArrayList<FinanceReport> fss = new ArrayList<FinanceReport>();

//			String sql = "select f.TIME_STAMP, f.MID, f.TID, f.TXNAMOUNT as AMOUNT, "
//					+ "NULL AS CARDNAME, NULL AS CARDNUMBER, f.SELLERORDERNO as INVOICE_ID, f.FPXTXNID as AID_RESPONSE, "
//					+ "NULL AS RRN, f.STATUS, 'FPX' AS TXN_TYPE, f.MDR_AMT, f.PAYABLEAMT as NETAMOUNT, "
//					+ "f.SETTLED_DATE as SETTLE_DATE, NULL AS EZYSETTLEAMOUNT, NULL AS FRAUDSCORE, NULL AS FRAUDID, f.SUB_MERCHANT_MID "
//					+ "from FPX_TRANSACTION f "
//					+ "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND f.STATUS IN ('S') AND f.MID IN (:Ezywaymid, :fpxmid, :motomid, :mid) "
//					+ "AND f.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
//
//					+ "UNION "
//
//					+ "select a.TIME_STAMP, a.MID, NULL AS TID, a.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, a.INVOICE_ID, a.AID_RESPONSE, "
//					+ "a.RRN, a.STATUS, a.TXN_TYPE, "
//					+ "(select SUM(f.HOSTMDR+ f.MOBIMDR) from GRABPAY_FILE f where a.RRN = f.PARTNERID) AS MDRAMT, "
//					+ "(select f.NETAMT from GRABPAY_FILE f where a.RRN = f.PARTNERID) AS NETAMOUNT, "
//					+ "(select f.SETTLEMENT_DATE from GRABPAY_FILE f where a.RRN = f.PARTNERID) AS PAYMENT_DATE, "
//					+ "(select f.EZYSETTLE_AMOUNT from GRABPAY_FILE f where a.RRN = f.PARTNERID) AS EZYSETTLEAMOUNT, "
//					+ "NULL AS FRAUD_SCORE, NULL AS FRAUD_ID, a.SUB_MERCHANT_MID " + "from MID m "
//					+ "INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK "
//					+ "INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
//					+ "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
//					+ "WHERE a.MID IN (:Ezywaymid, :grabmid, :motomid, :ummid, :mid)  "
//					+ "AND (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') "
//					+ "AND a.STATUS in ('GPS','GPA') " + "AND a.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
//
//					+ "UNION "
//
//					+ "select a.TIME_STAMP, a.MID, NULL AS TID, a.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, a.INVOICE_ID, a.AID_RESPONSE, "
//					+ "a.RRN, a.STATUS, a.TXN_TYPE, "
//					+ "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS MDRAMT, "
//					+ "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS NETAMOUNT, "
//					+ "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS SETTLE_DATE, "
//					+ "(select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID) AS EZYSETTLEAMOUNT, NULL AS FRAUD_SCORE, NULL AS FRAUD_ID, a.SUB_MERCHANT_MID "
//					+ "from FOR_SETTLEMENT a "
//					+ "INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID OR a.MID=m.UM_MOTO_MID) "
//					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
//					+ "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') "
//					+ "AND a.STATUS IN ('BPS','BPA') " + "AND a.MID IN (:Ezywaymid, :boostmid, :motomid, :ummid, :mid) "
//					+ "AND a.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
//
//					+ "UNION "
//
//					+ "select f.TIME_STAMP, f.MID, f.TID, f.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, f.INVOICE_ID, f.TNG_TXN_ID, "
//					+ "NULL AS RRN, f.STATUS, f.TXN_TYPE, f.MDR_AMT, f.PAYABLEAMT as NETAMOUNT, f.SETTLED_DATE as SETTLE_DATE, f.EZYSETTLE_AMOUNT, "
//					+ "NULL AS FRAUDSCORE, NULL AS FRAUDID, f.SUB_MERCHANT_MID "
//					+ "from mobiversa.EWALLET_TXN_DETAILS f " + "WHERE f.STATUS IN ('TPS','TPA') "
//					+ "AND f.TXN_TYPE = 'TNG' " + "AND f.MID IN (:tngMid, :Ezywaymid, :motomid, :mid) "
//					+ "AND f.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
//
//					+ "UNION "
//
//					+ "select f.TIME_STAMP, f.MID, f.TID, f.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, f.INVOICE_ID, f.TNG_TXN_ID, "
//					+ "NULL AS RRN, f.STATUS, f.TXN_TYPE, f.MDR_AMT, f.PAYABLEAMT as NETAMOUNT, f.SETTLED_DATE as SETTLE_DATE, NULL AS EZYSETTLE_AMOUNT, "
//					+ "NULL AS FRAUDSCORE, NULL AS FRAUDID, f.SUB_MERCHANT_MID "
//					+ "from mobiversa.EWALLET_TXN_DETAILS f " + "WHERE f.STATUS IN ('SPS','SPA') "
//					+ "AND f.TXN_TYPE = 'SPP' " + "AND f.MID IN (:shoppyMid, :Ezywaymid, :motomid, :mid) "
//					+ "AND f.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
//
//					+ "UNION "
//
//					+ "SELECT STR_TO_DATE(CONCAT(m.DATE, m.TIME), '%Y%m%d%H%i%S') AS TIME_STAMP, m.MID, m.TID, m.TXN_AMOUNT as AMOUNT, NULL AS CARDNAME, m.MASKED_PAN as CARDNUMBER, "
//					+ "NULL AS ReferenceNo, m.AID, m.RRN, m.STATUS, m.TXN_TYPE, m.MDR_AMT, m.NET_AMOUNT as NETAMOUNT, m.SETTLEMENTDATE as SETTLE_DATE, "
//					+ "m.EZYSETTLE_AMOUNT, m.FRAUD_AMOUNT, NULL AS FraudId, m.SUB_MERCHANT_MID "
//					+ "FROM mobiversa.SETTLEMENT_MDR m "
//					+ "WHERE m.MID IN (:Ezywaymid, :ezyrecmid, :ummid, :motomid, :mid) " + "AND m.STATUS IN ('S') "
//					+ "AND m.DATE BETWEEN '" + formattedDate1 + "' AND '" + formattedDate2 + "' "
//					+ "ORDER BY TIME_STAMP DESC";
			
			
			String sql = "select f.TIME_STAMP, f.MID, f.TID, f.TXNAMOUNT as AMOUNT, "
			        + "NULL AS CARDNAME, NULL AS CARDNUMBER, f.SELLERORDERNO as INVOICE_ID, f.FPXTXNID as AID_RESPONSE, "
			        + "NULL AS RRN, f.STATUS, 'FPX' AS TXN_TYPE, f.MDR_AMT, f.PAYABLEAMT as NETAMOUNT, "
			        + "f.SETTLED_DATE as SETTLE_DATE, NULL AS EZYSETTLEAMOUNT, NULL AS FRAUDSCORE, NULL AS FRAUDID, f.SUB_MERCHANT_MID, f.HOST_MDR_AMT, f.MOBI_MDR_AMT "
			        + "from FPX_TRANSACTION f "
			        + "WHERE f.DEBITAUTHCODE = '00' AND f.CREDITAUTHCODE = '00' AND f.STATUS IN ('S') AND f.MID IN (:Ezywaymid, :fpxmid, :motomid, :mid) "
			        + "AND f.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
			        
			        + "UNION "
			        
			        + "select a.TIME_STAMP, a.MID, NULL AS TID, a.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, a.INVOICE_ID, a.AID_RESPONSE, "
			        + "a.RRN, a.STATUS, a.TXN_TYPE, "
			        + "(select SUM(f.HOSTMDR+ f.MOBIMDR) from GRABPAY_FILE f where a.RRN = f.PARTNERID LIMIT 1) AS MDRAMT, "
			        + "(select f.NETAMT from GRABPAY_FILE f where a.RRN = f.PARTNERID LIMIT 1) AS NETAMOUNT, "
			        + "(select f.SETTLEMENT_DATE from GRABPAY_FILE f where a.RRN = f.PARTNERID  LIMIT 1) AS PAYMENT_DATE, "
			        + "(select f.EZYSETTLE_AMOUNT from GRABPAY_FILE f where a.RRN = f.PARTNERID  LIMIT 1) AS EZYSETTLEAMOUNT, "
			        + "NULL AS FRAUD_SCORE, NULL AS FRAUD_ID, a.SUB_MERCHANT_MID, "
			        + "(select f.HOSTMDR from GRABPAY_FILE f where a.RRN = f.PARTNERID  LIMIT 1) AS HOSTMDRAMT, "
			        + "(select f.MOBIMDR from GRABPAY_FILE f where a.RRN = f.PARTNERID  LIMIT 1) AS MOBIMDRAMT "
			        + "from MID m "
			        + "INNER JOIN MOBILE_USER u ON m.MERCHANT_FK = u.MERCHANT_FK "
			        + "INNER JOIN MERCHANT c ON c.ID = m.MERCHANT_FK "
			        + "INNER JOIN FOR_SETTLEMENT a ON (a.TID = u.GPAY_TID OR a.TID = u.ONLINE_GPAY) "
			        + "WHERE a.MID IN (:Ezywaymid, :grabmid, :motomid, :ummid, :mid)  "
			        + "AND (c.MERCHANT_TYPE = 'U' OR c.MERCHANT_TYPE = 'FIUU' OR c.MERCHANT_TYPE = 'P' OR c.MERCHANT_TYPE = 'NULL') "
			        + "AND a.STATUS in ('GPS','GPA') "
			        + "AND a.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
			        
			        + "UNION "
			        
			        + "select a.TIME_STAMP, a.MID, NULL AS TID, a.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, a.INVOICE_ID, a.AID_RESPONSE, "
			        + "a.RRN, a.STATUS, a.TXN_TYPE, "
			        + "(select SUM(b.MDRREBATEAMOUNT+b.MDRAMOUNT) from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID  LIMIT 1) AS MDRAMT, "
			        + "(select b.NETAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID  LIMIT 1) AS NETAMOUNT, "
			        + "(select b.SETTLE_DATE from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID  LIMIT 1) AS SETTLE_DATE, "
			        + "(select b.EZYSETTLE_AMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID  LIMIT 1) AS EZYSETTLEAMOUNT, NULL AS FRAUD_SCORE, NULL AS FRAUD_ID, a.SUB_MERCHANT_MID, "
			        + "(select b.MDRAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID  LIMIT 1) AS HOSTMDRAMT, "
			        + "(select b.MDRREBATEAMOUNT from BOOST_DLY_RECON b where a.RRN = b.BOOSTTXNID  LIMIT 1) AS MOBIMDRAMT "
			        + "from FOR_SETTLEMENT a "
			        + "INNER JOIN MID m on (a.MID=m.UM_EZYWAY_MID OR a.MID=m.EZYWAY_MID OR a.MID = m.BOOST_MID OR a.MID=m.UM_MOTO_MID) "
			        + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
			        + "WHERE (f.MERCHANT_TYPE = 'U' OR f.MERCHANT_TYPE = 'FIUU' OR f.MERCHANT_TYPE = 'P' OR f.MERCHANT_TYPE = 'NULL') "
			        + "AND a.STATUS IN ('BPS','BPA') "
			        + "AND a.MID IN (:Ezywaymid, :boostmid, :motomid, :ummid, :mid) "
			        + "AND a.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
			        
			        + "UNION "
			        
			        + "select f.TIME_STAMP, f.MID, f.TID, f.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, f.INVOICE_ID, f.TNG_TXN_ID, "
			        + "NULL AS RRN, f.STATUS, f.TXN_TYPE, f.MDR_AMT, f.PAYABLEAMT as NETAMOUNT, f.SETTLED_DATE as SETTLE_DATE, f.EZYSETTLE_AMOUNT, "
			        + "NULL AS FRAUDSCORE, NULL AS FRAUDID, f.SUB_MERCHANT_MID, f.HOST_MDR_AMT, f.MOBI_MDR_AMT "
			        + "from mobiversa.EWALLET_TXN_DETAILS f "
			        + "WHERE f.STATUS IN ('TPS','TPA') "
			        + "AND f.TXN_TYPE = 'TNG' "
			        + "AND f.MID IN (:tngMid, :Ezywaymid, :motomid, :mid) "
			        + "AND f.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
			        
			        + "UNION "
			        
			        + "select f.TIME_STAMP, f.MID, f.TID, f.AMOUNT, NULL AS CARDNAME, NULL AS CARDNUMBER, f.INVOICE_ID, f.TNG_TXN_ID, "
			        + "NULL AS RRN, f.STATUS, f.TXN_TYPE, f.MDR_AMT, f.PAYABLEAMT as NETAMOUNT, f.SETTLED_DATE as SETTLE_DATE, NULL AS EZYSETTLE_AMOUNT, "
			        + "NULL AS FRAUDSCORE, NULL AS FRAUDID, f.SUB_MERCHANT_MID, f.HOST_MDR_AMT, f.MOBI_MDR_AMT "
			        + "from mobiversa.EWALLET_TXN_DETAILS f "
			        + "WHERE f.STATUS IN ('SPS','SPA') "
			        + "AND f.TXN_TYPE = 'SPP' "
			        + "AND f.MID IN (:shoppyMid, :Ezywaymid, :motomid, :mid) "
			        + "AND f.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
			        
			        + "UNION "
			        
			        + "SELECT STR_TO_DATE(CONCAT(m.DATE, m.TIME), '%Y%m%d%H%i%S') AS TIME_STAMP, m.MID, m.TID, m.TXN_AMOUNT as AMOUNT, NULL AS CARDNAME, m.MASKED_PAN as CARDNUMBER, "
			        + "NULL AS ReferenceNo, m.AID, m.RRN, m.STATUS, m.TXN_TYPE, m.MDR_AMT, m.NET_AMOUNT as NETAMOUNT, m.SETTLEMENTDATE as SETTLE_DATE, "
			        + "m.EZYSETTLE_AMOUNT, m.FRAUD_AMOUNT, NULL AS FraudId, m.SUB_MERCHANT_MID, m.HOST_MDR_AMT, m.MOBI_MDR_AMT  "
			        + "FROM mobiversa.SETTLEMENT_MDR m "
			        + "WHERE m.MID IN (:Ezywaymid, :ezyrecmid, :ummid, :motomid, :mid, :fiuuMid) "
			        + "AND m.STATUS IN ('S') "
			        + "AND m.DATE BETWEEN '" + formattedDate1 + "' AND '" + formattedDate2 + "' "
			        
			        + "UNION "
			        
			        +"SELECT "
	                + "Q.CREATED_DATE AS TIME_STAMP, "
	                + "NULL AS MID, "
	                + "NULL AS TID, "
	                + "Q.AMOUNT AS AMOUNT, "
	                + "NULL AS CARDNAME, "
	                + "NULL AS CARDNUMBER, "
	                + "Q.INVOICE_ID AS INVOICE_ID, "
	                + "Q.TRANSACTION_ID AS AID_RESPONSE, "
	                + "NULL AS RRN, "
	                + "Q.STATUS, "
	                + "'DUITNOW' AS TXN_TYPE, "
	                + "Q.MDR_AMOUNT, "
	                + "Q.PAYABLE_AMOUNT AS NETAMOUNT, "
	                + "Q.SETTLE_DATE AS SETTLE_DATE, "
	                + "NULL AS EZYSETTLEAMOUNT, "
	                + "NULL AS FRAUDSCORE, "
	                + "NULL AS FRAUDID, "
	                + "Q.SUBMERCHANT_MID, "
	                + "Q.HOST_MDR_AMOUNT, "
	                + "Q.MOBI_MDR_AMOUNT "
	                + "FROM "
	                + "mobiversa.QRTRANSACTIONS Q "
	                + "INNER JOIN "
	                + "mobiversa.MERCHANT M ON Q.MERCHANT_FK = M.ID "
	                + "WHERE "
	                + "Q.STATUS IN ('DS', 'DA') "
	                + "AND Q.MERCHANT_FK = :merchantId "
	                + "AND Q.CREATED_DATE BETWEEN '"+ date1 + "' AND '" + date2 + "' "
					+ "ORDER BY TIME_STAMP DESC;";

			logger.info("GetPayinTxnDetailsBetweenDates Query : " + sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("Ezywaymid", Ezywaymid);
			sqlQuery.setString("motomid", ummotomid);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fpxmid", fpxmid);
			sqlQuery.setString("ummid", ummid);
			sqlQuery.setString("ezyrecmid", ezyrecmid);
			sqlQuery.setString("grabmid", grabmid);
			sqlQuery.setString("boostmid", boostmid);
			sqlQuery.setString("tngMid", tngMid);
			sqlQuery.setString("shoppyMid", shoppyMid);
			sqlQuery.setString("fiuuMid", fiuuMid);
			sqlQuery.setString("merchantId", currentMerchant.getId().toString());
			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			processResultSet(resultSet, fss);

			logger.info("grabmid::::" + grabmid);
			logger.info("fiuu MID::::" + fiuuMid);

			logger.info("getPayinTxnDetailsBetweenDates after Query Runned::");
			return fss;
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("Exception while retrieving the data from PAYOUT_DETAIL table");
		}
	}

	private static void processResultSet(List<Object[]> resultSet, List<FinanceReport> fss) {
		logger.info("Result set for PayinReport");
		for (Object[] rec : resultSet) {
			FinanceReport fs = new FinanceReport();

			if (rec[0] != null && !rec[0].toString().isEmpty() && !rec[0].toString().equalsIgnoreCase("null")) {
				String rd = null;
				String rt = "";
				try {
					String dateStr = rec[0].toString();
					SimpleDateFormat sourceDateFormat;

					// Determine the date format based on the length of the string
					if (dateStr.length() == 8) {
						sourceDateFormat = new SimpleDateFormat("yyyyMMdd");
					} else if (dateStr.length() == 10) {
						sourceDateFormat = new SimpleDateFormat("yyyy-MM-dd");
					} else {
						sourceDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					}

					Date date = sourceDateFormat.parse(dateStr);

					// Format the date and time according to your requirements
					rd = new SimpleDateFormat("dd/MM/yyyy").format(date);
					if (dateStr.length() > 10) { // Only format time if it's available
						rt = new SimpleDateFormat("HH:mm:ss").format(date);
					}

				} catch (ParseException e) {
					e.printStackTrace();
				}

				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

//			if (rec[1] != null || rec[1] != "") {
//				fs.setMid(rec[1].toString());
//			} else {
//				fs.setMid("");
//			}
			
			 if (rec[1] != null && !rec[1].toString().isEmpty()) {
			        fs.setMid(rec[1].toString());
			    } else {
			        fs.setMid("");
			    }

		//	if (rec[2] != null && rec[2] != "") {
			if (rec[2] != null && rec[2].toString() != "") {
				fs.setTid(rec[2].toString());
			} else {
				fs.setTid("");
			}

			if (rec[3] != null && !rec[3].toString().isEmpty() && !rec[3].toString().equalsIgnoreCase("null")) {
				if (rec[3].toString().contains(".")) {
					try {

						Double d = new Double(rec[3].toString());
						String pattern = "##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(d);
						fs.setAmount(output);

					} catch (NumberFormatException e) {
						e.printStackTrace();
						fs.setAmount("");
					}

				} else {
					try {
						double amount = 0;
						amount = Double.parseDouble(rec[3].toString()) / 100;
						String pattern = "##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(amount);
						fs.setAmount(output);
					} catch (NumberFormatException e) {
						e.printStackTrace();
						fs.setAmount("");
					}
				}
			} else {
				fs.setAmount("");
			}

			if (rec[6] != null && !rec[6].toString().isEmpty() && !rec[6].toString().equalsIgnoreCase("null")) {
				fs.setReference(rec[6].toString());
			} else {
				fs.setReference("");
			}

			if (rec[7] != null) {
				fs.setApprovalcode(rec[7].toString());
			} else {
				fs.setApprovalcode("");
			}

			if (rec[8] != null) {
				fs.setRrn(rec[8].toString());
			} else {
				fs.setRrn("");
			}

			if (rec[9] != null) {

				String status = rec[9].toString();

				if (rec[9].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[9].toString().equals("S")) {
					fs.setStatus("SETTLED");
				} else if (rec[9].toString().equals("BPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[9].toString().equals("BPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[9].toString().equals("GPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[9].toString().equals("GPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[9].toString().equals("TPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[9].toString().equals("TPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[9].toString().equals("SPS")) {
					fs.setStatus("SETTLED");
				} else if (rec[9].toString().equals("SPA")) {
					fs.setStatus("NOT SETTLED");
				} else if (rec[9].toString().equals("BNS")) {
					fs.setStatus("SETTLED");
				}else if (rec[9].toString().equals("DS")) {
					fs.setStatus("SETTLED");
				}else if (rec[9].toString().equals("DA")) {
					fs.setStatus("NOT SETTLED");
				}

			} else {
				fs.setStatus("NOT SETTLED");
			}

			if (rec[10] != null) {
				fs.setPaymentmethod(rec[10].toString());
			} else {
				fs.setPaymentmethod("");
			}

			if (rec[11] == null || rec[11].toString().trim().isEmpty()) {
				fs.setMdramount("");
			} else if (rec[11] != null && !rec[11].toString().trim().isEmpty()
					&& !rec[11].toString().equalsIgnoreCase("null")) {

				try {
					Double d = new Double(rec[11].toString());
					String pattern = "##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setMdramount(output);

				} catch (NumberFormatException e) {
					e.printStackTrace();
					fs.setMdramount("");
				}
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setNetamount("");
			} else if (rec[12] != null && !rec[12].toString().isEmpty()
					&& !rec[12].toString().equalsIgnoreCase("null")) {

				try {
					Double d = new Double(rec[12].toString());
					String pattern = "##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);
					fs.setNetamount(output);

				} catch (NumberFormatException e) {
					e.printStackTrace();
					fs.setMdramount("");
				}
			}

			if (rec[13] == null || rec[13].toString().trim().isEmpty()) {
			    fs.setPaymentdate("");
			} else if (rec[13].toString().matches("\\d{8}T\\d{6}")) { 
			    try {
			        SimpleDateFormat sourceDateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss");
			        
			        Date date = sourceDateFormat.parse(rec[13].toString().trim());
			        
			        SimpleDateFormat targetDateFormat = new SimpleDateFormat("dd-MM-yyyy");
			        String formattedDate = targetDateFormat.format(date);
			        fs.setPaymentdate(formattedDate);
			    } catch (ParseException e) {
			        fs.setPaymentdate("");
			    }
			} else {
			    try {
			        SimpleDateFormat targetDateFormat = new SimpleDateFormat("dd-MM-yyyy");
			        Date date = parseDate(rec[13].toString());
			        if (date != null) {
			            String formattedDate = targetDateFormat.format(date);
			            fs.setPaymentdate(formattedDate);
			        }
			    } catch (Exception e) {
			        fs.setPaymentdate("");
			    }
			}

			if (rec[14] == null || rec[14].toString().trim().isEmpty()) {
				fs.setEzysettleamount("");
			} else {
				fs.setEzysettleamount(rec[14].toString());
			}

			if (rec[17] != null) {
				fs.setSubmerchantid(rec[17].toString());
			} else {
				fs.setSubmerchantid("");
			}
			
			if (rec[18] != null) {
				fs.setHostMdrAmt(rec[18].toString());
			} else {
				fs.setHostMdrAmt("");
			}
			
			if (rec[19] != null) {
				fs.setMobiMdrAmt(rec[19].toString());
			} else {
				fs.setMobiMdrAmt("");
			}

			fss.add(fs);

		}
		logger.info("Result set for PayinReport Completed");
	}

	private static Date parseDate(String dateString) {
		String[] formats = { "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd", "dd-MMM-yyyy" };

		for (String format : formats) {
			try {
				SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.ENGLISH);
				return sdf.parse(dateString);
			} catch (ParseException e) {

			}
		}

		return null;
	}

	@Override
	@Transactional(readOnly = true)
	public List<FinanceReport> getPayoutTxnDetailsBetweenDates(String date1, String date2, Long merchantId,
			Merchant currentMerchant) {
		ArrayList<FinanceReport> fss = new ArrayList<FinanceReport>();
		String sql = null;

		Query sqlQuery = null;
		List<Object[]> resultSet = null;
		logger.info("MERCHANT ID :" + merchantId);
		logger.info("getPayoutTxnDetailsBetweenDates:::");

//		sql = "SELECT p.CREATED_DATE,p.PAYEE_NAME,p.PAYEE_BRN,p.PAYEE_ACC_NUMBER,p.PAYEE_BANK_NAME,p.INVOICE_ID_PROOF,p.PAYOUT_AMOUNT,p.PAYOUT_FEE,p.PAYOUT_STATUS,p.PAYOUT_DATE,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.TOTAL_AMOUNT,p.PAYOUTTYPE "
//				+ " FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON p.MERCHANT_FK=ml.ID WHERE p.MERCHANT_FK ='"
//				+ merchantId + "' AND p.PAYOUT_STATUS IN ('pp','pending') AND p.CREATED_DATE BETWEEN '" + date1 + "' and '" + date2
//				+ "' ORDER BY p.CREATED_DATE DESC ";
		
		sql = "SELECT p.CREATED_DATE,p.PAYEE_NAME,p.PAYEE_BRN,p.PAYEE_ACC_NUMBER,p.PAYEE_BANK_NAME,p.INVOICE_ID_PROOF,p.PAYOUT_AMOUNT,p.PAYOUT_FEE,p.PAYOUT_STATUS, p.PAYOUT_DATE,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.TOTAL_AMOUNT,p.PAYOUTTYPE, p.HOST_MDR, p.MOBI_MDR "
				+ " FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON p.MERCHANT_FK=ml.ID WHERE p.MERCHANT_FK ='"
				+ merchantId + "' AND p.PAYOUT_STATUS IN ('pp','pending') AND p.CREATED_DATE BETWEEN '" + date1 + "' and '" + date2
				+ "' ORDER BY p.CREATED_DATE DESC ";


		logger.info("Default Query : " + sql);
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		resultSet = sqlQuery.list();

		logger.info(String.valueOf(resultSet.size()));

		for (Object[] rec : resultSet) {

			FinanceReport fs = new FinanceReport();

			if (rec[0] != null) {

				String rd = null;
				String rt = "";

				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				// logger.info("date : **" + rd);
				fs.setDate(rd);
				fs.setTime(rt);

			} else {

				String rd = null;
				String rt = "";
				try {
					rd = new SimpleDateFormat("dd/MM/yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}

			if (rec[1] == null || rec[1].toString().isEmpty()) {

				fs.setCustomerName("");

			} else if (rec[1] != null) {

				fs.setCustomerName(rec[1].toString());
			}

			if (rec[2] == null || rec[2].toString().isEmpty()) {

				fs.setBrn("");

			} else if (rec[2] != null) {

				fs.setBrn(rec[2].toString());
			}

			if (rec[3] == null || rec[3].toString().isEmpty()) {

				fs.setAccountNo("");

			} else if (rec[3] != null) {

				fs.setAccountNo(rec[3].toString());

			}

			if (rec[4] == null || rec[4].toString().isEmpty()) {

				fs.setBankName("");

			} else

			if (rec[4] != null) {

				fs.setBankName(rec[4].toString());

			}

			if (rec[5] == null || rec[5].toString().isEmpty()) {

				fs.setTransaction_id("");

			} else

			if (rec[5] != null) {

				fs.setTransaction_id(rec[5].toString());

			}

			if (rec[6] == null || rec[6].toString().isEmpty()) {

				fs.setPayoutamount("");

			} else if (rec[6] != null) {

				fs.setPayoutamount(rec[6].toString());

			}

			if (rec[7] == null || rec[7].toString().isEmpty()) {

				fs.setPayoutFee("");

			} else if (rec[7] != null) {

				fs.setPayoutFee(rec[7].toString());
			}

			if (rec[8] == null) {

				fs.setStatus("Requested");

			} else if (rec[8] != null) {

				if (rec[8].toString().equals("A")) {
					fs.setStatus("To Process");
				} else if (rec[8].toString().equals("pp")) {
					fs.setStatus("Paid");
				}else if (rec[8].toString().equals("pending")) {
					fs.setStatus("Pending");
				}

			}

			if (rec[10] == null || rec[10].toString().isEmpty()) {
				fs.setPaidDate("");
			} else {
				fs.setPaidDate(rec[10].toString());
			}

			if (rec[11] == null || rec[11].toString().isEmpty()) {
				fs.setPaidTime("");
			} else {
				fs.setPaidTime(rec[11].toString());
			}

			if (rec[12] == null || rec[12].toString().isEmpty()) {
				fs.setSubmerchantMid("");
			} else {
				fs.setSubmerchantMid(rec[12].toString());
			}

			if (rec[13] == null || rec[13].toString().isEmpty()) {
				fs.setSubmerchantName("");
			} else {
				fs.setSubmerchantName(rec[13].toString());
			}

			if (rec[14] == null || rec[14].toString().isEmpty()) {
				fs.setPayoutId("");
			} else {
				fs.setPayoutId(rec[14].toString());
			}

			if (rec[15] == null || rec[15].toString().isEmpty()) {
				fs.setAmount("");
			} else {
				fs.setAmount(rec[15].toString());
			}

			if (rec[16] == null || rec[16].toString().isEmpty()) {
				fs.setPayoutType("");
			} else {
				fs.setPayoutType(rec[16].toString());
			}
			
			if (rec[17] == null || rec[17].toString().isEmpty()) {
				fs.setHostMdrAmt("");
			} else {
				fs.setHostMdrAmt(rec[17].toString());
			}
			
			if (rec[18] == null || rec[18].toString().isEmpty()) {
				fs.setMobiMdrAmt("");
			} else {
				fs.setMobiMdrAmt(rec[18].toString());
			}

			fss.add(fs);

		}
		logger.info("Result set for PayoutReport Completed");
		return fss;

	}

	@Override
	public List<String> getFpxHostList() {

		ArrayList<String> bankList = new ArrayList<String>();
		try {
			String sql = "SELECT h.HOST_NAME FROM mobiversa.HOST_DETAILS h";

			@SuppressWarnings("unchecked")
			List<String> resultSet = super.getSessionFactory().createSQLQuery(sql).list();
			logger.info("Executed query: \"" + sql + "\". Retrieved host list: " + resultSet + " (total records: "
					+ resultSet.size() + ")");
			return resultSet;
		} catch (Exception e) {
			logger.error("Exception in reteriving Fpx host list: " + e.getMessage() + e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getHostIdByHostName(String hostName) {

		try {
			String sql = "SELECT h.HOST_ID FROM mobiversa.HOST_DETAILS h WHERE h.HOST_NAME = :hostName";

			String sellerId = (String) super.getSessionFactory().createSQLQuery(sql).setString("hostName", hostName)
					.setMaxResults(1).uniqueResult();
			logger.info(
					"Executing query: " + sql + " | Host Name: " + hostName + " | Resulting Seller ID: " + sellerId);

			return sellerId;
		} catch (Exception e) {
			logger.error("Exception in reterving host id by host name :" + e.getMessage() + e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean areAllFpxHostIdsSame() {
		try {
			String sql = "SELECT m.FPX_HOST_ID FROM mobiversa.MOBILE_USER m";

			@SuppressWarnings("unchecked")
			List<String> resultSet = super.getSessionFactory().createSQLQuery(sql).list();
			logger.info("Executed query: \"" + sql + "\". Retrieved host list: " + resultSet + " (total records: "
					+ (resultSet != null ? resultSet.size() : "null") + ")");

			if (resultSet == null || resultSet.isEmpty()) {
				return false;
			}

			// Check if the first value is null
			String firstValue = resultSet.get(0);
			if (firstValue == null) {
				// If the first value is null, ensure all elements are null
				return resultSet.stream().allMatch(value -> value == null);
			} else {
				// If the first value is not null,ensure all elements are equal to the first
				// value
				return resultSet.stream().allMatch(value -> firstValue.equals(value));
			}
		} catch (Exception e) {
			logger.error("Exception in checking are all fpx host ids are same: " + e.getMessage() + e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getFirstFpxHostId() {
		try {
			String sql = "SELECT m.FPX_HOST_ID FROM mobiversa.MOBILE_USER m LIMIT 1";

			@SuppressWarnings("unchecked")
			List<String> resultSet = super.getSessionFactory().createSQLQuery(sql).list();
			logger.info("Executed query: \"" + sql + "\". Retrieved First Fpx-Host Id: " + resultSet
					+ " (total records: " + (resultSet != null ? resultSet.size() : "null") + ")");

			if (resultSet == null || resultSet.isEmpty()) {
				return "N/A";
			}

			// Check if the first value is null
			if (resultSet.get(0) == null) {
				return "N/A";
			} else {
				return resultSet.get(0);
			}
		} catch (Exception e) {
			logger.error("Exception in reteriving 1st index Fpx host ID: " + e.getMessage() + e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getHostNameByMerchantId(String id) {
		String hostName = "N/A";
		String sql = "SELECT hd.HOST_NAME FROM mobiversa.HOST_DETAILS hd WHERE hd.HOST_ID = ("
				+ "SELECT mu.FPX_HOST_ID FROM mobiversa.MOBILE_USER mu "
				+ "WHERE mu.MERCHANT_FK = :merchantId LIMIT 1)";

		try {
			Object result = sessionFactory.getCurrentSession().createSQLQuery(sql).setParameter("merchantId", id)
					.uniqueResult();
			if (result != null) {
				hostName = result.toString();
			}
		} catch (Exception e) {
			logger.error("Error in getting host name by merchant ID: " + e.getMessage(), e);
			throw new RuntimeException(e);
		}

		return hostName;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<String> areAllProvidedFpxHostIdsSame(List<Long> merchantIds) {

		try {
			String sql = "SELECT m.FPX_HOST_ID FROM mobiversa.MOBILE_USER m WHERE m.MERCHANT_FK IN (:merchantIds)";

			List<String> resultSet = super.getSessionFactory().createSQLQuery(sql)
					.setParameterList("merchantIds", merchantIds).list();

			logger.info("Executed query: \"" + sql + "\" with merchantIds: " + merchantIds + ". Retrieved host list: "
					+ resultSet + " (total records: " + (resultSet != null ? resultSet.size() : "null") + ")");

			return resultSet;
		} catch (Exception e) {
			logger.error("Exception in checking all provided Fpx host ids are same: " + e.getMessage(), e);
			throw new RuntimeException(e);
		}

	}

	@Override
	@Transactional(readOnly = true)
	public void ListofEzySettleSummary(final PaginationBean<SettlementModel> paginationBean, String date1, String date2,
			boolean isExport) {
		try {
			if (date1 == null) {
				LocalDate today = LocalDate.now();
				date1 = today.minusMonths(2).toString() + " 00:00:00";
				date2 = today.toString() + " 23:59:59";
			}
			logger.info("Inside listAllForsettlementTransaction : " + date1 + " " + date2);

			String sql = "SELECT " + "  j.TIME_STAMP, " + "  j.NET_AMOUNT, " + "  j.WITHDRAWFEE, "
					+ "  j.NET_AMOUNT_PAYABLE, " + "  j.MID, " + "  j.TID, " + "  j.STATUS, " + "  j.SRC_REF_NO, "
					+ "  j.EZYSETTLE_REFERENCE_NO, " + "  j.MERCHANTNAME " + "FROM " + "  mobiversa.JUST_SETTLE j "
					+ "WHERE " + "  j.TIME_STAMP BETWEEN '" + date1 + "' AND '" + date2 + "' "
					+ "  AND j.STATUS IN ('R', 'P') " + "ORDER BY " + "  j.TIME_STAMP DESC";

			logger.info("Query : " + sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			if (!isExport) {
				int size = sqlQuery.list().size();
				logger.info("all records size  " + size);
				int requiredPages = (size / 20);
				if (size % 20 > 0)
					requiredPages++;
				paginationBean.setQuerySize(String.valueOf(size));
				logger.info("required pages " + requiredPages);
				paginationBean.setDateFromBackend(date1);
				paginationBean.setDate1FromBackend(date2);
//	            paginationBean.setTXNtype(txntype);

				String DynamicPage = PropertyLoad.getFile().getProperty("paginationCount");
				int pageSize = Integer.parseInt(DynamicPage);

				int pageNumFromJsp = paginationBean.getCurrPage();
				logger.info("Page Number:" + pageNumFromJsp);
				logger.info("Max Count for Records:" + pageSize);

				sqlQuery.setFirstResult((pageNumFromJsp - 1) * pageSize); // Adjust for zero-index
				sqlQuery.setMaxResults(pageSize);
			}
			@SuppressWarnings("unchecked")
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());
			if (resultSet != null && resultSet.size() > 0) {
				List<SettlementModel> fss = resultSet.stream().map(rec -> {
					SettlementModel fs = new SettlementModel();

					fs.setDate(rec[0] == null || rec[0].toString().isEmpty() ? ""
							: rec[0].toString().substring(0, Math.min(rec[0].toString().length(), 10)));
					fs.setNetAmount(rec[1] == null ? "" : rec[1].toString());
					fs.setMdrAmount(rec[2] == null ? "" : rec[2].toString());
					fs.setTxnAmount(rec[3] == null ? "" : rec[3].toString());
					fs.setMid(rec[4] == null ? "" : rec[4].toString());
					fs.setTid(rec[5] == null ? "" : rec[5].toString());

					if (rec[6] != null) {
						fs.setStatus(rec[6].toString().equalsIgnoreCase("R") ? "Success" : "Pending");
					}

					fs.setInvoiceId(rec[7] == null ? "" : rec[7].toString());
					fs.setRrn(rec[8] == null ? "" : rec[8].toString());
					fs.setMerchantName(rec[9] == null ? "" : rec[9].toString());

					return fs;
				}).collect(Collectors.toList());

				paginationBean.setItemList(fss);

			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception in ListofEzySettleSummary :  " + e);
		}
	}

//	 @Override
//	 public void updateInternationalMerchantsData(ConcurrentMap<String, Double> settledAmountsMap,Merchant currentMerchant) {
//	     if (settledAmountsMap != null && !settledAmountsMap.isEmpty()) {
//	         Session session = sessionFactory.getCurrentSession();
//	         Long currMerchant = currentMerchant.getId();
//	         String businessName = currentMerchant.getBusinessName();
//	         
//	         // Check if the entry already exists using Criteria API
//             Criteria criteria = session.createCriteria(MerchantSettlementInternational.class);
//             criteria.add(Restrictions.eq("merchantId", currMerchant));
//             
//             Set<String> existingSettlementDates = getExistingSettlementDates(currMerchant);
//             List<MerchantSettlementInternational> existingEntries = criteria.list();
//             logger.info("Existing entries count: " + existingEntries.size());
//	            
//	            for (Map.Entry<String, Double> entry : settledAmountsMap.entrySet()) {
//		              String settlementDate = entry.getKey();
//		             double settlementAmount = entry.getValue();
//		             
//		             if(existingEntries.isEmpty()||!existingSettlementDates.contains(settlementDate)) {
//		                   logger.info("Date which does not contain: "+settlementDate);
//		                   String query = "INSERT INTO MERCHANT_SETTLEMENT_INTERNATIONAL (SETTLEMENT_AMOUNT, SETTLEMENT_DATE,BUSINESS_NAME,MERCHANT_ID) VALUES (:settlementAmnt, :settlementDate, :mobileUserName,:currMerchant)";
//				           logger.info("Query: " + query);
//				                     
//				             Query insertQuery = session.createSQLQuery(query);
//				                     insertQuery.setParameter("settlementAmnt", settlementAmount);
//				                     insertQuery.setParameter("settlementDate", settlementDate);
//				                     insertQuery.setParameter("mobileUserName", businessName);
//				                     insertQuery.setParameter("currMerchant", currMerchant);
//
//				                     int affectedRows = insertQuery.executeUpdate();
//				                     logger.info("Merchant settlement international Table Entry Affected Rows: " + affectedRows);
//		                     }else {
//		                         logger.info("Settlement date " + settlementDate + " already exists, skipping insertion.");
//		                     }
//		                     
//		                 }
//	         }else {
//	             logger.warn("Reader data list is either null or empty or the entry is null.");
//	         }
//	     } 
//	
//
//	 @Override
//	 public boolean getMerchantDataInternational(String settlementDate, Merchant currentMerchant) {
//	     Long merchantId = currentMerchant.getId();
//	     @SuppressWarnings("unchecked")
//	     List<MerchantSettlementInternational> results = sessionFactory.getCurrentSession()
//	             .createCriteria(MerchantSettlementInternational.class)
//	             .add(Restrictions.eq("merchantId", merchantId))
//	             .add(Restrictions.eq("settlementDate", settlementDate))
//	             .list();
//
//	     return !results.isEmpty();
//	 }
//
//	 
//	    @Override
//	    public List<MerchantSettlementInternational> getStoredSettlementData(String settlementDate, Merchant currentMerchant) {
//	        Long merchantId = currentMerchant.getId();
//
//	        @SuppressWarnings("unchecked")
//	        List<MerchantSettlementInternational> results = sessionFactory.getCurrentSession()
//	                .createCriteria(MerchantSettlementInternational.class)
//	                .add(Restrictions.eq("merchantId", merchantId))
//	                .add(Restrictions.eq("settlementDate", settlementDate))
//	                .list();
//
//	        return results;
//	    }
//	    
//		@Override
//		public ConcurrentMap<String, Double> getAllTransactions(String settlementdate, Merchant currentMerchant,ConcurrentMap<String, Double> settledAmountsMap,Set<String> uniqueSettlementDates) {
//			
//			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//		    Date date;
//		    String formattedDate = settlementdate;
//
//		    try {
//		        date = dateFormat.parse(settlementdate);
//		    } catch (Exception e) {
//		        throw new RuntimeException("Invalid date format: " + settlementdate, e);
//		    }
//
//		    SimpleDateFormat fpxFormat = new SimpleDateFormat("dd-MMM-yyyy");
//		    SimpleDateFormat boostFormat = new SimpleDateFormat("yyyyMMdd");
//		    SimpleDateFormat grabTngSppFormat = new SimpleDateFormat("yyyy-MM-dd");
//
//		    String fpxDateFormat = fpxFormat.format(date);
//		    String boostDateFormat = boostFormat.format(date);
//		    String grabDateFormat = grabTngSppFormat.format(date); 
//		    String tngSppDateFormat = grabDateFormat; 
//		    Long merchantId = currentMerchant.getId();
//		    
//		    
//			    String query = "SELECT SUM(temp.Settlement_Amount) AS Total_Settlement_Amount, temp.Settlement_Date, temp.ID, temp.BUSINESS_NAME,TYPE "
//			                 + "FROM ("
//			                 + "SELECT REPLACE(ROUND(SUM(f.TXNAMOUNT - f.MDR_AMT), 2), ',', '') AS Settlement_Amount, "
//			                 + "DATE_FORMAT(STR_TO_DATE(f.SETTLED_DATE, '%d-%b-%Y'), '%Y-%m-%d') AS Settlement_Date, m.ID, m.BUSINESS_NAME, 'FPX' AS TYPE "
//			                 + "FROM mobiversa.FPX_TRANSACTION f "
//			                 + "INNER JOIN mobiversa.MERCHANT m ON f.MERCHANT_ID = m.ID "
//			                 + "WHERE f.STATUS IN ('S', 'H') "
//			                 + "AND f.SETTLED_DATE LIKE '" + fpxDateFormat + "%' "
//			                 + "AND f.DEBITAUTHCODE = '00' "
//			                 + "AND f.REASON IS NULL "	
//			                 + "AND f.MERCHANT_ID = '"+merchantId+"' "
//			                 + "GROUP BY f.SETTLED_DATE "
//			                 + "UNION "
//			                 + "SELECT REPLACE(ROUND(SUM(b.TXNAMOUNT - b.MDRREBATEAMOUNT - b.MDRAMOUNT), 2), ',', '') AS Settlement_Amount, "
//			                 + "DATE_FORMAT(STR_TO_DATE(b.SETTLE_DATE, '%Y%m%dT%H%i%s'), '%Y-%m-%d') AS Settlement_Date, m.ID, m.BUSINESS_NAME,'BOOST' AS TYPE "
//			                 + "FROM mobiversa.BOOST_DLY_RECON b "
//			                 + "INNER JOIN mobiversa.MERCHANT m ON b.MERCHANT_FK = m.ID "
//			                 + "WHERE b.PAYMENT IN ('S', 'H') "
//			                 + "AND b.SETTLE_DATE LIKE '" + boostDateFormat + "%' "
//			                 + "AND b.REASON IS NULL "
//			                 + "AND b.MERCHANT_FK = '"+merchantId+"'"
//			                 + "GROUP BY b.SETTLE_DATE "
//			                 + "UNION "
//			                 + "SELECT REPLACE(ROUND(SUM(g.TXNAMOUNT - g.HOSTMDR - g.MOBIMDR), 2), ',', '') AS Settlement_Amount, "
//			                 + "DATE_FORMAT(STR_TO_DATE(g.SETTLEMENT_DATE, '%Y-%m-%d'), '%Y-%m-%d') AS Settlement_Date, m.ID, m.BUSINESS_NAME,'GRAB' AS TYPE "
//			                 + "FROM mobiversa.GRABPAY_FILE g "
//			                 + "INNER JOIN mobiversa.MERCHANT m ON m.ID = g.MERCHANTID "
//			                 + "WHERE g.STATUS IN ('A', 'H') "
//			                 + "AND g.SETTLEMENT_DATE LIKE '" + grabDateFormat + "%' "
//			                 + "AND g.REASON IS NULL "
//			                 + "AND g.MERCHANTID = '"+merchantId+"'"
//			                 + "GROUP BY g.SETTLEMENT_DATE "
//			                 + "UNION "
//			                 + "SELECT REPLACE(ROUND(SUM(e.AMOUNT / 100 - e.MDR_AMT), 2), ',', '') AS Settlement_Amount, "
//			                 + "e.SETTLED_DATE AS Settlement_Date, m.ID, m.BUSINESS_NAME,'TNG' AS TYPE "
//			                 + "FROM mobiversa.EWALLET_TXN_DETAILS e "
//			                 + "INNER JOIN mobiversa.MERCHANT m ON e.MERCHANT_FK = m.ID "
//			                 + "WHERE e.STATUS IN ('TPS','H') "
//			                 + "AND e.SETTLED_DATE LIKE '" + tngSppDateFormat + "%' "
//			                 + "AND e.TXN_TYPE = 'TNG' "
//			                 + "AND e.REASON IS NULL "
//			                 + "AND e.MERCHANT_FK = '"+merchantId+"'"
//			                 + "GROUP BY e.SETTLED_DATE "
//			                 + "UNION "
//			                 + "SELECT REPLACE(ROUND(SUM(e.AMOUNT / 100 - e.MDR_AMT), 2), ',', '') AS Settlement_Amount, "
//			                 + "e.SETTLED_DATE AS Settlement_Date, m.ID, m.BUSINESS_NAME,'SHOPPY' AS TYPE "
//			                 + "FROM mobiversa.EWALLET_TXN_DETAILS e "
//			                 + "INNER JOIN mobiversa.MERCHANT m ON e.MERCHANT_FK = m.ID "
//			                 + "WHERE e.STATUS IN ('SPS','H') "
//			                 + "AND e.SETTLED_DATE LIKE '" + tngSppDateFormat + "%' "
//			                 + "AND e.TXN_TYPE = 'SPP' "
//			                 + "AND e.REASON IS NULL "
//			                 + "AND e.MERCHANT_FK = '"+merchantId+"'"
//			                 + "GROUP BY e.SETTLED_DATE "
//			                 + ") AS temp "
//			                 + "GROUP BY temp.Settlement_Date, temp.ID "
//			                 + "ORDER BY temp.ID DESC;";
//
//			    logger.info("QUERY: " + query);
//			    Session session = sessionFactory.openSession(); 
//		        Query sqlQuery = session.createSQLQuery(query);
//		        
//			    @SuppressWarnings("unchecked")
//			    List<Object[]> resultSet = sqlQuery.list();
//			    logger.info("Number of records in the List : " + resultSet.size());
//
//			    if (resultSet != null && !resultSet.isEmpty()) {
//			    	logger.info("inside if");
//			        resultSet.forEach((Object[] rec) -> {
//			            Double settlementAmount = rec[0] == null ? 0.0 : Double.parseDouble(rec[0].toString());
//			            String settlementDate = rec[1] == null ? "" : rec[1].toString();
//			            String mid = rec[2] == null ? "" : rec[2].toString();
//			            String mobileUserName = rec[3] == null ? "" : rec[3].toString();
//			            
//			        
//			            settledAmountsMap.put(settlementDate, settlementAmount);
//			            uniqueSettlementDates.add(settlementDate); 
//			  
//			        });
//			    }
//		
//			    logger.info("Settlement product wise: " + settledAmountsMap);
//			    
//
//			    return settledAmountsMap;
//			
//		}

//	@Override
//	@Transactional(readOnly = true)
//	public void listSettlementDetails(PaginationBean<SettlementDetailsList> paginationBean) {
//		try {
//			Query sql = null;
//			List<Object[]> resultSet = null;
//			ArrayList<SettlementDetailsList> settlementDetailsLists = new ArrayList<>();
//
//			String sqlQuery = "SELECT m.BUSINESS_NAME, " + "       m.ID, " + "       sd.SETTLEMENT_DATE, "
//					+ "       ab.Available_Balance, " + "       sd.PREVIOUS_BALANCE, " + "       sd.SETTLEMENT_AMOUNT "
//					+ "FROM mobiversa.SETTLEMENT_DETAILS sd " + "LEFT JOIN mobiversa.MERCHANT m "
//					+ "ON sd.MERCHANT_ID = m.id " + "LEFT JOIN mobiversa.AVAILABLE_BALANCE ab "
//					+ "ON sd.MERCHANT_ID = ab.MERCHANT_ID;";
//
//			logger.info("Before Execution");
//			sql = super.getSessionFactory().createSQLQuery(sqlQuery);
//			resultSet = sql.list();
//			logger.info("After Execution");
//
//			logger.info(String.valueOf(resultSet.size()));
//			for (Object[] rec : resultSet) {
//				SettlementDetailsList settlementDetails = new SettlementDetailsList();
//
//				settlementDetails.setBusinessName(rec[0] != null ? rec[0].toString() : "");
//				settlementDetails.setMerchantId(rec[1] != null ? rec[1].toString() : "");
//				settlementDetails.setSettlementDate(rec[2] != null ? rec[2].toString() : "");
//				settlementDetails.setRunningBalance(rec[3] != null ? rec[3].toString() : "0.0");
//				settlementDetails.setPreviousBalance(rec[4] != null ? rec[4].toString() : "0.0");
//				settlementDetails.setSettlementAmount(rec[5] != null ? rec[5].toString() : "0.0");
//
//				settlementDetailsLists.add(settlementDetails);
//			}
////            iterated values
//			for (SettlementDetailsList se : settlementDetailsLists) {
//				logger.info("User Details: " + se.toString());
//			}
//			paginationBean.setItemList(settlementDetailsLists);
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.info(e.getMessage());
//		}
//	}
	@Override
	@Transactional(readOnly = true)
	public void listSettlementDetails(PaginationBean<SettlementDetailsList> paginationBean) {
		try {
			Query sql = null;
			List<Object[]> resultSet = null;
			ArrayList<SettlementDetailsList> settlementDetailsLists = new ArrayList<>();

			String sqlQuery = "SELECT m.BUSINESS_NAME, " + "       m.ID, " + "       sd.SETTLEMENT_DATE, "
					+ "       ab.AVAILABLE_BALANCE, " + "       pb.PREVIOUS_BALANCE, " + "       sd.SETTLEMENT_AMOUNT "
					+ "FROM mobiversa.SETTLEMENT_DETAILS sd " + "LEFT JOIN mobiversa.PREVIOUS_DAY_AVAILABLE_BALANCE pb "
					+ "ON sd.MERCHANT_ID = pb.MERCHANT_ID " + "LEFT JOIN mobiversa.MERCHANT m "
					+ "ON sd.MERCHANT_ID = m.ID " + "LEFT JOIN mobiversa.AVAILABLE_BALANCE ab "
					+ "ON sd.MERCHANT_ID = ab.MERCHANT_ID " + "ORDER BY m.ID";

			logger.info("Before Execution");
			sql = super.getSessionFactory().createSQLQuery(sqlQuery);
			resultSet = sql.list();
			logger.info("After Execution");

			logger.info("Total no of records: " + String.valueOf(resultSet.size()));
			for (Object[] rec : resultSet) {
				SettlementDetailsList settlementDetails = new SettlementDetailsList();

				settlementDetails.setBusinessName(rec[0] != null ? rec[0].toString() : "");
				settlementDetails.setMerchantId(rec[1] != null ? rec[1].toString() : "");
				settlementDetails.setSettlementDate(rec[2] != null ? rec[2].toString() : "");
				settlementDetails.setRunningBalance(
						rec[3] != null ? AmountFormatter.convertAmountFormat(rec[3].toString()) : "");
				settlementDetails.setPreviousBalance(
						rec[4] != null ? AmountFormatter.convertAmountFormat(rec[4].toString()) : "");
				settlementDetails.setSettlementAmount(
						rec[5] != null ? AmountFormatter.convertAmountFormat(rec[5].toString()) : "");

				settlementDetailsLists.add(settlementDetails);
			}
			/*
			 * iterated values for (SettlementDetailsList se : settlementDetailsLists) {
			 * logger.info("User Details: " + se.toString()); }
			 */
			paginationBean.setItemList(settlementDetailsLists);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info(e.getMessage());
		}
	}

//	@Override
//	@Transactional(readOnly = true)
//	public void listSettlementDetailsByMerchant(PaginationBean<SettlementDetailsList> paginationBean,
//			String businessName) {
//		try {
//
//			Query sql = null;
//			List<Object[]> resultSet = null;
//			ArrayList<SettlementDetailsList> settlementDetailsLists = new ArrayList<>();
//
//			String sqlQuery = null;
//			if (businessName != null && !businessName.isEmpty()) {
//				sqlQuery = "SELECT m.BUSINESS_NAME, " + "       m.ID, " + "       sd.SETTLEMENT_DATE, "
//						+ "       ab.Available_Balance, " + "       sd.PREVIOUS_BALANCE, "
//						+ "       sd.SETTLEMENT_AMOUNT " + "FROM mobiversa.SETTLEMENT_DETAILS sd "
//						+ "LEFT JOIN mobiversa.MERCHANT m " + "ON sd.MERCHANT_ID = m.id "
//						+ "LEFT JOIN mobiversa.AVAILABLE_BALANCE ab " + "ON sd.MERCHANT_ID = ab.MERCHANT_ID "
//						+ "WHERE m.BUSINESS_NAME = :businessName";
//			} else {
//				sqlQuery = "SELECT m.BUSINESS_NAME, " + "       m.ID, " + "       sd.SETTLEMENT_DATE, "
//						+ "       ab.Available_Balance, " + "       sd.PREVIOUS_BALANCE, "
//						+ "       sd.SETTLEMENT_AMOUNT " + "FROM mobiversa.SETTLEMENT_DETAILS sd "
//						+ "LEFT JOIN mobiversa.MERCHANT m " + "ON sd.MERCHANT_ID = m.id "
//						+ "LEFT JOIN mobiversa.AVAILABLE_BALANCE ab " + "ON sd.MERCHANT_ID = ab.MERCHANT_ID ";
//			}
//
//			logger.info("Before Execution");
//			sql = super.getSessionFactory().createSQLQuery(sqlQuery);
//
//			if (businessName != null && !businessName.isEmpty()) {
//				// load by the merchant business name
//				sql.setParameter("businessName", businessName);
//			}
//			resultSet = sql.list();
//			logger.info("After Execution");
//
//			logger.info(String.valueOf(resultSet.size()));
//			for (Object[] rec : resultSet) {
//				SettlementDetailsList settlementDetails = new SettlementDetailsList();
//
//				settlementDetails.setBusinessName(rec[0] != null ? rec[0].toString() : "");
//				settlementDetails.setMerchantId(rec[1] != null ? rec[1].toString() : "");
//				settlementDetails.setSettlementDate(rec[2] != null ? rec[2].toString() : "");
//				settlementDetails.setRunningBalance(rec[3] != null ? rec[3].toString() : "0.0");
//				settlementDetails.setPreviousBalance(rec[4] != null ? rec[4].toString() : "0.0");
//				settlementDetails.setSettlementAmount(rec[5] != null ? rec[5].toString() : "0.0");
//
//				settlementDetailsLists.add(settlementDetails);
//			}
////            iterated values
//			for (SettlementDetailsList se : settlementDetailsLists) {
//				logger.info("User details: " + se.toString());
//			}
//			paginationBean.setItemList(settlementDetailsLists);
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.info(e.getMessage());
//			logger.info("############## ERROR IN DROP-DOWN ##############");
//		}
//	}

	@Override
	@Transactional(readOnly = true)
	public void listSettlementDetailsByMerchant(PaginationBean<SettlementDetailsList> paginationBean,
			String businessName) {
		try {

			logger.info("Merchnat businessName: " + businessName);
			Query sql = null;
			List<Object[]> resultSet = null;
			ArrayList<SettlementDetailsList> settlementDetailsLists = new ArrayList<>();

			String sqlQuery = null;
			if (businessName != null && !businessName.isEmpty()) {

				sqlQuery = "SELECT m.BUSINESS_NAME, " + "       m.ID, " + "       sd.SETTLEMENT_DATE, "
						+ "       ab.AVAILABLE_BALANCE, " + "       pb.PREVIOUS_BALANCE, "
						+ "       sd.SETTLEMENT_AMOUNT " + "FROM mobiversa.SETTLEMENT_DETAILS sd "
						+ "LEFT JOIN mobiversa.PREVIOUS_DAY_AVAILABLE_BALANCE pb "
						+ "ON sd.MERCHANT_ID = pb.MERCHANT_ID " + "LEFT JOIN mobiversa.MERCHANT m "
						+ "ON sd.MERCHANT_ID = m.ID " + "LEFT JOIN mobiversa.AVAILABLE_BALANCE ab "
						+ "ON sd.MERCHANT_ID = ab.MERCHANT_ID " + "WHERE m.BUSINESS_NAME = :businessName "
						+ "ORDER BY m.ID";
			} else {
				sqlQuery = "SELECT m.BUSINESS_NAME, " + "       m.ID, " + "       sd.SETTLEMENT_DATE, "
						+ "       ab.AVAILABLE_BALANCE, " + "       pb.PREVIOUS_BALANCE, "
						+ "       sd.SETTLEMENT_AMOUNT " + "FROM mobiversa.SETTLEMENT_DETAILS sd "
						+ "LEFT JOIN mobiversa.PREVIOUS_DAY_AVAILABLE_BALANCE pb "
						+ "ON sd.MERCHANT_ID = pb.MERCHANT_ID " + "LEFT JOIN mobiversa.MERCHANT m "
						+ "ON sd.MERCHANT_ID = m.ID " + "LEFT JOIN mobiversa.AVAILABLE_BALANCE ab "
						+ "ON sd.MERCHANT_ID = ab.MERCHANT_ID " + "ORDER BY m.ID";
			}

			logger.info("Before Execution");
			sql = super.getSessionFactory().createSQLQuery(sqlQuery);

			if (businessName != null && !businessName.isEmpty()) {
				// load by the merchant business name
				sql.setParameter("businessName", businessName);
			}
			resultSet = sql.list();
			logger.info("After Execution");

			logger.info("Total no of records: " + String.valueOf(resultSet.size()));
			for (Object[] rec : resultSet) {
				SettlementDetailsList settlementDetails = new SettlementDetailsList();

				settlementDetails.setBusinessName(rec[0] != null ? rec[0].toString() : "");
				settlementDetails.setMerchantId(rec[1] != null ? rec[1].toString() : "");
				settlementDetails.setSettlementDate(rec[2] != null ? rec[2].toString() : "");
				settlementDetails.setRunningBalance(
						rec[3] != null ? AmountFormatter.convertAmountFormat(rec[3].toString()) : "");
				settlementDetails.setPreviousBalance(
						rec[4] != null ? AmountFormatter.convertAmountFormat(rec[4].toString()) : "");
				settlementDetails.setSettlementAmount(
						rec[5] != null ? AmountFormatter.convertAmountFormat(rec[5].toString()) : "");

				settlementDetailsLists.add(settlementDetails);
			}
			/*
			 * iterated values for (SettlementDetailsList se : settlementDetailsLists) {
			 * logger.info("User details: " + se.toString()); }
			 */
			paginationBean.setItemList(settlementDetailsLists);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info(e.getMessage());
			logger.info("############## Exception IN DROP-DOWN ##############");
		}
	}

	@Override
	public boolean loadHolidayHistory(String currentdate) {
		logger.info("Inside load Holiday by Date : " + currentdate);

//    		HolidayHistory holiday = (HolidayHistory) sessionFactory.getCurrentSession()
//    			    .createCriteria(HolidayHistory.class)
//    			    .add(Restrictions.eq("leaveDate", currentdate))
//    			    .uniqueResult();
//    		return holiday == null;

		try {

		// Retrieve list of holidays with the same leaveDate
		List<HolidayHistory> holidays = sessionFactory.getCurrentSession().createCriteria(HolidayHistory.class)
				.add(Restrictions.eq("leaveDate", currentdate)).list();

		// Check if the list is empty (no holidays)
		if (holidays.isEmpty()) {
			return false; // No holidays found
		} else {
			return true; // Holidays found
		}

//                    settlementDetailsLists.add(settlementDetails);
//                }
//                    /*iterated values
//                    for (SettlementDetailsList se : settlementDetailsLists) {
//                        logger.info("User details: " + se.toString());
//                    }*/
//                paginationBean.setItemList(settlementDetailsLists);
            } catch (Exception e) {
                e.printStackTrace();
                logger.info(e.getMessage());
                logger.info("############## Exception IN DROP-DOWN ##############");
                return false;
            }
	}

	@Override
	public boolean isCurrencyExchangeEnabled(String merchantId) {
		try {
			String sql1 = "SELECT b.EXCHANGE_RATE_FEE FROM mobiversa.SETTLEMENT_DETAILS b WHERE b.MERCHANT_ID = :merchantId";
			Object result = super.getSessionFactory().createSQLQuery(sql1)
					.setParameter("merchantId", merchantId)
                    .uniqueResult();
			
		    // Check if the result is not null and return true, else false
			if (result != null && !result.toString().trim().isEmpty()) {
			    BigDecimal exchangeRateFee = new BigDecimal(result.toString().replace(",", "").trim());
			    return exchangeRateFee.compareTo(BigDecimal.ZERO) > 0;
			}
			return false;

//			return result != null && ((BigDecimal) result).compareTo(BigDecimal.ZERO) > 0;
		} catch (Exception e) {
			logger.error("Exception in loading CurrencyExchangeEnabled in Merchant_Info Table, MerchantId: " + merchantId, e);
            return false;
		}
	}
	
	final DecimalFormat df4DigitsRoundOff = new DecimalFormat("#,##0.0000");
	
	@Override
	public Map<String, Double> getExchangeRatesForCurrentDay(String currentDay, String baseCurrency, String merchantId) {
	    Map<String, Double> exchangeRates = new HashMap<>();
	    try {
	        String sql = "SELECT " +
	        	    "    c.TARGET_CURRENCY AS TARGET_KEY, " +
	        	    "    c.EXCHANGE_RATE AS TARGET_VALUE " +
	        	    "FROM " +
	        	    "    mobiversa.CURRENCY_EXCHANGE_RATE c " +
	        	    "WHERE " +
	        	    "    c.DATE = :currentDay " +
	        	    "    AND c.BASE_CURRENCY = :baseCurrency " +
	        	    
	        	    "UNION ALL " +
	        	    
	        	    "SELECT " +
	        	    "    'EXCHANGE_RATE' AS TARGET_KEY, " +
	        	    "    CAST(COALESCE(sd.EXCHANGE_RATE_FEE, 0) AS DECIMAL(10, 4)) AS TARGET_VALUE " +
	        	    "FROM " +
	        	    "    mobiversa.SETTLEMENT_DETAILS sd " +
	        	    "WHERE " +
	        	    "    sd.MERCHANT_ID = :merchantId";
	        	    
//	        	    "UNION ALL " +
//	        	    
//	        	    "SELECT " +
//	        	    "    'USDT_EXCHANGE_RATE' AS TARGET_KEY, " +
//	        	    "    CAST(COALESCE(sd.EXCHANGE_RATE_FEE, 0) AS DECIMAL(10, 4)) AS TARGET_VALUE " +
//	        	    "FROM " +
//	        	    "    mobiversa.SETTLEMENT_DETAILS sd " +
//	        	    "WHERE " +
//	        	    "    sd.MERCHANT_ID = :merchantId";
	        	        
	        Query sqlQuery = super.getSessionFactory().createSQLQuery(sql)
	                                .setParameter("currentDay", currentDay)
	                                .setParameter("baseCurrency", baseCurrency)
	                                .setParameter("merchantId", merchantId);

	        List<Object[]> results = sqlQuery.list();
	        for (Object[] result : results) {
	            String targetCurrency = (String) result[0];
	            Double exchangeRate = (Double) result[1];

	            // Check if targetCurrency or exchangeRate is not null or blank
	            if (targetCurrency != null && !targetCurrency.trim().isEmpty() && exchangeRate != null) {
	                exchangeRates.put(targetCurrency, formatExchangeRate(exchangeRate,df4DigitsRoundOff));
	            }
	        }
	    } catch (Exception e) {
	    	e.printStackTrace();
	        logger.error("Exception in loading exchange rates for base currency: " + baseCurrency + " and date: " + currentDay +". Exception: " + e.getMessage() +": "+ e);
	    }

	    return exchangeRates;
	}
	
	private static Double formatExchangeRate(Double exchangeRate, DecimalFormat df4DigitsRoundOff) {
		String formattedRate = df4DigitsRoundOff.format(exchangeRate).replace(",", "");
		return Double.valueOf(formattedRate);
	}
	
	@Override
	public List<String> getHolidayHistoryList(String currentYear) {
		try {
	        String sql = "SELECT DATE FROM HOLIDAY_HISTORY WHERE YEAR(DATE) = :currentYear";
	        
	        Query sqlQuery = super.getSessionFactory().createSQLQuery(sql)
	                                .setParameter("currentYear", currentYear);

	        return sqlQuery.list();
	        
	    } catch (Exception e) {
	    	e.printStackTrace();
	        logger.error("Exception in loading HolidayHistoryList. Exception: " + e.getMessage() +": "+ e);
	        return new ArrayList<String>();
	    }
	}


//    public Set<String> getExistingSettlementDates(Long merchantId) {
//		    Session session = sessionFactory.getCurrentSession();
//		    String sql = "SELECT m.settlementDate FROM MerchantSettlementInternational m "
//		               + "WHERE m.merchantId = :merchantId";
//
//		    Query sqlQuery = session.createQuery(sql);
//		    sqlQuery.setParameter("merchantId", merchantId);
//		    
//		    @SuppressWarnings("unchecked")
//		    List<String> resultSet = sqlQuery.list();
//		    logger.info("Check if date exist: "+resultSet);
//		    return new HashSet<>(resultSet);
//    }
        
    	@Override
    	@Transactional(readOnly = true)
    	public List<FinanceReport> getAllPayoutTxnDetailsBetweenDates(String date1, String date2) {
    		ArrayList<FinanceReport> fss = new ArrayList<FinanceReport>();
    		String sql = null;

    		Query sqlQuery = null;
    		List<Object[]> resultSet = null;
    		logger.info("getAllPayoutTxnDetailsBetweenDates:::");

//    		sql = "SELECT p.CREATED_DATE,p.PAYEE_NAME,p.PAYEE_BRN,p.PAYEE_ACC_NUMBER,p.PAYEE_BANK_NAME,p.INVOICE_ID_PROOF,p.PAYOUT_AMOUNT,p.PAYOUT_FEE,p.PAYOUT_STATUS,p.PAYOUT_DATE,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.TOTAL_AMOUNT,p.PAYOUTTYPE "
//    				+ " FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON p.MERCHANT_FK=ml.ID WHERE p.PAYOUT_STATUS IN ('pp','pending') AND p.CREATED_DATE BETWEEN '" + date1 + "' and '" + date2
//    				+ "' ORDER BY p.CREATED_DATE DESC ";
    		
    		sql = "SELECT p.CREATED_DATE,p.PAYEE_NAME,p.PAYEE_BRN,p.PAYEE_ACC_NUMBER,p.PAYEE_BANK_NAME,p.INVOICE_ID_PROOF,p.PAYOUT_AMOUNT,p.PAYOUT_FEE,p.PAYOUT_STATUS,p.PAYOUT_DATE,p.PAID_TIME,p.PAID_DATE,p.SUB_MERCHANT_MID,ml.BUSINESS_NAME,p.PAYOUT_ID,p.TOTAL_AMOUNT,p.PAYOUTTYPE,p.HOST_MDR,p.MOBI_MDR "
    				+ " FROM PAYOUT_DETAIL p INNER JOIN MERCHANT ml ON p.MERCHANT_FK=ml.ID WHERE p.PAYOUT_STATUS IN ('pp','pending') AND p.CREATED_DATE BETWEEN '" + date1 + "' and '" + date2
    				+ "' ORDER BY p.CREATED_DATE DESC ";

    		logger.info("Default Query : " + sql);
    		sqlQuery = super.getSessionFactory().createSQLQuery(sql);

    		resultSet = sqlQuery.list();

    		logger.info(String.valueOf(resultSet.size()));

    		for (Object[] rec : resultSet) {

    			FinanceReport fs = new FinanceReport();

    			if (rec[0] != null) {

    				String rd = null;
    				String rt = "";

    				try {
    					rd = new SimpleDateFormat("dd/MM/yyyy")
    							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
    					rt = new SimpleDateFormat("HH:mm:ss")
    							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
    				} catch (ParseException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
    				// logger.info("date : **" + rd);
    				fs.setDate(rd);
    				fs.setTime(rt);

    			} else {

    				String rd = null;
    				String rt = "";
    				try {
    					rd = new SimpleDateFormat("dd/MM/yyyy")
    							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
    					rt = new SimpleDateFormat("HH:mm:ss")
    							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
    				} catch (ParseException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
    				fs.setDate(rd);
    				fs.setTime(rt);
    			}

    			if (rec[1] == null || rec[1].toString().isEmpty()) {

    				fs.setCustomerName("");

    			} else if (rec[1] != null) {

    				fs.setCustomerName(rec[1].toString());
    			}

    			if (rec[2] == null || rec[2].toString().isEmpty()) {

    				fs.setBrn("");

    			} else if (rec[2] != null) {

    				fs.setBrn(rec[2].toString());
    			}

    			if (rec[3] == null || rec[3].toString().isEmpty()) {

    				fs.setAccountNo("");

    			} else if (rec[3] != null) {

    				fs.setAccountNo(rec[3].toString());

    			}

    			if (rec[4] == null || rec[4].toString().isEmpty()) {

    				fs.setBankName("");

    			} else

    			if (rec[4] != null) {

    				fs.setBankName(rec[4].toString());

    			}

    			if (rec[5] == null || rec[5].toString().isEmpty()) {

    				fs.setTransaction_id("");

    			} else

    			if (rec[5] != null) {

    				fs.setTransaction_id(rec[5].toString());

    			}

    			if (rec[6] == null || rec[6].toString().isEmpty()) {

    				fs.setPayoutamount("");

    			} else if (rec[6] != null) {

    				fs.setPayoutamount(rec[6].toString());

    			}

    			if (rec[7] == null || rec[7].toString().isEmpty()) {

    				fs.setPayoutFee("");

    			} else if (rec[7] != null) {

    				fs.setPayoutFee(rec[7].toString());
    			}

    			if (rec[8] == null) {

    				fs.setStatus("Requested");

    			} else if (rec[8] != null) {

    				if (rec[8].toString().equals("A")) {
    					fs.setStatus("To Process");
    				} else if (rec[8].toString().equals("pp")) {
    					fs.setStatus("Paid");
    				}else if (rec[8].toString().equals("pending")) {
    					fs.setStatus("Pending");
    				}

    			}

    			if (rec[10] == null || rec[10].toString().isEmpty()) {
    				fs.setPaidDate("");
    			} else {
    				fs.setPaidDate(rec[10].toString());
    			}

    			if (rec[11] == null || rec[11].toString().isEmpty()) {
    				fs.setPaidTime("");
    			} else {
    				fs.setPaidTime(rec[11].toString());
    			}

    			if (rec[12] == null || rec[12].toString().isEmpty()) {
    				fs.setSubmerchantMid("");
    			} else {
    				fs.setSubmerchantMid(rec[12].toString());
    			}

    			if (rec[13] == null || rec[13].toString().isEmpty()) {
    				fs.setSubmerchantName("");
    			} else {
    				fs.setSubmerchantName(rec[13].toString());
    			}

    			if (rec[14] == null || rec[14].toString().isEmpty()) {
    				fs.setPayoutId("");
    			} else {
    				fs.setPayoutId(rec[14].toString());
    			}

    			if (rec[15] == null || rec[15].toString().isEmpty()) {
    				fs.setAmount("");
    			} else {
    				fs.setAmount(rec[15].toString());
    			}

    			if (rec[16] == null || rec[16].toString().isEmpty()) {
    				fs.setPayoutType("");
    			} else {
    				fs.setPayoutType(rec[16].toString());
    			}
    			
    			if (rec[17] == null || rec[17].toString().isEmpty()) {
    				fs.setHostMdrAmt("");
    			} else {
    				fs.setHostMdrAmt(rec[17].toString());
    			}
    			
    			if (rec[18] == null || rec[18].toString().isEmpty()) {
    				fs.setMobiMdrAmt("");
    			} else {
    				fs.setMobiMdrAmt(rec[18].toString());
    			}


    			fss.add(fs);

    		}
    		logger.info("Result set for PayoutReportAll Completed");
    		

    		return fss;

    	}
        private static boolean getStart2PayMerchantCondition(long merchantId)
        {
            return (merchantId == 4352 || merchantId== 4391 || merchantId== 4498);
        }
    private static String getStatusDescription(Object statusObj) {
        if (statusObj == null) return "NOT SETTLED";
        String status = statusObj.toString();
        switch (status) {
            case "A": return "NOT SETTLED";
            case "C": return "VOIDED";
            case "S": return "SETTLED";
            case "CB": return "CHARGE BACK";
            case "FR": return "REFUNDED";
            case "BPS":
            case "GPS":
            case "GPT":
            case "TPS":
            case "SPS":
            case "BNS": return "SETTLED";
            case "BPA":
            case "TPA":
            case "SPA":
            case "BNA": return "NOT SETTLED";
            case "BPC":
            case "GBC": return "VOIDED";
            case "H": return "EZYSETTLE";
            case "PPA": return "PAYOUT";
            default: return "NOT SETTLED";
        }
    }

    private static String getStringValue(Object obj) {
        return (obj != null && !obj.toString().equalsIgnoreCase("null")) ? obj.toString() : "";
    }

    private static String formatDecimal(Object value) {
        if (value == null) return "";
        try {
            double amount = Double.parseDouble(value.toString());
            DecimalFormat myFormatter = new DecimalFormat("#,##0.00");
            return myFormatter.format(amount);
        } catch (NumberFormatException e) {
            logger.error("Error formatting decimal value: " + value, e);
            return "";
        }
    }

    private static String formatSettlementDate(String dateStr) {
        try {
            if (dateStr.length() == 10 || dateStr.contains("-")) {
                if (dateStr.matches("\\d{2}-[A-Za-z]{3}-\\d{4}")) { // Matches format "03-Dec-2024"
                    return new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("dd-MMM-yyyy").parse(dateStr));
                }
                return new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyy-MM-dd").parse(dateStr));
            } else if (dateStr.contains("T")) {
                return new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(dateStr.substring(0, 8)));
            } else {
                return new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(dateStr));
            }
        } catch (ParseException e) {
            logger.error("Error parsing settlement date: " + dateStr, e);
            return "";
        }
    }

    private static String getCardType(String cardType, Object additionalType) {
        if (additionalType != null && !additionalType.toString().isEmpty()) {
            return cardType + " - " + additionalType.toString();
        }
        return cardType;
    }
}