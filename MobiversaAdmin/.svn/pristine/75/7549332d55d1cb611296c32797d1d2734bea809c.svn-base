package com.mobiversa.payment.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.BankUser;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.payment.dao.AgentDao;
import com.mobiversa.payment.dao.MerchantDao;
import com.mobiversa.payment.dao.UserDao;
import com.mobiversa.payment.service.AdminService;
import com.mobiversa.payment.service.AgentService;
import com.mobiversa.payment.service.MerchantService;
import com.mobiversa.payment.util.PropertyLoader;
import com.mobiversa.payment.util.RandomPassword;
import com.postmark.java.Attachment;
import com.postmark.java.MerchantActivation;
import com.postmark.java.MsgDto;
import com.postmark.java.NameValuePair;
import com.postmark.java.PostmarkClient;
import com.postmark.java.PostmarkException;
import com.postmark.java.PostmarkMessage;
import com.postmark.java.PostmarkResponse;
import com.postmark.java.TempletFields;

@Controller
@RequestMapping(value = ForgotPasswordController.URL_BASE)
public class ForgotPasswordController extends BaseController {
	
	private static Logger logger = Logger
			.getLogger(ForgotPasswordController.class);
	@Autowired
	private MerchantService merchantService;
	
	@Autowired
	private PasswordEncoder encoder;
	
	@Autowired
	private MerchantDao merchantDAO;
	
	@Autowired
	private AgentDao agentDAO;
	
	@Autowired
	private AgentService agentService;
	
	@Autowired
	private AdminService adminService;
	
	@Autowired
	private UserDao userDAO;
	
	public static final String URL_BASE = "/forgotpwd";

	@RequestMapping(value = { "/", "", "/**" })
	public String defaultPage() {
		 logger.info("default url");
		return "redirect:" + URL_BASE + "/forgotPwdBymerchant";
	}
	
/*	
	@RequestMapping(value = { "/forgotPwdBymerchant" }, method = RequestMethod.GET)
	public String ForgotMerchantPasswordByMerchant(final Model model,
			final java.security.Principal principal, HttpServletRequest request) {
		logger.info("forgotPwdBymerchant");

		return null;
		
		
		
	}*/
	
	/*@RequestMapping(value = { "/forgotPwdBymerchant" }, method = RequestMethod.GET)
	//public ModelAndView displayResetPassword(ModelAndView modelAndView, User user) {
		public ModelAndView displayResetPassword() {
		logger.info("forgotPwdBymerchant");
		ModelAndView modelAndview;
        modelAndView.addObject("user", user);
        modelAndView.setViewName("forgotPasswordDetails");
        
		modelAndview = new ModelAndView("redirect:forgotPasswordDetails.jsp");
        return modelAndview;
    }*/
	
	
	@RequestMapping(value = { "/forgotPwdByUser" },method = RequestMethod.GET)
	public String forgotPwdByUser(ModelMap model) {
		
		logger.info("forgotPwdBymerchant");
 
		String msg = "Forgot Pwd?";
		
		
		model.addAttribute("heading", msg);
		return "admin/forgotPasswordDetails";
	}
	
	 public boolean sendMailToResetPwd(MsgDto md,TempletFields tempField, String emailId){
		 
		 logger.info("sendMailToResetPwd" +emailId);
		 boolean result = true ;
		 List<NameValuePair> headers = new ArrayList<NameValuePair>();
			headers.add(new NameValuePair("HEADER", "test"));
		 
		    String fromAddress = "info@mobiversa.com";
			String apiKey = PropertyLoader.getFile().getProperty("APIKEY");
			String toAddress = emailId;
			//String ccMail = PropertyLoader.getFile().getProperty("MOBILEUSER_ADD_CCMAIL");
			String bccMail = PropertyLoader.getFile().getProperty("RESETPWD_BCCMAIL");
			//String bccMail = "mathew@mobiversa.com";
			String subject = PropertyLoader.getFile().getProperty("RESETPWD_SUBJECT");
			
			//String subject = "[Important] Your Mobi Web Portal Account Password Has Been Changed!";

			String emailBody = MerchantActivation.sentResetPwdTempletContent(tempField);
					
			List<Attachment> attachments = new ArrayList<Attachment>();

			Attachment mobiImg = new Attachment("mobiImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("MOBIIMG"), "cid:mobiImg");

			Attachment fbImg = new Attachment("mobi_facebook.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("FBIMG"), "cid:fbImg");

			Attachment twitImg = new Attachment("twitImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TWITIMG"), "cid:twitImg");

			Attachment InstaImg = new Attachment("InstaImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("INSTAIMG"), "cid:InstaImg");
			
			/*Attachment InstaImg = new Attachment("InstaImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("INSTAIMGUPD"), "cid:InstaImg");*/
			
			Attachment YoutubeImg = new Attachment("YoutubeImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("YOUTUBEIMG"), "cid:YoutubeImg");

			Attachment linkedInImg = new Attachment("linkedInImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("LINKEDINIMG"), "cid:linkedInImg");

			Attachment emailImg = new Attachment("emailImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("EMAILIMG"), "cid:emailImg");

			Attachment tollfreeImg = new Attachment("tollfreeImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TOLLFREEIMG"), "cid:tollfreeImg");

			Attachment telephoneImg = new Attachment("telephoneImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TELEPHONEIMG"), "cid:telephoneImg");

			Attachment  webImg= new Attachment(
					"webImg.png",
					"image/jpg",PropertyLoader.getFile().getProperty("WEBIMG"),
					"cid:webImg");
			/*Attachment activationBannerImg = new Attachment(
					"activationBannerImg.png",
					"image/jpg",PropertyLoader.getFile().getProperty("ACTIVATIONBANNERIMG"),
					"cid:activationBannerImg");*/
			Attachment pwdResetBannerImg = new Attachment(
					"pwdResetBannerImg.png",
					"image/jpg",PropertyLoader.getFile().getProperty("PWDRESETIMG"),
					"cid:pwdResetBannerImg");
			
			//attachments.add(activationBannerImg);
			attachments.add(pwdResetBannerImg);
			attachments.add(webImg);
			attachments.add(mobiImg);
			attachments.add(fbImg);
			attachments.add(twitImg);
			attachments.add(InstaImg);
			attachments.add(linkedInImg);
			attachments.add(emailImg);
			attachments.add(tollfreeImg);
			attachments.add(telephoneImg);
			attachments.add(YoutubeImg);
			PostmarkMessage message = new PostmarkMessage(fromAddress, toAddress, fromAddress, null, bccMail, subject,
					emailBody, true, "test-email", null, attachments);
			PostmarkClient client = new PostmarkClient(apiKey);

			try {
				PostmarkResponse mailSent= client.sendMessage(message);
				 logger.info("mailSent status::" +mailSent.getStatus());
				if(mailSent.getStatus().equals("SUCCESS")) {
					 logger.info("mailSent status SUCCESS");
					result = true;
					logger.info("Merchant password rest Email Sent Successfully to" +emailId);
					logger.info("result::" +result);
					
				}
			} catch (PostmarkException pe) {
				
				result = false;
				logger.info("Invalid Signature Base64 String" +result);
				
			}
		 
		 return result;
	 }
	
	
	@RequestMapping(value = { "/resetByPwdByMailId" }, method = RequestMethod.POST)
	public  String resetByPwdByMailId(
			@RequestParam("email") String emailId ,			 
			 @RequestParam(required = false, defaultValue = "1") final int currPage,
			 final HttpServletRequest request, final Model model,
			 final java.security.Principal principal){
		
		logger.info("resetByPwdByMailId" +emailId);
		TempletFields tempField = new TempletFields();
		boolean result = false;
		String statusMsg = null;
		boolean isValid = true;
		Merchant merchant = merchantService.validateMerchantEmailId(emailId);
		Agent agent = agentService.validateAgentEmailId(emailId);
		BankUser bankUser = adminService.validateAdminEmailId(emailId);
		
		if(merchant != null) {
			if(emailId.equals(merchant.getEmail())) {
				logger.info("merchant" +merchant);
				RandomPassword rpwd = new RandomPassword();
				String genPwd = rpwd.generateRandomString();
				logger.info("genPwd" +genPwd);
				merchant.setPassword(encoder.encode(genPwd));
				
				tempField.setSalutation(merchant.getSalutation());
				tempField.setFirstName(merchant.getContactPersonName());
				tempField.setUserName(merchant.getUsername());
				tempField.setPassword(genPwd);
				tempField.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
	
				MsgDto md=new MsgDto();
				md.setFirstName(merchant.getContactPersonName());
				md.setUserName(merchant.getUsername());
				md.setPassword(genPwd);
				md.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
				
			 result = sendMailToResetPwd(md,tempField,emailId);				
			 logger.info("result " +result);
			logger.info("About to add Merchant " );
			merchant = merchantDAO.saveOrUpdateEntity(merchant);
			statusMsg ="Email sent";
			logger.info("Merchant Added Successfully" );
			}
	 }else if(agent != null){
		 if(emailId.equals(agent.getEmail())) {
				RandomPassword rpwd = new RandomPassword();
				String genPwd = rpwd.generateRandomString();
				agent.setPassword(encoder.encode(genPwd));
				
				tempField.setSalutation(agent.getSalutation());
				tempField.setFirstName(agent.getContact());
				tempField.setUserName(agent.getUsername());
				tempField.setPassword(genPwd);
				tempField.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
	
				MsgDto md=new MsgDto();
				md.setFirstName(agent.getContact());
				md.setUserName(agent.getUsername());
				md.setPassword(genPwd);
				md.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
				
				 result = sendMailToResetPwd(md,tempField,emailId);				
	
			logger.info("About to add Merchant " );
			agent = agentDAO.saveOrUpdateEntity(agent);
			logger.info("Agent Added Successfully" );
			}
			
		}else if(bankUser != null)  {
			
			
				 if(emailId.equals(bankUser.getEmail())) {
					 
						RandomPassword rpwd = new RandomPassword();
						String genPwd = rpwd.generateRandomString();
						bankUser.setPassword(encoder.encode(genPwd));
						
						tempField.setSalutation(bankUser.getSalutation());
						tempField.setFirstName(bankUser.getContact());
						tempField.setUserName(bankUser.getUsername());
						tempField.setPassword(genPwd);
						tempField.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
			
						MsgDto md=new MsgDto();
						md.setFirstName(bankUser.getContact());
						md.setUserName(bankUser.getUsername());
						md.setPassword(genPwd);
						md.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
						
						 result=sendMailToResetPwd(md,tempField,emailId);				
			
					logger.info("About to add Merchant " );
					bankUser = userDAO.saveOrUpdateEntity(bankUser);
					logger.info("Agent Added Successfully" );
					 
				 }
			
			
		}else {
			statusMsg ="Please enter the registered valid Email Id";
			isValid = false;
		}
		
		if(!isValid)
		 {
			return "admin/forgotPasswordDetailsInvalid";
		
		}
		else if (!result){	
		return "admin/forgotPasswordDetailsFailure";
			
		}
		
		else {	
	
		return "admin/forgotPasswordDetailsSuccess";		
		}
		
	}



}
