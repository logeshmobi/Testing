package com.mobiversa.payment.controller;

import java.security.Principal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.ForSettlement;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.Receipt;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.common.bo.TransactionRequest;
import com.mobiversa.common.bo.TransactionResponse;
import com.mobiversa.common.bo.UMEcomTxnRequest;
import com.mobiversa.common.bo.UMEcomTxnResponse;
import com.mobiversa.payment.connect.MotoPaymentCommunication;
import com.mobiversa.payment.controller.bean.PageBean;
import com.mobiversa.payment.controller.bean.PageBean.Module;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.dao.SMSServiceImpl;
import com.mobiversa.payment.dto.DataTransferObject;
import com.mobiversa.payment.dto.MotoTxnDet;
import com.mobiversa.payment.service.AgentService;
import com.mobiversa.payment.service.MerchantService;
import com.mobiversa.payment.service.MobileUserService;
import com.mobiversa.payment.service.SettlementWebService;
import com.mobiversa.payment.service.TransactionService;
import com.mobiversa.payment.util.CardType;
import com.mobiversa.payment.util.MobiliteTrackDetails;
import com.mobiversa.payment.util.PropertyLoad;
import com.mobiversa.payment.util.ResponseDetails;
import com.mobiversa.payment.util.UMEzyway;

@Controller
@RequestMapping(value = MerchantWebUMTransactionController.URL_BASE)
public class MerchantWebUMTransactionController extends BaseController {

	@Autowired
	private MobileUserService mobileUserService;
	@Autowired
	private MerchantService merchantService;
	@Autowired
	private TransactionService transactionService;
	@Autowired
	private AgentService agentService;
	@Autowired
	private SettlementWebService settlementWebService;

	public static final String URL_BASE = "/transactionUmweb";
	private static final Logger logger = Logger
			.getLogger(MerchantWebUMTransactionController.class);

	@RequestMapping(value = { "", "/", "/**/*" }, method = RequestMethod.GET)
	public String defaultPage() {
		//logger.info("Test1 defaultpage");
		return "redirect:" + URL_BASE + "/list/1";
	}

	@RequestMapping(value = { "/alllist/{currPage}" }, method = RequestMethod.GET)
	public String displayTransactionSummary(final Model model,
			final java.security.Principal principal,
			HttpServletRequest request, @PathVariable final int currPage) {
		HttpSession session = request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("All UMOBILE transaction currently logged by: " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUmList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		transactionService.getUMForSettlement(paginationBean, currentMerchant);
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant);
		if (paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Record found");
		} 
		model.addAttribute("terminalDetailsList", terminalDetails);
		model.addAttribute("paginationBean", paginationBean);
		return TEMPLATE_MERCHANT;
	}

	

	@RequestMapping(value = { "/umlist" }, method = RequestMethod.GET)
	public String displayCardTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cardUMTransactionList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		transactionService.getUMMidTransForSettlement(paginationBean,
				currentMerchant.getMid().getUmMid(),null);
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant,"EZYWIRE",null,null,null);
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getUmMid());
		if (paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Record found");
		}
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);
		return TEMPLATE_MERCHANT;
	}

	@RequestMapping(value = { "/listcash" }, method = RequestMethod.GET)
	public String displayCashTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();

		Merchant currentMerchant = merchantService.loadMerchant(myName);
		logger.info(" for test merchant id :"
				+ currentMerchant.getMid().getMid());
		logger.info("cash list transaction: " + currentMerchant);

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cashTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");

		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		System.out.println("list of items from db1:");
		/*transactionService.getCashTransForSettlement(paginationBean,
				currentMerchant);*/
		transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"CASH");
		// System.out.println("list of items from db2:"+paginationBean.getItemList().size());
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
		/*model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);*/
		if (paginationBean.getItemList().size() > 0) {

			for (ForSettlement forSettlement : paginationBean.getItemList()) {
				if(forSettlement.getTid()!=null) {
				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				//System.out.println(forSettlement.getStatus());
				if (forSettlement.getStatus().equals("CT")) {
					forSettlement.setStatus("CASH SALE");
				}
				if (forSettlement.getStatus().equals("CV")) {
					forSettlement.setStatus("CASH CANCELLED");
				}

				if (forSettlement.getDate() != null
						&& forSettlement.getTime() != null) {
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}
			}

			model.addAttribute("paginationBean", paginationBean);

			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);

			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	@RequestMapping(value = { "/boostlist" }, method = RequestMethod.GET)
	public String displayboostTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,
			HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /boostlist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/boostTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		/*transactionService.getBoostTransForSettlement(paginationBean,
				currentMerchant);*/
		transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"BOOST");
		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "BOOST",null,null,null);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		/*model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		if (paginationBean.getItemList().size() > 0) {

			for (ForSettlement forSettlement : paginationBean.getItemList()) {
				

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("BPS")) {
					forSettlement.setStatus("BOOST SETTLED");
				}
				if (forSettlement.getStatus().equals("BP")) {
					forSettlement.setStatus("BOOST PENDING");
				}
				if (forSettlement.getStatus().equals("BPA")) {
					forSettlement.setStatus("BOOST PAYMENT");
				}
				if (forSettlement.getStatus().equals("BPC")) {
					forSettlement.setStatus("BOOST CANCELLED");
				}

				if (forSettlement.getTimeStamp() != null) {
					
					try {

						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(forSettlement.getTimeStamp()));

						forSettlement.setDate(rd);

						String rt1 = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
								.parse(forSettlement.getTimeStamp().toString()));
						forSettlement.setTime(rt1);

					} catch (ParseException e) {
					}

				}
				

			}

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	@RequestMapping(value = { "/motolist" }, method = RequestMethod.GET)
	public String displayMotoTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /motolist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("moto list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/MotoTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("MotoMid: " + currentMerchant.getMid().getMotoMid());
		paginationBean.setCurrPage(currPage);
		/*transactionService.getMotoTransForSettlement(paginationBean,
				currentMerchant);*/
		
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"MOTO");*/
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"MOTO");
		
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"MOTO",null,null,null);*/
		
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				
				TransactionRequest tr=transactionService.loadTransactionRequest(forSettlement.getTrxId().toString());
				if(tr!=null) {
					forSettlement.setPan(tr.getMaskedPan());
					String pan = forSettlement.getPan().substring(forSettlement.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						forSettlement.setPan(pan);
					} else {
						forSettlement.setPan(pan);
					}
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				
				if (forSettlement.getTime() != null) {
					
					try {
						
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	@RequestMapping(value = { "/ezywaylist" }, method = RequestMethod.GET)
	public String displayEzyWayTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /Ezywaylist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("ezyway list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyWayTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("Ezyway Mid: " + currentMerchant.getMid().getEzywayMid());
		paginationBean.setCurrPage(currPage);
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"EZYWAY");*/
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"EZYWAY");
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYWAY",null,null,null);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzywayMid());
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {
			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				TransactionRequest tr=transactionService.loadTransactionRequest(forSettlement.getTrxId().toString());
				if(tr!=null) {
					forSettlement.setPan(tr.getMaskedPan());
					String pan = forSettlement.getPan().substring(forSettlement.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						forSettlement.setPan(pan);
					} else {
						forSettlement.setPan(pan);
					}
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				// logger.info("date and time boost: " +
				// forSettlement.getTime());
				
				 * if (forSettlement.getDate() != null &&
				 * forSettlement.getTime() != null) {
				 
				//logger.info("stan moto: "+forSettlement.getStan());
				//logger.info("location moto: "+forSettlement.getLocation());
				if (forSettlement.getTime() != null) {
					//logger.info("time moto: " + forSettlement.getTime());
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						// logger.info(" Date : " + rd + " : " + sd);
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	
	@RequestMapping(value = { "/cancelPayment/{id}" }, method = RequestMethod.GET)
	public String cancelPaymentTransactionDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/voidpayment/CancelPaymentConfirm", null);

		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");

		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName" + ":" + merchant.getBusinessName() + ":"
				+ "Merchant void logged by" + ":" + principal.getName() + ":");
		ForSettlement fs = transactionService.getForSettlement(id);
		TransactionRequest tr = transactionService.loadTransactionRequest(id);

		MotoTxnDet txnDet = new MotoTxnDet();
		txnDet.setTid(fs.getTid());
		txnDet.setMid(fs.getMid());
		txnDet.setTrxId(id);
		txnDet.setContactName(tr.getCardHolderName());
		txnDet.setApprCode(fs.getAidResponse());
		String rd = null;
		if (fs.getDate() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fs.getTimeStamp()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (fs.getTime() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(fs.getTime()));

			} catch (ParseException e) {
			}
		}
		txnDet.setExpectedDate(rd + " " + rt);
		double amount = 0;
		amount = Double.parseDouble(fs.getAmount()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		txnDet.setAmount(output);

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				txnDet.setPan(pan);
			} else {
				txnDet.setPan(pan);
			}

		} else {
			txnDet.setPan("NA");
		}

		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", txnDet);

		return TEMPLATE_MERCHANT;
	}
	@RequestMapping(value = { "/cancelPaymentByMerchant" }, method = RequestMethod.POST)
	public String motoSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") MotoTxnDet motoTxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		
		
		ResponseDetails data=MotoPaymentCommunication.CancelPayment(motoTxnDet);
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/CancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/voidPaymentDone", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/CancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	@RequestMapping(value = { "/ezyreclist" }, method = RequestMethod.GET)
	public String displayEzyRecTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /Ezyreclist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("ezyrec list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyRecTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("EZYREC Mid: " + currentMerchant.getMid().getEzyrecMid());
		
		paginationBean.setCurrPage(currPage);
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"EZYREC");*/
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"EZYREC");
		
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYREC",null,null,null);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());
		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				// logger.info("date and time boost: " +
				// forSettlement.getTime());
				
				 * if (forSettlement.getDate() != null &&
				 * forSettlement.getTime() != null) {
				 
				//logger.info("stan moto: "+forSettlement.getStan());
				//logger.info("location moto: "+forSettlement.getLocation());
				if (forSettlement.getTime() != null) {
					//logger.info("time moto: " + forSettlement.getTime());
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						// logger.info(" Date : " + rd + " : " + sd);
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	
	
	@RequestMapping(value = { "/ezypasslist" }, method = RequestMethod.GET)
	public String displayEzypassTransactionSummary(
			final Model model,
			final java.security.Principal principal,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		logger.info("transaction type checking /ezypasslist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("EZYPASS list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzypassTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("ezypass mid: " + currentMerchant.getMid().getEzypassMid());
		paginationBean.setCurrPage(currPage);
		/*transactionService.getEzypassTransForSettlement(paginationBean,
				currentMerchant);*/
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"EZYPASS");*/
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant, "EZYPASS");
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYPASS",null,null,null);*/
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				// logger.info("date and time boost: " +
				// forSettlement.getTime());
				
				 * if (forSettlement.getDate() != null &&
				 * forSettlement.getTime() != null) {
				 
				//logger.info("stan moto: "+forSettlement.getStan());
				//logger.info("location moto: "+forSettlement.getLocation());
				if (forSettlement.getTime() != null) {
					//logger.info("time moto: " + forSettlement.getTime());
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						// logger.info(" Date : " + rd + " : " + sd);
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			List<TerminalDetails> terminalDetails = transactionService
					.getTerminalDetails(currentMerchant.getMid().getMid());
			Set<String> tidSet = new HashSet<String>();
			for (TerminalDetails t : terminalDetails) {
				String mtid = t.getTid();
				tidSet.add(mtid.toString());
				// tidSet.add(t.getDeviceId());
			}
			ArrayList<String> dIdSet = new ArrayList<String>();
			for (TerminalDetails t : terminalDetails) {
				String did = t.getDeviceId();
				dIdSet.add(did.toString());

			}
			model.addAttribute("devIdList", dIdSet);
			model.addAttribute("tidList", tidSet);
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public String displayTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			HttpServletRequest request,

			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		HttpSession session=request.getSession();
		
		String myName =(String)session.getAttribute("userName");
		logger.info("Search All UMobile Transaction By Merchant " + myName);
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String fromDate1 = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String toDate1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+fromDate1+" to date:"+toDate1);
		
		/*String fromDate1 = null;
		String toDate1 = null;
		if ((fromDate != null || !fromDate.isEmpty())
				&& (toDate != null || !toDate.isEmpty())) {
			try {
				fromDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(fromDate));
				toDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
		}*/
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUmList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		transactionService.searchUMForSettlement(fromDate1, toDate1, tid, status,
				paginationBean, currentMerchant);

		model.addAttribute("fromDate", fromDate1);

		model.addAttribute("toDate", toDate1);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getUmMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchcashtrans", method = RequestMethod.POST)
	public String displayCashTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);

		String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
		}
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cashTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		transactionService.searchForSettlementcash(dat, dat1, paginationBean,
				currentMerchant);
		/*transactionService.searchTransactionForSettlement(dat, dat1, paginationBean,
				currentMerchant,"CASH");*/
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		for (ForSettlement forSettlement : paginationBean.getItemList()) {
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {

				forSettlement.setMerchantName(terminalDetails.getContactName());
			}
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);

				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("CT")) {
				forSettlement.setStatus("CASH SALE");
			}
			if (forSettlement.getStatus().equals("CV")) {
				forSettlement.setStatus("CASH CANCELLED");
			}

			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {

					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchcardtrans", method = RequestMethod.POST)
	public String displaycardTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal.getName());*/
		
		String dat = fromDate;
		String dat1 = toDate;

		

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cardUMTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchCardUMForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		model.addAttribute("fromDate", fromDate);
		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);
		model.addAttribute("status", status);
		
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		logger.info("No of Records "+ paginationBean.getItemList().size());
		/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {
				// logger.info("terminal details contact Name:" +
				// terminalDetails.getContactName());
				forSettlement.setMerchantName(terminalDetails.getContactName());
			}
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("S")) {
				forSettlement.setStatus("SETTLED");
			}
			if (forSettlement.getStatus().equals("P")) {
				forSettlement.setStatus("PENDING");
			}
			if (forSettlement.getStatus().equals("A")) {
				forSettlement.setStatus("NOT SETTLED");
			}
			if (forSettlement.getStatus().equals("C")) {
				forSettlement.setStatus("CANCELLED");
			}
			if (forSettlement.getStatus().equals("R")) {
				forSettlement.setStatus("REVERSAL");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null && forSettlement.getTimeStamp()!= null ) {
				try {
					// String sd=forSettlement.getDate()+new
					// SimpleDateFormat("y").format(new java.util.Date());
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}*/
		/*
		 * String myName = principal.getName();
		 * logger.info("currently logged in as " + myName); Merchant
		 * currentMerchant = merchantService.loadMerchant(myName);
		 */
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);

		//model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchboost", method = RequestMethod.POST)
	public String displayboostTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		logger.info("current username: "+myName);
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/
		
		logger.info("current merchant MID: "+currentMerchant.getMid().getMid());

		String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/boostTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementBoost(dat, dat1, tid, status,
				paginationBean, currentMerchant);

	//	transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "BOOST", fromDate, toDate,status);
		
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchmoto", method = RequestMethod.POST)
	public String displayMotoTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/MotoTransactionList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		transactionService.searchUMForSettlementMoto(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "MOTO", fromDate, toDate,status);
		
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table response

		} else {
			model.addAttribute("responseData", null);
		}

		model.addAttribute("fromDate", fromDate);
		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	@RequestMapping(value = "/searchezyway", method = RequestMethod.POST)
	public String searchEzyWayTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/

		String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyWayTransactionList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyWay(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYWAY", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzywayMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchezyrec", method = RequestMethod.POST)
	public String searchEzyrecTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/

		String dat = null;
		String dat1 = null;

		//String txn_Type = "MOTO";
		//logger.info("status: " + status + " txn_type: " + txn_Type);

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyRecTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyRec(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYREC", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		

		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	@RequestMapping(value = "/searchezypass", method = RequestMethod.POST)
	public String searchEzyPassTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/

		String dat = null;
		String dat1 = null;

		//String txn_Type = "MOTO";
		//logger.info("status: " + status + " txn_type: " + txn_Type);

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzypassTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyPass(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYPASS", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzypassMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	@RequestMapping(value = { "/UMdetails/{id}" }, method = RequestMethod.GET)
	public String displayUMReceiptDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {
		HttpSession session=request.getSession();
		
		logger.info("mrn"+id);
		
		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/receipt_UM", null);
		
		/*PageBean pageBean = new PageBean("transactions details",
				"merchantweb/transaction/receipt_v0.2", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");*/
		
		int amount = 0;double amt=0.0;
		
		String myName = (String) session.getAttribute("userName");
		logger.info("myName"+myName);
		Merchant merchant = merchantService.loadMerchant(myName);
		//logger.info("merchant"+merchant.getBusinessName());
		
		UMEcomTxnRequest req =transactionService.loadUMEzywayTransactionRequest(id);
		UMEcomTxnResponse tr = transactionService.loadUMEzywayTransactionResponse(id);
		
		logger.info("UMEcomTxnResponse"+tr.getF263_MRN());
		
		DataTransferObject dt = new DataTransferObject();
		try {
			
			
			
		
		dt.setMerchantName(merchant.getBusinessName());
		dt.setMerchantAddr1(merchant.getBusinessAddress1());
		dt.setMerchantAddr2(merchant.getBusinessAddress2());
		dt.setMerchantCity(merchant.getCity());
		dt.setMerchantPostCode(merchant.getPostcode());
		dt.setMerchantContNo(merchant.getBusinessContactNumber());
		dt.setMerchantState(merchant.getState());
		
		logger.info("merchant State::"+merchant.getState()+"::;"+dt.getMerchantState());
		
		if (tr.getF270_ORN()!= null) {
			dt.setRefNo(tr.getF270_ORN());
			logger.info("invoice id:" + dt.getRefNo());
		} else {
			dt.setRefNo("");
		}
		if (tr.getF354_TID() != null) {
			
			logger.info("tid"+tr.getF354_TID());
			dt.setTid(tr.getF354_TID());
		}
		dt.setMid(tr.getF001_MID());
		/*
		if(tr.getF007_TxnAmt()!=null) {
			 amount=Integer.parseInt(tr.getF007_TxnAmt());
			 amt=amount/100;
			 logger.info("amount after change :"+amount);
	
		}*/
		
		if(tr.getF007_TxnAmt()!=null) {
			
			amt= Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			 
			 logger.info("amount after change :"+amount);
	
		}
		
		String pattern ="#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String strTotal = myFormatter.format(amt);
		 dt.setAmount(strTotal);
		 dt.setTotal(strTotal);
		 
		 logger.info("strTotal"+strTotal);

		String sd = tr.getTimeStamp();
		try {
	
			String rd = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
			String rt = new SimpleDateFormat("HH:mm:ss")
					.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
			dt.setDate(rd);
			dt.setTime(rt);
			logger.info("rd and rt"+rd+"::"+rt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		/*if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status"+tr.getStatus());
			dt.setTxnType("EZYWAY SALE");
			
		}else{
			logger.info("status"+tr.getStatus());
			dt.setTxnType("EZYWAY VOID");
		}*/
		
		/*if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status"+tr.getStatus());
			
			dt.setTxnType(req.getTxnType()+" SALE");
			
			
		}else{
			if(req.getTxnType().equals("EZYWAY")) {
				dt.setTxnType("EZYWAY VOID");
			}else {
				dt.setTxnType("EZYMOTO VOID");
			}
			
			
		}*/
		
		/*logger.info("status"+tr.getStatus());
		
		if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status"+tr.getStatus());
			if(req.getTxnType() == null) {
				dt.setTxnType("EZYWAY SALE");
			}else {
				dt.setTxnType(req.getTxnType()+" SALE");
			}
			
			
			} else {

				logger.info("else status" + req.getTxnType());
				if (req.getTxnType() == null) {
					dt.setTxnType("EZYWAY VOID");
				} else {
					if (req.getTxnType().equals("EZYWAY")) {

						dt.setTxnType("EZYWAY VOID");
					} else if (req.getTxnType().equals("EZYMOTO")) {
						dt.setTxnType("EZYMOTO VOID");
					} else {
						dt.setTxnType("EZYAUTH VOID");
					}
				}

			}*/
		
		if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status S or A:"+tr.getStatus());
			logger.info("version 3 or 5:"+tr.getH002_VNO());
			logger.info("Txn Type:"+tr.getTxnType());
			/*if(req.getTxnType() == null) {
				dt.setTxnType("EZYWAY SALE");
			}else {
				dt.setTxnType(req.getTxnType()+" SALE");
			}*/
			
			if(tr.getH002_VNO().equals("03")){
                
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYLINK SALE");
                }
                
                if(tr.getTxnType().equals("EZYWAY")){
                
                    dt.setTxnType("EZYWAY SALE");
                }
                
            }
            
            if(tr.getH002_VNO().equals("05")){
            
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO SALE");
                }
                
                if(tr.getTxnType().equals("EZYAUTH")){
                    
                    dt.setTxnType("EZYAUTH SALE");
                }
                
                if(tr.getTxnType().equals("EZYREC")){
                    
                    dt.setTxnType("EZYREC SALE");
                }
                
            }
			
            if(tr.getH002_VNO().equals("05V")){
                
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO VCC SALE");
                }
                
            }
			
		}else if(tr.getStatus().equals("C")) {
			
			logger.info("status C:"+tr.getStatus());
			logger.info("version 3 or 5:"+tr.getH002_VNO());
			logger.info("Txn Type:"+tr.getTxnType());
			
			if(tr.getH002_VNO().equals("03")){
				
				if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYLINK VOID");
				}
				
				if(tr.getTxnType().equals("EZYWAY")){
                
                    dt.setTxnType("EZYWAY VOID");
				}
                
            }
			
			if(tr.getH002_VNO().equals("05")){
			
				if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO VOID");
				}
				
				if(tr.getTxnType().equals("EZYAUTH")){
                    
                    dt.setTxnType("EZYAUTH VOID");
                }
				
				if(tr.getTxnType().equals("EZYREC")){
                    
                    dt.setTxnType("EZYREC VOID");
                }
                
            }
			
			if(tr.getH002_VNO().equals("05V")){
                
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO VCC VOID");
                }
                
            }
			
		}else {
			
			logger.info("No status :"+tr.getStatus());
			logger.info("version 3 or 5:"+tr.getH002_VNO());
			logger.info("Txn Type:"+tr.getTxnType());
			
			logger.info("Set default as EZYWAY");
			
			dt.setTxnType("EZYWAY");
			
		}
		
		
		
		dt.setMaskedPan(tr.getMaskedPan());
		dt.setCardHolderName(req.getF268_ChName());
		
		String cardNum = null;
		if (tr.getMaskedPan() == null
				|| tr.getMaskedPan().length() < 4) {
			cardNum = tr.getMaskedPan();
		} else {
			cardNum = tr.getMaskedPan().substring(
					tr.getMaskedPan().length() - 4);
		}
		String finalNum = String.format("XXXX %s", cardNum);
		dt.setCardNo(finalNum);		
		logger.info("finalNum"+finalNum);
		dt.setRrn(tr.getF023_RRN());		
		dt.setAid(tr.getF011_AuthIDResp());
		dt.setApprCode(tr.getF011_AuthIDResp());
		dt.setCardType(tr.getF350_CrdTyp());
		
		logger.info("ApprCod"+dt.getApprCode());
		
		}catch (Exception e) {
			System.out.println("Record not Found..!");
			request.setAttribute("errMsg",
					"Data not Available for this Transaction ID...!");
		}
		request.setAttribute("dto", dt);
		model.addAttribute("pageBean", pageBean);
		 //return "merchantweb/transaction/CardReceiptNew";
		//return "merchantweb/transaction/receipt";
		return "merchantweb/transaction/receipt_UM";
	}
	
	@RequestMapping(value = { "/UMdetailsAgent/{id}/{merchantid}" }, method = RequestMethod.GET)
	public String displayUMReceiptDetailsByAgent(final Model model,
			@PathVariable final String id, @PathVariable final String merchantid,
			HttpServletRequest request,
			HttpServletResponse response, Principal principal) {
		HttpSession session=request.getSession();
		
		logger.info("mrn"+id);
		
		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/receipt_UM", null);
		
		/*PageBean pageBean = new PageBean("transactions details",
				"merchantweb/transaction/receipt_v0.2", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");*/
		
		int amount = 0;double amt=0.0;
		
		String myName = (String) session.getAttribute("userName");
		logger.info("myName"+myName);
		Agent agent = agentService.loadAgent(principal.getName());
		   
		 logger.info("display agent web : " + agent.getFirstName());
		 
		 long merchantId=Long.parseLong(merchantid);  
		 Merchant merchant = merchantService.loadMerchantByPk(merchantId);
		
		
		/*String myName = (String) session.getAttribute("userName");
		logger.info("myName"+myName);
		Merchant merchant = merchantService.loadMerchant(myName);*/
		//logger.info("merchant"+merchant.getBusinessName());
		
		UMEcomTxnRequest req =transactionService.loadUMEzywayTransactionRequest(id);
		UMEcomTxnResponse tr = transactionService.loadUMEzywayTransactionResponse(id);
		
		logger.info("UMEcomTxnResponse"+tr.getF263_MRN());
		
		DataTransferObject dt = new DataTransferObject();
		try {
			
			
			
		
				dt.setMerchantName(merchant.getBusinessName());
				dt.setMerchantAddr1(merchant.getBusinessAddress1());
				dt.setMerchantAddr2(merchant.getBusinessAddress2());
				dt.setMerchantCity(merchant.getCity());
				dt.setMerchantPostCode(merchant.getPostcode());
				dt.setMerchantContNo(merchant.getBusinessContactNumber());
				dt.setMerchantState(merchant.getState());
				
				logger.info("merchant State::"+merchant.getState()+"::;"+dt.getMerchantState());
			
		if (tr.getF270_ORN()!= null) {
			dt.setRefNo(tr.getF270_ORN());
			logger.info("invoice id:" + dt.getRefNo());
		} else {
			dt.setRefNo("");
		}
		if (tr.getF354_TID() != null) {
			
			logger.info("tid"+tr.getF354_TID());
			dt.setTid(tr.getF354_TID());
		}
		dt.setMid(tr.getF001_MID());
		/*
		if(tr.getF007_TxnAmt()!=null) {
			 amount=Integer.parseInt(tr.getF007_TxnAmt());
			 amt=amount/100;
			 logger.info("amount after change :"+amount);
	
		}*/
		
		if(tr.getF007_TxnAmt()!=null) {
			
			amt= Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			 
			 logger.info("amount after change :"+amount);
	
		}
		
		String pattern ="#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String strTotal = myFormatter.format(amt);
		 dt.setAmount(strTotal);
		 dt.setTotal(strTotal);
		 
		 logger.info("strTotal"+strTotal);

		String sd = tr.getTimeStamp();
		try {
	
			String rd = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
			String rt = new SimpleDateFormat("HH:mm:ss")
					.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
			dt.setDate(rd);
			dt.setTime(rt);
			logger.info("rd and rt"+rd+"::"+rt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		/*if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status"+tr.getStatus());
			dt.setTxnType("EZYWAY SALE");
			
		}else{
			logger.info("status"+tr.getStatus());
			dt.setTxnType("EZYWAY VOID");
		}*/
		
		/*if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status"+tr.getStatus());
			
			dt.setTxnType(req.getTxnType()+" SALE");
			
			
		}else{
			if(req.getTxnType().equals("EZYWAY")) {
				dt.setTxnType("EZYWAY VOID");
			}else {
				dt.setTxnType("EZYMOTO VOID");
			}
			
			
		}*/
		
		/*logger.info("status"+tr.getStatus());
		
		if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status"+tr.getStatus());
			if(req.getTxnType() == null) {
				dt.setTxnType("EZYWAY SALE");
			}else {
				dt.setTxnType(req.getTxnType()+" SALE");
			}
			
			
			} else {

				logger.info("else status" + req.getTxnType());
				if (req.getTxnType() == null) {
					dt.setTxnType("EZYWAY VOID");
				} else {
					if (req.getTxnType().equals("EZYWAY")) {

						dt.setTxnType("EZYWAY VOID");
					} else if (req.getTxnType().equals("EZYMOTO")) {
						dt.setTxnType("EZYMOTO VOID");
					} else {
						dt.setTxnType("EZYAUTH VOID");
					}
				}

			}*/
		
		if(tr.getStatus().equals("S")||tr.getStatus().equals("A")) {
			logger.info("status S or A:"+tr.getStatus());
			logger.info("version 3 or 5:"+tr.getH002_VNO());
			logger.info("Txn Type:"+tr.getTxnType());
			/*if(req.getTxnType() == null) {
				dt.setTxnType("EZYWAY SALE");
			}else {
				dt.setTxnType(req.getTxnType()+" SALE");
			}*/
			
			if(tr.getH002_VNO().equals("03")){
                
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYLINK SALE");
                }
                
                if(tr.getTxnType().equals("EZYWAY")){
                
                    dt.setTxnType("EZYWAY SALE");
                }
                
            }
            
            if(tr.getH002_VNO().equals("05")){
            
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO SALE");
                }
                
                if(tr.getTxnType().equals("EZYAUTH")){
                    
                    dt.setTxnType("EZYAUTH SALE");
                }
                
            }
			
            if(tr.getH002_VNO().equals("05V")){
                
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO VCC SALE");
                }
                
            }
			
		}else if(tr.getStatus().equals("C")) {
			
			logger.info("status C:"+tr.getStatus());
			logger.info("version 3 or 5:"+tr.getH002_VNO());
			logger.info("Txn Type:"+tr.getTxnType());
			
			if(tr.getH002_VNO().equals("03")){
				
				if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYLINK VOID");
				}
				
				if(tr.getTxnType().equals("EZYWAY")){
                
                    dt.setTxnType("EZYWAY VOID");
				}
                
            }
			
			if(tr.getH002_VNO().equals("05")){
			
				if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO VOID");
				}
				
				if(tr.getTxnType().equals("EZYAUTH")){
                    
                    dt.setTxnType("EZYAUTH VOID");
                }
                
            }
			
			if(tr.getH002_VNO().equals("05V")){
                
                if(tr.getTxnType().equals("EZYMOTO")){
                
                    dt.setTxnType("EZYMOTO VCC VOID");
                }
                
            }
			
		}else {
			
			logger.info("No status :"+tr.getStatus());
			logger.info("version 3 or 5:"+tr.getH002_VNO());
			logger.info("Txn Type:"+tr.getTxnType());
			
			logger.info("Set default as EZYWAY");
			
			dt.setTxnType("EZYWAY");
			
		}
		
		
		
		dt.setMaskedPan(tr.getMaskedPan());
		dt.setCardHolderName(req.getF268_ChName());
		
		String cardNum = null;
		if (tr.getMaskedPan() == null
				|| tr.getMaskedPan().length() < 4) {
			cardNum = tr.getMaskedPan();
		} else {
			cardNum = tr.getMaskedPan().substring(
					tr.getMaskedPan().length() - 4);
		}
		String finalNum = String.format("XXXX %s", cardNum);
		dt.setCardNo(finalNum);		
		logger.info("finalNum"+finalNum);
		dt.setRrn(tr.getF023_RRN());		
		dt.setAid(tr.getF011_AuthIDResp());
		dt.setApprCode(tr.getF011_AuthIDResp());
		dt.setCardType(tr.getF350_CrdTyp());
		
		logger.info("ApprCod"+dt.getApprCode());
		
		}catch (Exception e) {
			System.out.println("Record not Found..!");
			request.setAttribute("errMsg",
					"Data not Available for this Transaction ID...!");
		}
		request.setAttribute("dto", dt);
		model.addAttribute("pageBean", pageBean);
		 //return "merchantweb/transaction/CardReceiptNew";
		//return "merchantweb/transaction/receipt";
		return "merchantweb/transaction/receipt_UM";
	}
	
	
	 @RequestMapping(value = { "/UMenquiryTransaction/{currPage}" }, method = RequestMethod.GET)
		public String UMTransactionEnquiry(
				final Model model,
				final java.security.Principal principal,
				@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) { 
			logger.info("Transaction Enquiry list");
			HttpSession session=request.getSession();
			String myName = (String) session.getAttribute("userName");
			
			logger.info("currently logged in as " + myName);
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umTransactionEnquiry", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			logger.info(" All Transaction Summary:" + principal.getName());
			model.addAttribute("pageBean", pageBean);
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);
			transactionService.listUMEzywayTransactionEnq(paginationBean, null, null,currentMerchant.getMid().getUmEzywayMid(), "ALL");
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null
					|| paginationBean.getItemList().size() == 0) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response
			} else {
				model.addAttribute("responseData", null);
			}
			
			logger.info(" enquiry");
			model.addAttribute("paginationBean", paginationBean);

			
			return TEMPLATE_MERCHANT;
	 }
	 
	 @RequestMapping(value = { "/searchUMEnquiry" }, method = RequestMethod.GET)
		public String SearchUMTransactionEnquiry(HttpServletRequest request,
				final Model model,
				@RequestParam final String date,
				@RequestParam final String date1,
				@RequestParam(required = false, defaultValue = "1") final int currPage) { 
			logger.info("Transaction Enquiry list");
			HttpSession session=request.getSession();
			String myName = (String) session.getAttribute("userName");
			
			logger.info("currently logged in as " + myName);
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umTransactionEnquiry", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			
			model.addAttribute("pageBean", pageBean);
			
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);
			
			
			transactionService.listUMEzywayTransactionEnq(paginationBean, date, date1,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			
			model.addAttribute("paginationBean", paginationBean);

			
			return TEMPLATE_MERCHANT;
	 }
	 
	 @RequestMapping(value = "/umEzywayEnqExport", method = RequestMethod.GET)
		public ModelAndView getExportUMEzywayEnq(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);
	
			transactionService.exportUMEzywayTransactionEnq(paginationBean, dat, dat1,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnUMEnqExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnUMEnqPdf", "umTxnList", list1);
			}
		 
	 }
	
	 @RequestMapping(value = "/umMotoExport", method = RequestMethod.GET)
		public ModelAndView getExportUMMoto(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		 logger.info("UM_EZYMOTO Export by Merchant");
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getUmMotoMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			
			//String txnStatus="A";
//			transactionService.exportUMEzywayTransaction(paginationBean, dat, dat1,txnStatus,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			transactionService.exportUMMotoTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnListMotoUMExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnListMotoUMPdf", "umTxnList", list1);
			}
		 
	 }
	 
	 @RequestMapping(value = "/umEzyrecExport", method = RequestMethod.GET)
		public ModelAndView getumEzyrecExport(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		 logger.info("umEzyrecExport  by Merchant");
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getUmEzyrecMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			
			
			transactionService.exportUMEzyrecTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmEzyrecMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnListMotoUMExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnListMotoUMPdf", "umTxnList", list1);
			}
		 
	 }
	 
	 @RequestMapping(value = "/umLinkExport", method = RequestMethod.GET)
		public ModelAndView umLinkExport(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		 logger.info("UM_EZYLINK Export by Merchant");
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getUmMotoMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			
			//String txnStatus="A";
//			transactionService.exportUMEzywayTransaction(paginationBean, dat, dat1,txnStatus,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			transactionService.exportUMLinkTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnListMotoUMExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnListMotoUMPdf", "umTxnList", list1);
			}
		 
	 }
	 
	 @RequestMapping(value = "/umVccExport", method = RequestMethod.GET)
		public ModelAndView umVccExport(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		 logger.info("UM_EZYMOTO VCC Export by Merchant");
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getUmMotoMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			
			//String txnStatus="A";
//			transactionService.exportUMEzywayTransaction(paginationBean, dat, dat1,txnStatus,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			transactionService.exportUMVccTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnListUMExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnListUMPdf", "umTxnList", list1);
			}
		 
	 }
	 
	 @RequestMapping(value = "/umEzyauthExport", method = RequestMethod.GET)
		public ModelAndView getExportUMEzyauth(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		    HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getUmMotoMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			transactionService.exportUMEzyauthTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table response

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnUMAuthExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnUMAuthPdf", "umTxnList", list1);
			}
		 
	 }
	
	 
	 @RequestMapping(value = "/umEzywayExport", method = RequestMethod.GET)
		public ModelAndView getExportUMEzyway(
				final Model model,
				@RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//				@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export,HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
		 
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());

			/*String dat = null;
			String dat1 = null;*/
			
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			
			//String txnStatus="A";
//			transactionService.exportUMEzywayTransaction(paginationBean, dat, dat1,txnStatus,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			transactionService.exportUMEzywayTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			logger.info("No of Records: "+paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty()
					|| paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response

			} else {
				model.addAttribute("responseData", null);
			}
			
			
			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnListUMExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnListUMPdf", "umTxnList", list1);
			}
		 
	 }
	
	@RequestMapping(value = { "/details/{id}" }, method = RequestMethod.GET)
	public String displayTransactionDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//Merchant merchant = merchantService.loadMerchant(principal.getName());
		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName"
				+ ":" + merchant.getBusinessName() + ":"
				+ "Merchant Receipt logged by" + ":" + principal.getName()
				+ ":");
		ForSettlement settle = transactionService.getForSettlement(id);
		if (settle.getTxnType() == null) {
			settle.setTxnType("CARD");
		}
		logger.info(" Txn Type : " + settle.getTxnType());
		if (settle.getTxnType().equals("CASH")) {

			/*PageBean pageBean = new PageBean("Transactions Details",
					"merchantweb/transaction/cashreceipt", null);*/

			
			  PageBean pageBean = new PageBean("Transactions Details",
			  "merchantweb/transaction/CashReceiptNew", null);
			 
			logger.info("Transaction Id :" + id);
			DataTransferObject dt = new DataTransferObject();

			String txn = settle.getStatus();
			if (txn.equals("CT")) {
				dt.setTxnType("CASH SALE");
			} else {
				dt.setTxnType("CASH CANCELLED");
			}
			try {
				dt.setMerchantName(merchant.getBusinessName());
				dt.setMerchantAddr1(merchant.getBusinessAddress1());
				dt.setMerchantAddr2(merchant.getBusinessAddress2());
				dt.setMerchantCity(merchant.getCity());
				dt.setMerchantPostCode(merchant.getPostcode());
				dt.setMerchantContNo(merchant.getBusinessContactNumber());
				dt.setMerchantState(merchant.getState());
				if ((settle.getLatitude() != null)) {
					dt.setLatitude(settle.getLatitude());
					logger.info("Latitude id:" + dt.getLatitude());
				}
				if ((settle.getLongitude() != null)) {
					dt.setLongitude(settle.getLongitude());
					logger.info("Longitude id:" + dt.getLatitude());
				}
				
				//dt.setMapUrl(UrlSigner.GenerateMapImage(dt.getLatitude(), dt.getLongitude()));
				//logger.info("Generated Map Image URL: "+dt.getMapUrl());
				// new changes for receipt
				if (settle.getInvoiceId() != null) {
					dt.setRefNo(settle.getInvoiceId());
					logger.info("invoice id:" + dt.getRefNo());
				} else {
					dt.setRefNo("");
				}
				if (settle.getTid() != null) {
					dt.setTid(settle.getTid());
				}
				dt.setMid(settle.getMid());
				dt.setAmount(settle.getAmount());
				dt.setAdditionAmount(settle.getAdditionAmount());
				String st = settle.getTime();
				String sd = settle.getTimeStamp();
				String pinEntry = settle.getPinEntry();
				dt.setPinEntry(pinEntry);
				try {

					/*String rd = new SimpleDateFormat("dd MMMM yyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm")
							.format(new SimpleDateFormat("HHmmss").parse(st));*/
					
					
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					dt.setDate(rd);
					dt.setTime(rt);
					//dt.setDate(rd.toUpperCase());
					
				} catch (ParseException e) {
					e.printStackTrace();
				}
				double amount = 0;
				logger.info("Amount For receipt :" + settle.getAmount());
				if (settle.getAmount() != null) {
					amount = Double.parseDouble(settle.getAmount()) / 100;
				}
				double tips = 0;
				double total = amount;
				if (settle.getAdditionAmount() != null) {
					tips = Double.parseDouble(settle.getAdditionAmount()) / 100;
					amount = amount - tips;
					total = amount + tips;

				}
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				String output1 = myFormatter.format(tips);
				String output2 = myFormatter.format(total);
				// System.out.println(" Amount :"+output);
				// forSettlement.setAmount(output);
				dt.setAdditionAmount(output1);
				dt.setAmount(output);
				dt.setTotal(output2);
				dt.setTraceNo(settle.getStan());
				if (settle.getInvoiceId() != null) {
					dt.setInvoiceNo(settle.getInvoiceId());
				} else {
					dt.setInvoiceNo("");
				}

			} catch (Exception e) {
				System.out.println("Record not Found..!");
				request.setAttribute("errMsg",
						"Data not Available for this Transaction ID...!");
			}
			
			request.setAttribute("dto", dt);
			model.addAttribute("pageBean", pageBean);
			//return "merchantweb/transaction/CashReceiptNew";

			//return "merchantweb/transaction/cashreceipt";
			return "merchantweb/transaction/CashReceipt_v0.2";
			

		} else {
			
			PageBean pageBean = new PageBean("Transactions Details",
					"merchantweb/transaction/receipt", null);
			//logger.info("Transaction Id3333333333 :" + id);
			TransactionRequest trRequest = transactionService
					.loadTransactionRequest(id);
			TransactionResponse trResponse = transactionService
					.loadTransactionResponse(id);

			Receipt a = transactionService.getReceiptSignature(id);

			DataTransferObject dt = new DataTransferObject();
			
			if (a != null) {
				if (a.getSignature() != null) {
					String signdata = new String(a.getSignature());
					
					dt.setSign(signdata);
				}
			}

			String txn = settle.getStatus();
		
			if (txn.equals("S") || txn.equals("A")) 
			{
				logger.info("txntype: " + settle.getTxnType());
				if (settle.getTxnType().equals("MOTO")) {
					dt.setTxnType("EZYMOTO SALE");
				} else if (settle.getTxnType().equals("EZYWAY")) {
					dt.setTxnType("EZYWAY SALE");
				} else if (settle.getTxnType().equals("EZYREC") || settle.getTxnType().equals("RECURRING")) {
					dt.setTxnType("EZYREC SALE");
				} else if (settle.getTxnType().equals("EZYPASS")) {
					dt.setTxnType("EZYPASS SALE");
				} else {
					//dt.setTxnType("UMOBILE SALE");
					dt.setTxnType("SALE");
				}

			} else {

				if (settle.getTxnType().equals("MOTO")) {
					dt.setTxnType("EZYMOTO VOID");
				} else if (settle.getTxnType().equals("EZYWAY")) {
					dt.setTxnType("EZYWAY VOID");
				} else if (settle.getTxnType().equals("EZYREC") || settle.getTxnType().equals("RECURRING")) {
					dt.setTxnType("EZYREC VOID");
				} else if (settle.getTxnType().equals("EZYPASS")) {
					dt.setTxnType("EZYPASS VOID");
				} else {
					//dt.setTxnType("UMOBILE VOID");
					dt.setTxnType("VOID");
				}

			}
			try {
				dt.setMerchantName(merchant.getBusinessName());
				dt.setMerchantAddr1(merchant.getBusinessAddress1());
				dt.setMerchantAddr2(merchant.getBusinessAddress2());
				dt.setMerchantCity(merchant.getCity());
				dt.setMerchantPostCode(merchant.getPostcode());
				dt.setMerchantContNo(merchant.getBusinessContactNumber());
				dt.setMerchantState(merchant.getState());

				if ((trRequest.getLatitude() != null)) {
					dt.setLatitude(trRequest.getLatitude());
					logger.info("Latitude id:" + dt.getLatitude());

				}
				if ((trRequest.getLongitude() != null)) {
					dt.setLongitude(trRequest.getLongitude());
					logger.info("Longitude id:" + dt.getLatitude());

				}
				
				//dt.setMapUrl(UrlSigner.GenerateMapImage(dt.getLatitude(), dt.getLongitude()));
				//logger.info("Generated Map Image URL: "+dt.getMapUrl());
				// new changes for receipt
				dt.setBatchNo(settle.getBatchNo());
				logger.info("get batchno:" + dt.getBatchNo());

				if (settle.getInvoiceId() != null) {

					dt.setRefNo(settle.getInvoiceId());
					logger.info("invoice id:" + dt.getRefNo());
				} else {
					dt.setRefNo("");
				}
				if (trRequest.getTid() != null) {
					dt.setTid(trRequest.getTid());
				}
				dt.setMid(trRequest.getMid());
				dt.setAmount(trRequest.getAmount());
				dt.setAdditionAmount(trRequest.getAdditionalAmount());
				// String rrn=HexatoAscii.hexaToAscii(trResponse.getRrn(),
				// true);
				// dt.setRrn(rrn);
				dt.setAid(trRequest.getAid());
				dt.setStan(trRequest.getStan());
				dt.setMaskedPan(trRequest.getMaskedPan());
				if (trRequest.getAid() != null
						&& trRequest.getCardHolderName() != null) {
					// dt.setCardType(CardType.getCardType(trRequest.getAid()));
					dt.setCardHolderName(trRequest.getCardHolderName());
				}
				/*dt.setDate(trResponse.getLocalDate());
				dt.setTime(trResponse.getLocalTime());*/
				// String
				// resposecode=HexatoAscii.hexaToAscii(trResponse.getAidResponse(),
				// true);
				// dt.setResponseCode(resposecode);
				String st = trResponse.getLocalTime();
				// String sd=trResponse.getLocalDate()+new
				// SimpleDateFormat("y").format(new java.util.Date());
				String sd = trResponse.getTimeStamp();
				try {

					/*String rd = new SimpleDateFormat("dd MMMM yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm")
							.format(new SimpleDateFormat("HHmmss").parse(st));*/
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					//dt.setDate(rd.toUpperCase());
					dt.setDate(rd);
					dt.setTime(rt);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				String cardNum = null;
				if (trRequest.getMaskedPan() == null
						|| trRequest.getMaskedPan().length() < 4) {
					cardNum = trRequest.getMaskedPan();
				} else {
					cardNum = trRequest.getMaskedPan().substring(
							trRequest.getMaskedPan().length() - 4);
				}
				String finalNum = String.format("XXXX %s", cardNum);
				dt.setCardNo(finalNum);
				double amount = 0;
				logger.info("Amount For receipt :" + trRequest.getAmount());
				if (trRequest.getAmount() != null) {
					amount = Double.parseDouble(trRequest.getAmount()) / 100;
				}
				double tips = 0;
				double total = amount;
				if (trRequest.getAdditionalAmount() != null) {
					tips = Double.parseDouble(trRequest.getAdditionalAmount()) / 100;
					amount = amount - tips;
					total = amount + tips;

				}
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				String output1 = myFormatter.format(tips);
				String output2 = myFormatter.format(total);
				// System.out.println(" Amount :"+output);
				// forSettlement.setAmount(output);
				dt.setAdditionAmount(output1);
				dt.setAmount(output);
				dt.setTotal(output2);
				dt.setCardHolderName(trRequest.getCardHolderName());
				
				dt.setAid(trRequest.getAid());
				/*if (trRequest.getAid() != null) {
					dt.setCardType(CardType.getCardType(trRequest.getAid()));
				} else {
					dt.setCardType("");
				}*/
				
				if(trRequest.getCardScheme() != null && trRequest.getCardType() != null){
	                dt.setCardType(trRequest.getCardScheme()+" "+trRequest.getCardType());
	                logger.info("Card Type from Txn Request Card Scheme and Card Type : "+dt.getCardType());
	            }else if(trRequest.getApplicationLabel() != null){
	               
	                dt.setCardType(trRequest.getApplicationLabel());
	                logger.info("Card Type from Txn Request : "+dt.getCardType());
	            }else if(trRequest.getApplicationLabel() == null && trRequest.getAid() != null){
	                dt.setCardType(CardType.getCardType(trRequest.getAid()));
	                logger.info("Card Type from AID : "+dt.getCardType());
	            }else{
	                dt.setCardType(" ");
	            }
				
				dt.setBatchNo(trRequest.getBatchNo());
				dt.setTraceNo(trRequest.getStan());
				dt.setRrn(hexaToAscii(trResponse.getRrn(), true));
				dt.setTC(trRequest.getStan() + trRequest.getTid());
				dt.setAid(trResponse.getAidResponse());
				if (settle.getBatchNo() != null) {
					dt.setBatchNo(settle.getBatchNo());
				} else {
					dt.setBatchNo("");
				}
				if (settle.getInvoiceId() != null) {
					dt.setInvoiceNo(settle.getInvoiceId());
				} else {
					dt.setInvoiceNo("");
				}

				String resposecode = hexaToAscii(trResponse.getAidResponse(),
						true);

				dt.setApprCode(resposecode);
			} catch (Exception e) {
				System.out.println("Record not Found..!");
				request.setAttribute("errMsg",
						"Data not Available for this Transaction ID...!");
			}
			/*
			 * Merchant merchant = merchantService.loadMerchantByPk(id);
			 * Transaction transaction =
			 * transactionService.loadTransactionByPk(id); MobileUser mobileUser
			 * = mobileUserService.loadMobileUserByPk(id);
			 * model.addAttribute("transaction", transaction);
			 * model.addAttribute("mobileUser", mobileUser);
			 * model.addAttribute("merchant", merchant);
			 */
			// model.addAttribute("dto", dt);
			request.setAttribute("dto", dt);
			model.addAttribute("pageBean", pageBean);
			 //return "merchantweb/transaction/CardReceiptNew";
			//return "merchantweb/transaction/receipt";
			return "merchantweb/transaction/receiptUM_0.1";
		}
		// return "redirect:/transactionweb/list/1";
	}


	public static String hexaToAscii(String s, boolean toString) {

		String retString = "";
		String tempString = "";
		int offset = 0;
		if (toString) {
			for (int i = 0; i < s.length() / 2; i++) {

				tempString = s.substring(offset, offset + 2);
				retString += tempString.equalsIgnoreCase("1c") ? "[1C]"
						: decodeHexString(tempString);
				offset += 2;
			} // end for
		} else {

			for (int i = 0; i < s.length(); i++) {

				tempString = s.substring(offset, offset + 1);
				retString += encodeHexString(tempString);
				offset += 1;
			} // end for
		}
		return retString;
	} // end hexaToAscii

	public static String decodeHexString(String hexText) {

		String decodedText = null;
		String chunk = null;

		if (hexText != null && hexText.length() > 0) {
			int numBytes = hexText.length() / 2;

			byte[] rawToByte = new byte[numBytes];
			int offset = 0;
			for (int i = 0; i < numBytes; i++) {
				chunk = hexText.substring(offset, offset + 2);
				offset += 2;
				rawToByte[i] = (byte) (Integer.parseInt(chunk, 16) & 0x000000FF);
			}
			// System.out.println(rawToByte.toString());
			decodedText = new String(rawToByte);
		}
		return decodedText;
	}

	public static String encodeHexString(String sourceText) {
		byte[] rawData = sourceText.getBytes();
		StringBuffer hexText = new StringBuffer();
		String initialHex = null;
		int initHexLength = 0;

		for (int i = 0; i < rawData.length; i++) {
			// System.out.println("raw "+rawData[i]);
			int positiveValue = rawData[i] & 0x000000FF;
			initialHex = Integer.toHexString(positiveValue);
			initHexLength = initialHex.length();
			while (initHexLength++ < 2) {
				hexText.append("0");
			}
			hexText.append(initialHex);
		}
		return hexText.toString().toUpperCase();
	}

	@RequestMapping(value = "/boostExport", method = RequestMethod.POST)
	public ModelAndView getExportBoost(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);

		String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			System.out.println("dat1:" + dat1);
		}
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		/*transactionService.searchForSettlementBoost(dat, dat1, tid, status,
				paginationBean, currentMerchant);*/
		/*transactionService.searchBoostForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);*/
		transactionService.searchForSettlementBoost(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		
		  /*for (ForSettlement forSettlement : paginationBean.getItemList()) { 
		 
			  logger.info("tid details:" + forSettlement.getTid().toString());
		  TerminalDetails terminalDetails = transactionService.getTerminalDetailsByTid(forSettlement.getTid().toString()); 
		  if(terminalDetails != null) { //
			  logger.info("terminal details contact Name:" + //
					  terminalDetails.getContactName()); 
			  if(terminalDetails.getContactName() != null) {
				  forSettlement.setMerchantName(terminalDetails
						  .getContactName().toUpperCase()); } else {
							  forSettlement.setMerchantName(""); } }
		  
		  	logger.info("test data "+ paginationBean.getItemList());*/
		
		
		/*for (ForSettlement forSettlement : paginationBean.getItemList()) {

			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100; //
				forSettlement.setAmount(amount + "0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);

				String output = myFormatter.format(amount); //
				System.out.println(" Amount :" + output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("S")) {
				forSettlement.setStatus("SETTLED");

			}
			if (forSettlement.getStatus().equals("P")) {
				forSettlement.setStatus("PENDING");
			}
			if (forSettlement.getStatus().equals("A")) {
				forSettlement.setStatus("NOT SETTLED");
			}
			if (forSettlement.getStatus().equals("C")) {
				forSettlement.setStatus("CANCELLED");
			}
			if (forSettlement.getStatus().equals("R")) {
				forSettlement.setStatus("REVERSAL");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {
					
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}
*/
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/motoExport", method = RequestMethod.POST)
	public ModelAndView getExportMoto(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());

		String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 */
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 */
			System.out.println("dat1:" + dat1);
		}
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchUMForSettlementMoto(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	
	@RequestMapping(value = "/ezywayExport", method = RequestMethod.POST)
	public ModelAndView getExportEzyway(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());

		String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 */
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 */
			System.out.println("dat1:" + dat1);
		}
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyWay(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzywayMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	@RequestMapping(value = "/ezypassExport", method = RequestMethod.POST)
	public ModelAndView getExportEzypass(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getEzypassMid());

		String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 */
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 */
			System.out.println("dat1:" + dat1);
		}
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyPass(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzypassMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/ezyrecExport", method = RequestMethod.POST)
	public ModelAndView getExportEzyrec(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());

		String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 */
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			/*
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 */
			System.out.println("dat1:" + dat1);
		}
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyRec(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	
	@RequestMapping(value = "/exportCardTrans", method = RequestMethod.POST)
	public ModelAndView getExportCardTrans(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);

		/*String dat = fromDate;
		String dat1 = toDate;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchCardUMForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
			// logger.info("tid details:" + forSettlement.getTid().toString());
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {
				// logger.info("terminal details contact Name:" +
				// terminalDetails.getContactName());
				if (terminalDetails.getContactName() != null) {
					forSettlement.setMerchantName(terminalDetails
							.getContactName().toUpperCase());
				} else {
					forSettlement.setMerchantName("");
				}
			}
			
			 * logger.info("test data "+ paginationBean.getItemList());
			 * for(ForSettlement forSettlement:paginationBean.getItemList()){
			 
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("S")) {
				forSettlement.setStatus("SETTLED");

			}
			if (forSettlement.getStatus().equals("P")) {
				forSettlement.setStatus("PENDING");
			}
			if (forSettlement.getStatus().equals("A")) {
				forSettlement.setStatus("NOT SETTLED");
			}
			if (forSettlement.getStatus().equals("C")) {
				forSettlement.setStatus("CANCELLED");
			}
			if (forSettlement.getStatus().equals("R")) {
				forSettlement.setStatus("REVERSAL");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {
					// String sd=forSettlement.getDate()+new
					// SimpleDateFormat("y").format(new java.util.Date());
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}*/

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/exportCashTrans", method = RequestMethod.POST)
	public ModelAndView getExportCashTrans(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,

			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);

		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);
		String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			System.out.println("dat1:" + dat1);
		}
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		transactionService.searchForSettlementcash(dat, dat1, paginationBean,
				currentMerchant);

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		for (ForSettlement forSettlement : paginationBean.getItemList()) {
			// logger.info("tid details:" + forSettlement.getTid().toString());
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {
				// logger.info("terminal details contact Name:" +
				// terminalDetails.getContactName());
				if (terminalDetails.getContactName() != null) {
					forSettlement.setMerchantName(terminalDetails
							.getContactName().toUpperCase());
				} else {
					forSettlement.setMerchantName("");
				}
			}
			/*
			 * logger.info("test data "+ paginationBean.getItemList());
			 * for(ForSettlement forSettlement:paginationBean.getItemList()){
			 */
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("CT")) {
				forSettlement.setStatus("CASH SALE");

			}
			if (forSettlement.getStatus().equals("CV")) {
				forSettlement.setStatus("CASH CANCELLED");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {
					// String sd=forSettlement.getDate()+new
					// SimpleDateFormat("y").format(new java.util.Date());
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		/*
		 * if (!(export.equals("PDF"))) { return new
		 * ModelAndView("txnListExcelcash", "txnList", list1); } else { return
		 * new ModelAndView("txnListPdfcash", "txnList", list1); }
		 */

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/export", method = RequestMethod.POST)
	public ModelAndView getExport(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+":"+status);
		// PageBean pageBean=new PageBean("Transactions Details",
		// "transaction/receipt", null);
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);
		/*
		 * PageBean pageBean = new PageBean("transactions list",
		 * "merchantweb/transaction/transactionList", Module.TRANSACTION_WEB,
		 * "merchantweb/transaction/sideMenuTransaction");
		 * model.addAttribute("pageBean", pageBean);
		 */
		/*
		 * if(!(fromDate.equals(null)||toDate.equals(null)||fromDate.equals("")||
		 * toDate.equals(""))){
		 */

		// new changes//
		// logger.info("test Data:");
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		/*
		 * model.addAttribute("fromDate", fromDate);
		 * 
		 * model.addAttribute("toDate", toDate);
		 * 
		 * model.addAttribute("tid", tid);
		 * 
		 * model.addAttribute("status", status);
		 */
		/* logger.info("test transaction :::" + devId); */
		// model.addAttribute("devId", devId);
		// logger.info("test transaction :::"+ paginationBean.getItemList() ==
		// null);
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("CT")) {
		 * forSettlement.setStatus("CASH SALE");
		 * 
		 * } if (forSettlement.getStatus().equals("CV")) {
		 * forSettlement.setStatus("CASH CANCELLED"); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		/*
		 * String myName = principal.getName();
		 * logger.info("currently logged in as " + myName); Merchant
		 * currentMerchant = merchantService.loadMerchant(myName);
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		/*
		 * model.addAttribute("devIdList", dIdSet);
		 * 
		 * model.addAttribute("tidList", tidSet);
		 * model.addAttribute("paginationBean", paginationBean);
		 * 
		 * return TEMPLATE_MERCHANT;
		 */

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	
	@RequestMapping(value = { "/umMotoList" }, method = RequestMethod.GET)
	public String umMotoList(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		logger.info("list umMotoList transaction");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMMotoList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		logger.info(" UM-MOTO Transaction Summary:" + principal.getName());
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		transactionService.listUMMotoTransaction(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/umEzyrecList" }, method = RequestMethod.GET)
	public String umEzyrecList(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		logger.info("list umEzyrecList transaction");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("currentMerchant " + currentMerchant.getBusinessName());
		logger.info("currentMerchant mid " + currentMerchant.getMid().getUmEzyrecMid());
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMEzyrecList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		logger.info(" UM-MOTO Transaction Summary:" + principal.getName());
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		transactionService.listUMEzyrecTransaction(paginationBean, null, null,currentMerchant.getMid().getUmEzyrecMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/umLinkList" }, method = RequestMethod.GET)
	public String umLinkList(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		logger.info("list umLinkList transaction");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMLinkList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		logger.info(" UM-Link Transaction Summary:" + principal.getName());
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		transactionService.listUMLinkTransaction(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/umVccList" }, method = RequestMethod.GET)
	public String umVccList(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		logger.info("list umVccList transaction");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMVccList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		logger.info(" UM-VCC Transaction Summary:" + principal.getName());
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		transactionService.listUMVccTransaction(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;
	}
	
	//UM-EZYAUTH Merchant Transaction Summary
			@RequestMapping(value = { "/umEzyauthList/{currPage}" }, method = RequestMethod.GET)
			public String umEzyauthList(final Model model,
			@PathVariable final int currPage, final java.security.Principal principal,HttpServletRequest request) {
				logger.info(" UM-EZYAUTH Transaction Summary Merchant");
				
				HttpSession session=request.getSession();
				String myName = (String) session.getAttribute("userName");
				//String myName = principal.getName();
				logger.info("currently logged in as " + myName);
				Merchant currentMerchant = merchantService.loadMerchant(myName);
				
				
				PageBean pageBean = new PageBean("transactions list",
						"merchantweb/transaction/transactionUMEzyauthList", Module.TRANSACTION_WEB,
						"merchantweb/transaction/sideMenuTransaction");
				model.addAttribute("pageBean", pageBean);
				logger.info(" UM-EZYAUTH Transaction Summary:" + principal.getName());
				PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
				paginationBean.setCurrPage(currPage);
				transactionService.listUMEzyauthMerchantTransaction(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
				if (paginationBean.getItemList().isEmpty()
						|| paginationBean.getItemList() == null
						|| paginationBean.getItemList().size() == 0) {
					model.addAttribute("responseData", "No Records found"); // table
																			// response
				} else {
					model.addAttribute("responseData", null);
				}
				model.addAttribute("paginationBean", paginationBean);

				return TEMPLATE_MERCHANT;
			}
	
	
	
	@RequestMapping(value = { "/umEzywayList" }, method = RequestMethod.GET)
	public String umEzywayList(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		logger.info("list umEzywayList transaction");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMEzywayList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		logger.info(" UM-EZWAY Transaction Summary:" + principal.getName());
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		transactionService.listUMEzywayTransaction(paginationBean, null, null,currentMerchant.getMid().getUmEzywayMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/searchUMMoto" }, method = RequestMethod.GET)
	public String umMotoList1(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		logger.info("search  UM-Moto Transaction ");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMMotoList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);

		/*transactionService.listAllTransaction(paginationBean, date, date1,
				txnType);*/
		transactionService.listUMMotoTransaction(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(),"ALL");
		//logger.info("check from date:" + date);
		//logger.info("check to date:" + date1);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	@RequestMapping(value = { "/searchUMEzyrec" }, method = RequestMethod.GET)
	public String searchUMEzyrec(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		logger.info("searchUMEzyrec Transaction ");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMEzyrecList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);

		transactionService.listUMEzyrecTransaction(paginationBean, date, date1,currentMerchant.getMid().getUmEzyrecMid(),"ALL");
		//logger.info("check from date:" + date);
		//logger.info("check to date:" + date1);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	@RequestMapping(value = { "/searchUMLink" }, method = RequestMethod.GET)
	public String searchUMLink(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		logger.info("search  UM-link Transaction ");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMLinkList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);

		/*transactionService.listAllTransaction(paginationBean, date, date1,
				txnType);*/
		transactionService.listUMLinkTransaction(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(),"ALL");
		
		//logger.info("check from date:" + date);
		//logger.info("check to date:" + date1);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	@RequestMapping(value = { "/searchUMVcc" }, method = RequestMethod.GET)
	public String searchUMVcc(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		logger.info("search  UM-Moto VCC Transaction ");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionUMVccList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);

		/*transactionService.listAllTransaction(paginationBean, date, date1,
				txnType);*/
		transactionService.listUMVccTransaction(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(),"ALL");
		//logger.info("check from date:" + date);
		//logger.info("check to date:" + date1);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	
	//UM-Ezyauth Merchant search
			@RequestMapping(value = { "/searchUMEzyauth" }, method = RequestMethod.GET)
			public String umEzyauthList1(HttpServletRequest request,
					final Model model,
					@RequestParam final String date,
					@RequestParam final String date1,
					@RequestParam(required = false, defaultValue = "1") final int currPage) {
				logger.info("search  UM-EZYAUTH Transaction ");
				
				HttpSession session=request.getSession();
				String myName = (String) session.getAttribute("userName");
				//String myName = principal.getName();
				logger.info("currently logged in as " + myName);
				Merchant currentMerchant = merchantService.loadMerchant(myName);
				
				PageBean pageBean = new PageBean("transactions list",
						"merchantweb/transaction/transactionUMEzyauthList", Module.TRANSACTION_WEB,
						"merchantweb/transaction/sideMenuTransaction");
				model.addAttribute("pageBean", pageBean);

				PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
				paginationBean.setCurrPage(currPage);

				/*transactionService.listAllTransaction(paginationBean, date, date1,
						txnType);*/
				transactionService.listUMEzyauthMerchantTransaction(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(), "ALL");
				//logger.info("check from date:" + date);
				//logger.info("check to date:" + date1);
				model.addAttribute("paginationBean", paginationBean);

				return TEMPLATE_MERCHANT;

			}
	
	
	//UM-Ezyway search
		@RequestMapping(value = { "/searchUMEzyway" }, method = RequestMethod.GET)
		public String umEzywayList1(HttpServletRequest request,
				final Model model,
				@RequestParam final String date,
				@RequestParam final String date1,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {
			logger.info("search  UM-EZWAY Transaction ");
			HttpSession session=request.getSession();
			String myName = (String) session.getAttribute("userName");
			//String myName = principal.getName();
			logger.info("currently logged in as " + myName);
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/transactionUMEzywayList",Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);

			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			/*transactionService.listAllTransaction(paginationBean, date, date1,
					txnType);*/
			transactionService.listUMEzywayTransaction(paginationBean, date, date1,currentMerchant.getMid().getUmEzywayMid(),"ALL");
			//logger.info("check from date:" + date);
			//logger.info("check to date:" + date1);
			model.addAttribute("paginationBean", paginationBean);

			return TEMPLATE_MERCHANT;

		}
		
		//UM-EYWAY Void
		@RequestMapping(value = { "/cancelPayment1/{id}" }, method = RequestMethod.GET)
		public String cancelPaymentUMEzywayDetails(final Model model,
				@PathVariable final String id, HttpServletRequest request,
				HttpServletResponse response, Principal principal) {

			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");

			/*UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

			UMEzyway txnDet = new UMEzyway();
			txnDet.setF354_TID(tr.getF354_TID());
			txnDet.setF001_MID(tr.getF001_MID());
			txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
			String rd = null;
			if (tr.getTimeStamp() != null) {

				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
			String rt = null;
			if (tr.getTimeStamp() != null) {
				try {
					rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getTimeStamp()));

				} catch (ParseException e) {
				}
			}
			txnDet.setTime_Stamp(rd + " " + rt);
			double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			txnDet.setF007_TXNAMT(output);
			
			txnDet.setF263_MRN(tr.getF263_MRN());
			txnDet.setF268_CHNAME(tr.getF268_ChName());

			if (tr.getMaskedPan() != null) {
				String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
				
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					txnDet.setPAN(pan);
				} else {
					txnDet.setPAN(pan);
				}

			} else {
				txnDet.setPAN("NA");
			}

//			txnDet.setMerchantId(merchant.getId());
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", txnDet);*/
			
			UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

//			UMEzyway txnDet = new UMEzyway();
//			txnDet.setF354_TID(tr.getF354_TID());
//			txnDet.setF001_MID(tr.getF001_MID());
//			txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
			String rd = null;
			if (tr.getH003_TDT() != null) {

				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(tr.getH003_TDT()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
			String rt = null;
			if (tr.getH004_TTM() != null) {
				try {
					rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getH004_TTM()));

				} catch (ParseException e) {
				}
			}
			tr.setH003_TDT(rd);
			tr.setH004_TTM(rt);
			double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			tr.setF007_TxnAmt(output);
			
//			txnDet.setF263_MRN(tr.getF263_MRN());
//			txnDet.setF268_CHNAME(tr.getF268_ChName());

			if (tr.getMaskedPan() != null) {
				String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
				
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					tr.setMaskedPan(pan);
				} else {
					tr.setMaskedPan(pan);
				}

			} else {
				tr.setMaskedPan("NA");
			}

//			txnDet.setMerchantId(merchant.getId());
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", tr);

			return TEMPLATE_MERCHANT;
		}
		
		//UMMOto void
		@RequestMapping(value = { "/cancelMotoPayment1/{id}" }, method = RequestMethod.GET)
		public String cancelPaymentUMMotoDetails(final Model model,
				@PathVariable final String id, HttpServletRequest request,
				HttpServletResponse response, Principal principal) {

			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umMotoCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");

			/*UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

			UMEzyway txnDet = new UMEzyway();
			txnDet.setF354_TID(tr.getF354_TID());
			txnDet.setF001_MID(tr.getF001_MID());
			txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
			String rd = null;
			if (tr.getTimeStamp() != null) {

				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
			String rt = null;
			if (tr.getTimeStamp() != null) {
				try {
					rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getTimeStamp()));

				} catch (ParseException e) {
				}
			}
			txnDet.setTime_Stamp(rd + " " + rt);
			double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			txnDet.setF007_TXNAMT(output);
			
			txnDet.setF263_MRN(tr.getF263_MRN());
			txnDet.setF268_CHNAME(tr.getF268_ChName());

			if (tr.getMaskedPan() != null) {
				String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
				
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					txnDet.setPAN(pan);
				} else {
					txnDet.setPAN(pan);
				}

			} else {
				txnDet.setPAN("NA");
			}

//			txnDet.setMerchantId(merchant.getId());
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", txnDet);*/
			
			UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

//			UMEzyway txnDet = new UMEzyway();
//			txnDet.setF354_TID(tr.getF354_TID());
//			txnDet.setF001_MID(tr.getF001_MID());
//			txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
			String rd = null;
			if (tr.getH003_TDT() != null) {

				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(tr.getH003_TDT()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
			String rt = null;
			if (tr.getH004_TTM() != null) {
				try {
					rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getH004_TTM()));

				} catch (ParseException e) {
				}
			}
			tr.setH003_TDT(rd);
			tr.setH004_TTM(rt);
			double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			tr.setF007_TxnAmt(output);
			
//			txnDet.setF263_MRN(tr.getF263_MRN());
//			txnDet.setF268_CHNAME(tr.getF268_ChName());

			if (tr.getMaskedPan() != null) {
				String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
				
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					tr.setMaskedPan(pan);
				} else {
					tr.setMaskedPan(pan);
				}

			} else {
				tr.setMaskedPan("NA");
			}

//			txnDet.setMerchantId(merchant.getId());
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", tr);

			return TEMPLATE_MERCHANT;
		}
		
		
		//UMMOto void
				@RequestMapping(value = { "/cancelUmEzyrecPayment1/{id}" }, method = RequestMethod.GET)
				public String cancelPaymentUMEzyrecDetails(final Model model,
						@PathVariable final String id, HttpServletRequest request,
						HttpServletResponse response, Principal principal) {

					PageBean pageBean = new PageBean("transactions list",
							"merchantweb/transaction/voidpayment/umMotoCancelPayment", Module.TRANSACTION_WEB,
							"merchantweb/transaction/sideMenuTransaction");

	
					
					UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

//					UMEzyway txnDet = new UMEzyway();
//					txnDet.setF354_TID(tr.getF354_TID());
//					txnDet.setF001_MID(tr.getF001_MID());
//					txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
					String rd = null;
					if (tr.getH003_TDT() != null) {

						try {
							rd = new SimpleDateFormat("dd-MMM-yyyy")
									.format(new SimpleDateFormat("yyyyMMdd").parse(tr.getH003_TDT()));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
					String rt = null;
					if (tr.getH004_TTM() != null) {
						try {
							rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getH004_TTM()));

						} catch (ParseException e) {
						}
					}
					tr.setH003_TDT(rd);
					tr.setH004_TTM(rt);
					double amount = 0;
					amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					tr.setF007_TxnAmt(output);
					
//					txnDet.setF263_MRN(tr.getF263_MRN());
//					txnDet.setF268_CHNAME(tr.getF268_ChName());

					if (tr.getMaskedPan() != null) {
						String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
						
						if (pan.contains("f")) {
							pan = pan.replaceAll("f", "X");
							tr.setMaskedPan(pan);
						} else {
							tr.setMaskedPan(pan);
						}

					} else {
						tr.setMaskedPan("NA");
					}

//					txnDet.setMerchantId(merchant.getId());
					model.addAttribute("pageBean", pageBean);
					model.addAttribute("txnDet", tr);

					return TEMPLATE_MERCHANT;
				}
		
		@RequestMapping(value = { "/cancelPaymentByAdmin1" }, method = RequestMethod.POST)
		public String motoSubmitTransaction(final Model model,
				@ModelAttribute("txnDet") UMEcomTxnRequest TxnDet, HttpServletRequest request,
				HttpServletResponse response,
				final java.security.Principal principal) {
			logger.info("cancelPaymentByAdmin");
			
			ResponseDetails data=MotoPaymentCommunication.UmCancelPayment(TxnDet);
			
			double amount = 0;
			amount = Double.parseDouble(data.getVoidResp().getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			String rd = "";
			String rt = "";
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(data.getVoidResp().getH003_TDT()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(data.getVoidResp().getH004_TTM()));

			} catch (ParseException e) {
				e.printStackTrace();
			}
			
			if(data!=null) {
			if(data.getResponseCode().equals("0001")) {
				PageBean pageBean = new PageBean("transactions list",
						"merchantweb/transaction/voidpayment/umCancelPayment", Module.TRANSACTION_WEB,
						"merchantweb/transaction/sideMenuTransaction");
				model.addAttribute("pageBean", pageBean);
				model.addAttribute("txnDet", TxnDet);
				model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
			}else {
				PageBean pageBean = new PageBean("transactions list",
						"merchantweb/transaction/voidpayment/umVoidPaymentDone", Module.TRANSACTION_WEB,
						"merchantweb/transaction/sideMenuTransaction");
				model.addAttribute("pageBean", pageBean);
				model.addAttribute("amount", output);
				model.addAttribute("TDT", " "+rd +" "+rt);
				model.addAttribute("CHNumber",data.getVoidResp().getF004_PAN());
				model.addAttribute("responseData", data.getResponseDescription());
			}
			}else {
				PageBean pageBean = new PageBean("transactions list",
						"merchantweb/transaction/voidpayment/umCancelPayment", Module.TRANSACTION_WEB,
						"merchantweb/transaction/sideMenuTransaction");
				model.addAttribute("pageBean", pageBean);
				model.addAttribute("txnDet", TxnDet);
				model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
			}
			
			return TEMPLATE_MERCHANT;	  
		}
		
		
		@RequestMapping(value = { "/cancelEzylinkPayment1/{id}" }, method = RequestMethod.GET)
		public String cancelPaymentEzylinkDetails(final Model model,
				@PathVariable final String id, HttpServletRequest request,
				HttpServletResponse response, Principal principal) {

			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzylinkCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");

			/*UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

			UMEzyway txnDet = new UMEzyway();
			txnDet.setF354_TID(tr.getF354_TID());
			txnDet.setF001_MID(tr.getF001_MID());
			txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
			String rd = null;
			if (tr.getTimeStamp() != null) {

				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(tr.getTimeStamp()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
			String rt = null;
			if (tr.getTimeStamp() != null) {
				try {
					rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getTimeStamp()));

				} catch (ParseException e) {
				}
			}
			txnDet.setTime_Stamp(rd + " " + rt);
			double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			txnDet.setF007_TXNAMT(output);
			
			txnDet.setF263_MRN(tr.getF263_MRN());
			txnDet.setF268_CHNAME(tr.getF268_ChName());

			if (tr.getMaskedPan() != null) {
				String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
				
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					txnDet.setPAN(pan);
				} else {
					txnDet.setPAN(pan);
				}

			} else {
				txnDet.setPAN("NA");
			}

//			txnDet.setMerchantId(merchant.getId());
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", txnDet);*/
			
			UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

//			UMEzyway txnDet = new UMEzyway();
//			txnDet.setF354_TID(tr.getF354_TID());
//			txnDet.setF001_MID(tr.getF001_MID());
//			txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
			String rd = null;
			if (tr.getH003_TDT() != null) {

				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(tr.getH003_TDT()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
			String rt = null;
			if (tr.getH004_TTM() != null) {
				try {
					rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getH004_TTM()));

				} catch (ParseException e) {
				}
			}
			tr.setH003_TDT(rd);
			tr.setH004_TTM(rt);
			double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			tr.setF007_TxnAmt(output);
			
//			txnDet.setF263_MRN(tr.getF263_MRN());
//			txnDet.setF268_CHNAME(tr.getF268_ChName());

			if (tr.getMaskedPan() != null) {
				String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
				
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					tr.setMaskedPan(pan);
				} else {
					tr.setMaskedPan(pan);
				}

			} else {
				tr.setMaskedPan("NA");
			}

//			txnDet.setMerchantId(merchant.getId());
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", tr);

			return TEMPLATE_MERCHANT;
		}


	@RequestMapping(value = { "/cancelMotoPaymentByAdmin1" }, method = RequestMethod.POST)
	public String motoVoidSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") UMEcomTxnRequest TxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		logger.info("cancelPaymentByAdmin");
		
		ResponseDetails data=MotoPaymentCommunication.UmCancelPayment(TxnDet);
		
		double amount = 0;
		amount = Double.parseDouble(data.getVoidResp().getF007_TxnAmt()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		String rd = "";
		String rt = "";
		try {
			rd = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(data.getVoidResp().getH003_TDT()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		try {
			rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(data.getVoidResp().getH004_TTM()));
	
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umMotoCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umMotoVoidPaymentDone", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("amount", output);
			model.addAttribute("TDT", " "+rd +" "+rt);
			model.addAttribute("CHNumber",data.getVoidResp().getF004_PAN());
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umMotoCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	
	@RequestMapping(value = { "/cancelEzyrecPaymentByAdmin1" }, method = RequestMethod.POST)
	public String ezyrecVoidSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") UMEcomTxnRequest TxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		logger.info("cancelPaymentByAdmin");
		
		ResponseDetails data=MotoPaymentCommunication.UmEzyrecCancelPayment(TxnDet);
		
		double amount = 0;
		amount = Double.parseDouble(data.getVoidResp().getF007_TxnAmt()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		String rd = "";
		String rt = "";
		try {
			rd = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(data.getVoidResp().getH003_TDT()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		try {
			rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(data.getVoidResp().getH004_TTM()));
	
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzyrecCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzyrecVoidPaymentDone", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("amount", output);
			model.addAttribute("TDT", " "+rd +" "+rt);
			model.addAttribute("CHNumber",data.getVoidResp().getF004_PAN());
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzyrecCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	@RequestMapping(value = { "/cancelEzylinkPaymentByAdmin1" }, method = RequestMethod.POST)
	public String EzylinkVoidSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") UMEcomTxnRequest TxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		logger.info("cancelPaymentByAdmin");
		
		ResponseDetails data=MotoPaymentCommunication.UmCancelPayment(TxnDet);
		
		double amount = 0;
		amount = Double.parseDouble(data.getVoidResp().getF007_TxnAmt()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		String rd = "";
		String rt = "";
		try {
			rd = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(data.getVoidResp().getH003_TDT()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		try {
			rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(data.getVoidResp().getH004_TTM()));
	
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzylinkCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzylinkVoidPaymentDone", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("amount", output);
			model.addAttribute("TDT", " "+rd +" "+rt);
			model.addAttribute("CHNumber",data.getVoidResp().getF004_PAN());
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzylinkCancelPayment", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	@RequestMapping(value = { "/UMMotoenquiryTransaction/{currPage}" }, method = RequestMethod.GET)
	public String UMMotoTransactionEnquiry(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) { 
		logger.info("UM_MOTO Transaction Enquiry list by Merchant");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umMotoTransactionEnquiry", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		logger.info(" All Transaction Summary:" + principal.getName());
		model.addAttribute("pageBean", pageBean);
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		
		//transactionService.listUMMotoTxnEnqByAdmin(paginationBean, null, null,"ALL");
		
		transactionService.listUMMotoTransactionEnq(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		
		logger.info(" enquiry");
		model.addAttribute("paginationBean", paginationBean);
	
		
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/UMLinkenquiryTransaction/{currPage}" }, method = RequestMethod.GET)
	public String UMLinkenquiryTransaction(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) { 
		logger.info("UM_LINK Transaction Enquiry list by Merchant");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umLinkTransactionEnquiry", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		logger.info(" All Transaction Summary:" + principal.getName());
		model.addAttribute("pageBean", pageBean);
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		
		//transactionService.listUMMotoTxnEnqByAdmin(paginationBean, null, null,"ALL");
		
		transactionService.listUMMotoTransactionEnq(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		
		logger.info(" enquiry");
		model.addAttribute("paginationBean", paginationBean);
	
		
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/UMVccenquiryTransaction/{currPage}" }, method = RequestMethod.GET)
	public String UMVccenquiryTransaction(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) { 
		logger.info("UM_MOTO VCC Transaction Enquiry list by Merchant");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umVccTransactionEnquiry", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		logger.info(" All Transaction Summary:" + principal.getName());
		model.addAttribute("pageBean", pageBean);
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
		
		//transactionService.listUMMotoTxnEnqByAdmin(paginationBean, null, null,"ALL");
		
		transactionService.listUMVccTransactionEnq(paginationBean, null, null,currentMerchant.getMid().getUmMotoMid(), "ALL");
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		
		logger.info(" enquiry");
		model.addAttribute("paginationBean", paginationBean);
	
		
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/searchUMMotoEnquiry" }, method = RequestMethod.GET)
	public String SearchUMMotoTransactionEnquiry(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) { 
		logger.info("Transaction Enquiry list");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umMotoTransactionEnquiry", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		
		model.addAttribute("pageBean", pageBean);
		
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
	
		
		transactionService.listUMMotoTransactionEnq(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(), "ALL");
		model.addAttribute("paginationBean", paginationBean);
	
		
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/searchUMLinkEnquiry" }, method = RequestMethod.GET)
	public String searchUMLinkEnquiry1(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) { 
		logger.info("Transaction Enquiry list");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umLinkTransactionEnquiry", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		
		model.addAttribute("pageBean", pageBean);
		
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
	
		
		transactionService.listUMMotoTransactionEnq(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(), "ALL");
		model.addAttribute("paginationBean", paginationBean);
	
		
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/searchUMVccEnquiry" }, method = RequestMethod.GET)
	public String searchUMLinkEnquiry(HttpServletRequest request,
			final Model model,
			@RequestParam final String date,
			@RequestParam final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage) { 
		logger.info("Transaction Enquiry list");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/umVccTransactionEnquiry", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		
		model.addAttribute("pageBean", pageBean);
		
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
	
		
		transactionService.listUMVccTransactionEnq(paginationBean, date, date1,currentMerchant.getMid().getUmMotoMid(), "ALL");
		model.addAttribute("paginationBean", paginationBean);
	
		
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = "/umMotoEnqExport", method = RequestMethod.GET)
	public ModelAndView getExportUMMotoEnq(
			final Model model,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
	//		@RequestParam("txnStatus") String txnStatus,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
	 
		logger.info("UM_MOTO Enquiry merchant by admin" );
		
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());
		/*String dat = null;
		String dat1 = null;*/
		
		String dat = fromDate;
		String dat1 = toDate;
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
	
		
		
		
		transactionService.exportUMMotoTransactionEnq(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
	
		} else {
			model.addAttribute("responseData", null);
		}
		
		
		List<UMEzyway> list1 = paginationBean.getItemList();
		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnUMEnqExcel", "umTxnList", list1);
		} else {
			return new ModelAndView("txnUMEnqPdf", "umTxnList", list1);
		}
	 
	}
	
	@RequestMapping(value = "/umLinkEnqExport", method = RequestMethod.GET)
	public ModelAndView umLinkEnqExport1(
			final Model model,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
	//		@RequestParam("txnStatus") String txnStatus,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
	 
		logger.info("UM_Link Enquiry merchant by admin" );
		
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());
		/*String dat = null;
		String dat1 = null;*/
		
		String dat = fromDate;
		String dat1 = toDate;
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
	
		
		
		
		transactionService.exportUMMotoTransactionEnq(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
	
		} else {
			model.addAttribute("responseData", null);
		}
		
		
		List<UMEzyway> list1 = paginationBean.getItemList();
		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnUMEnqExcel", "umTxnList", list1);
		} else {
			return new ModelAndView("txnUMEnqPdf", "umTxnList", list1);
		}
	 
	}
	
	@RequestMapping(value = "/umVccEnqExport", method = RequestMethod.GET)
	public ModelAndView umLinkEnqExport(
			final Model model,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
	//		@RequestParam("txnStatus") String txnStatus,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
	 
		logger.info("UM_MOTO VCC  Enquiry merchant by admin" );
		
		 HttpSession session=request.getSession();
			String myName =(String)session.getAttribute("userName");
			//String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());
		/*String dat = null;
		String dat1 = null;*/
		
		String dat = fromDate;
		String dat1 = toDate;
		PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
		paginationBean.setCurrPage(currPage);
	
		
		
		
		transactionService.exportUMVccTransactionEnq(paginationBean, dat, dat1,currentMerchant.getMid().getUmMotoMid(),"ALL");
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
	
		} else {
			model.addAttribute("responseData", null);
		}
		
		
		List<UMEzyway> list1 = paginationBean.getItemList();
		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnUMEnqExcel", "umTxnList", list1);
		} else {
			return new ModelAndView("txnUMEnqPdf", "umTxnList", list1);
		}
	 
	}


	
	
	
	//UM-EZYAUTH Action
	@RequestMapping(value = { "/ezyauthDetails/{id}" }, method = RequestMethod.GET)
	public String UMEzyauthDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/voidpayment/umEzyAuth", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		

		UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);

//		UMEzyway txnDet = new UMEzyway();
//		txnDet.setF354_TID(tr.getF354_TID());
//		txnDet.setF001_MID(tr.getF001_MID());
//		txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
		logger.info("umEzyAuth mrn :"+tr.getF263_MRN());
		logger.info("H001_MTI :"+tr.getH001_MTI());
		logger.info("Status  :"+tr.getStatus());
		String rd = null;
		String data =null;
		if (tr.getH003_TDT() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyyMMdd").parse(tr.getH003_TDT()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (tr.getH004_TTM() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getH004_TTM()));

			} catch (ParseException e) {
			}
		}
		tr.setH003_TDT(rd);
		tr.setH004_TTM(rt);
		double amount = 0;
		amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		tr.setF007_TxnAmt(output);
		
//		txnDet.setF263_MRN(tr.getF263_MRN());
//		txnDet.setF268_CHNAME(tr.getF268_ChName());

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				tr.setMaskedPan(pan);
			} else {
				tr.setMaskedPan(pan);
			}

		} else {
			tr.setMaskedPan("NA");
		}
		
		data = (String) request.getSession(true).getAttribute("responseDescriptioSession");
		
		logger.info("Response Description ::::::::::::  :"+data);
		
		if(data != null) {
			model.addAttribute("responseData", data+"...  Try Again..");
		}
		
		

//		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", tr);
		
		
		request.getSession(true).removeAttribute("responseDescriptioSession");
		
		return TEMPLATE_MERCHANT;
	}
	
	
	@RequestMapping(value = { "/umAuthByMerchant" }, method = RequestMethod.POST)
	public String authSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") UMEcomTxnRequest TxnDet, 
			
			 @RequestParam("f354_TID") String f354_TID,
			 @RequestParam("f001_MID") String f001_MID,
			 @RequestParam("h001_MTI") String h001_MTI,
			 @RequestParam("h003_TDT") String h003_TDT,
			 @RequestParam("h004_TTM") String h004_TTM,
			 @RequestParam("f011_AuthIDResp") String f011_AuthIDResp,
			 
			 @RequestParam("f007_TxnAmt") String f007_TxnAmt,
			 @RequestParam("f268_ChName") String f268_ChName,
			 @RequestParam("maskedPan") String maskedPan,
			 @RequestParam("f263_MRN") String f263_MRN,
			 @RequestParam("status") String status,
			
			HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		logger.info("umAuthByMerchant"+f263_MRN);
		logger.info("umAuthByMerchant Status:::::::::::"+status);
		logger.info("um H001_MTI :::::::::::"+h001_MTI);
		logger.info("Amount :::::::::::"+f007_TxnAmt);
		
		UMEcomTxnRequest TxnDet1 =new UMEcomTxnRequest();
		TxnDet1.setF354_TID(f354_TID);
		TxnDet1.setF001_MID(f001_MID);
		TxnDet1.setH001_MTI(h001_MTI);
		TxnDet1.setH003_TDT(h003_TDT);
		TxnDet1.setH004_TTM(h004_TTM);
		TxnDet1.setF011_AuthIDResp(f011_AuthIDResp);
		TxnDet1.setF007_TxnAmt(f007_TxnAmt);
		TxnDet1.setF268_ChName(f268_ChName);
		TxnDet1.setMaskedPan(maskedPan);
		TxnDet1.setF263_MRN(f263_MRN);
		TxnDet1.setStatus(status);
		
		
		ResponseDetails data=MotoPaymentCommunication.UmAuthPayment(TxnDet1);
		
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			
			logger.info("fail 01 :::::::::::");
			
			/*PageBean pageBean = new PageBean("transactions list",
					"transaction/voidpayment/umEzyAuth", Module.TRANSACTION,
					"transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");*/
			
			request.getSession(true).setAttribute("responseDescriptioSession",data.getResponseDescription());
			
			return "redirect:" + URL_BASE + "/ezyauthDetails/" + f263_MRN;
		}else {
			
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzyAuthDone", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			
			
			double amount = 0;
			amount = Double.parseDouble(data.getSaleResp().getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			String rd = "";
			String rt = "";
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(data.getSaleResp().getH003_TDT()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(data.getSaleResp().getH004_TTM()));

			} catch (ParseException e) {
				e.printStackTrace();
			}
			
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("amount", output);
			model.addAttribute("TDT", " "+rd +" "+rt);
			model.addAttribute("CHNumber",data.getSaleResp().getF004_Pan());
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			
			logger.info("fail 02 :::::::::::");
			
			/*PageBean pageBean = new PageBean("transactions list",
					"transaction/voidpayment/umEzyAuth", Module.TRANSACTION,
					"transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", "Failed, Try Again..");*/
			request.getSession(true).setAttribute("responseDescriptioSession","Failed, Try Again..");
			
			return "redirect:" + URL_BASE + "/ezyauthDetails/ "+ f263_MRN;
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	//UM-EZYAUTH Reverse after sale 
	@RequestMapping(value = { "/ezyauthReverseDetails/{id}" }, method = RequestMethod.GET)
	public String UMEzyauthReverseDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {
		logger.info("UMEzyauthReverseDetails Reverse after sale ");
		
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/voidpayment/umEzyAuthReverse", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");

		//UMEcomTxnRequest tr = transactionService.loadUMEzywayTransactionRequest(id);
		
		UMEcomTxnResponse tr = transactionService.loadUMEzywayTransactionResponse(id);

//		UMEzyway txnDet = new UMEzyway();
//		txnDet.setF354_TID(tr.getF354_TID());
//		txnDet.setF001_MID(tr.getF001_MID());
//		txnDet.setF011_AUTHIDRESP(tr.getF011_AuthIDResp());
		logger.info("umEzyAuth mrn :"+tr.getF263_MRN());
		logger.info("H001_MTI :"+tr.getH001_MTI());
		String rd = null;
		String data =null;
		if (tr.getH003_TDT() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyyMMdd").parse(tr.getH003_TDT()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (tr.getH004_TTM() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(tr.getH004_TTM()));

			} catch (ParseException e) {
			}
		}
		tr.setH003_TDT(rd);
		tr.setH004_TTM(rt);
		double amount = 0;
		amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		tr.setF007_TxnAmt(output);
		
//		txnDet.setF263_MRN(tr.getF263_MRN());
//		txnDet.setF268_CHNAME(tr.getF268_ChName());

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				tr.setMaskedPan(pan);
			} else {
				tr.setMaskedPan(pan);
			}

		} else {
			tr.setMaskedPan("NA");
		}
		
		data = (String) request.getSession(true).getAttribute("reverseDescriptioSession");
		
		logger.info("Reverse Description ::::::::::::  :"+data);
		
		if(data != null) {
			model.addAttribute("responseData", data+"...  Try Again..");
		}

//		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", tr);
		
		request.getSession(true).removeAttribute("reverseDescriptioSession");
		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/umAuthReverseByMerchant" }, method = RequestMethod.POST)
	public String authReverseTransaction(final Model model,
			@ModelAttribute("txnDet") UMEcomTxnRequest TxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		logger.info("umAuthReverseByMerchant"+TxnDet.getF263_MRN());
		
		logger.info("umAuthReverseByMerchant Status:::::::::::"+TxnDet.getStatus());
		
		ResponseDetails data=MotoPaymentCommunication.UmAuthReverse(TxnDet);
		
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
						
			logger.info("fail 01 :::::::::::");
			
			/*PageBean pageBean = new PageBean("transactions list",
					"transaction/voidpayment/umEzyAuthReverse", Module.TRANSACTION,
					"transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");*/
			
			request.getSession(true).setAttribute("reverseDescriptioSession",data.getResponseDescription());
			
			return "redirect:" + URL_BASE + "/ezyauthReverseDetails/" + TxnDet.getF263_MRN();
			
		}else {
			
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/voidpayment/umEzyAuthDone", Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			
			double amount = 0;
			amount = Double.parseDouble(data.getVoidResp().getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			String rd = "";
			String rt = "";
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy").format(new SimpleDateFormat("yyyyMMdd").parse(data.getVoidResp().getH003_TDT()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(data.getVoidResp().getH004_TTM()));

			} catch (ParseException e) {
				e.printStackTrace();
			}
			
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("amount", output);
			model.addAttribute("TDT", " "+rd +" "+rt);
			model.addAttribute("CHNumber",data.getVoidResp().getF004_PAN());
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			logger.info("fail 02 :::::::::::");
			
			/*PageBean pageBean = new PageBean("transactions list",
					"transaction/voidpayment/umEzyAuthReverse", Module.TRANSACTION,
					"transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", TxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");*/
			
			request.getSession(true).setAttribute("reverseDescriptioSession","Failed , Try again...");
			
			return "redirect:" + URL_BASE + "/ezyauthReverseDetails/" + TxnDet.getF263_MRN();
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	
	@RequestMapping(value = { "/allMerchantUMlist/{currPage}" }, method = RequestMethod.GET)
	public String displayAllUMTransactionSummary(final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false)final String date,
			@RequestParam(required = false) final String date1,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {
		logger.info("about to list all  transaction");
		
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/UmAlltransactionList", Module.TRANSACTION,
				"transaction/sideMenuTransaction");
		logger.info(" All Transaction Summary:" + principal.getName());
		
		logger.info("list umMotoList transaction");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		String fromDate1 = null;
		String toDate1 = null;
		
		
		if ((date != null && date1 != null) && (!date.isEmpty() && !date1.isEmpty())) 
		{
			try {
				fromDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(date));
				toDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(date1));
			} 
			catch (ParseException e) {e.printStackTrace();}
			
		}
		
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
			
		model.addAttribute("pageBean", pageBean);

		transactionService.listAllUmTransactionDetails(paginationBean,currentMerchant,fromDate1,toDate1);
	
		
		
		if(paginationBean.getItemList().isEmpty() || paginationBean.getItemList() == null)
		{
			model.addAttribute("responseData", "No Records found"); //table response
			
		}else {
			model.addAttribute("responseData", null);
		}

		
		model.addAttribute("paginationBean", paginationBean);
		

		return TEMPLATE_MERCHANT;
		
	}
	
	 @RequestMapping(value = { "/allUmSearch1" }, method = RequestMethod.GET)
		public String displayAllUmTransactionList(final Model model, 
				@RequestParam(required = false ) final String date,
			@RequestParam(required = false) final String date1,
			HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage){
		 
		 
		 
		logger.info("all  Transaction in search controller");
		logger.info("inside search controler "+date+" "+date1);
		
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		String dat = null;
		String dat1 = null;
		String status1 = null;
		
		if ((date != null && date1 != null) && (!date.isEmpty() && !date1.isEmpty())) 
		{
			try 
			{
				dat = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(date));
				dat1 = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(date1));
			logger.info("inside search controler "+dat+" "+dat1);
			} 
			catch (ParseException e) {
				
				e.printStackTrace();
			}
			
		}
		
		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/UmAlltransactionList", Module.TRANSACTION,
				"transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		
			paginationBean.setCurrPage(currPage);
			
			transactionService.listAllUmTransactionDetails(paginationBean,currentMerchant, dat, dat1);
			
			model.addAttribute("date", dat);
			model.addAttribute("date1", dat1);
			model.addAttribute("status", status1);
		
		
		if(paginationBean.getItemList().isEmpty() || paginationBean.getItemList() == null)
		{
			model.addAttribute("responseData", "No Records found"); //table response
			
		}else {
			model.addAttribute("responseData", null);
		}
	
		model.addAttribute("paginationBean", paginationBean);
		return TEMPLATE_MERCHANT;
		
		}
	 
	 @RequestMapping(value = { "/allUmExport" }, method = RequestMethod.GET)
		public ModelAndView getAllUmExcel(@RequestParam(required = false ) final String date,
			@RequestParam(required = false) final String date1,
			HttpServletRequest request,
			@RequestParam (required = false ) String export,
			final Model model,
			@RequestParam(required = false, defaultValue = "1") final int currPage){
		logger.info("about to list all  Transaction export");
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		String fromDate1 = null;
		String toDate1 = null;
		
		if ((date != null && date1 != null) && (!date.isEmpty() && !date1.isEmpty())) {
			
			
			try {
				fromDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(date));
				toDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(date1));
				
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		}
		
		
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		
		transactionService.listAllUmTransactionDetails(paginationBean,currentMerchant,fromDate1, toDate1);
		
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}
		
		List<ForSettlement> list = paginationBean.getItemList();
		
	
		if(!(export.equals("PDF"))){
		
			return new ModelAndView("txnUmListExcel", "txnList", list);
	
			}else{
				return new ModelAndView("txnUmListPdf", "txnList", list);
			}
		
		}
	 
	 
	 @RequestMapping(value = { "/ezyLinkSSList" }, method = RequestMethod.GET)
		public String umEzyLinkList(final Model model, final java.security.Principal principal,
				@RequestParam(required = false, defaultValue = "1") final int currPage, HttpServletRequest request) {

			logger.info("list umLinkList transaction");
			HttpSession session = request.getSession();
			String myName = (String) session.getAttribute("userName");
			// String myName = principal.getName();
			logger.info("currently logged in as " + myName);

			Merchant currentMerchant = merchantService.loadMerchant(myName);
			PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/transactionUMLinkSSList",
					Module.TRANSACTION_WEB, "merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
			logger.info(" UM-Link Transaction Summary:" + principal.getName());
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			transactionService.listUMEzyLinkSSTransaction(paginationBean, null, null,currentMerchant.getMid().getUmSsMotoMid(), "ALL");
			if (paginationBean.getItemList().isEmpty() || paginationBean.getItemList() == null
					|| paginationBean.getItemList().size() == 0) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response
			} else {
				model.addAttribute("responseData", null);
			}
			model.addAttribute("paginationBean", paginationBean);

			return TEMPLATE_MERCHANT;
		}

		@RequestMapping(value = { "/searchLinkSS" }, method = RequestMethod.GET)
		public String searchUMLinkss(HttpServletRequest request, final Model model, @RequestParam final String date,
				@RequestParam final String date1, @RequestParam(required = false, defaultValue = "1") final int currPage) {
			logger.info("search Ezylink SS Transaction ");
			HttpSession session = request.getSession();
			String myName = (String) session.getAttribute("userName");
			// String myName = principal.getName();
			logger.info("currently logged in as " + myName);
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/transactionUMLinkSSList",
					Module.TRANSACTION_WEB, "merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);

			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			transactionService.listUMEzyLinkSSTransaction(paginationBean, date, date1 ,currentMerchant.getMid().getUmSsMotoMid(), "ALL");

			model.addAttribute("paginationBean", paginationBean);

			return TEMPLATE_MERCHANT;

		}

		@RequestMapping(value = "/ezyLinkSSExport", method = RequestMethod.GET)
		public ModelAndView umLinkExportss(final Model model, @RequestParam("fromDate") String fromDate,
				@RequestParam("toDate") String toDate,
//					@RequestParam("txnStatus") String txnStatus,
				@RequestParam("export") String export, HttpServletRequest request,
				@RequestParam(required = false, defaultValue = "1") final int currPage) {

			logger.info("UM_EZYLINK ss Export by Merchant");
			HttpSession session = request.getSession();
			String myName = (String) session.getAttribute("userName");
			// String myName = principal.getName();
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			String dat = fromDate;
			String dat1 = toDate;
			PaginationBean<UMEzyway> paginationBean = new PaginationBean<UMEzyway>();
			paginationBean.setCurrPage(currPage);

			transactionService.exportUMLinkSSTransaction(paginationBean, dat, dat1,currentMerchant.getMid().getUmSsMotoMid(),"ALL");

			logger.info("No of Records: " + paginationBean.getItemList().size());
			if (paginationBean.getItemList().isEmpty() || paginationBean.getItemList() == null) {
				model.addAttribute("responseData", "No Records found"); // table
																		// response

			} else {
				model.addAttribute("responseData", null);
			}

			List<UMEzyway> list1 = paginationBean.getItemList();
			if (!(export.equals("PDF"))) {
				return new ModelAndView("txnListMobiliteUMExcel", "umTxnList", list1);
			} else {
				return new ModelAndView("txnListMobiliteUMPdf", "umTxnList", list1);
			}

		}
		
		
		
		@RequestMapping(value = { "/getTrackData/{id}" }, method = RequestMethod.GET)
		  public String displaytrackList(final Model model,
		   @PathVariable final String id, HttpServletRequest request,
		  HttpServletResponse response, Principal principal,
		  @RequestParam(required = false, defaultValue = "1") final int currPage) {
		  
		  logger.info("about to list all merchants"); PageBean pageBean = new
		  PageBean("Merchant", "merchantweb/getTrackData", Module.MERCHANT,
		  "merchant/sideMenuMerchant"); model.addAttribute("pageBean", pageBean);
		  
		  HttpSession session = request.getSession();
			String myName = (String) session.getAttribute("userName");
		  UMEcomTxnRequest trreq = transactionService.loadUMEzywayTransactionRequest(id);
		  
		  UMEcomTxnResponse tr = transactionService.loadUMEzywayTransactionResponse(id);
		  
		  Merchant currentMerchant = merchantService.loadMerchant(myName);
		  MobiliteTrackDetails trackDet = new MobiliteTrackDetails();
		  
		  if(tr.getF007_TxnAmt() != null) {
		  	double amount = 0;
			amount = Double.parseDouble(tr.getF007_TxnAmt()) / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(amount);
			 trackDet.setAmount(output);
			 
			 logger.info("output: " + output);
		  }
		  
		  trackDet.setBusinessName(currentMerchant.getBusinessName());  
		  trackDet.setTid(trreq.getF354_TID());
		  trackDet.setCustomerName(trreq.getF268_ChName());
		  trackDet.setCustomerPhoneNo(trreq.getF279_HP());
		  trackDet.setMrn(tr.getF263_MRN());
		
		
		  model.addAttribute("trackDet", trackDet);

		  
		  return TEMPLATE_MERCHANT; 
		  }
		  
		
		  @RequestMapping(value = { "/sendTrackData" }, method = RequestMethod.POST)
			public String confirmAddAgent(@ModelAttribute("trackDet") final MobiliteTrackDetails trackDet,
					final Model model, final java.security.Principal principal,
					final HttpServletRequest request,
					 @RequestParam(required = false, defaultValue = "1") final int currPage) {
				logger.info("about to sendTrackData Confirms");
				String responseMsg = null;
				PageBean pageBean = new PageBean("Merchant", "merchantweb/smsSuccess", Module.MERCHANT,
						  "merchant/sideMenuMerchant"); model.addAttribute("pageBean", pageBean);
						
						  logger.info("sendTrackData");
				  PaginationBean<MobiliteTrackDetails> paginationBean = new PaginationBean<MobiliteTrackDetails>();
					paginationBean.setCurrPage(currPage);
					
					
					model.addAttribute("paginationBean", paginationBean);
					
					logger.info("trackdet::"+trackDet.getTrackNumber() +"::::"+trackDet.getAmount()
					 +"::::"+trackDet.getCourierName()+":::::"+trackDet.getSentDate()+"::::"+trackDet.getCustomerPhoneNo() +"::::"+trackDet.getMrn());
				
					/*
					 * trackDet.setAmount("10"); trackDet.setBusinessName("Mobi");
					 * trackDet.setTrackNumber("45678");
					 * trackDet.setCourierName("ProfessionalCourier");
					 * trackDet.setSentDate("20201120"); trackDet.setCustomerPhoneNo("0105302913");
					 */
					
					logger.info("trackdet"+trackDet.getTrackNumber());
					
					int a = merchantService.updateEzylinkssTrackDetails(trackDet);
					
				  String smsBody = null;
				  
				  smsBody = "Click the link to confirm the service of goods : "+PropertyLoad.getFile().getProperty("RECEIPT_SMSLINK")+trackDet.getBusinessName()+"&trackNo="+trackDet.getTrackNumber()
				  +"&courierName="+trackDet.getCourierName()
						  +"&sentDate="+trackDet.getSentDate()+"&amount="+trackDet.getAmount();
				  
				  logger.info("smsBody::"+smsBody);
				  

					if(!(trackDet.getCustomerPhoneNo()==null||trackDet.getCustomerPhoneNo().equals(""))){
						if(trackDet.getCustomerPhoneNo().length() > 7) {
						try {
							boolean recept = false;
							if(!recept) {
							SMSServiceImpl.sendSMS(trackDet.getCustomerPhoneNo(),smsBody);
							recept=true;
							 responseMsg =" Message Sent Succesfully to the mobile number :" +trackDet.getCustomerPhoneNo();
							logger.info("Message Sent Succesfully to the "+"mobile number :"+trackDet.getCustomerPhoneNo()+" and the "+"Message Body is:"+smsBody);
							}
						} catch (Exception e) {
							
							logger.info("Message Not Sent to mobile number :"+trackDet.getCustomerPhoneNo());
							 responseMsg =" Message Not Sent to mobile number :"+trackDet.getCustomerPhoneNo() 
							+"with exception: "+e;
							//throw new MobileApiException(Status.SMS_SENDING_FAILED);
						}
						}else {
							
							logger.info("Message Not Sent to mobile number :"+trackDet.getCustomerPhoneNo());
							 responseMsg =" Message Not Sent to mobile number :"+trackDet.getCustomerPhoneNo() ;
							
						}
					}
				
					
					model.addAttribute("trackDet", trackDet);
					model.addAttribute("responsemsg", responseMsg);
				return TEMPLATE_MERCHANT;
				
			}
		
	
	


}
