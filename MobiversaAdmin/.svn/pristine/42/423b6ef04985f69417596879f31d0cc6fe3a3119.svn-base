package com.mobiversa.payment.auth;

import java.util.Collection;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.AgentUserRole;
import com.mobiversa.common.bo.MerchantUserRole;
import com.mobiversa.payment.util.PropertyLoader;

public class AuthSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {
	
	private final static Logger logger=Logger.getLogger(AuthSuccessHandler.class.getName());
	@Override
	protected String determineTargetUrl(final HttpServletRequest request, final HttpServletResponse response) {
		// Determine the role of logged in user
		//logger.info("Login Request Map :"+request.getRequestURI());
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		Collection<? extends GrantedAuthority> authList = auth.getAuthorities();
		
		if (authList == null) {
			//logger.info("authlist null");
			return "/auth/login/error";
		}
		else 
		{
			//logger.info(" TEST auth else");
			if (authList.contains(new SimpleGrantedAuthority(MerchantUserRole.BANK_MERCHANT.name()))) {
				logger.info("#################################### Logging in as MERCHANT #################################### ");
				
				//System.out.println(" AUTH MERCHANT");
				return "/merchant/merchantweb";			
			}      
			else if(authList.contains(new SimpleGrantedAuthority(MerchantUserRole.NON_MERCHANT.name())))
			{
				//logger.info("----AuthSuccessHandler-----");
				logger.info("#################################### Logging in as NON-MERCHANT #################################### ");
				//System.out.println(" AUTH NON-MERCHANT");
				return "/nonmerchant/nonmerchantweb";			
			}
			
			else if (authList.contains(new SimpleGrantedAuthority(AgentUserRole.AGENT_USER.name())))
			{
				
			    	Agent user = (Agent) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
					logger.info("#################################### Logging in as AGENT #################################### ");
				    String agent = user.getUsername();
					String agentUsername = PropertyLoader.getFile().getProperty("SUPER_AGENTNAME");
					String hotelMerchantname = PropertyLoader.getFile().getProperty("HOTEL_MERCHANTNAME");
					
					logger.info("hotelMerchantname:" + hotelMerchantname);
					logger.info("superagentUsername:" + agentUsername);	
					logger.info("agent:" + agent);
					
					if(agent.equals(agentUsername))
					{
						return "/superagent/agentlogin";
					}
					else if(agent.equals(hotelMerchantname)){
						return "/superagent/hotelMerchantlogin";
					}
					else

					//System.out.println("AUTH AGENT");
					
					return "/agent/agentweb";
			
			}else{
				//System.out.println(" AUTH BANK");
				return "/bank/user";
			}
		}

	}
}