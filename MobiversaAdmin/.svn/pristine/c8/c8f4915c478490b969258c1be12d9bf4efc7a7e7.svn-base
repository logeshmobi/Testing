package com.mobiversa.payment.dao;

import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.BizAppSettlement;
import com.mobiversa.common.bo.BoostDailyRecon;
import com.mobiversa.common.bo.CommonStatus;
import com.mobiversa.common.bo.CountryCurPhone;
import com.mobiversa.common.bo.ForSettlement;
import com.mobiversa.common.bo.FpxTransaction;
import com.mobiversa.common.bo.MID;
import com.mobiversa.common.bo.MasterMerchant;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.MobiMDR;
import com.mobiversa.common.bo.MobileUser;
import com.mobiversa.common.bo.MotoVCDetails;
import com.mobiversa.common.bo.PreAuthorization;
import com.mobiversa.common.bo.Receipt;
import com.mobiversa.common.bo.SettlementMDR;
import com.mobiversa.common.bo.SubAgent;
import com.mobiversa.common.bo.TID;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.common.bo.Transaction;
import com.mobiversa.common.bo.TransactionRequest;
import com.mobiversa.common.bo.TransactionResponse;
import com.mobiversa.common.bo.UMEcomTxnRequest;
import com.mobiversa.common.bo.UMEcomTxnResponse;
import com.mobiversa.common.dto.AgentResponseDTO;
import com.mobiversa.common.dto.MerchantSettlementDTO;
import com.mobiversa.common.dto.TerminalDTO;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.dto.AgentVolumeData;
import com.mobiversa.payment.dto.HostResponse;
import com.mobiversa.payment.dto.MerchantComparator;
import com.mobiversa.payment.dto.MerchantVolumeData;
import com.mobiversa.payment.util.AESencrp;
import com.mobiversa.payment.util.UMEzyway;

@Component
@Repository
@Transactional(readOnly = true, rollbackFor = Exception.class)
public class TransactionDaoImpl extends BaseDAOImpl implements TransactionDao {
	@Override
	@Transactional(readOnly = true)

	public void listAllTransaction(final PaginationBean<ForSettlement> paginationBean, final ArrayList<Criterion> props,
			final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		/*
		 * if(txnType.isEmpty() || txnType == null){ txnType = "ALL"; }
		 */
		/*
		 * if(date != null){// || !date.equals("1")){
		 * 
		 * //logger.info(" DD else data:" + date); logger.info("DD else data: " +
		 * date1); dat = date; SimpleDateFormat dateFormat = new
		 * SimpleDateFormat("yyyy-MM-dd"); try { dat = dateFormat.format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(dat)); } catch (ParseException e) { //
		 * TODO Auto-generated catch block e.printStackTrace(); }
		 * 
		 * //logger.info("date1: " + dat );
		 * 
		 * //SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); //dat =
		 * dateFormat.format(date); }
		 * 
		 * if(date1 != null){// || !date1.equals("1")){ dat1 = date1; SimpleDateFormat
		 * dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); try { dat1 =
		 * dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1)); } catch
		 * (ParseException e) { // TODO Auto-generated catch block e.printStackTrace();
		 * }
		 * 
		 * 
		 * }
		 */

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			// logger.info("Inside listAllTransaction 12131313: " + date + " " + date1);
			/*
			 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM"); from =
			 * dateFormat.format(dt); from = from + "-01"; logger.info("change date format:"
			 * + from);
			 */

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.ag_name "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and DATE between '" + dat + "' and '" + dat1 +
		 * "' and txn_year between '"
		 * +year1+"' and '"+year2+"' group by a.MID,a.DATE order by a.DATE desc" ;
		 */

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME,f.ACTIVATE_DATE "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("inside ALL" + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID  or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','CT','A','BPA','BPS','GPS','GPP') and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("EZYWIRE")) {
			logger.info("inside CARD" + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("BOOST")) {
			logger.info("inside BOOST TYPE" + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('BPA','BPS') and a.TXN_TYPE='BOOST' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		}

		else if (txnType.equals("EZYCASH")) {
			logger.info("inside cash: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('CT') and a.TXN_TYPE='CASH' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("EZYMOTO")) {
			logger.info("inside MOTO: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('A','S') and a.TXN_TYPE='MOTO' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("EZYLINK")) {
			logger.info("inside MOTO: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('A','S') and a.TXN_TYPE='EZYLINK' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("EZYWAY")) {
			logger.info("inside EZYWAY: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('A','S') and a.TXN_TYPE='EZYWAY' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("EZYREC")) {
			logger.info("inside EZYREC: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('A','S') and a.TXN_TYPE='EZYREC' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("EZYRECPLUS")) {
			logger.info("inside EZYRECPLUS: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('A','S') and a.TXN_TYPE='RECPLUS' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("GRABPAY")) {
			logger.info("inside GRABPAY: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.GPAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('GPS','GPP') and a.TXN_TYPE='GRABPAY' and a.time_stamp between :from  and :to"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			fs.setLocation(rec[0].toString());
			fs.setMerchantName(rec[1].toString().toUpperCase());

			// setdate
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			fs.setDate(rd);

			// /logger.info(" Amount : " + rec[3]);
			// fs.setAmount(rec[3].toString());
			if (rec[4] != null) {
				fs.setAgentName(rec[4].toString().toLowerCase());
			}

			String rd1 = null;
			if (rec[5] != null) {

				try {
					rd1 = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
			}
			if (rec[7] != null) {

				fs.setTxnType(rec[7].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				}
				// logger.info("txn type: "+fs.getTxnType());
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fs.setNumOfRefund(rd1);
			fs.setStatus(rec[6].toString());
			/*
			 * if(fs.getStatus().equals("BOOST PAYMENT") ||
			 * fs.getStatus().equals("BOOST SETTLED") ||
			 * fs.getStatus().equals("BOOST CANCELLED") || fs.getStatus()=="BOOST PAYMENT"
			 * || fs.getStatus()=="BOOST SETTLED" || fs.getStatus()=="BOOST CANCELLED" )
			 */
			/*
			 * if((fs.getStatus().equals("BP") || fs.getStatus().equals("BPA") ||
			 * fs.getStatus().equals("BPS")) || (fs.getStatus()=="BP" ||
			 * fs.getStatus()=="BPS" || fs.getStatus()=="BPA") ) {
			 * 
			 * 3,9 //SET TIME if(rec[9]!=null) { logger.info("time: "+rec[9].toString());
			 * if(rec[9].toString().contains("T")) { //fs.setTime(rec[3].toString()); try {
			 * String resTime = rec[9].toString().substring(11, 19);
			 * logger.info("time for boost: "+resTime); String rt = new
			 * SimpleDateFormat("HH:mm:ss").format( new
			 * SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(rec[9].toString()));
			 * //forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
			 * fs.setTime(resTime); } catch (ParseException e) {} } else { String rt1; try {
			 * rt1 = new SimpleDateFormat("HH:mm:ss").format( new
			 * SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[3].toString()));
			 * fs.setTime(rt1); logger.info("time for boost: "+fs.getTime()); } catch
			 * (ParseException e) { // TODO Auto-generated catch block e.printStackTrace();
			 * } //forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
			 * 
			 * }
			 * 
			 * } } else { //SET TIME if(rec[3]!=null) { try { String rt = new
			 * SimpleDateFormat("HH:mm:ss").format( new
			 * SimpleDateFormat("HHmmss").parse(rec[3].toString()));
			 * //forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
			 * 
			 * fs.setTime(rt); logger.info("time for normal trans: "+fs.getTime()); } catch
			 * (ParseException e) {} } }
			 */
			// logger.info(" Status : " + fs.getStatus());
			/*
			 * if((fs.getStatus().equals("BP") || fs.getStatus().equals("BPA") ||
			 * fs.getStatus().equals("BPS")) || (fs.getStatus()=="BP" ||
			 * fs.getStatus()=="BPS" || fs.getStatus()=="BPA") )
			 */
			if (rec[3] != null) {
				// logger.info(" Status : INSIDE IF BP,BPS,BPA" + fs.getStatus());
				/*
				 * Double d = new Double(fs.getAmount()); //d = d / 100; //
				 * logger.info("data : " + d); String pattern = "#,##0.00"; DecimalFormat
				 * myFormatter = new DecimalFormat(pattern); String output =
				 * myFormatter.format(d); // logger.info(d + " " + pattern + " " + output);
				 * fs.setAmount(output); } else {
				 */
				// logger.info(" Status : INSIDE ELSE S,CT,CV" + fs.getStatus());
				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}
			if (rec[8] != null) {

				fs.setMid(rec[8].toString());
				// logger.info("mid: "+fs.getMid());
			}
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public List<TerminalDetails> getGpayTid(Merchant merchant) {
		String gPayMid = null;
		if (merchant.getMid().getGpayMid() != null) {
			gPayMid = merchant.getMid().getGpayMid();
		}
		List<TerminalDetails> td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { gPayMid })).list();
		return td;

	}

	@Override
	public List<MobileUser> getGpayTidbyFK(Merchant merchant) {
		/*
		 * String gPayMid=null; if(merchant.getMid().getGpayMid()!=null) {
		 * gPayMid=merchant.getMid().getGpayMid(); }
		 */
		List<MobileUser> td = (List<MobileUser>) super.getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("merchant.id", merchant.getId())).list();
		return td;

	}

	@Override
	public List<MobileUser> getAllGpayTid() {
		/*
		 * String gPayMid=null; if(merchant.getMid().getGpayMid()!=null) {
		 * gPayMid=merchant.getMid().getGpayMid(); }
		 */
		List<MobileUser> td = (List<MobileUser>) super.getSessionFactory().createCriteria(MobileUser.class).list();
		/* .add(Restrictions.eq("merchant.id", merchant.getId())).list(); */
		return td;

	}

	@Override
	public List<TerminalDetails> getAllTid(Merchant merchant) {
		@SuppressWarnings("unchecked")
		String mid = null, motoMid = null, ezypassMid = null, ezywayMid = null, ezyrecMid = null, gPayMid = null;
		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		} else if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getGpayMid() != null) {
			gPayMid = merchant.getMid().getGpayMid();
		}
		List<TerminalDetails> td = super.getSessionFactory().createCriteria(TerminalDetails.class).add(
				Restrictions.in("merchantId", new String[] { mid, motoMid, ezypassMid, ezyrecMid, ezywayMid, gPayMid }))
				.list();
		return td;
	}

	@Override
	public List<CountryCurPhone> loadCountryData() {
		@SuppressWarnings("unchecked")
		List<CountryCurPhone> countryPhCode = sessionFactory.getCurrentSession().createCriteria(CountryCurPhone.class)
				.add(Restrictions.eq("status", "ACTIVE")).list();
		// .add(Restrictions.eq("tid",
		// tid)).add(orExp).addOrder(Order.desc("timeStamp")).list();

		return countryPhCode;
	}

	@Override
	public TID getTID(final Transaction transaction) {
		TID tid = (TID) super.getSessionFactory().createCriteria(TID.class)
				.add(Restrictions.eq("transaction", transaction)).setMaxResults(1).uniqueResult();
		return tid;
	}

	@Override
	@Transactional(readOnly = true)
	public void listTransactionTIDUsers(final PaginationBean<Transaction> paginationBean,
			final ArrayList<Criterion> mobileUser) {
		super.getPaginationItemsByPage(paginationBean, Transaction.class, mobileUser, Order.asc("id"));

	}

	@Override
	public ArrayList<ForSettlement> listTransaction(final PaginationBean<ForSettlement> paginationBean,
			final String mid) {

		ArrayList<ForSettlement> transactionList = new ArrayList<ForSettlement>();
		if (mid != null) {
			// logger.info("teste IF");
			paginationBean.setItemList(transactionList);
			paginationBean.setTotalRowCount(transactionList.size());
		} else {
			// logger.info("teste ELSE");
			/*
			 * String sql =
			 * "select treq.TXN_ID,treq.MID,treq.TID,treq.TERMINAL_DEVICE,treq.AMOUNT,tres.LOCAL_DATE,tres.LOCAL_TIME,tres.RESPONSE_CODE"
			 * +
			 * " from transaction_request treq left join transaction_response tres on treq.TXN_ID=tres.TXN_ID"
			 * + " where treq.MID=:mid";
			 * 
			 * 
			 * String sql =
			 * "select a.date , a.batchno AS BatchNO, f.BUSINESS_NAME AS MerchantName , a.mid AS MID,sum(a.AMOUNT) TotalAmount "
			 * +
			 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
			 * +
			 * "ON f.MID_FK=m.ID where a.status='S' group by a.MID,a.BATCHNO,a.DATE order by a.DATE desc"
			 * ;
			 */
			String sql1 = "select a.date , a.batchno AS BatchNO,  a.mid , sum(a.AMOUNT) TotalAmount "
					+ "from FOR_SETTLEMENT a  where a.status='S' and a.DATE like '%03' group by a.MID,a.BATCHNO,a.DATE order by a.DATE desc";

			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql1).addEntity(ForSettlement.class);// .setParameter("mid",
																											// mid);

			List<ForSettlement> resultSet = sqlQuery.list();
			for (ForSettlement record : resultSet) {
				ForSettlement row = record;
				transactionList.add(row);

			}
			paginationBean.setItemList(transactionList);
			paginationBean.setTotalRowCount(transactionList.size());
		}
		return transactionList;
	}

	@Override
	public void getForSettlement(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	public void getCardTransForSettlement(PaginationBean<ForSettlement> paginationBean, Merchant merchant,
			String txnType) {
		logger.info("In dao impl******* " + merchant.getMid().getMid() + " " + merchant.getMid().getUmMid());
		logger.info("TXN TYPE******* " + txnType);

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String sql2 = null;
		String umMid = null, mid = null;
		if (txnType != null) {
			if (txnType.equals("EZYMOTO")) {
				if (merchant.getMid().getMotoMid() != null) {
					mid = merchant.getMid().getMotoMid();
				}
				/*
				 * if(merchant.getMid().getUmMotoMid()!=null) {
				 * umMid=merchant.getMid().getUmMotoMid(); }
				 */
			} else if (txnType.equals("EZYLINK")) {
				if (merchant.getMid().getMotoMid() != null) {
					mid = merchant.getMid().getMotoMid();
				}
				/*
				 * if(merchant.getMid().getUmMotoMid()!=null) {
				 * umMid=merchant.getMid().getUmMotoMid(); }
				 */
			} else if (txnType.equals("EZYREC")) {
				if (merchant.getMid().getEzyrecMid() != null) {
					TerminalDetails termDetails = loadTerminalDetailsByMid(merchant.getMid().getEzyrecMid());
					/*
					 * if((termDetails.getDeviceType() ==
					 * "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
					 * mid=merchant.getMid().getEzyrecMid(); }else {
					 * mid=merchant.getMid().getEzyrecMid(); }
					 */

					mid = merchant.getMid().getEzyrecMid();
				}
				/*
				 * if(merchant.getMid().getUmEzyrecMid()!=null) {
				 * umMid=merchant.getMid().getUmEzyrecMid(); }
				 */
			} else if (txnType.equals("EZYPASS")) {
				if (merchant.getMid().getEzypassMid() != null) {
					mid = merchant.getMid().getEzypassMid();
				}
				/*
				 * if(merchant.getMid().getUmEzypassMid()!=null) {
				 * umMid=merchant.getMid().getUmEzypassMid(); }
				 */
			} else if (txnType.equals("EZYWAY")) {
				if (merchant.getMid().getEzywayMid() != null) {
					mid = merchant.getMid().getEzywayMid();
				}
				/*
				 * if(merchant.getMid().getUmEzywayMid()!=null) {
				 * umMid=merchant.getMid().getUmEzywayMid(); }
				 */
			} else if (txnType.equals("RECPLUS")) {
				if (merchant.getMid().getEzyrecMid() != null) {
					mid = merchant.getMid().getEzyrecMid();
				}
				/*
				 * if(merchant.getMid().getUmEzyrecMid()!=null) {
				 * umMid=merchant.getMid().getUmEzyrecMid(); }
				 */
			}
		} else {
			if (merchant.getMid().getMid() != null) {
				mid = merchant.getMid().getMid();
			}
			/*
			 * if(merchant.getMid().getUmMid()!=null) { umMid=merchant.getMid().getUmMid();
			 * }
			 */
		}

		Query sqlQuery = null;
		if (txnType != null) {
			/*
			 * sql2 =
			 * "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
			 * +
			 * "f.TRX_ID,f.TID,f.TXN_TYPE,f.HOST_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
			 * +
			 * " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.MID in (:mid,:umMid) and "
			 * +
			 * "f.TXN_TYPE = :txnType and f.TIME_STAMP between DATE_SUB(now(),INTERVAL 20 DAY) and now() "
			 * + "order by f.TIME_STAMP desc";
			 */

			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID,f.TID,f.TXN_TYPE,f.HOST_TYPE,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.RRN,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','B') and f.MID in (:mid) and "
					+ "f.TXN_TYPE = :txnType  " + "order by f.TIME_STAMP desc limit 1000";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
			sqlQuery.setString("txnType", txnType);
			sqlQuery.setString("mid", mid);
			// sqlQuery.setString("umMid", umMid);
		} else {
			/*
			 * sql2 =
			 * "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
			 * +
			 * "f.TRX_ID,f.TID,f.TXN_TYPE,f.HOST_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
			 * +
			 * " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.MID in (:mid,:umMid) and "
			 * +
			 * "f.TXN_TYPE is NULL and f.TIME_STAMP between DATE_SUB(now(),INTERVAL 20 DAY) and now()"
			 * + "order by f.TIME_STAMP desc";
			 */

//			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
//					+ "f.TRX_ID,f.TID,f.TXN_TYPE,f.HOST_TYPE,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.RRN,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
//					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P','B') and f.MID in (:mid) and "
//					+ "f.TXN_TYPE is NULL " + "order by f.TIME_STAMP desc limit 1000";
			
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID,f.TID,f.TXN_TYPE,f.HOST_TYPE,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.RRN,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " INNER JOIN MID m on f.MID=m.MID"
					+ " INNER JOIN MERCHANT a on a.MID_FK=m.ID"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','B') and f.MID in (:mid) and IFNULL(a.MERCHANT_TYPE,'') not like 'U' and"
					+ " f.TXN_TYPE is NULL  " + "order by f.TIME_STAMP desc limit 1000";
			
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
			// sqlQuery.setString("txnType", txnType);
			sqlQuery.setString("mid", mid);
			// sqlQuery.setString("umMid", umMid);
		}
		logger.info("Query : " + sql2);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[2].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT
				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}

			// logger.info(rec[7].toString());
			if (rec[7] != null) {
				fs.setPan(rec[7].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 16);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// trxid
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("UMOBILE EZYMOTO");
					} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
						fs.setTxnType("UMOBILE EZYREC");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("UMOBILE EZYPASS");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("UMOBILE EZYWAY");
					}
				} else {
					fs.setTxnType("UMOBILE");
				}
			} else {
				if (rec[10] != null) {
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					}
				} else {
					fs.setTxnType("EZYWIRE");
				}
			}

			if (rec[12] != null) {

				fs.setInvoiceId(rec[12].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[13] != null) {

				fs.setNumOfRefund(rec[13].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[14] != null) {

				fs.setRrn(rec[14].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[15] != null) {

				fs.setAidResponse(rec[15].toString());
			} else {
				fs.setAidResponse("");
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	// getEzyPODTransForSettlement

	public void getUMMidTransForSettlement(PaginationBean<ForSettlement> paginationBean, String umMid, String txnType) {
		logger.info("In dao impl******* " + umMid);

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String sql2 = null;

		Query sqlQuery = null;
		if (txnType != null) {
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.MID= :umMid and "
					+ "f.TXN_TYPE = :txnType and f.HOST_TYPE='U' and f.TIME_STAMP between DATE_SUB(now(),INTERVAL 20 DAY) and now() "
					+ "order by f.TIME_STAMP desc";

			sqlQuery.setString("txnType", txnType);
		} else {
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.MID= :umMid and "
					+ "f.TXN_TYPE is NULL and f.HOST_TYPE='U' and f.TIME_STAMP between DATE_SUB(now(),INTERVAL 20 DAY) and now()"
					+ "order by f.TIME_STAMP desc";

		}
		logger.info("Query : " + sql2);
		sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("umMid", umMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT
				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setPan(rec[7].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// trxid
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setTxnType(rec[10].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("EZYREC") || fs.getTxnType().equals("RECURRING")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("EZYPASS")) {
					fs.setTxnType("EZYPASS");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				}
			} else {
				fs.setTxnType("UMOBILE");
			}
			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void getForSettlementnonmerchant(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl non merchant*******");
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchForSettlement(String fromDate, String toDate, String tid, final String status,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data : " + fromDate + " " + toDate + " " + tid + " " + status);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@Override
	public void searchAllForSettlement(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, String tid, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);
		String mid = null, motoMid = null, ezywayMid = null, ezyrecMid = null, ezypassMid = null;
		String umMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
					&& (!status.isEmpty() && status != null)) {
				logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
						+ "status: " + status);

				sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :mid and f.TID= :tid and f.TXN_TYPE IS NULL order by f.TIME_STAMP desc limit 1000";

				/*
				 * sql =
				 * "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID,a.LOCATION"
				 * +
				 * ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
				 * +
				 * "a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID or "
				 * +
				 * "a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in "
				 * + "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and f.TID= :tid "
				 * +
				 * "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 5000"
				 * ;
				 */
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("status", status);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("mid", mid);
				/*
				 * sqlQuery.setString("motoMid", motoMid); sqlQuery.setString("ezywayMid",
				 * ezywayMid); sqlQuery.setString("ezyrecMid", ezyrecMid);
				 * sqlQuery.setString("ezypassMid", ezypassMid); sqlQuery.setString("umMid",
				 * umMid);
				 */
				sqlQuery.setString("tid", tid);
			}

			else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
				logger.info("inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: "
						+ status);

				/*
				 * sql =
				 * "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
				 * + "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t" +
				 * " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and f.TIME_STAMP"
				 * + " between :fromDate  and :toDate " +
				 * "and f.MID= :mid and f.TID= :tid and f.TXN_TYPE IS NULL order by f.TIME_STAMP desc limit 4000"
				 * ;
				 */

				sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :mid and f.TID= :tid and f.TXN_TYPE IS NULL order by f.TIME_STAMP desc limit 1000";

				/*
				 * sql =
				 * "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID," +
				 * "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
				 * +
				 * "or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID "
				 * + "or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
				 * + "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in " +
				 * "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and f.TID= :tid and a.TIME_STAMP between "
				 * + ":fromDate and :toDate order by a.TIME_STAMP desc limit 5000";
				 */
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("mid", mid);
				/*
				 * sqlQuery.setString("motoMid", motoMid); sqlQuery.setString("ezywayMid",
				 * ezywayMid); sqlQuery.setString("ezyrecMid", ezyrecMid);
				 * sqlQuery.setString("ezypassMid", ezypassMid); sqlQuery.setString("umMid",
				 * umMid);
				 */
				sqlQuery.setString("tid", tid);
			}

			else if ((status != null) || (!status.isEmpty())) {
				logger.info("status not null: " + status);
				sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in (:status) "
						+ "and f.MID= :mid and f.TID= :tid and f.TXN_TYPE IS NULL order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			}

			else {
				logger.info("status: " + status);

				sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') "
						+ "and f.MID= :mid and f.TID= :tid and f.TXN_TYPE IS NULL order by f.TIME_STAMP desc limit 1000";

				/*
				 * sql = "select f.BUSINESS_NAME ,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,"
				 * +
				 * "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
				 * +
				 * "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
				 * +
				 * "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS "
				 * + "in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in " +
				 * "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and f.TID= :tid order by "
				 * + "a.TIME_STAMP desc limit 5000";
				 */
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				/*
				 * sqlQuery.setString("motoMid", motoMid); sqlQuery.setString("ezywayMid",
				 * ezywayMid); sqlQuery.setString("ezyrecMid", ezyrecMid);
				 * sqlQuery.setString("ezypassMid", ezypassMid); sqlQuery.setString("umMid",
				 * umMid);
				 */
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
					&& (!status.isEmpty() && status != null)) {
				logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
						+ "status: " + status);

				/*
				 * sql =
				 * "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID,a.LOCATION"
				 * +
				 * ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
				 * +
				 * "a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID or "
				 * +
				 * "a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in  "
				 * +
				 * "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
				 * ;
				 */

				sql = "select a.TIME_STAMP,a.TIME,a.STATUS,a.STAN,a.AMOUNT,a.LOCATION,a.MID,a.PAN,a.TRX_ID,a.TID, "
						+ "a.AID_RESPONSE,a.CARD_TYPE,a.BatchNo,a.RRN,a.INVOICE_ID,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
						+ "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
						+ "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where "
						+ " a.STATUS =:status and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between :fromDate and :toDate order by "
						+ "a.TIME_STAMP desc limit 1000";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("status", status);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("umMid", umMid);
			}

			else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
				logger.info("inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: "
						+ status);

				/*
				 * sql =
				 * "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID," +
				 * "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
				 * +
				 * "or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID "
				 * + "or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
				 * + "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in " +
				 * "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between "
				 * + ":fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				 */

				sql = "select a.TIME_STAMP,a.TIME,a.STATUS,a.STAN,a.AMOUNT,a.LOCATION,a.MID,a.PAN,a.TRX_ID,a.TID, "
						+ "a.AID_RESPONSE,a.CARD_TYPE,a.BatchNo,a.RRN,a.INVOICE_ID,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
						+ "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
						+ "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS "
						+ "in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between :fromDate and :toDate order by "
						+ "a.TIME_STAMP desc limit 1000";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("umMid", umMid);
			} else {
				logger.info("status: " + status);
				/*
				 * sql = "select f.BUSINESS_NAME ,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,"
				 * +
				 * "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
				 * +
				 * "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
				 * +
				 * "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS "
				 * + "in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in " +
				 * "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) order by " +
				 * "a.TIME_STAMP desc limit 1000";
				 */

				sql = "select a.TIME_STAMP,a.TIME,a.STATUS,a.STAN,a.AMOUNT,a.LOCATION,a.MID,a.PAN,a.TRX_ID,a.TID, "
						+ "a.AID_RESPONSE,a.CARD_TYPE,a.BatchNo,a.RRN,a.INVOICE_ID,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
						+ "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
						+ "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS "
						+ "in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) order by "
						+ "a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("umMid", umMid);
			}

		}
		// f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN
		logger.info("Query : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setAidResponse(rec[10].toString());
			}
			if (rec[11] != null) {
				fs.setCardType(rec[11].toString());
			}
			if (rec[12] != null) {
				fs.setBatchNo(rec[12].toString());
			}
			if (rec[13] != null) {
				fs.setRrn(rec[13].toString());
			}

			if (rec[14] != null) {
				fs.setInvoiceId(rec[14].toString());
			}

			if (rec[15] != null) {
				fs.setPinEntry(rec[15].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void searchUMForSettlement(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);
		String ummid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		/*
		 * if(merchant.getMid().getMotoMid()!=null){
		 * motoMid=merchant.getMid().getMotoMid(); }
		 * if(merchant.getMid().getMotoMid()!=null){
		 * ezywayMid=merchant.getMid().getEzywayMid(); }
		 * if(merchant.getMid().getMotoMid()!=null){
		 * ezyrecMid=merchant.getMid().getEzyrecMid(); }
		 * if(merchant.getMid().getMotoMid()!=null){
		 * ezypassMid=merchant.getMid().getEzypassMid(); }
		 */

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteriaif: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);
logger.info(ummid +"middd");
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION"
					+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in (:ummid) "
					+ "and a.HOST_TYPE='U' and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("ummid", ummid);
			logger.info(ummid +"midddb");
			// }
		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteriaelseif: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			logger.info(ummid +"middd");
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,"
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and "
					+ "a.MID in (:ummid) and a.HOST_TYPE='U' and a.TIME_STAMP between :fromDate and :toDate"
					+ " order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("ummid", ummid);
			logger.info(ummid +"midddb");
		}

		else {
			logger.info("status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,"
					+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and "
					+ "a.MID in (:ummid) and a.HOST_TYPE='U' order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("ummid", ummid);

		}

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null, rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}

			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;

				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			// logger.info("check status: "+fs.getStatus());

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			}

			if (rec[8] != null) {
				// BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(new BigInteger(rec[8].toString()));

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
			}
			if (rec[10] != null) {
				fs.setTxnType(rec[10].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				}
			} else {
				fs.setTxnType("UMOBILE");
			}

			if (rec[11] != null) {
				fs.setInvoiceId(rec[11].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[12] != null) {
				fs.setNumOfRefund(rec[12].toString());
			} else {
				fs.setNumOfRefund("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	/*
	 * public void getBoostTransactionbyMerchant(PaginationBean<ForSettlement>
	 * paginationBean, ArrayList<Criterion> props) {
	 * 
	 * @Override
	 */
	@Override
	public void getAllTransactionbyMerchant(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			Merchant merchant) {

		// logger.info("mid for all transaction: "+merchant.getMid().getMid()+" :
		// "+merchant.getMid().getMotoMid());
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		String mid = null, motoMid = null, ezywayMid = null, ezyrecMid = null, ezypassMid = null;
		String umMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		
		//new date condition - 29/12/2020
		
		
		Date dt = new Date();
		
		String fromDate = null, toDate = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		fromDate = dateFormat.format(dt);
		// logger.info("change date format:" + from);
		// from = from + "-01";
		String from1 = fromDate.substring(0, fromDate.length() - 2);
		fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
		System.out.println("change date format:" + fromDate);

		Date dt1 = new Date();
		SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
		toDate = dateFormat1.format(dt1);
		String to1 = toDate.substring(0, toDate.length() - 2);
		toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
		System.out.println("date format:" + toDate);
		
		logger.info("check date and year : " + fromDate + "  " + toDate);
		logger.info("mid" + mid);
		logger.info("motoMid" + motoMid);
		logger.info("ezywayMid" + ezywayMid);
		logger.info("ezyrecMid" + ezyrecMid);
		logger.info("ezypassMid" + ezypassMid);
		logger.info("umMid" + umMid);
		sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,"
				+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE,a.RRN,a.AID_RESPONSE,a.INVOICE_ID from FOR_SETTLEMENT a INNER JOIN MID m on "
				+ "a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
				+ "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC','B') and a.MID in "
				+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between "
				+ ":fromDate and :toDate order by a.TIME_STAMP desc limit 100";

		/*
		 * sql =
		 * "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','CT','C','R','CV','P') order by a.TIME_STAMP desc limit 1000"
		 * ;
		 */
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("mid", mid);
		sqlQuery.setString("motoMid", motoMid);
		sqlQuery.setString("ezywayMid", ezywayMid);
		sqlQuery.setString("ezyrecMid", ezyrecMid);
		sqlQuery.setString("ezypassMid", ezypassMid);
		sqlQuery.setString("umMid", umMid);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				// set amount
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
			} else {
				fs.setAmount("0.00");
			}

			if (rec[4] != null) {
				// status
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			// SET TIME
			if (rec[3] != null) {
				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
					// logger.info("time for normal trans: "+fs.getTime());
				} catch (ParseException e) {
				}
			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			}

			if (rec[8] != null) {
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					}
				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				if (rec[10] != null) {
					// a.LOCATION
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("EZYPASS")) {
						fs.setTxnType("EZYPASS");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					}
				} else {
					fs.setTxnType("EZYWIRE");
				}
			}

			if (rec[12] != null) {

				fs.setRrn(rec[12].toString());
			}
			if (rec[13] != null) {

				fs.setAidResponse(rec[13].toString());
			}
			if (rec[14] != null) {

				fs.setInvoiceId(rec[14].toString());
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void getAllUMTransactionbyMerchant(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			Merchant merchant) {

		// logger.info("mid for all transaction: "+merchant.getMid().getMid()+" :
		// "+merchant.getMid().getMotoMid());
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		String ummid = null;
		String ummotoMid = null;
		String umezywayMid = null;
		String umezyrecMid = null;
		String umezypassMid = null;

		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}
		logger.info("UMobile MID: " + ummid);
		/*
		 * if(merchant.getMid().getMotoMid()!=null){
		 * motoMid=merchant.getMid().getMotoMid(); }
		 * if(merchant.getMid().getEzywayMid()!=null){
		 * ezywayMid=merchant.getMid().getEzywayMid(); }
		 * if(merchant.getMid().getEzywayMid()!=null){
		 * ezyrecMid=merchant.getMid().getEzyrecMid(); }
		 * if(merchant.getMid().getEzypassMid()!=null){
		 * ezypassMid=merchant.getMid().getEzypassMid(); }
		 */
//		Date date = new Date();
//
//		// Date fromDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new
//		// SimpleDateFormat("dd/MM/yyyy").parse(date));
//
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDateToSearch = null;
//		String toDateToSearch = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
//					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
//					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		
		//new date condition - 29/12/2020
		Date dt = new Date();
				
				String fromDateToSearch = null, toDateToSearch = null;

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				fromDateToSearch = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = fromDateToSearch.substring(0, fromDateToSearch.length() - 2);
				fromDateToSearch = from1 + String.format("%02d", -1 + Integer.valueOf(fromDateToSearch.substring(8, 10)));
				System.out.println("change date format:" + fromDateToSearch);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				toDateToSearch = dateFormat1.format(dt1);
				String to1 = toDateToSearch.substring(0, toDateToSearch.length() - 2);
				toDateToSearch = to1 + String.format("%02d", 1 + Integer.valueOf(toDateToSearch.substring(8, 10)));
				System.out.println("date format:" + toDateToSearch);
				
		
		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,"
				+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.INVOICE_ID,t.CARD_HOLDER_NAME,a.RRN,t.MASKED_PAN,a.AID_RESPONSE from FOR_SETTLEMENT a INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID INNER JOIN MID m on "
				+ "a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
				+ "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and "
				+ " a.MID in (:ummid) and f.MERCHANT_TYPE='U' and a.TIME_STAMP between "
				+ ":fromDateToSearch and :toDateToSearch order by a.TIME_STAMP desc limit 1000";

		/*
		 * sql =
		 * "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','CT','C','R','CV','P') order by a.TIME_STAMP desc limit 1000"
		 * ;
		 */
		sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("ummid", ummid);
		/*
		 * sqlQuery.setString("motoMid", motoMid); sqlQuery.setString("ezywayMid",
		 * ezywayMid); sqlQuery.setString("ezyrecMid", ezyrecMid);
		 * sqlQuery.setString("ezypassMid", ezypassMid);
		 */
		sqlQuery.setString("fromDateToSearch", fromDateToSearch);
		sqlQuery.setString("toDateToSearch", toDateToSearch);

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());

				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				// set amount
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
			} else {
				fs.setAmount("0.00");
			}

			if (rec[4] != null) {
				// status
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			// SET TIME
			if (rec[3] != null) {
				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
					// logger.info("time for normal trans: "+fs.getTime());
				} catch (ParseException e) {
				}
			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			}

			if (rec[8] != null) {
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
			}
			if (rec[10] != null) {
				// a.LOCATION
				fs.setTxnType(rec[10].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if (fs.getTxnType().equals("EZYPASS")) {
					fs.setTxnType("EZYPASS");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}

			if (rec[11] != null) {
				fs.setInvoiceId(rec[11].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[12] != null) {
				fs.setNumOfRefund(rec[12].toString());
			} else {
				fs.setNumOfRefund("");
			}

			if (rec[13] != null) {
				fs.setRrn(rec[13].toString());
			} else {
				fs.setRrn("");
			}

			if (rec[14] != null) {
				fs.setPan(rec[14].toString());
			} else {
				fs.setPan("");
			}

			if (rec[15] != null) {
				fs.setAidResponse(rec[15].toString());
			} else {
				fs.setAidResponse("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void boostTransactionbyMerchant(String fromDate, String toDate, String tid, String status,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "  toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		String mid = null;
		String motoMid = null;
		String ezypassMid = null;
		String ezyrecMid = null;
		String ezywayMid = null;
		String umezywayMid = null;
		String ummid = null;
		String ummotoMid = null;
		
		if (merchant.getMid().getMid() != null) {
			System.out.println("mid: " + merchant.getMid().getMid().toString());
			mid = merchant.getMid().getMid();

		}
		if (merchant.getMid().getMotoMid() != null) {
			System.out.println("moto mid: " + merchant.getMid().getMotoMid().toString());
			motoMid = merchant.getMid().getMotoMid();
		}
		
		if (merchant.getMid().getUmMid() != null) {
			System.out.println("um mid: " + merchant.getMid().getUmMid().toString());
			ummid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			System.out.println("um mid: " + merchant.getMid().getUmEzywayMid().toString());
			umezywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			System.out.println("um mid: " + merchant.getMid().getUmMotoMid().toString());
			ummotoMid = merchant.getMid().getUmMotoMid();
		}
		
		
		
		if (merchant.getMid().getEzypassMid() != null) {
			System.out.println("ezypass mid: " + merchant.getMid().getEzypassMid().toString());
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			System.out.println("ezyrec mid: " + merchant.getMid().getEzyrecMid().toString());
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			System.out.println("ezyway mid: " + merchant.getMid().getEzywayMid().toString());
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "  toDate: " + toDate
					+ "status: " + status);
			/*
			 * if(status=="BP" || status.equals("BP")) {
			 * logger.info("checking status bp and bpa"); sql =
			 * "select a.DATE,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID "
			 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
			 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
			 * "where a.STATUS in ('BPA','BP') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
			 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			 * //sqlQuery.setString("status", status); sqlQuery.setString("fromDate",
			 * fromDate); sqlQuery.setString("toDate", toDate); } else {
			 * logger.info("else checking all status: "+status);
			 */
			sql = "select a.DATE,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.UM_MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID or a.MID=m.UM_EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.MID in ('" + mid + "'" + ",'" + motoMid + "'"
					+ ",'" + ummotoMid + "'" + ",'" + ummid + "'" + ",'" + umezywayMid + "'" + ",'" + ezywayMid + "'" + ",'" + ezyrecMid + "') and "
					// + "where a.MID in (:mid,:motoMid) and "
					+ "a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			/*
			 * sqlQuery.setString("mid", mid); sqlQuery.setString("motoMid", motoMid);
			 */
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			// }
		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select a.DATE,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.UM_MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID or a.MID=m.UM_EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.MID in ('" + mid + "'" + ",'" + motoMid + "'"
					+ ",'" + ummotoMid + "'" + ",'" + ummid + "'" + ",'" + umezywayMid + "'" + ",'" + ezywayMid + "'" + ",'" + ezyrecMid + "') and "
					+ "a.STATUS in ('BPS','BPA','BP','BPC') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}

		else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or  "
					+ "a.MID=m.UM_MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID or a.MID=m.UM_EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.MID in ('" + mid + "'" + ",'" + motoMid + "'"
					+ ",'" + ummotoMid + "'" + ",'" + ummid + "'" + ",'" + umezywayMid + "'" + ",'" + ezywayMid + "'" + ",'" + ezyrecMid + "') and "
					+ "a.STATUS in ('BPS','BPA','BP','BPC') order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}
		/*
		 * m.activateDate, m.
		 * activateDate"select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null)

			{
				// businessname
				fs.setDate(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {
				// a.TIME
				fs.setTime(rec[3].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			// logger.info("check status: "+fs.getStatus());
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				/*
				 * if(fs.getStatus().equals("BOOST PENDING")
				 * ||fs.getStatus().equals("BOOST PAYMENT") ||
				 * fs.getStatus().equals("BOOST SETTLED") || fs.getStatus().equals("BOOST VOID")
				 * || fs.getStatus()=="BOOST PENDING" || fs.getStatus()=="BOOST PAYMENT" ||
				 * fs.getStatus()=="BOOST SETTLED" || fs.getStatus()=="BOOST CANCELLED" ) {
				 */
				// logger.info("inside if status: "+fs.getStatus()+rec[2].toString());
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
				// }

			}
			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					// if(!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH
					// CANCELLED")){
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
					// }
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
				logger.info("location: " + fs.getLocation());
			} else {
				// fs.setLocation("NIL");
			}

			if (rec[8] != null) {
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);

			}
			if (rec[9] != null) {

				fs.setStan(rec[9].toString());
				// logger.info("stan: "+fs.getStan());
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchForSettlementnew(String fromDate, String toDate, PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data : " + fromDate + " " + toDate);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchForSettlementcash(String fromDate, String toDate, PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data : " + fromDate + " " + toDate);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchcardDetails(String fromDate, String toDate, String tid, final String status,
			PaginationBean<ForSettlement> paginationBean, Merchant merchant) {
		String sql2 = null;
		Query sqlQuery = null;
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);
		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		String mid = null, umMid = null;
		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (fromDate == null || fromDate.equals("")) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			fromDate = dateFormat.format(dt);
			fromDate = fromDate + "-01";

		} else {
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				fromDate = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (toDate == null || toDate.equals("")) {
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			toDate = dateFormat1.format(dt1);

		} else {

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				toDate = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
				&& !(status.isEmpty())) {
			logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t "
					+ "where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
					+ "between :fromDate and :toDate and f.MID in (:mid,:umMid) and f.TXN_TYPE is Null "
					+ "order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("umMid", umMid);
			sqlQuery.setString("status", status);
		} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
			logger.info("else if: ");
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN,"
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
					+ "where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.TIME_STAMP "
					+ "between :fromDate and :toDate and f.MID in (:mid,:umMid) and f.TXN_TYPE is Null "
					+ "order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("umMid", umMid);

		} else {
			logger.info("inside else:");
			sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN,"
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
					+ "where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') "
					+ "and f.MID in (:mid,:umMid) and f.TXN_TYPE is Null order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("umMid", umMid);

		}
		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			if (rec[10] != null) {
				// stan
				fs.setAidResponse(rec[10].toString());
			}

			if (rec[11] != null) {
				// stan
				fs.setCardType(rec[11].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@SuppressWarnings("unchecked")
	public void searchnonmerchantForSettlement(String fromDate, String toDate,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props) {
		// http://www.mkyong.com/hibernate/hibernate-criteria-examples/

		logger.info("Data searchnonmerchantForSettlement: " + fromDate + " " + toDate);

		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));

	}

	@Override
	public List<TerminalDetails> getTerminalDetails(final String merchantId) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.eq("merchantId", merchantId)).list();
		return td;
	}

	@Override
	public List<TerminalDetails> getTerminalDetails(final Merchant merchant) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = null;
		if (merchant.getMerchantType() != null) {
			td = super.getSessionFactory().createCriteria(TerminalDetails.class)
					.add(Restrictions.in("merchantId", new String[] { merchant.getMid().getUmMid() })).list();
		} else {
			td = super.getSessionFactory().createCriteria(TerminalDetails.class).add(Restrictions.in("merchantId",
					new String[] { merchant.getMid().getMid(), merchant.getMid().getUmMid() })).list();

		}

		return td;
	}

	// getEzywireTerminalDetails

	@Override
	public List<TerminalDetails> getEzywireTerminalDetails(final Merchant merchant) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = null;
		// if(merchant.getMerchantType()!=null) {
		td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { merchant.getMid().getMid() })).list();
		/*
		 * }else { td = super.getSessionFactory() .createCriteria(TerminalDetails.class)
		 * .add(Restrictions.in("merchantId", new String[]
		 * {merchant.getMid().getMid(),merchant.getMid().getUmMid()})).list();
		 * 
		 * }
		 */

		return td;
	}

	@Override
	public List<TerminalDetails> getGpayTerminalDetails(final Merchant merchant) {
		@SuppressWarnings("unchecked")
		List<TerminalDetails> td = null;
		// if(merchant.getMerchantType()!=null) {
		td = super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { merchant.getMid().getGpayMid() })).list();
		/*
		 * }else { td = super.getSessionFactory() .createCriteria(TerminalDetails.class)
		 * .add(Restrictions.in("merchantId", new String[]
		 * {merchant.getMid().getMid(),merchant.getMid().getUmMid()})).list();
		 * 
		 * }
		 */

		return td;
	}

	@Override
	public List<TerminalDetails> getTerminalDetails(final String merchantId, String motoMid, String ezyrecMid) {

		return super.getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.in("merchantId", new String[] { merchantId, motoMid, ezyrecMid })).list();
	}

	@Override
	public List<MobileUser> getMobileUser(final String motoTid) {

		// logger.info("check tid: "+motoTid);
		List<MobileUser> td = super.getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("motoTid", motoTid)).list();
		return td;
	}

	@Override
	public MobileUser getMobileUserByMotoTid(final String motoTid) {

		// logger.info("check tid: "+motoTid);

		return (MobileUser) getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("motoTid", motoTid)).setMaxResults(1).uniqueResult();
	}

	public MobileUser getMobileUserByAuthTid(final String motoTid) {

		// logger.info("check tid: "+motoTid);

		return (MobileUser) getSessionFactory().createCriteria(MobileUser.class)
				.add(Restrictions.eq("motoTid", motoTid)).add(Restrictions.eq("preAuth", "Yes")).setMaxResults(1)
				.uniqueResult();
	}

	@Override
	public TransactionResponse loadTransactionResponse(String trx_id) {
		// TODO Auto-generated method stub
		BigInteger txId = new BigInteger(trx_id);
		return (TransactionResponse) sessionFactory.getCurrentSession().createCriteria(TransactionResponse.class)
				.add(Restrictions.eq("txnId", txId)).setMaxResults(1).uniqueResult();
	}

	@Override
	public TransactionRequest loadTransactionRequest(String trx_id) {
		BigInteger txnId = new BigInteger(trx_id);
		return (TransactionRequest) sessionFactory.getCurrentSession().createCriteria(TransactionRequest.class)
				.add(Restrictions.eq("txnId", txnId)).setMaxResults(1).uniqueResult();
	}

	@Override
	public ForSettlement getForSettlement(String trxId) {
		BigInteger trx = new BigInteger(trxId);
		ForSettlement fSettlement = (ForSettlement) sessionFactory.getCurrentSession()
				.createCriteria(ForSettlement.class).add(Restrictions.eq("trxId", trx)).setMaxResults(1).uniqueResult();
		return fSettlement;

	}

	@Override
	public AgentResponseDTO loadAgentByName(String agentName) {
		System.out.println(agentName);

		ArrayList<MerchantSettlementDTO> merList = new ArrayList<MerchantSettlementDTO>();
		AgentResponseDTO agent = new AgentResponseDTO();
		// MerchantSettlementDTO merchant = new MerchantSettlementDTO();

		/*
		 * String sql2 = "select a.FIRST_NAME,a.ag_code, a.ag_city, a.ag_phoneno " +
		 * "from AGENT a  where a.FIRST_NAME='" + agentName + "'";
		 */

		String sql2 = "select a.FIRST_NAME,a.ag_code, a.ag_city, a.ag_phoneno "
				+ "from AGENT a  where a.FIRST_NAME= :agentName";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			// Agent ags = new Agent();
			agent.setAgName(rec[0].toString());
			agent.setAgCode(rec[1].toString());
			agent.setAgCity(rec[2].toString());
			agent.setAgPhoneNo(rec[3].toString());

		}
		/*
		 * String sql3 =
		 * "select m.business_name,m.business_address1,m.business_address2,m.city,m.postcode"
		 * + " from MERCHANT m, AGENT a  where a.id = m.agid_fk and a.FIRST_NAME='" +
		 * agentName + "'";
		 */
		String sql3 = "select m.business_name,m.business_address1,m.business_address2,m.city,m.postcode"
				+ " from MERCHANT m, AGENT a  where a.id = m.agid_fk and a.FIRST_NAME= :agentName";
		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql3);// .addEntity(ForSettlement.class);
		sqlQuery1.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet1 = sqlQuery1.list();
		for (Object[] rec : resultSet1) {
			MerchantSettlementDTO msd = new MerchantSettlementDTO();
			if (rec[0] != null) {
				msd.setMerchantName(rec[0].toString().toUpperCase());
			}
			// logger.info("MerchantName:" + rec[0].toString().toUpperCase());
			if (rec[1] != null) {
				msd.setMerchantAddr1(rec[1].toString());
			}
			// logger.info("Merchantaddr1:" + rec[1].toString());
			if (rec[2] != null) {
				msd.setMerchantAddr2(rec[2].toString());
			}
			// logger.info("MerchantAddr2:" + rec[2].toString());
			if (rec[3] != null) {
				msd.setMerchantCity(rec[3].toString());
			}
			// logger.info("Merchantcity:" + rec[3].toString());
			if (rec[4] != null) {
				msd.setMerchantPostcode(rec[4].toString());
			}
			// logger.info("MerchantPostcode:" + rec[4].toString());

			/*
			 * String sqlterminal =
			 * "select count(*) from TERMINAL_DETAILS where merchant_id in (select mid from MID where id in (select mid_fk from MERCHANT"
			 * + " where business_name='" + rec[0].toString() + "'))";
			 */
			String sqlterminal = "select count(*) from TERMINAL_DETAILS where merchant_id in "
					+ "(select mid from MID where id in (select mid_fk from MERCHANT" + " where business_name= :name))";
			Query queryTerminal = super.getSessionFactory().createSQLQuery(sqlterminal);// .addEntity(ForSettlement.class);
			queryTerminal.setString("name", rec[0].toString());
			@SuppressWarnings({ "unchecked", "rawtypes" })
			List resultSetTerminal = queryTerminal.list();// list();

			msd.setNoOfTid(resultSetTerminal.get(0).toString());

			merList.add(msd);

		}

		agent.setMerSettle(merList);
		return agent;
		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());
	}

	@Override
	public void loadTerminalByName(final PaginationBean<TerminalDTO> paginationBean, String businessName) {
		// logger.info(businessName);
		ArrayList<TerminalDTO> tdtoList = new ArrayList<TerminalDTO>();

		/*
		 * String sql =
		 * "select device_id, device_name, device_type,tid from TERMINAL_DETAILS " +
		 * "where merchant_id in (select merchant_id from MERCHANT where business_name='"
		 * + businessName + "')";
		 */
		String sql = "select device_id, device_name, device_type,tid from TERMINAL_DETAILS "
				+ "where merchant_id in (select merchant_id from MERCHANT where business_name=" + ":businessName )";
		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery1.setString("businessName", businessName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet1 = sqlQuery1.list();
		for (Object[] rec : resultSet1) {
			TerminalDTO tdto = new TerminalDTO();
			tdto.setDeviceId(rec[0].toString());
			if (rec[1] != null) {
				tdto.setDeviceName(rec[1].toString());
			} else {
				tdto.setDeviceName("");
			}
			// System.out.println("DeviceName:" + rec[1].toString());
			if (rec[2] != null) {
				tdto.setDeviceType(rec[2].toString());
			} else {
				tdto.setDeviceType("");
			}
			// System.out.println("DeviceType:" + rec[2].toString());
			if (rec[3] != null) {
				tdto.setTid(rec[3].toString());
			} else {
				tdto.setTid("");
			}

			// System.out.println("Tid:" + rec[3].toString());
			tdtoList.add(tdto);
		}

		paginationBean.setItemList(tdtoList);
		paginationBean.setTotalRowCount(tdtoList.size());

	}

	@Override
	public List<ForSettlement> exportAllTransaction(final ArrayList<Criterion> props, final String date,
			final String date1, final String txnType) {
		// logger.info("Inside listAllTransaction");
		String dat = null;
		String dat1 = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if (date == null || date.equals("")) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			dat = dateFormat.format(dt);
			dat = dat + "-01";

		} else {

			dat = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (date1 == null || date1.equals("")) {
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			dat1 = dateFormat1.format(dt1);

		} else {

			dat1 = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("check date: " + dat + " : " + dat1);
		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date ,a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.ag_name "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and DATE between '" + dat + "' and '" + dat1 +
		 * "' and a.txn_year between '"
		 * +year1+"' and '"+year2+"' group by a.MID,a.DATE order by a.DATE desc" ;
		 */

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date ,a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "' group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("inside all type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.GPAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A','CT','BPS','BPA','GPS','GPP') and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYWIRE")) {
			logger.info("inside card type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
					+ " ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A') and a.TXN_TYPE is NULL and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("BOOST")) {
			logger.info("inside boost type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "INNER JOIN MERCHANT f " + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('BPS','BPA') and a.TXN_TYPE='BOOST' and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYMOTO")) {
			logger.info("inside moto type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A') and a.TXN_TYPE='MOTO' and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYLINK")) {
			logger.info("inside moto type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A') and a.TXN_TYPE='EZYLINK' and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYREC")) {
			logger.info("inside EZYREC type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYWAY")) {
			logger.info("inside EZYWAY type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYCASH")) {
			logger.info("inside cash type");
			sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
					+ " ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('CT') and a.TXN_TYPE='CASH' and time_stamp between :dat and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYRECPLUS")) {
			logger.info("inside EZYRECPLUS: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('A','S') and a.TXN_TYPE='RECPLUS' and a.time_stamp between :dat  and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		} else if (txnType.equals("GRABPAY")) {
			logger.info("inside GRABPAY: " + txnType);
			sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
					+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.GPAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where a.status in ('GPS','GPP') and a.TXN_TYPE='GRABPAY' and a.time_stamp between :dat  and :dat1"
					+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat);
		sqlQuery.setString("dat1", dat1);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("No of Records: " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			fs.setLocation(rec[0].toString());
			fs.setMerchantName(rec[1].toString().toUpperCase());

			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			fs.setDate(rd);

			// logger.info("check date: "+fs.getDate());
			fs.setStatus(rec[7].toString());
			// logger.info("check status: "+fs.getStatus());
			/*
			 * if((fs.getStatus().equals("BP") || fs.getStatus().equals("BPA") ||
			 * fs.getStatus().equals("BPS")) || (fs.getStatus()=="BP" ||
			 * fs.getStatus()=="BPS" || fs.getStatus()=="BPA") ) {
			 * //logger.info("inside if check status: "+fs.getStatus()); Double d = new
			 * Double(rec[3].toString()); d = d / 100; String pattern = "#,##0.00";
			 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
			 * myFormatter.format(d); fs.setAmount(output); } else {
			 */
			// logger.info("inside else check status: "+fs.getStatus());
			Double d = new Double(rec[3].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			// }

			fs.setAgentName(rec[4].toString());
			String rd1 = null;
			if (rec[5] != null) {
				try {
					rd1 = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
			}
			fs.setNumOfRefund(rd1);
			fs.setMid(rec[6].toString());
			/*
			 * if(rec[8]!=null){ fs.setTrxId(new BigInteger(rec[8].toString())); } else {
			 * fs.setTxnType("CARD"); }
			 */

			if (rec[8] != null) {
				fs.setTxnType(rec[8].toString());

				logger.info("fs.txntype" + fs.getTxnType());

				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("EZYLINK")) {
					fs.setTxnType("EZYLINK");
				} else if (fs.getTxnType().equals("EZYMOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("BOOST")) {
					fs.setTxnType("BOOST");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if ((fs.getTxnType().equals("EZYREC")) || (fs.getTxnType().equals("RECURRING"))) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);
		}
		return fss;
	}

	@Override
	public void listAllTransactionDetails(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String date, String date1) {

		logger.info("Inside listAllTransactionDetails : " + date + "     " + date1);
		super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props, Order.desc("timeStamp"));
	}

	@Override
	public void MerchantTransactionSummByAdmin(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status) {

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		int year = calendar.getWeekYear();
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();

		String dateorg1 = day + "/" + mon + "/" + year;
		String dateorg2 = daybefore + "/" + mon + "/" + year;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromDate));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(toDate));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
		}
		logger.info("inside MerchantTransactionSummByAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);
		if (status != null && !status.isEmpty()) {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,"
					+ "a.TXN_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.STATUS='S' and a.TIME_STAMP "
					+ "between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}
		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
				fs.setDate(rd);

				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					fs.setTime(rt);

				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
			}
			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[3] != null) {

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}

			}
			if (rec[4] != null) {
				// a.TID
				fs.setTid(rec[4].toString());

			}
			if (rec[5] != null) {
				// a.MID
				fs.setMid(rec[5].toString());
			}

			if (rec[6] != null) {
				fs.setTxnId(rec[6].toString());

			}

			if (rec[7] != null) {
				// a.LOCATION
				fs.setTxnType(rec[7].toString());
				if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("EZYPASS")) {
					fs.setTxnType("EZYPASS");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
					/*
					 * else if (fs.getTxnType().equals("CASH")) { fs.setTxnType("EZYCASH"); }
					 */
				} else {
					fs.setTxnType("EZYWIRE");
				}
			}
			fss.add(fs);

		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<ForSettlement> MerchantExportTrans(ArrayList<Criterion> props, String fromDate, String toDate,
			String status) {
		/*
		 * logger.info("inside MerchantTransactionSummByAdmin " + " from date: " +
		 * fromDate + "toDate: " + toDate + "status: " + status);
		 */
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		int year = calendar.getWeekYear();
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();

		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(fromDate));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(toDate));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			try {
				fromDate = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
				toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
		}
		logger.info("inside MerchantTransactionSummByAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);
		if (status != null && !status.isEmpty()) {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT,a.STATUS, a.TID,a.MID,a.TRX_ID,"
					+ "a.TXN_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " + "where a.STATUS='S' and a.TIME_STAMP "
					+ "between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}
		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setMerchantName(rec[0].toString());
			}
			if (rec[1] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
				fs.setDate(rd);

				try {
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					fs.setTime(rt);

				} catch (ParseException e) {
					logger.info(e.getMessage());
				}
			}
			if (rec[2] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[3] != null) {

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}

				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}

			}
			if (rec[4] != null) {
				// a.TID
				fs.setTid(rec[4].toString());

			}
			if (rec[5] != null) {
				// a.MID
				fs.setMid(rec[5].toString());
			}

			if (rec[6] != null) {
				fs.setTxnId(rec[6].toString());

			}

			if (rec[7] != null) {
				// a.LOCATION
				fs.setTxnType(rec[7].toString());
				if (fs.getTxnType().equals("RECURRING")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);

		}
		logger.info(fss.size());
		return fss;
		// paginationBean.setTotalRowCount(fss.size());
	}

	public void listAllTransactionDetailsbyAdmin(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props, String fromDate, String toDate, String status) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();

		// Date fromDate1 = new SimpleDateFormat("yyyy-MM-dd").format(new
		// SimpleDateFormat("dd/MM/yyyy").parse(date));

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,"
					+ "a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by "
					+ "a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC','B') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}

		else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or "
					+ "a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC','B') "
					+ "and a.TIME_STAMP between '" + fromDateToSearch + "' and '" + toDateToSearch + "' "
					+ " order by a.TIME_STAMP desc limit 1000";
			// logger.info(sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}
		/*
		 * m.activateDate, m.
		 * activateDate"select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			/*
			 * if(rec[3]!=null) { //a.TIME fs.setTime(rec[3].toString()); try {
			 * 
			 * 
			 * String rt = new SimpleDateFormat("HH:mm:ss").format(new
			 * SimpleDateFormat("HHmmss").parse(rec[3].toString()));
			 * //forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
			 * 
			 * fs.setTime(rt); } catch (ParseException e) {} }
			 */
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
				// fs.setStatus(rec[4].toString());
			}
			if (fs.getStatus().equals("BOOST PENDING") || fs.getStatus().equals("BOOST PAYMENT")
					|| fs.getStatus().equals("BOOST SETTLED") || fs.getStatus().equals("BOOST CANCELLED")
					|| fs.getStatus() == "BOOST PENDING" || fs.getStatus() == "BOOST PAYMENT"
					|| fs.getStatus() == "BOOST SETTLED" || fs.getStatus() == "BOOST CANCELLED") {
				// logger.info("time: "+rec[3].toString());

				// SET TIME
				if (rec[3] != null) {
					if (rec[3].toString().contains("T")) {
						// fs.setTime(rec[3].toString());
						try {
							String resTime = rec[3].toString().substring(11, 19);
							// logger.info("time T contains for boost:"+resTime);
							String rt = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(rec[3].toString()));
							// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
							fs.setTime(resTime);
						} catch (ParseException e) {
						}
					} else {
						String rt1;
						try {
							rt1 = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
							fs.setTime(rt1);
							// logger.info("time for boost: "+fs.getTime());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					}

				}
			} else {
				// SET TIME
				if (rec[1] != null) {
					try {
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

						fs.setTime(rt);
						// logger.info("time for normal trans: "+fs.getTime());
					} catch (ParseException e) {
					}
				}
			}
			// logger.info("check status: "+fs.getStatus());
			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				/*
				 * if(fs.getStatus().equals("BOOST PAYMENT") ||
				 * fs.getStatus().equals("BOOST SETTLED") ||
				 * fs.getStatus().equals("BOOST CANCELLED") || fs.getStatus()=="BOOST PAYMENT"
				 * || fs.getStatus()=="BOOST SETTLED" || fs.getStatus()=="BOOST CANCELLED" ) {
				 * //logger.info("inside if status: "+fs.getStatus()+rec[2].toString()); double
				 * amount=0; amount=Double.parseDouble(rec[2].toString());
				 * //forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
				 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
				 * myFormatter.format(amount); //System.out.println(" Amount :"+output);
				 * fs.setAmount(output); } else {
				 */
				// logger.info("inside else status: "+fs.getStatus()+rec[2].toString());
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;

				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
				/* } */

			}
			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				// logger.info("location: al: "+rec[7].toString());
				fs.setLocation(rec[7].toString());

			}

			if (rec[8] != null) {
				String trxId = rec[8].toString();
				BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(number);
				if (fs.getTrxId() != null) {
					TransactionRequest tr = loadTransactionRequest(trxId);
					if (tr != null) {
						if (tr.getMaskedPan() != null) {
							// logger.info("maskedpan: "+tr.getMaskedPan());
							fs.setPan(tr.getMaskedPan());
							String pan = fs.getPan().substring(fs.getPan().length() - 8);
							if (pan.contains("f")) {
								pan = pan.replaceAll("f", "X");
								fs.setPan(pan);
							} else {
								fs.setPan(pan);
							}
						} else {
							fs.setPan("NA");
						}
					}
				}

			}
			// logger.info("trxId: "+fs.getTrxId()+" pan: "+fs.getPan());
			if (rec[9] != null) {
				// a.LOCATION
				fs.setTxnType(rec[9].toString());
				if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("EZYLINK")) {
					fs.setTxnType("EZYLINK");
				} else if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYRECPLUS");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public List<ForSettlement> exportAllTransactionbyAdmin(final ArrayList<Criterion> props, final String fromDate,
			final String toDate, final String status) {
		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		/*
		 * if ((fromDate == null || toDate == null) || (fromDate.equals("") ||
		 * toDate.equals(""))) {
		 * 
		 */

		/*
		 * sql =
		 * " select f.DATE,f.TIME,f.STATUS, f.AMOUNT,f.TID,f.MID,f.LOCATION,f.TIME_STAMP,t.CONTACT_NAME "
		 * + "from FOR_SETTLEMENT f, TERMINAL_DETAILS t " + "where t.TID=f.TID ";
		 */
		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			/*
			 * if(status=="BP" || status.equals("BP")){ sql =
			 * "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
			 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID " +
			 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
			 * "where a.STATUS in ('BP','BPA') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
			 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql); //
			 * sqlQuery.setString("status", status); sqlQuery.setString("fromDate",
			 * fromDate); sqlQuery.setString("toDate", toDate); } else {
			 */
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS=:status and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			/* } */
		} else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info("inside status date criteria: " + "from date: " + fromDate + "toDate: " + toDate);
			sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID  or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('S','CT','C','R','CV','P','BP','BPS','BPA','BPC') and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.TXN_TYPE  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.EZYPASS_MID  or a.MID=m.GPAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.STATUS in ('S','CT','C','R','CV','P','BP','BPS','BPA','BPC') order by a.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}
		/*
		 * m.activateDate, m.
		 * activateDate"select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between :dat  and :dat1" +
		 * " group by a.MID,a.date order by a.time_stamp desc";
		 */

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {
				// a.TIME
				fs.setTime(rec[3].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST VOID");
				}
				// fs.setStatus(rec[4].toString());
			}

			if (rec[2] != null) {
				/*
				 * if(fs.getStatus().equals("BOOST PAYMENT") ||
				 * fs.getStatus().equals("BOOST CANCELLED") ||
				 * fs.getStatus().equals("BOOST SETTLED") || fs.getStatus()=="BOOST PAYMENT" ||
				 * fs.getStatus()=="BOOST CANCELLED" || fs.getStatus()=="BOOST SETTLED")
				 * 
				 * { //a.AMOUNT
				 * 
				 * logger.info("inside if check status: "+fs.getStatus()); double amount=0;
				 * amount=Double.parseDouble(rec[2].toString());
				 * //forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
				 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
				 * myFormatter.format(amount); //System.out.println(" Amount :"+output);
				 * fs.setAmount(output); } else {
				 */
				// logger.info("inside else check status: "+fs.getStatus());
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
				/* } */

			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			}

			if (rec[8] != null) {
				// BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(new BigInteger(rec[8].toString()));

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setTxnType(rec[9].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYRECPLUS");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
					fs.setTxnType("EZYREC");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}

			fss.add(fs);
		}
		return fss;
	}

	@Override
	public Receipt loadReceiptSignature(String trx_id) {
		// logger.info("signature finding");
		BigInteger txId = new BigInteger(trx_id);
		return (Receipt) sessionFactory.getCurrentSession().createCriteria(Receipt.class)
				.add(Restrictions.eq("trxId", txId)).setMaxResults(1).uniqueResult();
	}

	@Override
	public Merchant loadMerchantDet(String mid) {
		Merchant merchant = new Merchant();

		/*
		 * String sql = "select BUSINESS_NAME,BUSINESS_ADDRESS1,BUSINESS_ADDRESS2,CITY,"
		 * +
		 * "POSTCODE,BUSINESS_CONTACT_NUMBER,FIRST_NAME,LAST_NAME,EMAIL from MERCHANT where mid_fk in "
		 * + "(select id from MID where mid = '" + mid + "')";
		 */

		String sql = "select BUSINESS_NAME,BUSINESS_ADDRESS1,BUSINESS_ADDRESS2,CITY,"
				+ "POSTCODE,BUSINESS_CONTACT_NUMBER,FIRST_NAME,LAST_NAME,EMAIL,AUTH_3DS,STATE from MERCHANT where mid_fk in "
				+ "(select id from MID where MID = :mid or MOTO_MID = :mid or EZYWAY_MID = :mid "
				+ "or EZYREC_MID = :mid or EZYPASS_MID = :mid or GPAY_MID = :mid or UM_MID = :mid or UM_MOTO_MID = :mid or UM_EZYREC_MID = :mid or UM_EZYWAY_MID = :mid)";

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				merchant.setBusinessName(rec[0].toString().toUpperCase());
			}
			if (rec[1] != null) {
				merchant.setBusinessAddress1(rec[1].toString());
			}
			if (rec[2] != null) {
				merchant.setBusinessAddress2(rec[2].toString());
			}
			if (rec[3] != null) {
				merchant.setCity(rec[3].toString());
			}
			if (rec[4] != null) {
				merchant.setPostcode(rec[4].toString());
			}
			if (rec[5] != null) {
				merchant.setBusinessContactNumber(rec[5].toString());
			}
			if (rec[6] != null) {
				merchant.setFirstName(rec[6].toString());
			}
			if (rec[7] != null) {
				merchant.setLastName(rec[7].toString());
			}
			if (rec[8] != null) {
				merchant.setEmail(rec[8].toString());
			}
			if (rec[9] != null) {
				merchant.setAuth3DS(rec[9].toString());
			}
			
			if (rec[10] != null) {
				merchant.setState(rec[10].toString());
			}

		}
		return merchant;

	}

	@Override
	public void listSearchTransactionDetails(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String date, String date1) {

		logger.info("Inside   listAllTransaction test : " + date + "     " + date1);
		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();

		/*
		 * String sql2 =
		 * "select a.date ,a.txn_year ,a.status ,a.mid, a.location,a.Tid,a.time,round(a.AMOUNT)"
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN mid m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID where DATE between '" + date + "' and '" + date1 +
		 * "'   order by date desc";
		 */

		String sql2 = "select a.date ,a.txn_year ,a.status ,a.mid, a.location,a.Tid,a.time,round(a.AMOUNT)"
				+ "from FOR_SETTLEMENT a INNER JOIN mid m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID where DATE between :date and :date1 order by date desc";

		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("date", date);
		sqlQuery.setString("date1", date1);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			fs.setDate(rec[0].toString());
			String pattern1 = rec[0].toString();
			String su = pattern1.substring(0, 2);
			String sub2 = pattern1.substring(2, 4);

			String month = null;

			if (su == "01" || su.equals("01"))
				month = "Jan";
			else if (su == "02" || su.equals("02"))
				month = "Feb";
			else if (su == "03" || su.equals("03"))
				month = "Mar";
			else if (su == "04" || su.equals("04"))
				month = "Apr";
			else if (su == "05" || su.equals("05"))
				month = "May";
			else if (su == "06" || su.equals("06"))
				month = "Jun";
			else if (su == "07" || su.equals("07"))
				month = "Jul";
			else if (su == "08" || su.equals("08"))
				month = "Aug";
			else if (su == "09" || su.equals("09"))
				month = "Sep";
			else if (su == "10" || su.equals("10"))
				month = "Oct";
			else if (su == "11" || su.equals("11"))
				month = "Nov";
			else if (su == "12" || su.equals("12"))
				month = "Dec";
			fs.setDate(sub2 + "-" + month + "-" + rec[1].toString());
			System.out.println("test date : " + sub2 + "-" + month + "-" + rec[1].toString());
			// fs.setStatus(rec[1].toString());
			String status = null;
			// System.out.println("test data" + rec[1].toString());
			if (rec[2].toString() == "A" || rec[2].toString().equals("A")) {
				status = "COMPLETED";
			} else if (rec[2].toString() == "C" || rec[2].toString().equals("C")) {
				status = "VOID";
			} else if (rec[2].toString() == "R" || rec[2].toString().equals("R")) {
				status = "REVERSAL";
			} else if (rec[2].toString() == "P" || rec[2].toString().equals("P")) {
				status = "PENDING";
			} else if (rec[2].toString() == "S" || rec[2].toString().equals("S")) {
				status = "SETTLED";
			}
			fs.setStatus(status);
			logger.info("Status" + rec[2].toString());
			fs.setMid(rec[3].toString());
			if (rec[4] != null) {
				fs.setLocation(rec[4].toString());
			}
			if (rec[5] != null) {
				fs.setTid(rec[5].toString());
			}
			fs.setTime(rec[6].toString());

			Double d = new Double(rec[7].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);

			fs.setAmount(output);
			MerchantNameList.add(fs);
		}

	}

	@Override
	public void loadMerchantByName(final PaginationBean<ForSettlement> paginationBean, String mid, String date,
			String txnType) {
		logger.info("loadMerchantByName =====" + " date : " + date + "txnType: " + txnType + " mid: " + mid);
		// System.out.println("load merchantCity:" +City);
		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();
		@SuppressWarnings("deprecation")
		// Date dt = new Date(date+"-2015");
		Date dt = new Date(date);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String dat = dateFormat.format(dt);

		logger.info("date: " + dat);
		String sql2 = null;

		/*
		 * String sql2 =
		 * "select a.date ,a.txn_year,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and a.date='"+ dat
		 * +"' and a.txn_year='"+yr+"' and f.BUSINESS_NAME='" + merchantName +
		 * "'  order by time_stamp desc";
		 */

		/*
		 * String sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and a.time_stamp like '" + dat +
		 * "%' and upper(f.BUSINESS_NAME)='" + merchantName +
		 * "'  order by a.time_stamp desc";
		 */

		/*
		 * String sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and a.time_stamp like :dat " +
		 * "and upper(f.BUSINESS_NAME)= :merchantName  order by a.time_stamp desc";
		 */
		if (txnType == "ALL" || txnType == "" || txnType.equals("ALL") || txnType.isEmpty()) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','CT','A','BPA','BPS','GPS','GPP') and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYWIRE" || txnType.equals("EZYWIRE")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYCASH" || txnType.equals("EZYCASH")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('CT') and a.TXN_TYPE='CASH' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "BOOST" || txnType.equals("BOOST")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('BPA','BPS')  and a.TXN_TYPE='BOOST' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYPASS" || txnType.equals("EZYPASS")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A')  and a.TXN_TYPE='EZYPASS' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYMOTO" || txnType.equals("EZYMOTO")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='MOTO' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYREC" || txnType.equals("EZYREC")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYWAY" || txnType.equals("EZYWAY")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "GRABPAY" || txnType.equals("GRABPAY")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.GPAY_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('GPP','GPS')  and a.TXN_TYPE='GRABPAY' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		} else if (txnType == "EZYRECPLUS" || txnType.equals("EZYRECPLUS")) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='RECPLUS' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		}
		/*
		 * String sql2 =
		 * "select a.date ,a.batchNo AS BatchNO, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT)"
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID where a.status='S' and f.BUSINESS_NAME='" + merchantName
		 * + "' order by date desc";
		 */
		// System.out.println("sql");

		// logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat + "%");
		sqlQuery.setString("mid", mid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			fs.setDate(rd);
			// logger.info("status: "+rec[1].toString());
			String status = null;
			// System.out.println("test data" + rec[1].toString());
			if (rec[1].toString() == "A" || rec[1].toString().equals("A")) {
				status = "COMPLETED";
			} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
				status = "VOID";
			} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
				status = "REVERSAL";
			} else if (rec[1].toString() == "P" || rec[1].toString().equals("P")) {
				status = "PENDING";
			} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
				status = "SETTLED";
			} else if (rec[1].toString() == "CT" || rec[1].toString().equals("CT")) {
				status = "CASH SALE";
			}
			/*
			 * else if (rec[1].toString() == "CV" || rec[1].toString().equals("CV")) {
			 * status = "CASH CANCELLED"; }
			 */
			else if (rec[1].toString() == "BPS" || rec[1].toString().equals("BPS")) {
				status = "BOOST SETTLED";
			} else if (rec[1].toString() == "BPA" || rec[1].toString().equals("BPA")) {
				status = "BOOST PAYMENT";
			} else if (rec[1].toString() == "BP" || rec[1].toString().equals("BP")) {
				status = "BOOST PENDING";
			} else if (rec[1].toString() == "GPP" || rec[1].toString().equals("GPP")) {
				status = "GRABPAY PENDING";
			} else if (rec[1].toString() == "GPS" || rec[1].toString().equals("GPS")) {
				status = "GRABPAY SUCCESS";
			}
			fs.setStatus(status);
			/* logger.info("Status" + rec[1].toString()); */
			fs.setMerchantName(rec[2].toString().toUpperCase());
			if (rec[3] != null) {
				fs.setLocation(rec[3].toString());
			}
			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			}
			if (fs.getStatus().equals("BOOST PENDING") || fs.getStatus().equals("BOOST PAYMENT")
					|| fs.getStatus().equals("BOOST SETTLED") || fs.getStatus() == "BOOST PENDING"
					|| fs.getStatus() == "BOOST PAYMENT" || fs.getStatus() == "BOOST SETTLED") {
				// logger.info("time: "+rec[5].toString());
				// 0,5
				// SET TIME
				if (rec[5] != null) {
					if (rec[5].toString().contains("T")) {
						String resTime = rec[5].toString().substring(11, 19);
						// logger.info("time for boost: "+resTime);
						/*
						 * String rt = new SimpleDateFormat("HH:mm:ss").format( new
						 * SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(rec[5].toString()));
						 */
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
						fs.setTime(resTime);
					} else {

						try {
							String rt1 = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("HHmmss").parse(rec[5].toString()));

							fs.setTime(rt1);
							// logger.info("time for boost: "+fs.getTime());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					}

				}
			}

			if (rec[6] != null) {

				Double d = new Double(rec[6].toString());
				d = d / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setAmount(output);
			}
			if (rec[7] != null) {
				fs.setTrxId(new BigInteger(rec[7].toString()));
				TransactionRequest tr = loadTransactionRequest(rec[7].toString());
				if (tr != null) {
					fs.setPan(tr.getMaskedPan());
					String pan = fs.getPan().substring(fs.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						fs.setPan(pan);
					} else {
						fs.setPan(pan);
					}
				} else {
					fs.setPan("NA");
				}
			}

			MerchantNameList.add(fs);
		}

		paginationBean.setItemList(MerchantNameList);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	@Override
	public void loadUmMerchantByName(final PaginationBean<ForSettlement> paginationBean, String mid, String date,
			String txnType) {
		logger.info("loadMerchantByName =====" + " date : " + date + " txnType: " + txnType + " mid: " + mid);
		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();
		@SuppressWarnings("deprecation")
		Date dt = new Date(date);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String dat = dateFormat.format(dt);
		String sql2 = null;
		if (txnType == "ALL" || txnType == "" || txnType.equals("ALL") || txnType.isEmpty()) {
			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID " + "INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.status in ('S','CT','A','BPA','BPS') and a.HOST_TYPE='U' and a.time_stamp like :dat "
					+ "and a.mid= :mid order by a.time_stamp desc";
			logger.info("Query : " + sql2);
		}
		/*
		 * else if(txnType=="UMOBILE" || txnType.equals("UMOBILE")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE is NULL and a.HOST_TYPE='U' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="UMMOTO"|| txnType.equals("UMMOTO")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MOTO_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='MOTO' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }
		 */
		/*
		 * else if(txnType=="EZYCASH" || txnType.equals("EZYCASH")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('CT') and a.TXN_TYPE='CASH' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="BOOST"|| txnType.equals("BOOST")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('BPA','BPS')  and a.TXN_TYPE='BOOST' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="EZYPASS"|| txnType.equals("EZYPASS")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A')  and a.TXN_TYPE='EZYPASS' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="EZYREC"|| txnType.equals("EZYREC")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }else if(txnType=="EZYWAY"|| txnType.equals("EZYWAY")){ sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,a.AMOUNT,a.trx_id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and a.time_stamp like :dat "
		 * + "and a.mid= :mid order by a.time_stamp desc"; logger.info("Query : " +
		 * sql2); }
		 */

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat + "%");
		sqlQuery.setString("mid", mid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String rd = null, rt = null;
			if (rec[0] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}

			// logger.info("status: "+rec[1].toString());
			String status = null;
			// System.out.println("test data" + rec[1].toString());
			if (rec[1].toString() == "A" || rec[1].toString().equals("A")) {
				status = "COMPLETED";
			} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
				status = "VOID";
			} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
				status = "REVERSAL";
			} else if (rec[1].toString() == "P" || rec[1].toString().equals("P")) {
				status = "PENDING";
			} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
				status = "SETTLED";
			} else if (rec[1].toString() == "CT" || rec[1].toString().equals("CT")) {
				status = "CASH SALE";
			}
			/*
			 * else if (rec[1].toString() == "CV" || rec[1].toString().equals("CV")) {
			 * status = "CASH CANCELLED"; }
			 */
			else if (rec[1].toString() == "BPS" || rec[1].toString().equals("BPS")) {
				status = "BOOST SETTLED";
			} else if (rec[1].toString() == "BPA" || rec[1].toString().equals("BPA")) {
				status = "BOOST PAYMENT";
			} else if (rec[1].toString() == "BP" || rec[1].toString().equals("BP")) {
				status = "BOOST PENDING";
			}
			fs.setStatus(status);
			/* logger.info("Status" + rec[1].toString()); */
			fs.setMerchantName(rec[2].toString().toUpperCase());
			if (rec[3] != null) {
				fs.setLocation(rec[3].toString());
			}
			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			}

			if (rec[6] != null) {

				Double d = new Double(rec[6].toString());
				d = d / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				fs.setAmount(output);
			}
			if (rec[7] != null) {
				fs.setTrxId(new BigInteger(rec[7].toString()));
				TransactionRequest tr = loadTransactionRequest(rec[7].toString());
				if (tr != null) {
					fs.setPan(tr.getMaskedPan());
					String pan = fs.getPan().substring(fs.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						fs.setPan(pan);
					} else {
						fs.setPan(pan);
					}
				} else {
					fs.setPan("NA");
				}
			}
			MerchantNameList.add(fs);
		}

		paginationBean.setItemList(MerchantNameList);
		logger.info("No of Records: " + paginationBean.getItemList().size());

	}

	// start agent volume summary new method 08/08/2016
	@Transactional(readOnly = true)
	public List<ForSettlement> agentVolume(final ArrayList<Criterion> props, final String agentName) {

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		/*
		 * int cDate=0;
		 * 
		 * int pDate=0;
		 * 
		 * Date dt = new Date(); cDate = dt.getMonth()+1; pDate = dt.getMonth()-2;
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where month(a.time_stamp) between  '"
		 * + pDate + "'  and '" + cDate + "'" +
		 * " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
				+ " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
				+ " and a.status='S' and ag.FIRST_NAME = :agentName "
				+ " group by month(a.time_stamp) order by a.time_stamp desc";

		// super.getPaginationItemsByPage(paginationBean,
		// ForSettlement.class,props, Order.asc("merchantName"));
		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();
			String month = null;
			fs.setDate(su);
			Double d = new Double(rec[1].toString());
			d = d / 100;

			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			// logger.info(d + " " + pattern + " " + output);
			fs.setAmount(output);
			fs.setAgentName(rec[2].toString());
			// logger.info("agent__id:" + rec[3].toString() );
			fs.setMerchantName(rec[3].toString() + "~AGENT~" + rec[2].toString());

			fss.add(fs);
		}

		return fss;
	}

	// end agent volume summary

	// start subagent volume summary 08/08/2016
	@Transactional(readOnly = true)
	public List<ForSettlement> subAgentVolume(ArrayList<Criterion> props, SubAgent subAgent) {
		ArrayList<ForSettlement> fs1 = new ArrayList<ForSettlement>();
		String sql = null;
		/*
		 * int cDate=0; int pDate=0;
		 * 
		 * Date dt = new Date();
		 * 
		 * cDate = dt.getMonth()+1; pDate = dt.getMonth()-2;
		 */
		// System.out.println("Month :"+pDate +" "+cDate);
		/* ag.FIRST_NAME */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
		 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  '"
		 * + pDate + "'  and '" + cDate + "'" + " and a.status='S' and ag.id='" +
		 * subAgent.getId() + "' " +
		 * "group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
		 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.id='" + subAgent.getId() + "' " +
		 * "group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
				+ " and a.status='S' and ag.id= :id " + "group by month(a.time_stamp) order by a.time_stamp desc";

		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class,props,
		 * Order.asc("merchantName"));
		 */
		logger.info("Query : " + sql);
		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();

			fs.setDate(su);

			Double d = new Double(rec[1].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			fs.setAgentName(rec[2].toString());
			// logger.info("subagent__id:" + rec[3].toString() );
			fs.setMerchantName(rec[3].toString() + "~SUBAGENT~" + rec[2].toString());
			fs1.add(fs);
		}
		return fs1;

	}

	// end subagent volume summary 08/08/2016

	@Override
	public void searchForSettlement1(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, String tid, Merchant merchant) {

		logger.info("inside searchAllTransactionByMerchant " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);
		String mid = null;
		String ummid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			ummid = merchant.getMid().getUmMid();
		}

		toDate = toDate + " 23:59:59";

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
					&& (!status.isEmpty() && status != null)) {
				logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
						+ "status: " + status);

				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION"
						+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,a.RRN,a.INVOICE_ID from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
						+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and a.TID= :tid and "
						+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("tid", tid);

			}

			else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
				logger.info("inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: "
						+ status);

				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,"
						+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,a.RRN,a.INVOICE_ID  "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and a.TID= :tid"
						+ " and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("tid", tid);
			}

			else {
				logger.info("status: " + status);
				sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,"
						+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,a.RRN,a.INVOICE_ID "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.TID= :tid and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
						+ " order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
					&& (!status.isEmpty() && status != null)) {
				logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
						+ "status: " + status);

				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION"
						+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
						+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID where a.STATUS=:status and a.MID in "
						+ "(:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid) and "
						+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);

			}

			else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
				logger.info("inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: "
						+ status);

				sql = "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,"
						+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME  "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
						+ " and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
			}

			else {
				logger.info("status: " + status);
				sql = "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,"
						+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.AID_RESPONSE,t.MASKED_PAN,t.CARD_TYPE ,t.CARD_SCHEME,a.RRN,a.INVOICE_ID,t.CARD_HOLDER_NAME "
						+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
						+ "or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
						+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
						+ "where a.STATUS in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and"
						+ " a.MID in (:mid,:motoMid,:ezywayMid,:ummid,:ezyrecMid)"
						+ " order by a.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql);
				sqlQuery.setString("mid", mid);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("ummid", ummid);
			}
		}

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();

			if (rec[0] != null) {
				// businessname
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[2] != null) {
				// a.AMOUNT
				// logger.info("statuss checking: "+fs.getStatus());

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;

				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[4] != null) {

				// a.`STATUS`

				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			// logger.info("check status: "+fs.getStatus());

			if (fs.getStatus().equals("BOOST PENDING") || fs.getStatus().equals("BOOST PAYMENT")
					|| fs.getStatus().equals("BOOST SETTLED") || fs.getStatus().equals("BOOST CANCELLED")
					|| fs.getStatus() == "BOOST PENDING" || fs.getStatus() == "BOOST PAYMENT"
					|| fs.getStatus() == "BOOST SETTLED" || fs.getStatus() == "BOOST CANCELLED") {
				// logger.info("time: "+rec[3].toString());

				// SET TIME
				if (rec[3] != null) {
					if (rec[3].toString().contains("T")) {
						// fs.setTime(rec[3].toString());
						try {
							String resTime = rec[3].toString().substring(11, 19);
							// logger.info("time for boost: "+resTime);
							String rt = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(rec[3].toString()));
							// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());
							fs.setTime(resTime);
						} catch (ParseException e) {
						}
					} else {
						String rt1;
						try {
							rt1 = new SimpleDateFormat("HH:mm:ss")
									.format(new SimpleDateFormat("HHmmss").parse(rec[3].toString()));
							fs.setTime(rt1);
							// logger.info("time for boost: "+fs.getTime());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					}

				}
			} else {
				// SET TIME
				if (rec[1] != null) {
					try {
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
						// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

						fs.setTime(rt);
						// logger.info("time for normal trans: "+fs.getTime());
					} catch (ParseException e) {
					}
				}
			}

			if (rec[5] != null) {
				// a.TID
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.LOCATION
				fs.setLocation(rec[7].toString());
			}

			if (rec[8] != null) {
				// BigInteger number = new BigInteger(rec[8].toString());
				// logger.info("trid: "+number);
				fs.setTrxId(new BigInteger(rec[8].toString()));

			}
			if (rec[9] != null) {
				// a.LOCATION
				fs.setStan(rec[9].toString());
				// logger.info(fs.getStan());
			}
			if (rec[10] != null) {
				fs.setTxnType(rec[10].toString());
				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			if (rec[11] != null) {
				// a.LOCATION
				fs.setAidResponse(rec[11].toString());
			}

			if (rec[12] != null) {
				// a.MID
				fs.setPan(rec[12].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			}
			if (rec[14] != null) {
				fs.setBatchNo(rec[14].toString());
			}
			if (rec[15] != null) {
				fs.setRrn(rec[15].toString());
			}

			if (rec[16] != null) {
				fs.setInvoiceId(rec[16].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[17] != null) {
				fs.setNumOfRefund(rec[17].toString());
			} else {
				fs.setNumOfRefund("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	// new method for merchant volume summary 08/08/2016
	@Override
	public List<ForSettlement> loadMerchantByVolume(final ArrayList<Criterion> props, String agentName) {

		ArrayList<ForSettlement> MerchantNameList = new ArrayList<ForSettlement>();
		int cDate = 0;
		int pDate = 0;
		Date dt = new Date();
		cDate = dt.getMonth() + 1;
		pDate = dt.getMonth() - 2;

		String sql2 = null;
		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}
		// System.out.println("Condt : "+condt +" Agname :"+agname);

		if (condt.equals("AGENT")) {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
			 * +"ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
			 * "where month(a.time_stamp) between  '" + pDate + "'  and '" + cDate + "'" +
			 * " and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id=' "+agid+"'"
			 * + "group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
			 * "where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
			 * + " and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id=' " + agid
			 * + "'" + "group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from " // ag.FIRST_NAME
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid "
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		} else {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
			 * "where month(a.time_stamp) between  '" + pDate + "'  and '" + cDate + "'" +
			 * " and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid+"' " +
			 * "group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName from " // ag.FIRST_NAME
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id "
					+ "where month(a.time_stamp) between  DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.NAME= :agname and ag.id= :agid "
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		}

		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		sqlQuery.setString("agname", agname);
		sqlQuery.setString("agid", agid);
		// .addEntity(ForSettlement.class);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();
			String month = null;
			fs.setDate(su);

			Double d = new Double(rec[1].toString());

			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);

			fs.setMerchantName(rec[2].toString());
			MerchantNameList.add(fs);
		}
		/* } */
		return MerchantNameList;
		// paginationBean.setItemList(MerchantNameList);

	}

	// New Change for Preauth

	@Override
	public void getPreAuthTxn(PaginationBean<PreAuthorization> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, PreAuthorization.class, props, Order.desc("timeStamp"));
	}

	@SuppressWarnings("unchecked")
	@Override
	public void searchPreAuth(String fromDate, String toDate, String tid, final String status,
			PaginationBean<PreAuthorization> paginationBean, ArrayList<Criterion> props) {
		logger.info("Data : " + toDate + " " + fromDate + " " + tid + " " + status);
		super.getPaginationItemsByPage(paginationBean, PreAuthorization.class, props, Order.desc("timeStamp"));
	}

	@Override
	public PreAuthorization getPreAuthTxn(String trxId) {
		BigInteger trx = new BigInteger(trxId);
		logger.info("trx: " + trx);
		PreAuthorization fSettlement = (PreAuthorization) sessionFactory.getCurrentSession()
				.createCriteria(PreAuthorization.class).add(Restrictions.eq("trxId", trx)).setMaxResults(1)
				.uniqueResult();
		return fSettlement;

	}

	@Override
	@Transactional(readOnly = true)
	public void listPreAuthTransaction(final PaginationBean<PreAuthorization> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, String txnType) {
		logger.info("Inside   listAllTransaction ");
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<PreAuthorization> fss = new ArrayList<PreAuthorization>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			from = dateFormat.format(dt);

			from = from + "-01";
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
		} else {
			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.ag_name "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and DATE between '" + dat + "' and '" + dat1 +
		 * "' and txn_year between '"
		 * +year1+"' and '"+year2+"' group by a.MID,a.DATE order by a.DATE desc" ;
		 */

		/*
		 * sql =
		 * "select f.city , f.BUSINESS_NAME AS MerchantName ,a.date , a.txn_year , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * +
		 * "from for_settlement a INNER JOIN mid m on a.MID=m.MID INNER JOIN merchant f "
		 * + "ON f.MID_FK=m.ID INNER JOIN agent ag on f.AGID_FK=ag.id " +
		 * "where a.status='S' and time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME "
		 * + "from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where time_stamp between '" + dat + "' and '" + dat1 +
		 * "'  group by a.MID,a.date order by a.time_stamp desc";
		 */

		if (txnType != null) {
			logger.info(txnType + " transaction: " + from + " " + to);
			if (txnType.equals("EZYAUTH")) {
				sql = "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
						+ " ag.FIRST_NAME,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
						+ "or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
						+ "where a.txn_type='MOTO' and time_stamp between :from and :to "
						+ " group by a.MID,a.date order by a.time_stamp desc";
			} else {
				sql = "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
						+ " ag.FIRST_NAME,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID "
						+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
						+ "where a.txn_type is Null and time_stamp between :from and :to "
						+ " group by a.MID,a.date order by a.time_stamp desc";
			}

		} else {

			logger.info("EZYAUTH/PREAUTH transaction: " + from + " " + to);
			sql = "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
					+ " ag.FIRST_NAME,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ "where time_stamp between :from and :to group by a.MID,a.date,a.txn_type order by a.time_stamp desc";
		}

		/*
		 * }else{ logger.info("PREAUTH transaction: "+from+" "+to); sql =
		 * "select f.state , f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
		 * +
		 * " ag.FIRST_NAME from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.txn_type is Null and time_stamp between :from and :to " +
		 * " group by a.MID,a.date order by a.time_stamp desc"; }
		 */

		logger.info(sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("No of Records :" + resultSet.size());
		for (Object[] rec : resultSet) {
			PreAuthorization fs = new PreAuthorization();
			fs.setLocation(rec[0].toString());
			fs.setMerchantName(rec[1].toString().toUpperCase());
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			fs.setDate(rd);
			Double d = new Double(rec[3].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			fs.setAgentName(rec[4].toString());
			if (rec[5] == null) {
				fs.setTxnType("PREAUTH");
			} else if (rec[5].equals("MOTO")) {
				fs.setTxnType("EZYAUTH");
			} else {
				fs.setTxnType("EZYREC");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
	}

	@Override
	public void loadPreAuthByName(final PaginationBean<PreAuthorization> paginationBean, String merchantName,
			String date, String txnType) {
		ArrayList<PreAuthorization> MerchantNameList = new ArrayList<PreAuthorization>();
		@SuppressWarnings("deprecation")
		Date dt = new Date(date);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String dat = dateFormat.format(dt);
		String sql2 = null;

		logger.info("merchantName: " + merchantName + " date: " + date + " txnType" + txnType);

		/*
		 * String sql2 =
		 * "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,a.time,round(a.AMOUNT),a.trx_id "
		 * + "from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID where a.time_stamp like '" + dat +
		 * "%' and upper(f.BUSINESS_NAME)='" + merchantName +
		 * "'  order by a.time_stamp desc";
		 */
		logger.info("txn type: " + txnType);
		if (txnType.equals("EZYAUTH") || txnType == "EZYAUTH") {

			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,"
					+ "a.time,round(a.AMOUNT),a.trx_id,a.txn_type from PRE_AUTH a INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.TXN_TYPE='MOTO' and a.time_stamp like :dat and "
					+ "upper(f.BUSINESS_NAME)= :merchantName  order by a.time_stamp desc";

		} else if (txnType.equals("EZYREC") || txnType == "EZYREC") {

			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,"
					+ "a.time,round(a.AMOUNT),a.trx_id,a.txn_type from PRE_AUTH a INNER JOIN MID m on "
					+ "a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID where a.TXN_TYPE='EZYREC' and a.time_stamp like :dat and "
					+ "upper(f.BUSINESS_NAME)= :merchantName  order by a.time_stamp desc";

		} else {

			sql2 = "select a.time_stamp,a.status, f.BUSINESS_NAME AS MerchantName , a.location,a.Tid,"
					+ "a.time,round(a.AMOUNT),a.trx_id,a.txn_type from PRE_AUTH a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp like :dat and "
					+ "upper(f.BUSINESS_NAME)= :merchantName and a.TXN_TYPE is null order by a.time_stamp desc";

		}

		logger.info(sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat + "%");
		sqlQuery.setString("merchantName", merchantName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			PreAuthorization fs = new PreAuthorization();
			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			fs.setDate(rd);
			if (rec[8] == null) {
				fs.setTxnType("PREAUTH");

			} else if (rec[8].equals("MOTO")) {
				fs.setTxnType("EZYAUTH");
			} else if (rec[8].equals("EZYREC")) {
				fs.setTxnType("EZYREC");
			}
			String status = null;
			if (fs.getTxnType().equals("PREAUTH")) {
				if (rec[1].toString() == "A" || rec[1].toString().equals("A") || rec[1].toString() == "P"
						|| rec[1].toString().equals("P")) {
					status = "PREAUTH SALE";
				} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
					status = "PREAUTH CANCEL";
				} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
					status = "REVERSAL";
				} else if (rec[1].toString() == "D" || rec[1].toString().equals("D") || rec[1].toString() == "E"
						|| rec[1].toString().equals("E")) {
					status = "PRE-AUTHORIZATION";
				} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
					status = "SETTLED";
				}
			} else if (fs.getTxnType().equals("EZYAUTH")) {
				if (rec[1].toString() == "A" || rec[1].toString().equals("A") || rec[1].toString() == "P"
						|| rec[1].toString().equals("P")) {
					status = "EZYAUTH SALE";
				} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
					status = "EZYAUTH CANCEL";
				} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
					status = "EZYAUTH REVERSAL";
				} else if (rec[1].toString() == "D" || rec[1].toString().equals("D") || rec[1].toString() == "E"
						|| rec[1].toString().equals("E")) {
					status = "EZYAUTH";
				} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
					status = "EZYAUTH SETTLED";
				}
			} else {
				if (rec[1].toString() == "A" || rec[1].toString().equals("A") || rec[1].toString() == "P"
						|| rec[1].toString().equals("P")) {
					status = "EZYREC SALE";
				} else if (rec[1].toString() == "C" || rec[1].toString().equals("C")) {
					status = "EZYREC CANCEL";
				} else if (rec[1].toString() == "R" || rec[1].toString().equals("R")) {
					status = "EZYREC REVERSAL";
				} else if (rec[1].toString() == "D" || rec[1].toString().equals("D") || rec[1].toString() == "E"
						|| rec[1].toString().equals("E")) {
					status = "EZYREC";
				} else if (rec[1].toString() == "S" || rec[1].toString().equals("S")) {
					status = "EZYREC SETTLED";
				}
			}
			fs.setStatus(status);
			fs.setMerchantName(rec[2].toString().toUpperCase());
			if (rec[3] != null) {
				fs.setLocation(rec[3].toString());
			}
			if (rec[4] != null) {
				fs.setTid(rec[4].toString());
			}
			if (rec[5] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[5].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setTime(rt);
			}

			Double d = new Double(rec[6].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);

			fs.setAmount(output);
			fs.setTrxId(new BigInteger(rec[7].toString()));
			MerchantNameList.add(fs);
		}
		paginationBean.setItemList(MerchantNameList);
	}

	// new method for contactName in transaction summary page admin & merchant
	// login
	@Override
	public TerminalDetails getTerminalDetailsByTid(String tid) {

		return (TerminalDetails) sessionFactory.getCurrentSession().createCriteria(TerminalDetails.class)
				.add(Restrictions.eq("tid", tid)).setMaxResults(1).uniqueResult();
	}
	
	
	@Override
	public SettlementMDR loadSettlementMDR(String rrn) {

		return (SettlementMDR) sessionFactory.getCurrentSession().createCriteria(SettlementMDR.class)
				.add(Restrictions.eq("rrn", rrn)).setMaxResults(1).uniqueResult();
	}

	@Override
	public TransactionRequest loadTxnDetailsByID(BigInteger txnid) {
		return (TransactionRequest) sessionFactory.getCurrentSession().createCriteria(TransactionRequest.class)
				.add(Restrictions.eq("txnId", txnid)).setMaxResults(1).uniqueResult();
	}

	public MobileUser getMobileUserByGpayTid(String tid) {

		return (MobileUser) sessionFactory.getCurrentSession().createCriteria(MobileUser.class)
				.add(Restrictions.eq("gpayTid", tid)).setMaxResults(1).uniqueResult();
	}

	public TerminalDetails loadTerminalDetailsByMid(String mid) {

		return (TerminalDetails) getSessionFactory().createCriteria(TerminalDetails.class)
				.add(Restrictions.like("merchantId", mid, MatchMode.ANYWHERE)).setMaxResults(1).uniqueResult();
	}

	public MID loadMid(String mid) {
		/*
		 * System.out.print("MerchantDaoImpl:loadMid");
		 */
		return (MID) getSessionFactory().createCriteria(MID.class)
				.add(Restrictions.like("mid", mid, MatchMode.ANYWHERE)).setMaxResults(1).uniqueResult();
	}

	public Merchant loadMerchantbyid(MID mid) {
		/* logger.info("MerchantDaoImpl:loadMerchant MID"); */
		// TODO Auto-generated method stub
		return (Merchant) getSessionFactory().createCriteria(Merchant.class).add(Restrictions.eq("mid", mid))
				.setMaxResults(1).uniqueResult();
	}
	// demo method 05-10-2016
	/*
	 * @Transactional(readOnly = true) public ArrayList<ForSettlement>
	 * findinterval(){ ArrayList<ForSettlement> fs1 = new
	 * ArrayList<ForSettlement>(); String tid="11110012"; String sql =
	 * "select sum(f.amount),f.TXN_TYPE, QUARTER(f.TIME_STAMP) from mobiversa.for_settlement f where QUARTER(f.TIME_STAMP) = QUARTER(Date_sub(now(), INTERVAL 1 QUARTER)) and f.status in ('S','A','CT') and f.tid = :tid  group by f.TXN_TYPE order by f.TIME_STAMP"
	 * ; logger.info("Query : " + sql); Query sqlQuery =
	 * super.getSessionFactory().createSQLQuery(sql); sqlQuery.setString("tid",
	 * tid);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * 
	 * for (Object[] rec : resultSet) { ForSettlement fs = new ForSettlement();
	 * String su = rec[0].toString();
	 * 
	 * fs.setAmount(rec[0].toString());
	 * 
	 * fs.setTxnType(rec[1].toString()); fs.setTimeStamp(rec[2].toString());
	 * logger.info("check: "+fs.getAmount()+" "+fs.getTxnType()+" "+fs.getTimeStamp(
	 * )); fs1.add(fs); } return fs1; }
	 */

	// start subagent volume summary 08/08/2016
	@Transactional(readOnly = true)
	public List<ForSettlement> subAgentVolume1(ArrayList<Criterion> props, SubAgent subAgent) {
		ArrayList<ForSettlement> fs1 = new ArrayList<ForSettlement>();
		String sql = null;
		int cDate = 0;
		int pDate = 0;

		Date dt = new Date();

		cDate = dt.getMonth() + 1;
		pDate = dt.getMonth();
		// System.out.println("Month :"+pDate +" "+cDate);
		/* ag.FIRST_NAME */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
		 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  month(a.time_stamp) between  '"
		 * + pDate + "'  and '" + cDate + "'" + " and a.status='S' and ag.id='" +
		 * subAgent.getId() + "' " +
		 * "group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id "
				+ "where  month(a.time_stamp) between  :pDate  and :cDate" + " and a.status='S' and ag.id= :id"
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class,props,
		 * Order.asc("merchantName"));
		 */
		logger.info("Query : " + sql);
		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("pDate", pDate);
		sqlQuery.setLong("cDate", cDate);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();

		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			String su = rec[0].toString();

			fs.setDate(su);

			Double d = new Double(rec[1].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			fs.setAgentName(rec[2].toString());
			// logger.info("subagent__id:" + rec[3].toString() );
			fs.setMerchantName(rec[3].toString() + "~SUBAGENT~" + rec[2].toString());
			fs1.add(fs);
		}
		return fs1;

	}

	/*
	 * // Start agentvolume 06-01-2017
	 * 
	 * @Transactional(readOnly = true) public List<AgentVolumeData>
	 * agentVolumeData(final String agentName) {
	 * 
	 * List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
	 * String sql = null; List<String> date = new ArrayList<String>(); List<String>
	 * amount = new ArrayList<String>(); String agId = null; String agent = null;
	 * String agentDet = null; String present = null; int cDate = 0; // String
	 * amount1= "0.00";
	 * 
	 * int count = 0;
	 * 
	 * Date dt = new Date(); cDate = dt.getMonth() + 1;
	 * 
	 * List<Integer> listMonth = getAllMonth(cDate);
	 * 
	 * // pDate = dt.getMonth()-2; // logger.info("Current Month : " + cDate); sql =
	 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
	 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
	 * +
	 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
	 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
	 * " group by month(a.time_stamp) order by a.time_stamp desc";
	 * 
	 * sql =
	 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
	 * +
	 * " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
	 * +
	 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
	 * +
	 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(),"
	 * +
	 * " INTERVAL 4 month)  and now() and a.status='S' and ag.FIRST_NAME = :agentName "
	 * + " group by month(a.time_stamp) order by a.time_stamp desc";
	 * 
	 * 
	 * 
	 * sql =
	 * "select month(a.time_stamp) , sum(a.AMOUNT) TotalAmount , ag.FIRST_NAME ,ag.id from "
	 * +
	 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
	 * +
	 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
	 * +
	 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), "
	 * +
	 * "INTERVAL 3 month) and now() and a.status='S' and ag.FIRST_NAME = :agentName "
	 * + "group by month(a.time_stamp) order by a.time_stamp desc";
	 * 
	 * logger.info("Query : " + sql);
	 * 
	 * Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
	 * .addEntity(ForSettlement.class); sqlQuery.setString("agentName", agentName);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * logger.info("Resultset Size : " + resultSet.size());
	 * logger.info("month Size : " + listMonth.size()); if (resultSet.size() <= 0) {
	 * 
	 * Agent agent1 = (Agent) getSessionFactory() .createCriteria(Agent.class)
	 * .add(Restrictions.eq("firstName", agentName))
	 * .setMaxResults(1).uniqueResult(); agId = agent1.getId().toString(); agent =
	 * agent1.getFirstName(); agentDet = agId + "~AGENT~" + agent; present = "No";
	 * for (int a : listMonth) { date.add(getMonth(a)); amount.add("0.00");
	 * 
	 * }
	 * 
	 * } else {
	 * 
	 * for (Object[] rec : resultSet) {
	 * 
	 * int date1 = Integer.parseInt(rec[0].toString());
	 * 
	 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
	 * while (listMonth.get(count).intValue() != date1) {
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++;
	 * 
	 * }// else{ date.add(getMonth(date1)); Double d = new
	 * Double(rec[1].toString()); d = d / 100;
	 * 
	 * String pattern = "#,##0.00"; DecimalFormat myFormatter = new
	 * DecimalFormat(pattern); String output = myFormatter.format(d);
	 * amount.add(output);
	 * 
	 * agId = rec[3].toString(); agent = rec[2].toString(); present = "Yes";
	 * agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();
	 * 
	 * count++; } while(count < 4){
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++; } }
	 * 
	 * AgentVolumeData agentVolumeData = new AgentVolumeData();
	 * agentVolumeData.setAgId(agId); agentVolumeData.setAgentName(agent);
	 * agentVolumeData.setAgentDet(agentDet); agentVolumeData.setAmount(amount);
	 * agentVolumeData.setDate(date); agentVolumeData.setTxnPresent(present);
	 * agentVolumeDataList.add(agentVolumeData); return agentVolumeDataList; }
	 */

	// Start agentvolume 06-01-2017

	@Transactional(readOnly = true)
	public List<AgentVolumeData> agentVolumeData(final String agentName) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		// logger.info("Current Month : " + cDate);
		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * +
		 * " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
		 * +
		 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(),"
		 * +
		 * " INTERVAL 4 month)  and now() and a.status='S' and ag.FIRST_NAME = :agentName "
		 * + " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.AMOUNT) TotalAmount , ag.FIRST_NAME ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
				+ "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 3 month) and now() and a.status='S' and ag.FIRST_NAME = :agentName "
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "###0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> agentVolumeData1(final String agentName) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		// logger.info("Current Month : " + cDate);
		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * + " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
		 * + " and a.status='S' and ag.FIRST_NAME = '" + agentName + "' " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.FIRST_NAME ,ag.id from "
		 * +
		 * " FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
		 * +
		 * "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * " ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(),"
		 * +
		 * " INTERVAL 4 month)  and now() and a.status='S' and ag.FIRST_NAME = :agentName "
		 * + " group by month(a.time_stamp) order by a.time_stamp desc";
		 */

		sql = "select month(a.time_stamp) , sum(a.F007_TXNAMT) TotalAmount , ag.FIRST_NAME ,ag.id from "
				+ "UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID  INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK= ag.id where a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 3 month) and now() and a.status='S' and ag.FIRST_NAME = :agentName "
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agentName", agentName);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "###0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getAgentVolumeData(final String agentName, StringBuffer pMid, StringBuffer uMid,
			long id) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);
		AgentVolumeData agentVolumeData = new AgentVolumeData();

		String sql1 = "select month(a.time_stamp) , sum(a.AMOUNT) TotalAmount , '" + agentName + "' ,'" + id + "' from "
				+ "FOR_SETTLEMENT a WHERE a.MID IN (" + pMid + ") AND a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 3 month) and now() and a.status='S' "
				+ "group by month(a.time_stamp) order by a.time_stamp desc";

		Query sqlQuery1 = super.getSessionFactory().createSQLQuery(sql1);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery1.list();
		logger.info("Resultset Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);

		String sql2 = "Select month(u.TIME_STAMP),sum(u.F007_TXNAMT) ,'" + agentName + "' ,'" + id
				+ "' from UM_ECOM_TXNRESPONSE u " + " where u.F001_MID IN (" + uMid
				+ ") and u.TIME_STAMP between DATE_SUB(now(),  " + "INTERVAL 3 month) and now() and status='S' "
				+ "group by month(u.TIME_STAMP) order by u.TIME_STAMP desc";

		logger.info("Query : " + sql2);

		Query sqlQuery2 = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet2 = sqlQuery2.list();
		logger.info("Resultset Size : " + resultSet2.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet2.size() <= 0) {

			Agent agent1 = (Agent) getSessionFactory().createCriteria(Agent.class)
					.add(Restrictions.eq("firstName", agentName)).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getFirstName();
			agentDet = agId + "~AGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet2) {

				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();

				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);

		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	public String getMonth(int m) {

		// System.out.println(" Data :"+m);
		String mon = "";
		switch (m) {
		case 1:
			mon = "JAN";
			break;
		case 2:
			mon = "FEB";
			break;
		case 3:
			mon = "MAR";
			break;
		case 4:
			mon = "APR";
			break;
		case 5:
			mon = "MAY";
			break;
		case 6:
			mon = "JUN";
			break;
		case 7:
			mon = "JUL";
			break;
		case 8:
			mon = "AUG";
			break;
		case 9:
			mon = "SEP";
			break;
		case 10:
			mon = "OCT";
			break;
		case 11:
			mon = "NOV";
			break;
		case 12:
			mon = "DEC";
			break;

		default:
			mon = "";
			break;
		}

		return mon;

	}

	private static List<Integer> getAllMonth(int month) {
		logger.info("month debug... " + month);
		List<Integer> listMonth = new ArrayList<Integer>();
		for (int i = 0; i < 4; i++) {
			if (month == 0) {
				logger.info("debug 0");
				listMonth.add(12);
			} else if (month == -1) {
				logger.info("debug -1");
				listMonth.add(11);
			} else if (month == -2) {
				logger.info("debug -2");
				listMonth.add(10);
			} else {
				logger.info("debug else ");
				listMonth.add(month);
			}
			month--;
		}
		return listMonth;
	}

	// sugAgent Volume Data 06-01-2017
	@Override
	public List<AgentVolumeData> subAgentVolumeData(SubAgent subAgent) {
		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		logger.info("Current Month : " + cDate);
//bps add in future also moto(S)
		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID "
				+ "or a.MID=m.EZYWAY_MID or a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  a.time_stamp between DATE_SUB(now(), "
				+ "INTERVAL 4 month)  and now() and a.status='S'  and ag.id= :id "
				+ "group by month(a.time_stamp) order by a.time_stamp  desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());
		logger.info("Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			// String sql1 =
			// "select a.ID,a.FIRST_NAME from mobiversa.agent a where
			// a.FIRST_NAME='"+agentName+"'";
			logger.info(" size is ZERO  ");
			SubAgent agent1 = (SubAgent) getSessionFactory().createCriteria(SubAgent.class)
					.add(Restrictions.eq("id", subAgent.getId())).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getName();
			agentDet = agId + "~SUBAGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");
				// count ++;

			}

		} else {

			for (Object[] rec : resultSet) {
				// for(Integer mon : listMonth){
				int date1 = Integer.parseInt(rec[0].toString());
				// if(cDate != date1 && count == 0){
				/*
				 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				 */
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);

				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~SUBAGENT~" + rec[2].toString();
				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}
		// logger.info("agId :" + agId);
		// logger.info("agent :" + agent);
		// logger.info("agentDet :" + agentDet);
		// logger.info("amount :" + amount);
		// logger.info("date :" + date);
		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Override
	public List<AgentVolumeData> merchantVolumeData(String agentName) {
		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		int cDate = 0;

		int count = 0;

		String sql2 = null;
		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);

		if (condt.equals("AGENT")) {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id from "
			 * ag . FIRST_NAME
			 * 
			 * + "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
			 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now()" +
			 * " and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id='" + agid +
			 * "'" + " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id from "
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
					+ " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid"
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		} else {

			/*
			 * sql2 =
			 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName,f.Id from "
			 * // ag.FIRST_NAME +
			 * "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f " +
			 * " ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
			 * " where a.time_stamp  between DATE_SUB(now(), INTERVAL 90 DAY)  and now()" +
			 * " and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid + "' " +
			 * " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";
			 */

			sql2 = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName,f.Id from " // ag.FIRST_NAME
					+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
					+ " ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id "
					+ " where a.time_stamp  between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
					+ " and a.status='S' and ag.NAME= :agname and ag.id= :agid "
					+ " group by a.MID,month(a.time_stamp) order by a.time_stamp desc";

		}

		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		sqlQuery.setString("agname", agname);
		sqlQuery.setString("agid", agid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());
		logger.info("Size : " + listMonth.size());

		/* Start Sorting */
		List<MerchantVolumeData> listMVD = new ArrayList<MerchantVolumeData>();
		for (Object[] rec : resultSet) {
			MerchantVolumeData mvd = new MerchantVolumeData();

			mvd.setId(rec[3].toString());
			mvd.setName(rec[2].toString());
			mvd.setAmount(rec[1].toString());
			mvd.setMonth(rec[0].toString());
			listMVD.add(mvd);
		}

		Collections.sort(listMVD, new MerchantComparator());

		for (MerchantVolumeData mvd : listMVD) {
			/*
			 * logger.info("Sorted Data : " + mvd.getId() + ":" + mvd.getName() + ":" +
			 * mvd.getAmount() + ":" + mvd.getMonth());
			 */
		}

		for (MerchantVolumeData mvd : listMVD) {
			// logger.info("getmonth:" + mvd.getMonth());

			int date1 = Integer.parseInt(mvd.getMonth());

			// String id = mvd.getId().toString();
			// logger.info("COUNT : " + count);
			// logger.info("q month : " + date1);
			while (listMonth.get(count).intValue() != date1) {
				// logger.info("While COUNT : " + count);
				/*
				 * logger.info("c month  : " + listMonth.get(count).intValue() + " q month :" +
				 * date1);
				 */
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
			// logger.info("End while");
			date.add(getMonth(date1));
			Double d = new Double(mvd.getAmount());
			d = d / 100;

			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			amount.add(output);
			agent = mvd.getName();
			count++;

			if (count == 4) {
				logger.info("Count :" + count);
				logger.info("agent :" + agent);
				logger.info("amount :" + amount);
				logger.info("date :" + date);
				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgentName(agent);
				agentVolumeData.setAmount(amount);
				agentVolumeData.setDate(date);
				agentVolumeDataList.add(agentVolumeData);
				amount = new ArrayList<String>();
				date = new ArrayList<String>();
				count = 0;
			}

		}
		return agentVolumeDataList;
	}

	/* End Sorting */

	// new method for merchant volume start
	/*
	 * @Override public List<String> midByTransaction(String agentName) {
	 * 
	 * String sql = null; List<String> listMid = new ArrayList<String>();
	 * 
	 * String data[] = null; String agid = null; String condt = null; String agname
	 * = null; if (agentName.contains("~")) { data = agentName.split("~"); agid =
	 * data[0]; condt = data[1]; agname = data[2]; }
	 * 
	 * if (condt.equals("AGENT")) {
	 * 
	 * sql = "select f.BUSINESS_NAME ,m.mid,f.id from FOR_SETTLEMENT a " +
	 * "INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
	 * "INNER JOIN AGENT ag on f.AGID_FK=ag.id  " +
	 * "where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() " +
	 * "and a.status='S' and ag.FIRST_NAME='" + agname + "' and ag.id='" + agid +
	 * "'" + "group by a.MID order by a.mid desc "; // ******* add bps in future
	 * include moto(S) logger.info("insisde agent"); sql =
	 * "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a " +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN AGENT ag on f.AGID_FK=ag.id  " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * } else { logger.info("insisde sub-agent"); sql =
	 * "select f.BUSINESS_NAME ,m.mid,f.id from FOR_SETTLEMENT a " +
	 * "INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
	 * "INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * "where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() " +
	 * "and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid + "' " +
	 * "group by a.MID order by a.mid desc ";
	 * 
	 * sql = "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a "
	 * +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * }
	 * 
	 * logger.info("Query : " + sql); Query sqlQuery =
	 * super.getSessionFactory().createSQLQuery(sql);//
	 * .addEntity(ForSettlement.class); sqlQuery.setString("agname", agname);
	 * sqlQuery.setString("agid", agid);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * logger.info("Size : " + resultSet.size());
	 * 
	 * for (Object[] rec : resultSet) {
	 * 
	 * if(rec[1]!=null){ listMid.add(rec[1].toString()); } if(rec[2]!=null){
	 * listMid.add(rec[2].toString()); } //logger.info("display list MID: " +
	 * rec[0].toString());
	 * 
	 * } return listMid; }
	 */

	@Override
	public List<Merchant> getMerchantDataByAgent(BigInteger agid) {
		return (List<Merchant>) getSessionFactory().createCriteria(Merchant.class).add(Restrictions.eq("agID", agid))
				.list();

	}

	@Override
	public List<MasterMerchant> getMasterMerchantDataByAgent(String agid) {
		return (List<MasterMerchant>) getSessionFactory().createCriteria(MasterMerchant.class)
				.add(Restrictions.eq("agId", agid)).list();

	}

	@Override
	public List<String> loadmidBymerchant(Long id) {

		String sql = null;
		BigInteger merchantid = BigInteger.valueOf(id);
		List<String> listMid = new ArrayList<String>();
		sql = "select f.BUSINESS_NAME ,f.ID from MID m INNER JOIN MERCHANT f ON f.MID_FK=m.ID where f.ID= :merchantid ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size ---: " + resultSet.size());

		for (Object[] rec : resultSet) {

			if (rec[1] != null) {
				listMid.add(rec[1].toString());
			}
			/*
			 * if(rec[2]!=null){ listMid.add(rec[2].toString()); }
			 */
			// logger.info("display list MID: " + rec[0].toString());

		}
		return listMid;

	}

	@Override
	public String merchantCount(String agentName) {
		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}
		String sql = "select f.ID from MERCHANT f where f.AGID_FK= :agid";
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		sqlQuery.setString("agid", agid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size ---: " + resultSet.size());

		return String.valueOf(resultSet.size());
	}

	@Override
	public List<String> midByTransaction(String agentName, String offset) {

		String sql = null;
		List<String> listMid = new ArrayList<String>();

		String data[] = null;
		String agid = null;
		String condt = null;
		String agname = null;
		if (agentName.contains("~")) {
			data = agentName.split("~");
			agid = data[0];
			condt = data[1];
			agname = data[2];
		}

		logger.info("insisde agent");

		sql = "select f.BUSINESS_NAME ,f.ID from MERCHANT f where f.AGID_FK= :agid "
				+ " order by f.ID desc limit 10 OFFSET " + offset;

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agname", agname);
		sqlQuery.setString("agid", agid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size ---: " + resultSet.size());

		for (Object[] rec : resultSet) {

			if (rec[1] != null) {
				listMid.add(rec[1].toString());
			}
			/*
			 * if(rec[2]!=null){ listMid.add(rec[2].toString()); }
			 */
			// logger.info("display list MID: " + rec[0].toString());

		}
		return listMid;
	}
	// end

	/*
	 * @Override //public List<ForSettlement> midByTransaction(String agentName) {
	 * public List<AgentVolumeData> midByTransaction(String agentName) {
	 * 
	 * List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
	 * String sql = null; List<AgentVolumeData> listMid = new
	 * ArrayList<AgentVolumeData>();
	 * 
	 * String data[] = null; String agid = null; String condt = null; String agname
	 * = null;
	 * 
	 * 
	 * List<String> date = new ArrayList<String>(); List<String> amount = new
	 * ArrayList<String>(); String agId = null; String agent = null; int cDate = 0;
	 * int count = 0;
	 * 
	 * //logger.info("Merchant MID: "+mid); Date dt = new Date(); cDate =
	 * dt.getMonth() + 1;
	 * 
	 * List<Integer> listMonth = getAllMonth(cDate);
	 * 
	 * 
	 * 
	 * if (agentName.contains("~")) { data = agentName.split("~"); agid = data[0];
	 * condt = data[1]; agname = data[2]; }
	 * 
	 * if (condt.equals("AGENT")) { logger.info("insisde agent");
	 * sql="select f.BUSINESS_NAME ,a.MID,sum(a.amount),month(a.time_stamp) ,f.id from FOR_SETTLEMENT a INNER JOIN MID m "
	 * +
	 * "on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on "
	 * +
	 * "f.AGID_FK=ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month)  and now() and a.status='S'"
	 * +
	 * " and ag.FIRST_NAME= :agname and ag.id= :agid group by a.MID,month(a.time_stamp) order by month(a.time_stamp) "
	 * + "desc"; // ******* add bps in future include moto(S)
	 * 
	 * sql = "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a "
	 * +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN AGENT ag on f.AGID_FK=ag.id  " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.FIRST_NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * } else { logger.info("insisde sub-agent"); sql =
	 * "select f.BUSINESS_NAME ,m.mid,f.id from FOR_SETTLEMENT a " +
	 * "INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
	 * "INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * "where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() " +
	 * "and a.status='S' and ag.NAME='" + agname + "' and ag.id= '" + agid + "' " +
	 * "group by a.MID order by a.mid desc ";
	 * 
	 * sql="select f.BUSINESS_NAME ,a.MID,sum(a.amount),month(a.time_stamp) ,f.id from FOR_SETTLEMENT a INNER JOIN MID m "
	 * +
	 * "on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on "
	 * +
	 * "f.SUBAGID_FK=ag.id where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month)  and now() and a.status='S'"
	 * +
	 * " and ag.NAME= :agname and ag.id= :agid group by a.MID,month(a.time_stamp) order by month(a.time_stamp) desc"
	 * ;
	 * 
	 * sql = "select f.BUSINESS_NAME ,a.MID,a.TXN_TYPE,f.id from FOR_SETTLEMENT a "
	 * +
	 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
	 * + " INNER JOIN INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id " +
	 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
	 * + " and a.status='S' and ag.NAME= :agname and ag.id= :agid " +
	 * " group by a.MID order by a.mid desc ";
	 * 
	 * }
	 * 
	 * logger.info("Query : " + sql); Query sqlQuery =
	 * super.getSessionFactory().createSQLQuery(sql);//
	 * .addEntity(ForSettlement.class); sqlQuery.setString("agname", agname);
	 * sqlQuery.setString("agid", agid);
	 * 
	 * @SuppressWarnings("unchecked") List<Object[]> resultSet = sqlQuery.list();
	 * logger.info("Size : " + resultSet.size());
	 * 
	 * for (Object[] rec : resultSet) { AgentVolumeData fs=new AgentVolumeData();
	 * if(rec[0]!=null){ fs.setMerchantName(rec[0].toString()); } if(rec[1]!=null){
	 * fs.setMid(rec[1].toString()); } if(rec[2]!=null){ Double d = new
	 * Double(rec[2].toString()); d = d / 100;
	 * 
	 * String pattern = "#,##0.00"; DecimalFormat myFormatter = new
	 * DecimalFormat(pattern); String output = myFormatter.format(d);
	 * fs.setAmount1(output); } if(rec[3]!=null){ fs.setMonth(rec[3].toString()); }
	 * if(rec[4]!=null){ fs.setMerchantId(rec[4].toString()); }
	 * agentVolumeDataList.add(fs); //logger.info("display list MID: " +
	 * rec[0].toString());
	 * 
	 * }
	 * 
	 * for (Object[] rec : resultSet) {
	 * 
	 * if(rec[3]!=null){ int date1 = Integer.parseInt(rec[3].toString());
	 * 
	 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
	 * while (listMonth.get(count).intValue() != date1) {
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++;
	 * 
	 * }
	 * 
	 * date.add(getMonth(date1)); } if(rec[2]!=null){ Double d = new
	 * Double(rec[2].toString()); d = d / 100;
	 * 
	 * String pattern = "#,##0.00"; DecimalFormat myFormatter = new
	 * DecimalFormat(pattern); String output = myFormatter.format(d);
	 * 
	 * amount.add(output);
	 * 
	 * } if(rec[1]!=null){ agId = rec[1].toString(); } if(rec[0]!=null){ agent =
	 * rec[0].toString(); }
	 * 
	 * count++; } while(count < 4){
	 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
	 * count++; } }
	 * 
	 * AgentVolumeData agentVolumeData = new AgentVolumeData();
	 * agentVolumeData.setAgId(agId); agentVolumeData.setAgentName(agent);
	 * agentVolumeData.setAmount(amount); agentVolumeData.setDate(date);
	 * agentVolumeDataList.add(agentVolumeData);
	 * 
	 * return agentVolumeDataList; }
	 */

	// merchant volume multiple merchant start
	// merchant volume multiple merchant start

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMid(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMid1(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id from FOR_SETTLEMENT a "
		 * +
		 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
		 * +
		 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 90 DAY)  and now() "
		 * + " and a.status='S' and a.mid= :mid " +
		 * " group by a.MID,month(a.time_stamp) order by a.time_stamp desc ";
		 */

		/*
		 * sql =
		 * "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id,a.TXN_TYPE from FOR_SETTLEMENT a "
		 * +
		 * " INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
		 * +
		 * " where a.time_stamp   between DATE_SUB(now(), INTERVAL 3 month)  and now() "
		 * + " and a.status='S' and a.mid= :mid " +
		 * " group by month(a.time_stamp) order by a.time_stamp desc ";
		 */
		/*
		 * sql="select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
		 * +
		 * "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
		 * +
		 * "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
		 * + "month(a.time_stamp) order by a.time_stamp desc limit 4";
		 */

		sql = "select month(a.time_stamp) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getHotelMerchantByMid(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.TIME_STAMP) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID=m.UM_MOTO_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.TIME_STAMP "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
				+ "month(a.TIME_STAMP) having montha in (" + month + ") order by a.TIME_STAMP desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantVolByMid(final String mid, String type) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;
		AgentVolumeData agentVolumeData = new AgentVolumeData();
		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		if ((type == null) || (type.equals("P"))) {
			sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
					+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID= :mid  group by "
					+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

			logger.info("Query : " + sql);

			// System.out.println("no records found:" +sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("mid", mid);
			// sqlQuery.setString("motoMid", motoMid);
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("resultSet Size : " + resultSet.size());
			logger.info("month Size : " + listMonth.size());
			if (resultSet.size() <= 0) {

				Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
						.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
				agId = merchant.getId().toString();
				agent = merchant.getBusinessName().toLowerCase();

				for (int a : listMonth) {
					date.add(getMonth(a));
					amount.add("0.00");

				}

			} else {

				for (Object[] rec : resultSet) {

					// if(count <=3) {

					if (rec[0] != null) {
						int date1 = Integer.parseInt(rec[0].toString());

						logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
						while (listMonth.get(count).intValue() != date1) {
							date.add(getMonth(listMonth.get(count).intValue()));
							amount.add("0.00");
							count++;

						}

						date.add(getMonth(date1));
					}
					if (rec[1] != null) {
						Double d = new Double(rec[1].toString());
						d = d / 100;

						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(d);

						amount.add(output);

					}
					if (rec[3] != null) {
						agId = rec[3].toString();
					}
					if (rec[2] != null) {
						agent = rec[2].toString();
					}
					/*
					 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
					 */
					// }
					count++;

				}
				while (count <= 3) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;
				}
			}

			agentVolumeData.setAgId(agId);
			agentVolumeData.setAgentName(agent.toLowerCase());
			agentVolumeData.setTxnType(txnType);
			agentVolumeData.setAmount(amount);
			agentVolumeData.setDate(date);
		}

		else {
			sql = "select month(u.TIME_STAMP) montha, sum(u.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
					+ "from UM_ECOM_TXNRESPONSE u INNER JOIN MID m on u.F001_MID=m.UM_MOTO_MID "
					+ "or u.F001_MID=m.UM_EZYWAY_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.timeStamp "
					+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and u.status='S' and f.ID= :mid  group by "
					+ "month(u.TIME_STAMP) having montha in (" + month + ") order by u.TIME_STAMP desc";

			logger.info("Query : " + sql);

			// System.out.println("no records found:" +sql);
			Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("mid", mid);
			// sqlQuery.setString("motoMid", motoMid);
			List<Object[]> resultSet = sqlQuery.list();
			logger.info("resultSet Size : " + resultSet.size());
			logger.info("month Size : " + listMonth.size());
			if (resultSet.size() <= 0) {

				Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
						.add(Restrictions.eq("id", Long.parseLong(mid))).setMaxResults(1).uniqueResult();
				agId = merchant.getId().toString();
				agent = merchant.getBusinessName().toLowerCase();

				for (int a : listMonth) {
					date.add(getMonth(a));
					amount.add("0.00");

				}

			} else {

				for (Object[] rec : resultSet) {

					// if(count <=3) {

					if (rec[0] != null) {
						int date1 = Integer.parseInt(rec[0].toString());

						logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
						while (listMonth.get(count).intValue() != date1) {
							date.add(getMonth(listMonth.get(count).intValue()));
							amount.add("0.00");
							count++;

						}

						date.add(getMonth(date1));
					}
					if (rec[1] != null) {
						Double d = new Double(rec[1].toString());
						d = d / 100;

						String pattern = "#,##0.00";
						DecimalFormat myFormatter = new DecimalFormat(pattern);
						String output = myFormatter.format(d);

						amount.add(output);

					}
					if (rec[3] != null) {
						agId = rec[3].toString();
					}
					if (rec[2] != null) {
						agent = rec[2].toString();
					}
					/*
					 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
					 */
					// }
					count++;

				}
				while (count <= 3) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;
				}
			}

			agentVolumeData.setAgId(agId);
			agentVolumeData.setAgentName(agent.toLowerCase());
			agentVolumeData.setTxnType(txnType);
			agentVolumeData.setAmount(amount);
			agentVolumeData.setDate(date);
		}

		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	/*
	 * @Transactional(readOnly = true) public List<AgentVolumeData>
	 * getMerchantVolumeByMID(final String mID,final String aID) {
	 */

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantVolumeByMID(final String mID, final String aID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		List<String> txnTypes = new ArrayList<String>();
		String mId = null;
		String merchantBusinessName = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		// logger.info("Merchant MID: "+aid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id,a.TXN_TYPE from "
				+ "FOR_SETTLEMENT a  INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID or "
				+ "a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 2 month) and now() and a.status='S' and f.AGID_FK= :aID and f.ID= :mID "
				+ "group by month(a.time_stamp),a.MID order by month(a.time_stamp) desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("aID", aID);
		sqlQuery.setString("mID", mID);
		// sqlQuery.setString("motoMid", motoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());

		String month = null;
		String amt = null;
		for (Object[] rec : resultSet) {
			AgentVolumeData agentVolumeData = new AgentVolumeData();
			if (rec[0] != null) {
				int date1 = Integer.parseInt(rec[0].toString());

				logger.info("display  : " + date1 + " : ");

				date.add(getMonth(date1));

				month = getMonth(date1);

			}
			if (rec[1] != null) {
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);

				amount.add(output);

				amt = output;
			}
			if (rec[2] != null) {
				merchantBusinessName = rec[2].toString();
			}
			if (rec[3] != null) {
				mId = rec[3].toString();
			}

			if (rec[4] != null) {
				logger.info("txn-type: " + rec[4].toString());
				txnType = rec[4].toString();
				if (txnType.equals("MOTO")) {
					txnType = "EZYMOTO";
				} else if (txnType.equals("EZYREC") || txnType.equals("RECURRING")) {
					txnType = "EZYREC";
				} else if (txnType.equals("CASH")) {
					txnType = "EZYCASH";
				}
			} else {
				txnType = "EZYWIRE";
			}

			txnTypes.add(txnType);
			agentVolumeData.setAgId(mId);
			agentVolumeData.setMerchantName(merchantBusinessName);
			// agentVolumeData.setTxnTypes(txnTypes);
			agentVolumeData.setTxnType(txnType);
			// agentVolumeData.setAmount(amount);
			agentVolumeData.setAmount1(amt);
			agentVolumeData.setMonth(month);
			// agentVolumeData.setDate(date);
			logger.info(agentVolumeData.getAgId() + " " + agentVolumeData.getAgentName() + " "
					+ agentVolumeData.getAmount() + " " + agentVolumeData.getDate());
			logger.info(agentVolumeData.getAmount1() + " " + agentVolumeData.getMonth() + " "
					+ agentVolumeData.getTxnType());
			agentVolumeDataList.add(agentVolumeData);
		}

		// agentVolumeDataList.add(agentVolumeData);

		return agentVolumeDataList;
	}

	// sugAgent Volume Data 06-01-2017 new method for superAgent

	@Override
	public List<AgentVolumeData> superAgentVolumeData(SubAgent subAgent, Agent AgId) {
		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = null;
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		// pDate = dt.getMonth()-2;
		logger.info("Current Month : " + cDate);

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount , ag.NAME  ,ag.id from "
				+ "FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN SUB_AGENT ag on f.SUBAGID_FK=ag.id where  a.time_stamp between DATE_SUB(now(), INTERVAL 90 DAY)  and now()"
				+ " and a.status='S'  and ag.id= :id " + "group by month(a.time_stamp) order by a.time_stamp  desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setLong("id", subAgent.getId());
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Size : " + resultSet.size());
		logger.info("Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			// String sql1 =
			// "select a.ID,a.FIRST_NAME from mobiversa.agent a where
			// a.FIRST_NAME='"+agentName+"'";
			logger.info(" size is ZERO  ");
			SubAgent agent1 = (SubAgent) getSessionFactory().createCriteria(SubAgent.class)
					.add(Restrictions.eq("id", subAgent.getId())).setMaxResults(1).uniqueResult();
			agId = agent1.getId().toString();
			agent = agent1.getName();
			agentDet = agId + "~SUBAGENT~" + agent;
			present = "No";
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");
				// count ++;

			}

		} else {

			for (Object[] rec : resultSet) {
				// for(Integer mon : listMonth){
				int date1 = Integer.parseInt(rec[0].toString());
				// if(cDate != date1 && count == 0){
				logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
				while (listMonth.get(count).intValue() != date1) {
					date.add(getMonth(listMonth.get(count).intValue()));
					amount.add("0.00");
					count++;

				} // else{
				date.add(getMonth(date1));
				Double d = new Double(rec[1].toString());
				d = d / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);

				amount.add(output);

				agId = rec[3].toString();
				agent = rec[2].toString();
				present = "Yes";
				agentDet = rec[3].toString() + "~SUBAGENT~" + rec[2].toString();
				count++;
			}
			while (count < 4) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}
		// logger.info("agId :" + agId);
		// logger.info("agent :" + agent);
		// logger.info("agentDet :" + agentDet);
		// logger.info("amount :" + amount);
		// logger.info("date :" + date);
		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent);
		agentVolumeData.setAgentDet(agentDet);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeData.setTxnPresent(present);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}
	// }

	// all transaction export new method
	@SuppressWarnings("unchecked")
	@Override
	public List<ForSettlement> listAllETransactionDetails(ArrayList<Criterion> props, String date, String date1) {

		logger.info("Inside listAllTransactionDetails : " + date + "     " + date1);
		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props,
		 * Order.desc("timeStamp"));
		 */
		if (props.size() == 2) {
			return (List<ForSettlement>) getSessionFactory().createCriteria(ForSettlement.class).add(props.get(0))
					.add(props.get(1)).addOrder(Order.desc("timeStamp")).list();
		} else {
			return (List<ForSettlement>) getSessionFactory().createCriteria(ForSettlement.class).add(props.get(0))
					.addOrder(Order.desc("timeStamp")).list();
		}
	}

	@Override
	public void searchForSettlementcard(String fromDate, String toDate, String tid, String status,
			PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> criterionList) {
		// TODO Auto-generated method stub

	}

	@Override
	public void loadMerchantByName(PaginationBean<ForSettlement> paginationBean, String merchantName, String date) {
		// TODO Auto-generated method stub

	}

	@Override
	public void getMotoList(final PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> criterionList,
			final String fromDate, final String toDate, final String status, final Merchant merchant) {

		/*
		 * List<Object[]>resultList=
		 * (List<Object[]>)super.getSessionFactory().createCriteria(ForSettlement.class,
		 * "f") .add(Restrictions.eq("f.TRX_ID", merchant.getMid().getMotoMid()))
		 * .add(Restrictions.eq("f.STATUS", new String[] { "A", "C","S" }))
		 * .add(Restrictions.between("f.timeStamp", toDate, fromDate)) .setProjection(
		 * Projections.projectionList() .add( Projections.property("f.TRX_ID") ) .add(
		 * Projections.property("t.TRX_ID"))
		 * 
		 * ) .addOrder( Order.desc("f.timeStamp") ).list();
		 */

		/*
		 * Criteria criteria =
		 * super.getSessionFactory().createCriteria(ForSettlement.class, "f")
		 * .createAlias("f.transanctionrequest","t") .add(Restrictions.eq("f.TRX_ID",
		 * merchant.getMid().getMotoMid())) .add(Restrictions.eq("f.STATUS", new
		 * String[] { "A", "C","S" })) .add(Restrictions.between("f.TIME_STAMP", toDate,
		 * fromDate)) ;
		 */

		Criteria criteria = super.getSessionFactory().createCriteria(TransactionRequest.class, "t")
				.createAlias("t.forsettlement", "f").add(Restrictions.eq("f.TRX_ID", merchant.getMid().getMotoMid()))
				.add(Restrictions.eq("f.STATUS", new String[] { "A", "C", "S" }))
				.add(Restrictions.between("f.TIME_STAMP", toDate, fromDate));

		List<Object[]> resultList = criteria.list();

		// List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultList.size());
		for (Object[] rec : resultList) {

			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				logger.info(rec[0].toString());
			}
			if (rec[1] != null) {
				logger.info(rec[1].toString());
			}

		}

	}

	@Override
	public void searchForSettlementMotoByTid(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String motoMid = merchant.getMid().getMotoMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		// List<MotoTxnDetails> txnDetails
		// =loadMototxnDetails(merchant,tid,fromDate,toDate);

		/*
		 * if (fromDate == null || fromDate.equals("")) {
		 * 
		 * Date dt = new Date();
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM"); fromDate =
		 * dateFormat.format(dt); fromDate = fromDate + "-01";
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * fromDate = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(fromDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * } if (toDate == null || toDate.equals("")) { Date dt1 = new Date();
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); toDate =
		 * dateFormat1.format(dt1);
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * toDate = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(toDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * }
		 */
		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				/*
				 * sql2 =
				 * "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
				 * +
				 * "f.TRX_ID ,f.TID ,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
				 * + "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.MID = m.MID " +
				 * " where f.STATUS= :status and f.TIME_STAMP " +
				 * "between :fromDate  and :toDate " +
				 * "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('MOTO','EZYLINK') order by f.TIME_STAMP desc limit 1000"
				 * ;
				 */

				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where f.STATUS= :status and f.TIME_STAMP " + "between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') " + "UNION "
						+ "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MMOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where f.STATUS= :status and f.TIME_STAMP " + "between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('EZYMOTO','EZYLINK')";

				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where  f.STATUS in ('A','S','C') and f.TIME_STAMP " + " between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') " + "UNION "
						+ "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MMOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where  f.STATUS in ('A','S','C') and f.TIME_STAMP" + " between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') ";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where f.STATUS in ('A','S','C') "
						+ "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') " + "UNION "
						+ "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MMOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where f.STATUS in ('A','S','C') "
						+ "and f.MID= :motoMid and f.TID= :tid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') ";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where  f.STATUS= :status and f.TIME_STAMP " + "between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') " + "UNION "
						+ "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MMOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where  f.STATUS= :status and f.TIME_STAMP " + "between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') ";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("motoMid", motoMid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where f.STATUS in ('A','S','C') and f.TIME_STAMP" + " between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') " + "UNION "
						+ "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MMOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where f.STATUS in ('A','S','C') and f.TIME_STAMP" + " between :fromDate  and :toDate "
						+ "and f.MID= :motoMid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') ";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("motoMid", motoMid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID, f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where  f.STATUS in ('A','S','C') "
						+ "and f.MID= :motoMid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') " + "UNION "
						+ "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID, f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME,m.EMAIL,m.MOBILENO from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t "
						+ "ON f.TRX_ID=t.TXN_ID INNER JOIN MMOTO_TXN_DETAILS m ON f.TRX_ID = m.TXNID "
						+ " where  f.STATUS in ('A','S','C') "
						+ "and f.MID= :motoMid and f.TXN_TYPE in ('EZYMOTO','EZYLINK') ";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("motoMid", motoMid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setAidResponse(rec[10].toString());
			}
			if (rec[11] != null) {
				fs.setCardType(rec[11].toString());
			}
			if (rec[12] != null) {
				fs.setBatchNo(rec[12].toString());
			}
			if (rec[13] != null) {
				fs.setRrn(rec[13].toString());
			}

			if (rec[14] != null) {
				fs.setInvoiceId(rec[14].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[15] != null) {
				fs.setNumOfRefund(rec[15].toString());
			} else {
				fs.setNumOfRefund("");
			}

			if (rec[16] != null) {
				fs.setPinEntry(rec[16].toString()); // email id
			} else {
				fs.setPinEntry("");
			}

			if (rec[17] != null) {
				fs.setAgentName(rec[17].toString()); // Mobile no
			} else {
				fs.setAgentName("");
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void searchForSettlementMoto(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, Merchant merchant) {

		logger.info("inside motoSearchList by Merchant" + " " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);

		String motoMid = merchant.getMid().getMotoMid();
		// String mid="000003203000009";
		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		/*
		 * if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() &&
		 * !toDate.isEmpty()) && (!status.isEmpty() && status != null)) {
		 * logger.info("inside date and status criteria: " + "from date: " + fromDate +
		 * "toDate: " + toDate + "status: " + status);
		 * 
		 * logger.info("else checking all status " + status); sql =
		 * "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,"
		 * +
		 * "a.TRX_ID,a.STAN from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
		 * + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS= :status and a.TXN_TYPE='MOTO' and a.MID= :motoMid " +
		 * "and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
		 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		 * sqlQuery.setString("status", status); sqlQuery.setString("fromDate",
		 * fromDate); sqlQuery.setString("toDate", toDate);
		 * sqlQuery.setString("motoMid", motoMid);
		 * 
		 * }
		 * 
		 * else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() &&
		 * !toDate.isEmpty())) { logger.info( "inside date criteria: " + "from date: " +
		 * fromDate + "toDate: " + toDate + "status: " + status);
		 * 
		 * sql =
		 * "select f.BUSINESS_NAME,a.TIME_STAMP ,a.AMOUNT ,a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','C') and a.TXN_TYPE=" + "'MOTO'" + " and a.MID='"
		 * + motoMid + "' " +
		 * "and a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 1000"
		 * ; sqlQuery = super.getSessionFactory().createSQLQuery(sql); //
		 * sqlQuery.setString("txn_Type", txn_Type); sqlQuery.setString("fromDate",
		 * fromDate); sqlQuery.setString("toDate", toDate); }
		 * 
		 * else { logger.info("status: " + status); sql =
		 * "select f.BUSINESS_NAME ,a.TIME_STAMP , a.AMOUNT , a.TIME,a.STATUS, a.TID,a.MID,a.LOCATION,a.TRX_ID,a.STAN "
		 * + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID " +
		 * "INNER JOIN MERCHANT f ON f.MID_FK=m.ID " +
		 * "where a.STATUS in ('A','S','C') and a.TXN_TYPE=" + "'MOTO'" + " and a.MID='"
		 * + motoMid + "'" + " order by a.TIME_STAMP desc limit 1000"; sqlQuery =
		 * super.getSessionFactory().createSQLQuery(sql);
		 * 
		 * }
		 */
		if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
				&& !(status.isEmpty())) {
			logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
			sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
					+ "between :fromDate  and :toDate "
					+ "and f.MID= :motoMid and f.TXN_TYPE='MOTO' order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("motoMid", motoMid);
		} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
			logger.info("else if: ");
			sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and f.TIME_STAMP"
					+ " between :fromDate and :toDate "
					+ "and f.MID= :motoMid and f.TXN_TYPE = 'MOTO' order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("motoMid", motoMid);
		} else {
			logger.info("inside else:");
			sql = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
					+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
					+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') "
					+ "and f.MID= :motoMid and f.TXN_TYPE = 'MOTO' order by f.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("motoMid", motoMid);
		}

		logger.info("Query : " + sql);
		// Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);//
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("dat", dat); sqlQuery.setString("dat1", dat1);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public void searchForSettlementEzyWay(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String ezywayMid = merchant.getMid().getEzywayMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		/*
		 * if (fromDate == null || fromDate.equals("")) {
		 * 
		 * Date dt = new Date();
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM"); fromDate =
		 * dateFormat.format(dt); fromDate = fromDate + "-01";
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * fromDate = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(fromDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * } if (toDate == null || toDate.equals("")) { Date dt1 = new Date();
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); toDate =
		 * dateFormat1.format(dt1);
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * toDate = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(toDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * }
		 */
		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE,t.CARD_TYPE,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezywayMid and f.TID= :tid and f.TXN_TYPE='EZYWAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezywayMid and f.TID= :tid and f.TXN_TYPE='EZYWAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezywayMid and f.TID= :tid and f.TXN_TYPE='EZYWAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezywayMid and f.TXN_TYPE='EZYWAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezywayMid", ezywayMid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID ,f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN ,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezywayMid and f.TXN_TYPE='EZYWAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezywayMid", ezywayMid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID, f.AID_RESPONSE ,t.CARD_TYPE ,t.CARD_SCHEME,f.RRN,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezywayMid and f.TXN_TYPE='EZYWAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezywayMid", ezywayMid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setAidResponse(rec[10].toString());
			}
			if (rec[11] != null) {
				fs.setCardType(rec[11].toString());
			}
			if (rec[12] != null) {
				fs.setBatchNo(rec[12].toString());
			}
			if (rec[13] != null) {
				fs.setRrn(rec[13].toString());
			}

			if (rec[14] != null) {
				fs.setInvoiceId(rec[14].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[15] != null) {
				fs.setNumOfRefund(rec[15].toString());
			} else {
				fs.setNumOfRefund("");
			}

			

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void searchForSettlementEzyPass(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String ezypassMid = merchant.getMid().getEzypassMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		/*
		 * if (fromDate == null || fromDate.equals("")) {
		 * 
		 * Date dt = new Date();
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM"); fromDate =
		 * dateFormat.format(dt); fromDate = fromDate + "-01";
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * fromDate = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(fromDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * } if (toDate == null || toDate.equals("")) { Date dt1 = new Date();
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); toDate =
		 * dateFormat1.format(dt1);
		 * 
		 * } else {
		 * 
		 * 
		 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd"); try {
		 * toDate = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
		 * .parse(toDate)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * }
		 */
		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TID= :tid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TID= :tid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezypassMid and f.TID= :tid and f.TXN_TYPE ='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezypassMid and f.TXN_TYPE='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezypassMid", ezypassMid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezypassMid and f.TXN_TYPE ='EZYPASS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezypassMid", ezypassMid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setInvoiceId(rec[10].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[11] != null) {

				fs.setNumOfRefund(rec[11].toString());
			} else {
				fs.setNumOfRefund("");
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void searchForSettlementEzyRec(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {
		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;

		String ezyrecMid = null;
		TerminalDetails termDetails = loadTerminalDetailsByMid(merchant.getMid().getEzyrecMid());

		if ((termDetails.getDeviceType() == "EZYPOD") || (termDetails.getDeviceType().equals("EZYPOD"))) {

			ezyrecMid = merchant.getMid().getEzyrecMid();

		} else {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE,f.RRN from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TID= :tid and f.TXN_TYPE IN ('EZYREC','RECURRING') order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE,f.RRN from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TID= :tid and f.TXN_TYPE IN ('EZYREC','RECURRING')order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE,f.RRN from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezyrecMid and f.TID= :tid and f.TXN_TYPE IN ('EZYREC','RECURRING') order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE,f.RRN from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE IN ('EZYREC','RECURRING') order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE,f.RRN from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE IN ('EZYREC','RECURRING')order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE,f.RRN from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE IN ('EZYREC','RECURRING') order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			if (rec[10] != null) {
				fs.setInvoiceId(rec[10].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[11] != null) {
				fs.setNumOfRefund(rec[11].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());
			}

			if (rec[13] != null) {
				fs.setRrn(rec[13].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void getCardTransactionForSettlement(PaginationBean<ForSettlement> paginationBean, Merchant merchant,
			String txnType, String date, String date1, String status) {
		logger.info("In dao impl*******");
		/*
		 * super.getPaginationItemsByPage(paginationBean, ForSettlement.class, props,
		 * Order.desc("timeStamp"));
		 */
		// String TXN_TYPE1=new String[]{null,"RECURRING"};
		// String TXN_TYPE2="RECURRING";

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();
		String mid = null;
		String motoMid = null;
		String ezywayMid = null;
		String ezyrecMid = null;
		String ezypassMid = null;
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		logger.info("mid: " + mid);
		logger.info("motomid: " + motoMid);
		logger.info("ezyrec: " + ezyrecMid);
		logger.info("ezyway: " + ezywayMid);
		logger.info("ezypass: " + ezypassMid);
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		String sql2 = null;
		if (status != null && !status.isEmpty()) {
			logger.info("inside status.." + status);
			if (txnType.equals("EZYWIRE")) {

				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID='" + mid
						+ "' and f.TXN_TYPE is Null and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("BOOST")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID IN ('" + mid + "','"
						+ motoMid + "','" + ezyrecMid + "','" + ezypassMid + "') and "
						+ "f.TXN_TYPE='BOOST' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYREC")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID='" + ezyrecMid
						+ "' and f.TXN_TYPE IN ('EZYREC','RECURRING') and f.TIME_STAMP between '" + from + "' and '"
						+ to + "'" + " order by f.TIME_STAMP desc";
			} else {
				if (txnType.equals("MOTO")) {
					mid = motoMid;
				} else if (txnType.equals("EZYPASS")) {
					mid = ezypassMid;
				} else if (txnType.equals("EZYWAY")) {
					mid = ezywayMid;
				}
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS='" + status + "' and " + "f.MID='" + mid
						+ "' and f.TXN_TYPE='" + txnType + "' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			}

		} else {
			logger.info("inside all status.." + txnType);
			if (txnType.equals("EZYWIRE")) {

				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C','R','P') and " + "f.MID='" + mid
						+ "' and f.TXN_TYPE is Null and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("MOTO")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and " + "f.MID='" + motoMid
						+ "' and f.TXN_TYPE='MOTO' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYREC")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.MID='" + ezyrecMid
						+ "' and f.TXN_TYPE IN ('EZYREC','RECURRING') and f.TIME_STAMP between '" + from + "' and '"
						+ to + "'" + " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYPASS")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and " + "f.MID='" + ezypassMid
						+ "' and f.TXN_TYPE='EZYPASS' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("EZYWAY")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and " + "f.MID='" + ezywayMid
						+ "' and f.TXN_TYPE='EZYWAY' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			} else if (txnType.equals("BOOST")) {
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID,f.TID,f.TXN_TYPE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('BP','BPC','BPA','BPS') and " + "f.MID IN ('" + mid
						+ "','" + motoMid + "','" + ezyrecMid + "','" + ezypassMid + "') and "
						+ "f.TXN_TYPE='BOOST' and f.TIME_STAMP between '" + from + "' and '" + to + "'"
						+ " order by f.TIME_STAMP desc";
			}

		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);// .addEntity(ForSettlement.class);
		/*
		 * setParameter("MID", mid); sqlQuery.setString("f.MID", mid);
		 */
		// sqlQuery.setString("TXN_TYPE1", TXN_TYPE1);
		// sqlQuery.setString("TXN_TYPE2", TXN_TYPE2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[2].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[2].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[2].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
				}
				if (rec[2].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
				}
				if (rec[2].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
				}
				if (rec[2].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
				}
				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT
				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setPan(rec[7].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// trxid
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}
			if (rec[10] != null) {
				fs.setTxnType(rec[10].toString());
			} else {
				fs.setTxnType("CARD");
			}
			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public List<MID> loadAllmid() {
		return (List<MID>) getSessionFactory().createCriteria(MID.class).list();

	}

	@Override
	public List<String> midByTransaction(String agentName) {
		// TODO Auto-generated method stub
		return null;
	}

	public List<TerminalDetails> loadAlltid() {
		return (List<TerminalDetails>) getSessionFactory().createCriteria(TerminalDetails.class).list();

	}

	@Override
	public void getTransactionRequest(PaginationBean<TransactionRequest> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, TransactionRequest.class, props, Order.desc("timeStamp"));

	}

	@Override
	public void getTransactionResponse(PaginationBean<TransactionResponse> paginationBean, ArrayList<Criterion> props) {
		logger.info("In dao impl*******");
		super.getPaginationItemsByPage(paginationBean, TransactionResponse.class, props, Order.desc("timeStamp"));

	}

	@Override
	public void getTransactionEnquiry(PaginationBean<TransactionRequest> paginationBean, String fromDate1,
			String toDate1, String mid, String tid) {

		logger.info("fromDate: " + fromDate1 + "  toDate : " + toDate1);
		String fromDate = null, toDate = null;

		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		int year = calendar.getWeekYear();
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate() - 20;

		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		/*
		 * if(fromDate1!=null && toDate1!=null && !fromDate1.isEmpty() &&
		 * !toDate1.isEmpty()) { fromDate=fromDate1; toDate=toDate1; }else { try {
		 * toDate=new SimpleDateFormat("yyyy-MM-dd").format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(dateorg2)); fromDate=new
		 * SimpleDateFormat("yyyy-MM-dd").format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(dateorg1)); } catch (ParseException e1)
		 * { // TODO Auto-generated catch block e1.printStackTrace(); } }
		 */

		String sql2 = null;
		Query sqlQuery = null;

		ArrayList<TransactionRequest> fsList = new ArrayList<TransactionRequest>();

		if (mid != null && !mid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("mid : " + mid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.MID= :mid  "
					+ "and tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		} else if (tid != null && !tid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD') "
					+ "group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		} else if (tid != null && mid != null && !tid.isEmpty() && !mid.isEmpty() && fromDate1 != null
				&& toDate1 != null && !fromDate1.isEmpty() && !toDate1.isEmpty()) {
			logger.info("mid : " + mid + " and tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and tr.MID= :mid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("mid", mid);

		} else if (fromDate1 != null && toDate1 != null && !fromDate1.isEmpty() && !toDate1.isEmpty()) {
			fromDate = fromDate1;
			toDate = toDate1;
			logger.info("search with date :::" + "fromDate:" + fromDate + "toDate:" + toDate);

			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TXN_TYPE not in "
					+ "('LOGIN','TCUPLOAD','BATCHUPLOAD') and tr.TIME_STAMP between :fromDate and :toDate group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		} else {
			logger.info("No criteria");

			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TXN_TYPE not in "
					+ "('LOGIN','TCUPLOAD','BATCHUPLOAD')  group by tr.TXN_ID order by tr.TIME_STAMP desc limit 100";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
		}

		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			TransactionRequest fs = new TransactionRequest();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setTransactionDate(rd);

				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTransactionTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {

				// a.MID
				fs.setPan(rec[1].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan();// .substring(fs.getPan().length() - 16);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);

			}

			if (rec[2] != null && !rec[2].toString().isEmpty()) {

				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}

			if (rec[3] != null) {
				fs.setAid(rec[3].toString());
			}

			if (rec[4] != null) {
				fs.setRefNo(rec[4].toString());
			}
			if (rec[5] != null) {
				// fs.setPosConditionCode(rec[5].toString());
				fs.setPosConditionCode(HostResponse.getHostResponse(rec[5].toString()));
			}
			if (rec[6] != null) {
				fs.setBatchNo(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setStan(rec[7].toString());
			}

			if (rec[8] != null) {
				fs.setTid(rec[8].toString());
			}
			if (rec[9] != null) {
				fs.setMid(rec[9].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

	}

	@Override
	public void searchForSettlementEzyRecplus(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {

		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String ezyrecMid = merchant.getMid().getEzyrecMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TID= :tid and f.TXN_TYPE='RECPLUS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TID= :tid and f.TXN_TYPE='RECPLUS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezyrecMid and f.TID= :tid and f.TXN_TYPE='RECPLUS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE='RECPLUS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE='RECPLUS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID,f.INVOICE_ID,t.CARD_HOLDER_NAME,f.AID_RESPONSE from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('A','S','C') "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE='RECPLUS' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("ezyrecMid", ezyrecMid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[2].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[2].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}

				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			if (rec[10] != null) {
				fs.setInvoiceId(rec[10].toString());
			} else {
				fs.setInvoiceId("");
			}

			if (rec[11] != null) {
				fs.setNumOfRefund(rec[11].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());
			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	public void searchForSettlementGrabpay(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> criterionList, String fromDate, String toDate, String status, String tid,
			Merchant merchant) {

		logger.info("fromDate: " + fromDate + "  toDate : " + toDate);

		String sql2 = null;
		Query sqlQuery = null;
		String gpayid = merchant.getMid().getGpayMid();

		ArrayList<ForSettlement> fsList = new ArrayList<ForSettlement>();

		if (tid != null && !tid.isEmpty()) {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :gpayid and f.TID= :tid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("status", status);
				sqlQuery.setString("tid", tid);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GPP','GRF','GPC','GPT') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :gpayid and f.TID= :tid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("tid", tid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GPP','GRF','GPC','GPT') "
						+ "and f.MID= :gpayid and f.TID= :tid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("tid", tid);
			}
		} else {
			if ((fromDate != null && toDate != null && status != null) && !(fromDate.isEmpty()) && !(toDate.isEmpty())
					&& !(status.isEmpty())) {
				logger.info("inside if:  date: " + fromDate + " " + toDate + " :status: " + status);
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f  INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS= :status and f.TIME_STAMP "
						+ "between :fromDate  and :toDate "
						+ "and f.MID= :ezyrecMid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
				sqlQuery.setString("status", status);
			} else if (fromDate != null && toDate != null && !(fromDate.isEmpty()) && !(toDate.isEmpty())) {
				logger.info("else if: ");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GPP','GRF','GPC','GPT') and f.TIME_STAMP"
						+ " between :fromDate  and :toDate "
						+ "and f.MID= :gpayid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("fromDate", fromDate);
				sqlQuery.setString("toDate", toDate);
				sqlQuery.setString("gpayid", gpayid);
			} else {
				logger.info("inside else:");
				sql2 = "select f.TIME_STAMP,f.TIME,f.STATUS,f.STAN,f.AMOUNT,f.LOCATION,f.MID,t.MASKED_PAN, "
						+ "f.TRX_ID ,f.TID from FOR_SETTLEMENT f INNER JOIN TRANSACTION_REQUEST t"
						+ " where f.TRX_ID=t.TXN_ID and f.STATUS in ('GPS','GPP','GRF','GPC','GPT') "
						+ "and f.MID= :gpayid and f.TXN_TYPE='GRABPAY' order by f.TIME_STAMP desc limit 1000";
				sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
				sqlQuery.setString("gpayid", gpayid);
			}
		}

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("fromDate", fromDate); sqlQuery.setString("toDate",
		 * toDate);
		 */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[1] != null) {
				// a.TIME
				fs.setTime(rec[1].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[1].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}

			if (rec[2] != null) {

				// a.`STATUS`

				if (rec[2].toString().equals("GPS")) {
					fs.setStatus("COMPLETED");
				}
				if (rec[2].toString().equals("GPP")) {
					fs.setStatus("PENDING");
				}
				if (rec[2].toString().equals("GRF")) {
					fs.setStatus("REFUND");
				}
				if (rec[2].toString().equals("GPC")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[2].toString().equals("GPT")) {
					fs.setStatus("SETTLED");
				}

				// fs.setStatus(rec[2].toString());
			}
			if (rec[3] != null) {
				// stan
				fs.setStan(rec[3].toString());
			}

			if (rec[4] != null) {
				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[4].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}
			if (rec[5] != null) {
				// a.LOCATION
				fs.setLocation(rec[5].toString());
			}
			if (rec[6] != null) {
				// a.MID
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				// a.MID
				fs.setPan(rec[7].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);
			} else {
				fs.setPan("NA");
			}
			if (rec[8] != null) {
				// a.MID
				BigInteger bi = new BigInteger(rec[8].toString());
				fs.setTrxId(bi);
				// logger.info("txnid: "+fs.getTrxId());
			}
			if (rec[9] != null) {
				// a.TID
				fs.setTid(rec[9].toString());
				if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CANCELLED")) {
					// logger.info("TID : "+rec[5].toString());
					TerminalDetails td = getTerminalDetailsByTid(rec[9].toString());
					if (td != null) {
						// logger.info("TID : "+td.getTid());
						if (td.getContactName() != null) {
							// logger.info("TID : "+td.getContactName());
							fs.setMerchantName(td.getContactName());
						} else {
							fs.setMerchantName("");
						}
					}
				}

			}

			fsList.add(fs);
		}
		paginationBean.setItemList(fsList);

		// paginationBean.setItemList(agentNameList);
		// paginationBean.setTotalRowCount(agentNameList.size());

	}

	@Override
	@Transactional(readOnly = true)
	public void listAllUmTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllUMTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);
		sql = "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
				+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME,a.HOST_TYPE "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
				+ "where a.status in ('S','CT','A','BPA','BPS') and a.time_stamp between :from  and :to "
				+ "group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setLocation(rec[0].toString());
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString().toUpperCase());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}
			if (rec[4] != null) {
				fs.setAgentName(rec[4].toString());
			}

			String rd1 = null;
			if (rec[5] != null) {
				try {
					rd1 = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
					fs.setNumOfRefund(rd1);
				} catch (ParseException e) {

					e.printStackTrace();
				}
			}
			if (rec[6] != null) {
				fs.setStatus(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setTxnType(rec[7].toString());
			}

			if (rec[8] != null) {
				fs.setMid(rec[8].toString());
			}
			if (rec[10] != null) {
				fs.setHostType(rec[10].toString());
			}
			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void searchAllUmEzywireTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllUMTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);

		sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
				+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
				+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
				+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
				+ "order by a.time_stamp desc limit 1000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void searchAllForsettlementTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date, final String date1, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";
		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		} else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BP','BPA','BPS') and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 100";

		}
		else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :from and :to "
					+ "order by a.time_stamp desc limit 1000";

		}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void listAllForsettlementTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		
		
		//new date condition - 29/12/2020
		Date dt = new Date();
				
				String fromDate = null, toDate = null;

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				fromDate = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = fromDate.substring(0, fromDate.length() - 2);
				fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
				System.out.println("change date format:" + fromDate);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				toDate = dateFormat1.format(dt1);
				String to1 = toDate.substring(0, toDate.length() - 2);
				toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
				System.out.println("date format:" + toDate);
				
		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);
		if ((txnType == null) || txnType.equals("EZYWIRE")) {

			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE IS NULL and IFNULL(f.MERCHANT_TYPE,'') not like 'U' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";
		} else if (txnType.equals("EZYWAY")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYWAY_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYWAY' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYMOTO")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYMOTO' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYREC")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYREC' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("RECPLUS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'RECPLUS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYPASS")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYPASS_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
					+ "where a.TXN_TYPE = 'EZYPASS' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYPOD")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.EZYREC_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "INNER JOIN TERMINAL_DETAILS s ON s.MERCHANT_ID=m.EZYREC_MID "
					+ "where s.DEVICE_TYPE = 'EZYPOD' and a.TXN_TYPE = 'EZYREC'and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		} else if (txnType.equals("EZYLINK")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MOTO_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		}

		else if (txnType.equals("BOOST")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,a.HOST_TYPE,a.PIN_ENTRY,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID "
					+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYREC_MID or a.MID=m.EZYWAY_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'BOOST' and a.STATUS in ('BP','BPA','BPS') and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";

		}else if (txnType.equals("EZYLINKLITE")) {
			sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
					+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
					+ "a.RRN,a.AID_RESPONSE,a.STAN,a.MOBILITE_TID "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MOBILITE_TID=m.LITE_MID "
					+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "where a.TXN_TYPE = 'EZYLINK' and a.STATUS in ('A','S','C','R','P') and a.MOBILITE_TID like 'LITE00%' and a.TIME_STAMP between :fromDate and :toDate "
					+ "order by a.time_stamp desc limit 100";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());

			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setAidResponse(rec[12].toString());

			} else {
				fs.setAidResponse("");
			}
			if (rec[13] != null) {
				fs.setStan(rec[13].toString());

			} else {
				fs.setStan("");
			}
			if (rec[14] != null) {
				fs.setMid(rec[14].toString());

			} else {
				fs.setMid("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	@Transactional(readOnly = true)
	public void listAllUmEzywireTransaction(final PaginationBean<ForSettlement> paginationBean,
			final ArrayList<Criterion> props, final String date1, final String date2, final String txnType) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 + " " + txnType);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		
		//new date condition - 29/12/2020
		Date dt = new Date();
				
				String fromDate = null, toDate = null;

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				fromDate = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = fromDate.substring(0, fromDate.length() - 2);
				fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
				System.out.println("change date format:" + fromDate);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				toDate = dateFormat1.format(dt1);
				String to1 = toDate.substring(0, toDate.length() - 2);
				toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
				System.out.println("date format:" + toDate);
				
		logger.info("check date and year : " + fromDate + "  " + toDate);

		logger.info("inside ALL" + txnType);

		sql = "select a.time,f.BUSINESS_NAME AS MerchantName ,a.time_stamp ,a.AMOUNT, "
				+ "a.status,a.TXN_TYPE,a.TID,a.INVOICE_ID,t.CARD_HOLDER_NAME,t.MASKED_PAN,a.TRX_ID, "
				+ "a.RRN,a.STAN,a.MID,a.AID_RESPONSE " + "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
				+ "INNER JOIN TRANSACTION_REQUEST t ON a.TRX_ID=t.TXN_ID " + "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
				+ "where a.TXN_TYPE IS NULL and f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','C','R','P') and a.TIME_STAMP between :fromDate and :toDate "
				+ "order by a.time_stamp desc limit 100";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("fromDate", fromDate);
		sqlQuery.setString("toDate", toDate);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setTime(rec[0].toString());
				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {
				fs.setMerchantName(rec[1].toString());
			}

			String rd = null;
			if (rec[2] != null) {
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
			}

			if (rec[3] != null) {

				Double d = new Double(rec[3].toString());
				d = d / 100;
				// logger.info("data : " + d);
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(d);
				// logger.info(d + " " + pattern + " " + output);
				fs.setAmount(output);
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("B")) {
					fs.setStatus("BLOCKED");
				}
			}
			if (rec[5] != null) {
				if ((rec[5].toString().isEmpty())) {
					fs.setTxnType("EZYWIRE");
				} else {
					fs.setTxnType(rec[5].toString());
				}
			}

			if (rec[6] != null) {
				fs.setTid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setInvoiceId(rec[7].toString());
			} else {
				fs.setInvoiceId("");
			}
			if (rec[8] != null) {
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				fs.setPan(rec[9].toString());
				String pan = fs.getPan().substring(fs.getPan().length() - 8);
				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					fs.setPan(pan);
				} else {
					fs.setPan(pan);
				}
			} else {
				fs.setPan("NA");
			}

			if (rec[10] != null) {
				BigInteger bi = new BigInteger(rec[10].toString());
				fs.setTrxId(bi);

			}
			if (rec[11] != null) {
				fs.setRrn(rec[11].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[12] != null) {
				fs.setStan(rec[12].toString());
			} else {
				fs.setStan("");
			}
			if (rec[13] != null) {
				fs.setMid(rec[13].toString());
			} else {
				fs.setMid("");
			}
			if (rec[14] != null) {
				fs.setAidResponse(rec[14].toString());
			} else {
				fs.setAidResponse("");
			}

			fss.add(fs);

		}

		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Override
	public List<TransactionRequest> exportTransactionExpiry(ArrayList<Criterion> criterionList, String fromDate1,
			String toDate1, String mid, String tid) {

		logger.info("inside exportTransactionExpiry " + " from date: " + fromDate1 + "toDate: " + toDate1 + " mid: "
				+ mid + "tid: " + tid);

		String sql2 = null;
		Query sqlQuery = null;

		ArrayList<TransactionRequest> fsList = new ArrayList<TransactionRequest>();

		if (mid != null && !mid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("mid : " + mid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.MID= :mid  "
					+ "and tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		} else if (tid != null && !tid.isEmpty() && fromDate1 != null && toDate1 != null && !fromDate1.isEmpty()
				&& !toDate1.isEmpty()) {
			logger.info("tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD') "
					+ "group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		} else if (tid != null && mid != null && !tid.isEmpty() && !mid.isEmpty() && fromDate1 != null
				&& toDate1 != null && !fromDate1.isEmpty() && !toDate1.isEmpty()) {
			logger.info("mid : " + mid + " and tid : " + tid + "fromDate:" + fromDate1 + "toDate:" + toDate1);
			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TID= :tid and tr.MID= :mid and "
					+ "tr.TIME_STAMP between :fromDate and :toDate  and tr.TXN_TYPE not in ('LOGIN','TCUPLOAD','BATCHUPLOAD')"
					+ " group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);
			sqlQuery.setString("tid", tid);
			sqlQuery.setString("mid", mid);

		} else {

			logger.info("search with date :::" + "fromDate:" + fromDate1 + "toDate:" + toDate1);

			sql2 = "select tr.TIME_STAMP,tr.MASKED_PAN,tr.AMOUNT,trs.AID_RESPONSE,trs.RRN,trs.RESPONSE_CODE,"
					+ "tr.BATCH_NO,tr.STAN,tr.TID,tr.MID from TRANSACTION_REQUEST tr INNER JOIN TRANSACTION_RESPONSE trs "
					+ "where tr.TXN_ID=trs.TXN_ID and tr.AMOUNT is not NULL and tr.TXN_TYPE not in "
					+ "('LOGIN','TCUPLOAD','BATCHUPLOAD') and tr.TIME_STAMP between :fromDate and :toDate group by tr.TXN_ID order by tr.TIME_STAMP desc limit 1000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
			sqlQuery.setString("fromDate", fromDate1);
			sqlQuery.setString("toDate", toDate1);

		}

		logger.info("Query : " + sql2);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			TransactionRequest fs = new TransactionRequest();
			if (rec[0] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setTransactionDate(rd);

				try {

					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[0].toString()));
					// forSettlement.setDate(rd+"-"+forSettlement.getTxnYear());

					fs.setTransactionTime(rt);
				} catch (ParseException e) {
				}
			}
			if (rec[1] != null) {

				// a.MID
				fs.setPan(rec[1].toString());
				// logger.info("check pan: "+fs.getPan());
				String pan = fs.getPan();// .substring(fs.getPan().length() - 16);
				// fs.setPan(pan);

				if (pan.contains("f")) {
					pan = pan.replaceAll("f", "X");
					// System.out.println("if: "+pan.replaceAll("f","X"));
					fs.setPan(pan);
					// System.out.println("pan changed: "+pan);
				} else {
					// pan=fs.getPan();
					fs.setPan(pan);
					// System.out.println("else: "+pan);
				}
				// logger.info("pan: "+pan);

			}

			if (rec[2] != null && !rec[2].toString().isEmpty()) {

				// a.AMOUNT

				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);

			}

			if (rec[3] != null) {
				fs.setAid(rec[3].toString());
			}

			if (rec[4] != null) {
				fs.setRefNo(rec[4].toString());
			}
			if (rec[5] != null) {
				// fs.setPosConditionCode(rec[5].toString());
				fs.setPosConditionCode(HostResponse.getHostResponse(rec[5].toString()));
			}
			if (rec[6] != null) {
				fs.setBatchNo(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setStan(rec[7].toString());
			}

			if (rec[8] != null) {
				fs.setTid(rec[8].toString());
			}
			if (rec[9] != null) {
				fs.setMid(rec[9].toString());
			}

			fsList.add(fs);
		}

		return fsList;

	}

	@Override
	public void listUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String mid) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "     " + date1 + " " + mid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (mid.equals("ALL") || mid.isEmpty() || mid == null) {
			logger.info("Inside UMEzyway MID: " + mid);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S','CB') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else {
			logger.info("Search by MID:" + mid);
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S','CB') and res.txn_type ='EZYWAY' and res.F001_MID=:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("mid", mid);

		}

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCBDate(rec[13].toString());
			} else {
				fs.setCBDate("");
			}

			if (rec[14] != null) {
				fs.setCBReason(rec[14].toString());
			} else {
				fs.setCBReason("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String mid) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "     " + date1 + " " + mid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		Query sqlQuery = null;
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (mid.equals("ALL") || mid.isEmpty() || mid == null) {
			logger.info("Inside UMEzyway MID: " + mid);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S','CB') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);

		} else {
			logger.info("export by MID:" + mid);
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F249_TXCH,res.F254_DDRESPCODE,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S','CB') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYWAY' and res.F001_MID=:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

			logger.info("Query : " + sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
			sqlQuery.setString("from", from);
			sqlQuery.setString("to", to);
			sqlQuery.setString("mid", mid);

		}
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S','CB','FR') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and res.txn_type = 'EZYWAY' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzywayMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzywayMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}

			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				logger.info("respMsg" + respMsg);
				fs.setRespMessage(respMsg);
				logger.info("setRespMessage: " + fs.getRespMessage());
			} else {
				fs.setRespMessage("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.txn_type = 'EZYWAY'  and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000')  and  res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransactionEnq(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umEzywayMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzywayMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.txn_type = 'EZYWAY' and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}
			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzywayMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransaction : " + date + "  " + date1 + "  " + txnType + "  " + umEzywayMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql = "select req.F001_MID,req.F007_TXNAMT,req.MASKED_PAN, " +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') "
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ; +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */

			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S','CB') and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzywayMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[3].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}
			if (rec[12] != null) {
				fs.setF270_ORN(rec[12].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[13] != null) {
				fs.setF268_CHNAME(rec[13].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public UMEcomTxnRequest loadUMEzywayTransactionRequest(String id) {
		return (UMEcomTxnRequest) sessionFactory.getCurrentSession().createCriteria(UMEcomTxnRequest.class)
				.add(Restrictions.eq("f263_MRN", id)).setMaxResults(1).uniqueResult();
	}

	@Override
	public UMEcomTxnResponse loadUMEzywayTransactionResponse(String id) {

		logger.info("MRN:" + id);

		Disjunction orExp = null;

		Criterion pending = Restrictions.like("status", "A");
		Criterion complete = Restrictions.like("status", "S");
		Criterion cancel = Restrictions.like("status", "C");

		orExp = Restrictions.or(complete, pending, cancel);

		return (UMEcomTxnResponse) sessionFactory.getCurrentSession().createCriteria(UMEcomTxnResponse.class)
				.add(Restrictions.eq("f263_MRN", id)).add(orExp).setMaxResults(1).uniqueResult();
	}

	public String getResMsg(String code) {

		logger.info("get response message");

		String msg = "";
		switch (code) {
		case "00":
			msg = "Approved";
			break;
		case "01":
			msg = "Refer To Issuer";
			break;
		case "02":
			msg = "Refer To Issuer, Special Condition";
			break;
		case "03":
			msg = "Invalid Merchant ID";
			break;
		case "04":
			msg = "Pick Up Card";
			break;
		case "05":
			msg = "Do Not Honour";
			break;
		case "06":
			msg = "Error";
			break;
		case "07":
			msg = "Pick Up Card";
			break;
		case "12":
			msg = "Invalid Transaction";
			break;
		case "13":
			msg = "Invalid Amount";
			break;
		case "14":
			msg = "Invalid Card Number (PAN)";
			break;
		case "19":
			msg = "Re-enter Transaction";
			break;
		case "21":
			msg = "No Action Taken (Unable to back out prior transaction)";
			break;
		case "22":
			msg = "Transaction in pending stage (in progress)*";
			break;
		case "23":
			msg = "Invalid/Unacceptable Transaction Fee";
			break;
		case "25":
			msg = "Terminated/Inactive card";
			break;
		case "30":
			msg = "Message Format Error";
			break;
		case "31":
			msg = "Bank ID Not Found";
			break;
		case "41":
			msg = "Card Reported Lost";
			break;
		case "43":
			msg = "Stolen Card";
			break;
		case "44":
			msg = "PIN Change Require";
			break;
		case "45":
			msg = "Card Not Activated For Use";
			break;
		case "51":
			msg = "Insufficient Fund";
			break;
		case "52":
			msg = "No Checking Count";
			break;
		case "53":
			msg = "No Savings Account";
			break;
		case "54":
			msg = "Expired Card";
			break;
		case "55":
			msg = "Invalid PIN";
			break;
		case "56":
			msg = "Invalid Card";
			break;
		case "57":
			msg = "Transaction not permitted to cardholder";
			break;
		case "58":
			msg = "Invalid Transaction";
			break;
		case "59":
			msg = "Suspected Fraud";
			break;
		case "61":
			msg = "Over Limit";
			break;
		case "62":
			msg = "Restricted Card";
			break;
		case "63":
			msg = "Security Violation";
			break;
		case "68":
			msg = "Transaction timeout (No reply from acquirer)";
			break;
		case "75":
			msg = "PIN Tries Exceeded";
			break;
		case "76":
			msg = "Unable to locate previous message";
			break;
		case "77":
			msg = "Repeat or Reversal Data are inconsistent";
			break;
		case "78":
			msg = "Card is not activated yet";
			break;
		case "80":
			msg = "Credit issuer unavailable";
			break;
		case "83":
			msg = "Unable to verify PIN";
			break;
		case "88":
			msg = "Call Issuer";
			break;
		case "91":
			msg = "Issuer/Switch Error";
			break;
		case "92":
			msg = "Destination cannot be found for routing";
			break;
		case "93":
			msg = "Transaction cannot be completed; violation of law";
			break;
		case "94":
			msg = "Duplicate Transaction";
			break;
		case "95":
			msg = "Total Mismatch (reconciliation problem)";
			break;
		case "96":
			msg = "System Malfunction/Error";
			break;
		case "99":
			msg = "Unknown/unmappable response code";
			break;
		case "N7":
			msg = "Decline for CVV2 failure";
			break;
		default:
			msg = "Trsnsaction Failed";
			break;
		}

		return msg;

	}

	@Override
	public void listUMMotoTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210','0230') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyrecTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzyrecMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyrecTransaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umEzyrecMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " 
					+ "where  res.H001_MTI in ('0210') and  req.H001_MTI in ('0200')  and res.`STATUS` in ('A','C','S','FR') and res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type = 'EZYREC' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 200";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzyrecMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");
				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMLink Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMLink ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

//			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
//					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME from "
//					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
//					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
//					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
//					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
//					+ "and res.H001_MTI in ('0290','0210') "
//					+ "where res.`STATUS` in ('A','C','S','FR') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

			
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
                    + "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,res.F270_ORN,res.F268_CHNAME from "
                    + "mobiversa.UM_ECOM_TXNRESPONSE as res "
                    + "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
                    + "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
                    + "and res.H001_MTI in ('0290','0210') "
                    + "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and res.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
			
			
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("FR")) {
					fs.setSTATUS("REFUNDED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}
	

	@Override
	public void listUMVccTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMMoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyauthMerchantTransaction(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthMerchantTransaction : " + date + "     " + date1 + "  " + umMotoMid + " "
				+ txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyauth ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			// '0290',

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','E','C')and res.txn_type = 'EZYAUTH' and req.F003_PROCCODE in ('003000','303000') and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("E")) {
					//fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setF270_ORN(rec[13].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[14] != null) {
				fs.setF268_CHNAME(rec[14].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMMoto Transaction export: " + date + "  " + date1 + "  " + txnType + "  " + umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql = "select req.F001_MID,req.F007_TXNAMT,req.MASKED_PAN, " +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') "
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */

			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F278_EMAILADDR,req.F279_HP from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05' and req.F003_PROCCODE in ('003000','303000') and res.txn_type ='EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[16] != null) {
				fs.setF278_EMAILADDR(rec[16].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}

			if (rec[17] != null) {
				fs.setF279_HP(rec[17].toString());
			} else {
				fs.setF279_HP("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyrecTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umEzyrecMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list umEzyrecMid Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
				+ umEzyrecMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside umEzyrecMid ALL " + txnType);

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F278_EMAILADDR,req.F279_HP from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')and res.txn_type ='EZYREC' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umEzyrecMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYREC")) {

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[16] != null) {
				fs.setF278_EMAILADDR(rec[16].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}

			if (rec[17] != null) {
				fs.setF279_HP(rec[17].toString());
			} else {
				fs.setF279_HP("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Transaction export: " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto vcc ALL " + txnType);
			/*
			 * sql = "select req.F001_MID,req.F007_TXNAMT,req.MASKED_PAN, " +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') "
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */

			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V' and res.txn_type ='EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyauthTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "  " + date1 + " " + umMotoMid + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyauth ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','C','S') and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyrecTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyrecTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYREC' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");

				}
			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMLinkTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S')  and res.H002_VNO ='03'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMVccTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMVccTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V' and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			/*
			 * if(rec[14]!=null){
			 * 
			 * logger.info("H002_VNO: "+rec[14].toString());
			 * 
			 * }else { }
			 */

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}
			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[14].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[15].toString());
					} else if (rec[14].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyrecTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside exportUMEzyrecTransactionAdmin Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside exportUMEzyrecTransactionAdmin ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYREC' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMlinkTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[14].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[15].toString());
					} else if (rec[14].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTransactionAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMVccTransaction Export : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto vcc ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='05V'  and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				logger.info("H002_VNO: " + rec[14].toString());

				logger.info("TXN_TYPE: " + rec[15].toString());

				if (rec[15].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[14].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[15].toString());
					} else if (rec[14].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[16] != null) {
				fs.setF270_ORN(rec[16].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[17] != null) {
				fs.setF268_CHNAME(rec[17].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and  res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzyrecTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("listUMEzyrecTxnEnqByAdmin Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0210') "
					+ "where res.H002_VNO ='05' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYREC' and  res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");
				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMLinkTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMlink Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO,res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where  res.H002_VNO ='03' and req.F003_PROCCODE in ('003000') and res.txn_type ='EZYMOTO' and  res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMVccTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Transaction Enquiry : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO ='05V' and req.F003_PROCCODE in ('003000')  and res.txn_type ='EZYMOTO' and  res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Enquiry Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '05' and req.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyrecTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside exportUMEzyrecTxnEnqByAdmin Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside exportUMEzyrecTxnEnqByAdmin  ALL " + txnType);

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYREC_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0210') "
					+ "where res.`STATUS` in ('A','C','S') AND res.H002_VNO = '05' and req.F003_PROCCODE in ('003000') and res.txn_type = 'EZYREC' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYREC")) {

					fs.setTxnType("EZYREC");

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMlink Enquiry Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '03' and req.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTxnEnqByAdmin(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto Vcc Enquiry Export: " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyMoto Enquiry ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.time_stamp between :from  and :to order by req.time_stamp desc";
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '05V' and req.F003_PROCCODE in ('003000') and res.txn_type = 'EZYMOTO' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05V")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMEzymoto Enquiry Transaction : " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.txn_type = 'EZYMOTO'and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMVccTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMEzymoto VCC Enquiry Transaction : " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F350_CRDTYP,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '05V' and  res.txn_type = 'EZYMOTO'and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}
			if (rec[14] != null) {
				fs.setCardType(rec[14].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[15] != null) {

				String respMsg = getResMsg(rec[15].toString());
				fs.setRespMessage(respMsg);
			} else {
				fs.setRespMessage("");
			}

			if (rec[17] != null) {

				logger.info("H002_VNO: " + rec[16].toString());

				logger.info("TXN_TYPE: " + rec[17].toString());

				if (rec[17].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[16].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[17].toString());
					} else if (rec[16].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[18] != null) {
				fs.setF270_ORN(rec[18].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[19] != null) {
				fs.setF268_CHNAME(rec[19].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMMoto Enquiry Transaction  : " + date + "  " + date1 + "  " + txnType + "  " + umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}

			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				logger.info("respMsg" + respMsg);
				fs.setRespMessage(respMsg);
				logger.info("setRespMessage: " + fs.getRespMessage());
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMVccTransactionEnq(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMMoto VCC Enquiry Transaction  : " + date + "  " + date1 + "  " + txnType + "  "
				+ umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzymoto VCC ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where req.F001_MID =:mid and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, "
					+ "res.`STATUS`,res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F259_TXNSTATMSG,res.F009_RESPCODE, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME from mobiversa.UM_ECOM_TXNRESPONSE as res "
					/*
					 * +
					 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
					 */
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.H002_VNO = '05V' and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setTxnstatMsg(rec[13].toString());
			} else {
				fs.setTxnstatMsg("");
			}

			if (rec[14] != null) {

				String respMsg = getResMsg(rec[14].toString());
				logger.info("respMsg" + respMsg);
				fs.setRespMessage(respMsg);
				logger.info("setRespMessage: " + fs.getRespMessage());
			} else {
				fs.setRespMessage("");
			}

			if (rec[16] != null) {

				logger.info("H002_VNO: " + rec[15].toString());

				logger.info("TXN_TYPE: " + rec[16].toString());

				if (rec[16].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[15].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[16].toString());
					} else if (rec[15].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[17] != null) {
				fs.setF270_ORN(rec[17].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[18] != null) {
				fs.setF268_CHNAME(rec[18].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<ForSettlement> exportAllUmTransaction(final ArrayList<Criterion> props, final String date,
			final String date1, final String txnType) {
		// logger.info("Inside listAllTransaction");
		String dat = null;
		String dat1 = null;
		String year1 = null;
		String year2 = null;
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;

		if (date == null || date.equals("")) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
			dat = dateFormat.format(dt);
			dat = dat + "-01";

		} else {

			dat = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		if (date1 == null || date1.equals("")) {
			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			dat1 = dateFormat1.format(dt1);

		} else {

			dat1 = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("check date: " + dat + " : " + dat1);

		/*
		 * if(txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
		 */
		logger.info("inside all type");
		sql = "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
				+ "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID " + "INNER JOIN MERCHANT f "
				+ "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id "
				+ "where a.status in ('S','A','CT','BPS','BPA','GPS','GPP') and time_stamp between :dat and :dat1"
				+ " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 2500";

		/*
		 * }else if(txnType.equals("UMOBILE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * +
		 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id where a.status in ('S','A') "
		 * +
		 * "and a.TXN_TYPE is NULL and a.HOST_TYPE='U' and a.time_stamp between :dat and :dat1 "
		 * +
		 * "group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 2500"
		 * ; }else if(txnType.equals("EZYWIRE")){ logger.info("inside card type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
		 * + " ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("BOOST")){ logger.info("inside boost type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID or a.MID=m.UM_MOTO_MID "
		 * + "INNER JOIN MERCHANT f " +
		 * "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('BPS','BPA') and a.TXN_TYPE='BOOST' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("EZYMOTO")){ logger.info("inside moto type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MOTO_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE='MOTO' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * }else if(txnType.equals("EZYREC")){ logger.info("inside EZYREC type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_EZYREC_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE='EZYREC' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * }else if(txnType.equals("EZYWAY")){ logger.info("inside EZYWAY type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_EZYWAY_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE='EZYWAY' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("EZYCASH")){ logger.info("inside cash type"); sql =
		 * "select f.state, f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount ,"
		 * + " ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('CT') and a.TXN_TYPE='CASH' and time_stamp between :dat and :dat1"
		 * +
		 * " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc limit 1000"
		 * ;
		 * 
		 * } else if(txnType.equals("EZYRECPLUS")){
		 * logger.info("inside EZYRECPLUS: "+txnType); sql =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.mid,a.status,a.TXN_TYPE " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_EZYREC_MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('A','S') and a.TXN_TYPE='RECPLUS' and a.time_stamp between :dat  and :dat1"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("dat", dat);
		sqlQuery.setString("dat1", dat1);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("No of Records: " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			fs.setLocation(rec[0].toString());
			fs.setMerchantName(rec[1].toString().toUpperCase());

			String rd = null;
			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[2].toString()));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			fs.setDate(rd);

			// logger.info("check date: "+fs.getDate());
			fs.setStatus(rec[7].toString());
			// logger.info("check status: "+fs.getStatus());
			/*
			 * if((fs.getStatus().equals("BP") || fs.getStatus().equals("BPA") ||
			 * fs.getStatus().equals("BPS")) || (fs.getStatus()=="BP" ||
			 * fs.getStatus()=="BPS" || fs.getStatus()=="BPA") ) {
			 * //logger.info("inside if check status: "+fs.getStatus()); Double d = new
			 * Double(rec[3].toString()); d = d / 100; String pattern = "#,##0.00";
			 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output =
			 * myFormatter.format(d); fs.setAmount(output); } else {
			 */
			// logger.info("inside else check status: "+fs.getStatus());
			Double d = new Double(rec[3].toString());
			d = d / 100;
			String pattern = "#,##0.00";
			DecimalFormat myFormatter = new DecimalFormat(pattern);
			String output = myFormatter.format(d);
			fs.setAmount(output);
			// }

			fs.setAgentName(rec[4].toString());
			String rd1 = null;
			if (rec[5] != null) {
				try {
					rd1 = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[5].toString()));
				} catch (ParseException e) {

					e.printStackTrace();
				}
			}
			fs.setNumOfRefund(rd1);
			fs.setMid(rec[6].toString());
			/*
			 * if(rec[8]!=null){ fs.setTrxId(new BigInteger(rec[8].toString())); } else {
			 * fs.setTxnType("CARD"); }
			 */

			if (rec[8] != null) {
				fs.setTxnType(rec[8].toString());

				logger.info("fs.txntype" + fs.getTxnType());

				if (fs.getTxnType().equals("MOTO")) {
					fs.setTxnType("EZYMOTO");
				} else if (fs.getTxnType().equals("CASH")) {
					fs.setTxnType("EZYCASH");
				} else if (fs.getTxnType().equals("BOOST")) {
					fs.setTxnType("BOOST");
				} else if (fs.getTxnType().equals("EZYWAY")) {
					fs.setTxnType("EZYWAY");
				} else if ((fs.getTxnType().equals("EZYREC")) || (fs.getTxnType().equals("RECURRING"))) {
					fs.setTxnType("EZYREC");
				} else if (fs.getTxnType().equals("RECPLUS")) {
					fs.setTxnType("EZYREC+");
				} else if (fs.getTxnType().equals("GRABPAY")) {
					fs.setTxnType("GRABPAY");
				} else {
					fs.setTxnType("EZYWIRE");
				}
			} else {
				fs.setTxnType("EZYWIRE");
			}
			fss.add(fs);
		}
		return fss;
	}

	@Override
	public void motoVC(PaginationBean<MotoVCDetails> paginationBean, String date, String date1, String motoMid)
			throws Exception {

		logger.info("Inside motoVC list : " + date + "  " + date1 + "  " + motoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<MotoVCDetails> fss = new ArrayList<MotoVCDetails>();
		String sql = null;

		/*
		 * if ((date == null || date1 == null) || (date.equals("") || date1.equals("")))
		 * {
		 * 
		 * Date dt = new Date();
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); from =
		 * dateFormat.format(dt); // logger.info("change date format:" + from); // from
		 * = from + "-01"; String from1 = from.substring(0, from.length() - 2); from =
		 * from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
		 * logger.info("change date format:" + from);
		 * 
		 * Date dt1 = new Date(); SimpleDateFormat dateFormat1 = new
		 * SimpleDateFormat("yyyy-MM-dd"); to = dateFormat1.format(dt1); String to1 =
		 * to.substring(0, to.length() - 2); to = to1 + String.format("%02d", 1 +
		 * Integer.valueOf(to.substring(8, 10))); logger.info("date format:" + to);
		 * 
		 * } else {
		 * 
		 * from = date; SimpleDateFormat dateFormat = new
		 * SimpleDateFormat("yyyy-MM-dd"); try { from = dateFormat.format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(from)); logger.info("date format:" +
		 * date); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * to = date1; SimpleDateFormat dateFormat1 = new
		 * SimpleDateFormat("yyyy-MM-dd"); try { to = dateFormat1.format(new
		 * SimpleDateFormat("dd/MM/yyyy").parse(to)); } catch (ParseException e) {
		 * 
		 * e.printStackTrace(); }
		 * 
		 * }
		 */

		
		
		
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		logger.info("checkd date: " + from + " : " + to);
		sql = "select d.ID ,d.CREATED_DATE,d.NAMEONCARD,d.TXN_DETAILS,d.`STATUS`,d.AMOUNT,d.RESP_CODE,d.RESP_MSG,d.TXNID,d.TID,d.REFERENCE "
				+ "from  mobiversa.MOTO_VC_DETAILS as d where d.MID =:mid order by d.time_stamp desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/*
		 * sqlQuery.setString("from", from); sqlQuery.setString("to", to);
		 */
		sqlQuery.setString("mid", motoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		String txnDetails = null;
		String tidTid = null;
		String txnAmount = null;

		for (Object[] rec : resultSet) {

			/*
			 * logger.info("ID :::::::::::::::"+rec[0].toString());
			 * logger.info("Created Date::::::"+rec[1].toString());
			 * logger.info("Name on card::::::"+rec[2].toString());
			 * logger.info("TxnDetails::::::::"+rec[3].toString());
			 * logger.info("Status::::::::::::"+rec[4].toString());
			 * logger.info("Amount::::::::::::"+rec[5].toString());
			 * logger.info("Resp Code:::::::::"+rec[6].toString());
			 * logger.info("Resp Msg::::::::::"+rec[7].toString());
			 * logger.info("TxnID:::::::::::::"+rec[8].toString());
			 */

			MotoVCDetails fs = new MotoVCDetails();

			if (rec[0] != null) {
				fs.setId(Long.parseLong(rec[0].toString()));
			} else {
				fs.setId(Long.parseLong(""));
			}

			if (rec[1] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setCreatedBy(rd);

			} else {
				fs.setCreatedBy("");
			}

			if (rec[2] != null) {
				fs.setNameOnCard(rec[2].toString());
			} else {
				fs.setNameOnCard("");
			}

			if (rec[3] != null) {
				tidTid = rec[9].toString() + rec[9].toString();
				tidTid = tidTid.replaceAll("\\s", "");
				txnDetails = AESencrp.hexaToAscii(rec[3].toString(), true);
//						logger.info(" json Object HEXA Decrypted txnDetails " + txnDetails);
				txnDetails = AESencrp.decrypt1(txnDetails, tidTid);
//						logger.info(" txnDetails " +txnDetails);
				String test = txnDetails;
				String cardNo = test.substring(0, test.indexOf("~"));
//						logger.info(" cardNo " +cardNo);

				String replaced = cardNo.replaceAll("\\b(\\d{6})\\d+(\\d{4})", "$1XXXXXX$2");
				logger.info(" replaced " + replaced);

				fs.setTxnDetails(replaced);
			} else {
				fs.setTxnDetails("");
			}

			if (rec[4] != null) {
				if (rec[4].toString().equals("ACTIVE")) {
					fs.setStatus(CommonStatus.ACTIVE);
				} else if (rec[4].toString().equals("SUBMITTED")) {
					fs.setStatus(CommonStatus.SUBMITTED);
				} else if (rec[4].toString().equals("REJECTED")) {
					fs.setStatus(CommonStatus.REJECTED);
				} else if (rec[4].toString().equals("APPROVED")) {
					fs.setStatus(CommonStatus.APPROVED);
				} else if (rec[4].toString().equals("PENDING")) {
					fs.setStatus(CommonStatus.PENDING);
				} else if (rec[4].toString().equals("CANCELLED")) {
					fs.setStatus(CommonStatus.CANCELLED);
				} else if (rec[4].toString().equals("SENT")) {
					fs.setStatus(CommonStatus.SENT);
				}
			} else {
				fs.setStatus(null);
			}

			if (rec[5] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[5].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			} else {
				fs.setAmount("");
			}

			if (rec[6] != null) {
				fs.setRespCode(rec[6].toString());
			} else {
				fs.setRespCode("");
			}

			if (rec[7] != null) {
				fs.setRespMsg(rec[7].toString());
			} else {
				fs.setRespMsg("");
			}

			if (rec[8] != null) {
				fs.setTxnId(rec[8].toString());
			} else {
				fs.setTxnId("");
			}

			if (rec[10] != null) {
				fs.setReference(rec[10].toString());
			} else {
				fs.setReference("");
			}

			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<MotoVCDetails> getActiveMoto(String mid) {

		List<MotoVCDetails> td = super.getSessionFactory().createCriteria(MotoVCDetails.class)
				.add(Restrictions.eq("mid", mid)).add(Restrictions.eq("status", CommonStatus.ACTIVE)).list();
		return td;

	}

	@Override
	public MotoVCDetails motoVCById(String id) {
		return (MotoVCDetails) getSessionFactory().createCriteria(MotoVCDetails.class)
				.add(Restrictions.eq("id", Long.parseLong(id))).setMaxResults(1).uniqueResult();
	}

	@Override
	public void listUMEzyauthTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);
			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			// '0290',

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','E','C') and res.txn_type = 'EZYAUTH' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());

			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("E")) {
					//fs.setSTATUS("TO SALE");
					fs.setSTATUS("PREAUTH");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzyauthTransactionAdmin(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside listUMEzyauthTransaction : " + date + "  " + date1 + "  " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzyway ALL " + txnType);

			/*
			 * sql =
			 * "select req.F001_MID,req.F005_EXPDATE,req.F007_TXNAMT,req.F354_TID,req.MASKED_PAN, "
			 * +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_EZYWAY_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') " +
			 * "where res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */
			/* + "order by req.time_stamp desc"; */
			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " + "and res.H001_MTI in ('0110') "
					+ "where res.`STATUS` in ('A','S','C') and res.time_stamp between :from  and :to order by res.time_stamp desc";
		}
		/*
		 * else if(txnType.equals("EZYWIRE")) { logger.info("inside CARD"+txnType); sql
		 * =
		 * "select f.state,f.BUSINESS_NAME AS MerchantName ,a.time_stamp , sum(a.AMOUNT)  TotalAmount , "
		 * + "ag.FIRST_NAME,f.ACTIVATE_DATE,a.status,a.TXN_TYPE,a.MID,a.TIME " +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID INNER JOIN MERCHANT f "
		 * + "ON f.MID_FK=m.ID INNER JOIN AGENT ag on f.AGID_FK=ag.id " +
		 * "where a.status in ('S','A') and a.TXN_TYPE is NULL and a.time_stamp between :from  and :to"
		 * + " group by a.MID,DATE(a.time_stamp),a.TXN_TYPE order by a.time_stamp desc";
		 * }
		 */

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				} else if (rec[5].toString().equals("CB")) {
					fs.setSTATUS("CHARGE BACK");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listBoostTransaction(PaginationBean<BoostDailyRecon> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String txnType) {

		if (txnType.equalsIgnoreCase("ALL")) {

			logger.info("Boost Transaction : " + txnType);

			Session session = sessionFactory.getCurrentSession();

			List users = session

					.createQuery("from BoostDailyRecon where payment ='S'")
					.setMaxResults(paginationBean.getItemsPerPage()).setFirstResult(paginationBean.getStartIndex())
					.list();

			paginationBean.setItemList(users);

		}

		if (txnType.equalsIgnoreCase("Search")) {

			logger.info("Boost Transaction : " + txnType);
			logger.info("Boost Transaction Date : " + date);

			Session session = sessionFactory.getCurrentSession();

			List users = session

					.createQuery("from BoostDailyRecon where payment ='S' and  date LIKE :date")
					.setParameter("date", "%" + date + "%").setMaxResults(paginationBean.getItemsPerPage())
					.setFirstResult(paginationBean.getStartIndex()).list();

			paginationBean.setItemList(users);

		}

	}

	@Override
	public BoostDailyRecon loadBoostSettlement(String date) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date);

		BoostDailyRecon boostss = new BoostDailyRecon();

		String sql2 = "select sum(b.MDRAMOUNT) ,sum(b.MDRREBATEAMOUNT), sum(b.TXNAMOUNT), sum(b.NETAMOUNT)"
				+ "from BOOST_DLY_RECON b where b.PAYMENT='S' and b.TIME_STAMP LIKE '" + date + "%' ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMdrAmount(rec[0].toString());
			} else {
				boostss.setMdrAmount("");
			}

			if (rec[1] != null) {
				boostss.setMdrRebateAmount(rec[1].toString());
			} else {
				boostss.setMdrRebateAmount("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setNetAmount(rec[3].toString());
			} else {
				boostss.setNetAmount("");
			}

		}

		boostss.setDate(date);

		return boostss;

	}

	@Override
	public void listBoostSettlement(PaginationBean<BoostDailyRecon> paginationBean, String date) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + date);

		ArrayList<BoostDailyRecon> fss = new ArrayList<BoostDailyRecon>();
		String sql = null;

		sql = "select sum(b.MDRAMOUNT) ,sum(b.MDRREBATEAMOUNT), sum(b.TXNAMOUNT), sum(b.NETAMOUNT),b.MERCHANTNAME "
				+ "from BOOST_DLY_RECON b where b.PAYMENT='S' and b.TIME_STAMP LIKE '" + date + "%' group by b.MID";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BoostDailyRecon boostss = new BoostDailyRecon();

			if (rec[0] != null) {
				boostss.setMdrAmount(rec[0].toString());
			} else {
				boostss.setMdrAmount("");
			}

			if (rec[1] != null) {
				boostss.setMdrRebateAmount(rec[1].toString());
			} else {
				boostss.setMdrRebateAmount("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setNetAmount(rec[3].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[4] != null) {
				boostss.setMerchantName(rec[4].toString());
			} else {
				boostss.setMerchantName("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public SettlementMDR loadSettlement(String date, String date1) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date + ":::" + date1);

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),MAX(b.SETTLEMENTDATE)  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "'";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}
			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public SettlementMDR loadmobiliteSettlement(String date, String date1) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date);

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),MAX(b.SUB_SETTLE_DATE)  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and  b.SUB_SETTLE_DATE BETWEEN '" + date + "' AND '"
				+ date1 + "'";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public SettlementMDR loadLatestmobiliteSettlement() {

//				date="2020-01-29";

		logger.info("loadLatestmobiliteSettlement : ");

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),MAX(b.SUB_SETTLE_DATE) "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and b.SUB_SETTLE_DATE = ( "
				+ "SELECT MAX(b.SUB_SETTLE_DATE) FROM SETTLEMENT_MDR ) ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public BizAppSettlement loadbizappSettlement(String date, String date1) {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : " + date);

		BizAppSettlement boostss = new BizAppSettlement();

		/*
		 * String sql2 =
		 * "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT)  "
		 * +
		 * "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE LIKE '"
		 * +date+"%' ";
		 */
		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),MAX(b.SETTLEMENTDATE)  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "' ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setSettlementDate(rec[5].toString());
			} else {
				boostss.setSettlementDate("");
			}

		}

		return boostss;

	}

	@Override
	public void listSettlement(PaginationBean<SettlementMDR> paginationBean, String date, String date1) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listSettlement : " + date + date1);

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),b.MERCHANTNAME,b.SETTLETYPE, b.SETTLEMENTDATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "' group by b.MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSettleType(rec[6].toString());
			} else {
				boostss.setSettleType("");
			}
			if (rec[7] != null) {
				boostss.setSettlementDate(rec[7].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listmobiliteSettlement(PaginationBean<SettlementMDR> paginationBean, String date, String date1) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + date + ":::" + date1);

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),b.SUB_MERCHANTNAME,b.SUB_SETTLETYPE,b.SUB_SETTLE_DATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and  b.SUB_SETTLE_DATE BETWEEN '" + date + "' AND '"
				+ date1 + "' " + "group by b.SUB_MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setSubMerchantName(rec[5].toString());
			} else {
				boostss.setSubMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSubSettleType(rec[6].toString());
			} else {
				boostss.setSubSettleType("");
			}

			if (rec[7] != null) {
				boostss.setSubSettleDate(rec[7].toString());
			} else {
				boostss.setSubSettleDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listLatestmobiliteSettlement(PaginationBean<SettlementMDR> paginationBean) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listLatestmobiliteSettlement : ");

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.SUB_MOBI_MDR_AMT) ,sum(b.SUB_HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.SUB_NET_AMOUNT),b.SUB_MERCHANTNAME,b.SUB_SETTLETYPE,b.SUB_SETTLE_DATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='SS' and  b.SUB_SETTLE_DATE = ( "
				+ "SELECT MAX(b.SUB_SETTLE_DATE) FROM SETTLEMENT_MDR ) group by b.SUB_MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setSubMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setSubMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setSubHostMdrAmt(rec[1].toString());
			} else {
				boostss.setSubHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setSubNetAmount(rec[4].toString());
			} else {
				boostss.setSubNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setSubMerchantName(rec[5].toString());
			} else {
				boostss.setSubMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSubSettleType(rec[6].toString());
			} else {
				boostss.setSubSettleType("");
			}

			if (rec[7] != null) {
				boostss.setSubSettleDate(rec[7].toString());
			} else {
				boostss.setSubSettleDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listbizappSettlement(PaginationBean<BizAppSettlement> paginationBean, String date, String date1) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listbizappSettlement : " + date + "::" + date1);

		ArrayList<BizAppSettlement> fss = new ArrayList<BizAppSettlement>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),b.MERCHANTNAME,b.SETTLEMENTDATE  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE BETWEEN '" + date + "' AND '"
				+ date1 + "' group by b.MERCHANTID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BizAppSettlement boostss = new BizAppSettlement();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}

			if (rec[6] != null) {
				boostss.setSettlementDate(rec[6].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMMotoTransactionByAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzymoto ALL " + txnType);

		/*
		 * sql =
		 * "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
		 * +
		 * "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME from "
		 * + "mobiversa.UM_ECOM_TXNRESPONSE as res " +
		 * "inner join mobiversa.MID as m on res.F001_MID IN ("+strUm+") " +
		 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
		 * "and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' " +
		 * "where res.`STATUS` in ('S') and res.txn_type ='"+txnType+"' and " +
		 * "res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000"
		 * ;
		 */

		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,mt.ID,res.H002_VNO,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_MOTO_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' and "
				+ "res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setMerchantId(rec[13].toString());
			}
			if (rec[15] != null) {
				if ((rec[14].toString().equals("05V")) && (rec[15].toString().equals("EZYMOTO"))) {
					fs.setTxnType("EZYMOTO VCC");
				} else {
					fs.setTxnType(rec[15].toString());
				}
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMMotoTransactionAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMMotoTransaction : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzyway ALL " + txnType);

		/*
		 * sql =
		 * "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
		 * +
		 * "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from "
		 * + "mobiversa.UM_ECOM_TXNRESPONSE as res " +
		 * "inner join mobiversa.MID as m on res.F001_MID IN ("+strUm+") " +
		 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
		 * "and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' " +
		 * "where res.`STATUS` in ('S') and res.txn_type ='"+txnType+"' and " +
		 * "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000"
		 * ;
		 */
		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_MOTO_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' and "
				+ "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				logger.info("H002_VNO : " + rec[13].toString());
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[14] != null) {

				fs.setTxnType(rec[14].toString());
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMEzywayTransactionAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside exportUMEzywayTransactionAgent : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;
		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzyway ALL " + txnType);

		/*
		 * sql =
		 * "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
		 * +
		 * "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP from "
		 * + "mobiversa.UM_ECOM_TXNRESPONSE as res " +
		 * "inner join mobiversa.MID as m on res.F001_MID IN ("+strUm+") " +
		 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
		 * "and res.H001_MTI in ('0290','0210') and res.H002_VNO = '05V' " +
		 * "where res.`STATUS` in ('S') and res.txn_type ='"+txnType+"' and " +
		 * "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000"
		 * ;
		 */
		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,res.F350_CRDTYP,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_EZYWAY_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and res.H002_VNO = '03' and "
				+ "res.time_stamp between :from  and :to order by res.time_stamp desc limit 5000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				logger.info("H002_VNO : " + rec[13].toString());
				fs.setCardType(rec[13].toString());
			} else {
				fs.setCardType("");
			}
			if (rec[14] != null) {

				fs.setTxnType(rec[14].toString());
			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void searchAllForSettlement(PaginationBean<ForSettlement> paginationBean, ArrayList<Criterion> props,
			String fromDate, String toDate, String status, Merchant merchant) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + " toDate: " + toDate
				+ " status: " + status);
		String mid = null, motoMid = null, ezywayMid = null, ezyrecMid = null, ezypassMid = null;
		String umMid = null;

		if (merchant.getMid().getMid() != null) {
			mid = merchant.getMid().getMid();
		}
		if (merchant.getMid().getMotoMid() != null) {
			motoMid = merchant.getMid().getMotoMid();
		}
		if (merchant.getMid().getEzywayMid() != null) {
			ezywayMid = merchant.getMid().getEzywayMid();
		}
		if (merchant.getMid().getEzyrecMid() != null) {
			ezyrecMid = merchant.getMid().getEzyrecMid();
		}
		if (merchant.getMid().getEzypassMid() != null) {
			ezypassMid = merchant.getMid().getEzypassMid();
		}
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID,a.LOCATION"
					+ ",a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or "
					+ "a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID or "
					+ "a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS=:status and a.MID in "
					+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and "
					+ "a.TIME_STAMP between :fromDate and :toDate order by a.TIME_STAMP desc limit 5000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("motoMid", motoMid);
			sqlQuery.setString("ezywayMid", ezywayMid);
			sqlQuery.setString("ezyrecMid", ezyrecMid);
			sqlQuery.setString("ezypassMid", ezypassMid);
			sqlQuery.setString("umMid", umMid);

		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select f.BUSINESS_NAME,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,a.MID,"
					+ "a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or a.MID=EZYWAY_MID "
					+ "or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS in "
					+ "('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in "
					+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) and a.TIME_STAMP between "
					+ ":fromDate and :toDate order by a.TIME_STAMP desc limit 5000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("motoMid", motoMid);
			sqlQuery.setString("ezywayMid", ezywayMid);
			sqlQuery.setString("ezyrecMid", ezyrecMid);
			sqlQuery.setString("ezypassMid", ezypassMid);
			sqlQuery.setString("umMid", umMid);
		} else {
			logger.info("status: " + status);
			sql = "select f.BUSINESS_NAME ,a.TIME_STAMP,a.AMOUNT,a.TIME,a.STATUS,a.TID,"
					+ "a.MID,a.LOCATION,a.TRX_ID,a.STAN,a.TXN_TYPE,a.HOST_TYPE from FOR_SETTLEMENT a INNER JOIN MID m "
					+ "on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=EZYREC_MID or "
					+ "a.MID=EZYWAY_MID or a.MID=UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.STATUS "
					+ "in ('A','S','CT','C','R','CV','P','BPS','BPA','BP','BPC') and a.MID in "
					+ "(:mid,:motoMid,:ezywayMid,:ezyrecMid,:ezypassMid,:umMid) order by "
					+ "a.TIME_STAMP desc limit 5000";
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("mid", mid);
			sqlQuery.setString("motoMid", motoMid);
			sqlQuery.setString("ezywayMid", ezywayMid);
			sqlQuery.setString("ezyrecMid", ezyrecMid);
			sqlQuery.setString("ezypassMid", ezypassMid);
			sqlQuery.setString("umMid", umMid);
		}

		logger.info("Query : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				fs.setNumOfSale(rec[0].toString());
			}
			if (rec[1] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null, rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[1].toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			}
			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				fs.setAmount(output);
			}
			if (rec[4] != null) {
				if (rec[4].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[4].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[4].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[4].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
				if (rec[4].toString().equals("R")) {
					fs.setStatus("REVERSAL");
				}
				if (rec[4].toString().equals("CT")) {
					fs.setStatus("CASH SALE");
				}
				if (rec[4].toString().equals("CV")) {
					fs.setStatus("CASH CANCELLED");
				}
				if (rec[4].toString().equals("BP")) {
					fs.setStatus("BOOST PENDING");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPC")) {
					fs.setStatus("BOOST CANCELLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPS")) {
					fs.setStatus("BOOST SETTLED");
					// logger.info("check status: "+fs.getStatus());
				}
				if (rec[4].toString().equals("BPA")) {
					fs.setStatus("BOOST PAYMENT");
					// logger.info("check status: "+fs.getStatus());
				}
				// fs.setStatus(rec[4].toString());
			}
			if (rec[5] != null) {
				fs.setTid(rec[5].toString());
				if (fs.getStatus() != null || !fs.getStatus().isEmpty()) {
					if (!fs.getStatus().equals("CASH SALE") && !fs.getStatus().equals("CASH CANCELLED")) {
						// logger.info("TID : "+rec[5].toString());
						TerminalDetails td = getTerminalDetailsByTid(rec[5].toString());
						if (td != null) {
							// logger.info("TID : "+td.getTid());
							if (td.getContactName() != null) {
								// logger.info("TID : "+td.getContactName());
								fs.setMerchantName(td.getContactName());
							} else {
								fs.setMerchantName("");
							}
						}
					}
				}
			}
			if (rec[6] != null) {
				fs.setMid(rec[6].toString());
			}
			if (rec[7] != null) {
				fs.setLocation(rec[7].toString());
			}
			if (rec[8] != null) {
				fs.setTrxId(new BigInteger(rec[8].toString()));
			}
			if (rec[9] != null) {
				fs.setStan(rec[9].toString());
			}
			if (rec[11] != null) {
				if (rec[10] != null) {
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("UMOBILE EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("UMOBILE EZYREC");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("UMOBILE EZYCASH");
					}
				} else {
					fs.setTxnType("UMOBILE");
				}
			} else {
				if (rec[10] != null) {
					fs.setTxnType(rec[10].toString());
					if (fs.getTxnType().equals("MOTO")) {
						fs.setTxnType("EZYMOTO");
					} else if (fs.getTxnType().equals("RECURRING") || fs.getTxnType().equals("EZYREC")) {
						fs.setTxnType("EZYREC");
					} else if (fs.getTxnType().equals("CASH")) {
						fs.setTxnType("EZYCASH");
					} else if (fs.getTxnType().equals("EZYWAY")) {
						fs.setTxnType("EZYWAY");
					} else if (fs.getTxnType().equals("RECPLUS")) {
						fs.setTxnType("EZYREC+");
					}
				} else {
					fs.setTxnType("EZYWIRE");
				}
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void exportUMLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMlink Transaction export: " + date + "  " + date1 + "  " + txnType + "  " + umMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);
			/*
			 * sql = "select req.F001_MID,req.F007_TXNAMT,req.MASKED_PAN, " +
			 * "res.`STATUS`,req.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME from mobiversa.UM_ECOM_TXNREQUEST as req "
			 * +
			 * "inner join mobiversa.UM_ECOM_TXNRESPONSE as res on req.F263_MRN = res.F263_MRN "
			 * + "inner join mobiversa.MID as m on req.F001_MID = m.UM_MOTO_MID " +
			 * "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID " +
			 * "and req.H001_MTI in ('0280','0200') and res.H001_MTI in ('0290','0210') "
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C','S') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 * 
			 * +
			 * "where req.F001_MID =:mid and res.`STATUS` in ('A','C') and req.time_stamp between :from  and :to order by req.time_stamp desc"
			 * ;
			 */

			/* + "order by req.time_stamp desc"; */

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F279_HP,req.F278_EMAILADDR from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000') and res.txn_type ='EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			if (rec[16] != null) {
				fs.setF279_HP(rec[16].toString());
			} else {
				fs.setF279_HP("");
			}
			
			if (rec[17] != null) {
				fs.setF278_EMAILADDR(rec[17].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public Merchant getMerchantTypeByID(String id) {

		// logger.info("check tid: "+motoTid);

		return (Merchant) getSessionFactory().createCriteria(Merchant.class)
				.add(Restrictions.eq("id", Long.parseLong(id))).setMaxResults(1).uniqueResult();
	}

	@Override
	public List<AgentVolumeData> agentVolumeUM(StringBuffer agentID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;

		sql = "select month(a.time_stamp) , sum(a.F007_TXNAMT) TotalAmount ,  f.AGID_FK from UM_ECOM_TXNRESPONSE a "
				+ "INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID  INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
				+ "where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month) and now() "
				+ "and a.status='S' and f.AGID_FK in (" + agentID + ") "
				+ "group by month(a.time_stamp),f.AGID_FK order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[2].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

		}

		return agentVolumeDataList;
	}

	@Override
	public List<AgentVolumeData> agentVolumeForsettle(StringBuffer agentID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;

		sql = "select month(a.time_stamp) , sum(a.AMOUNT)  TotalAmount ,  f.AGID_FK from FOR_SETTLEMENT a "
				+ "INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or "
				+ "a.MID=m.EZYREC_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID  "
				+ "where a.time_stamp between DATE_SUB(now(), INTERVAL 3 month) and now() "
				+ "and a.status='S' and f.AGID_FK in (" + agentID + ") "
				+ "group by month(a.time_stamp),f.AGID_FK order by a.time_stamp desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[2].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

		}

		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMidList(StringBuffer listMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID IN (" + listMid
				+ ")  group by " + "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[2].toString().toLowerCase());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeDataList.add(agentVolumeData);

			}

		}

		return agentVolumeDataList;

	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantByMid1List(StringBuffer listMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID IN (" + listMid
				+ ") group by " + "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[2].toString().toLowerCase());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeDataList.add(agentVolumeData);

			}

		}

		return agentVolumeDataList;
	}

	@Override
	public Merchant loadMerchantByID(BigInteger merchantId) {
		// logger.info("MerchantDaoImpl:loadMerchant");
		Long id = merchantId.longValue();
		return (Merchant) getSessionFactory().createCriteria(Merchant.class).add(Restrictions.eq("id", id))
				.setMaxResults(1).uniqueResult();
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getHotelMerchantVolByUMid(StringBuffer uMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		List<String> count1 = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MIDList: " + uMid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		/*
		 * sql="select month(a.TXN_DATE) montha, sum(a.AMOUNT)  TotalAmount , a.MERCHANT_NAME AS MerchantName,a.MERCHANT_ID  "
		 * + "from TRANSACTION_SUMMARY a " +
		 * "WHERE  a.MID IN ("+uMid+") and a.TXN_DATE " +
		 * "between DATE_SUB(now(), INTERVAL 4 month) and now() group by " +
		 * "month(a.TXN_DATE) having montha in ("+month+") order by a.TXN_DATE desc";
		 */
		sql = "select month(a.TXN_DATE) montha, sum(a.AMOUNT)  TotalAmount , a.MERCHANT_NAME AS MerchantName,a.MERCHANT_ID, a.MID "
				+ "from TRANSACTION_SUMMARY a " + "WHERE  a.MID IN (" + uMid + ") and a.TXN_DATE "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() group by a.MID, "
				+ "month(a.TXN_DATE) having montha in (" + month + ") order by a.TXN_DATE desc";

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());
		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgentName(rec[2].toString());
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

		}

		return agentVolumeDataList;
	}

	@Override
	public void listFPXTransaction(PaginationBean<FpxTransaction> paginationBean, String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listFPXTransaction : " + from + ":::" + to);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * +
		 * "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
		 * + "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
		 * + "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID " +
		 * "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " +
		 * "where b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,m.BUSINESS_NAME,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
				+ "INNER JOIN MID mi ON b.MID = mi.MID or  b.MID = mi.MOTO_MID or  b.MID = mi.EZYPASS_MID "
				+ "or b.MID = mi.EZYREC_MID or  b.MID = mi.EZYWAY_MID or  b.MID = mi.UM_MID "
				+ "or b.MID = mi.UM_MOTO_MID or  b.MID = mi.UM_EZYWAY_MID "
				+ "INNER JOIN MERCHANT m ON mi.MERCHANT_FK = m.ID " + "where b.TIME_STAMP BETWEEN :from AND :to "
		        + "and b.DEBITAUTHCODE = '00' order by b.TIME_STAMP desc";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		logger.info("Querylast : " + sql);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				boostss.setStatus(rec[13].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listFPXTransactionByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant, String from,
			String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + ":::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}
			if (midDetails.getUmEzywayMid() != null) {
				if (!midDetails.getUmEzywayMid().isEmpty()) {
					midList.add(midDetails.getUmEzywayMid());
				}

			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * + "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,'"+ merchantName
		 * +"',b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * + "where b.MID IN ("+str+") AND  b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,'" + merchantName
				+ "',b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  " + "where b.MID IN ("
				+ str + ") AND  b.TIME_STAMP BETWEEN :from AND :to ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());
			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setMakerName(rec[11].toString());
			} else {
				boostss.setMakerName("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				boostss.setStatus(rec[13].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listMerchantFPXTransactionByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant,
			String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + "::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}
			if (midDetails.getUmEzywayMid() != null) {
				if (!midDetails.getUmEzywayMid().isEmpty()) {
					midList.add(midDetails.getUmEzywayMid());
				}

			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

		/*
		 * sql =
		 * "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
		 * +
		 * "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
		 * + "where b.MID IN ("+str+") AND  b.TX_DATE LIKE '"+date+"%' ";
		 */

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID from FPX_TRANSACTION b  "
				+ "where b.DEBITAUTHCODE = '00' AND b.CREDITAUTHCODE = '00' AND b.MID IN (" + str
				+ ") AND  b.TIME_STAMP BETWEEN :from AND :to order by b.TIME_STAMP desc ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());

			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setPayableAmt(rec[11].toString());
			} else {
				boostss.setPayableAmt("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				boostss.setStatus(rec[13].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public List<AgentVolumeData> agentTotalVolume(StringBuffer agentID) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String agentDet = null;
		String present = "No";
		int cDate = 0;
		// String amount1= "0.00";

		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		List<Integer> listMonth = getAllMonth(cDate);

		sql = "select month(a.TXN_DATE), sum(a.AMOUNT) TotalAmount,f.AGID_FK,a.AGENT_NAME  "
				+ "from TRANSACTION_SUMMARY a " + "INNER JOIN MERCHANT f ON f.ID=a.MERCHANT_ID  "
				+ "WHERE a.TXN_DATE between DATE_SUB(now(), INTERVAL 3 month) and now() " + "and f.AGID_FK in ("
				+ agentID + ") " + "group by month(a.TXN_DATE),f.AGID_FK order by f.AGID_FK desc";

		/*
		 * sql="select month(a.TXN_DATE), sum(a.AMOUNT) TotalAmount,ag.FIRST_NAME,ag.id  "
		 * + "from TRANSACTION_SUMMARY a " +
		 * "INNER JOIN MERCHANT f ON f.ID=a.MERCHANT_ID " +
		 * "INNER JOIN AGENT ag on f.AGID_FK= ag.id " +
		 * "WHERE a.TXN_DATE between DATE_SUB(now(), INTERVAL 3 month) and now() " +
		 * "and f.AGID_FK in ("+agentID+") " +
		 * "group by month(a.TXN_DATE),f.AGID_FK order by a.TXN_DATE desc";
		 */

		logger.info("Query : " + sql);

		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		// sqlQuery.setString("agentID", agentID);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Resultset Size : " + resultSet.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[2].toString());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[3].toString());
				agentVolumeDataList.add(agentVolumeData);
			}

			/*
			 * for (Object[] rec : resultSet) {
			 * 
			 * int date1 = Integer.parseInt(rec[0].toString());
			 * 
			 * logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
			 * while (listMonth.get(count).intValue() != date1) {
			 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
			 * count++;
			 * 
			 * }// else{ date.add(getMonth(date1)); Double d = new
			 * Double(rec[1].toString()); d = d / 100;
			 * 
			 * String pattern = "###0.00"; DecimalFormat myFormatter = new
			 * DecimalFormat(pattern); String output = myFormatter.format(d);
			 * amount.add(output);
			 * 
			 * agId = rec[3].toString(); agent = rec[2].toString(); present = "Yes";
			 * agentDet = rec[3].toString() + "~AGENT~" + rec[2].toString();
			 * 
			 * count++; } while(count < 4){
			 * date.add(getMonth(listMonth.get(count).intValue())); amount.add("0.00");
			 * count++; } }
			 * 
			 * AgentVolumeData agentVolumeData = new AgentVolumeData();
			 * agentVolumeData.setAgId(agId); agentVolumeData.setAgentName(agent);
			 * agentVolumeData.setAgentDet(agentDet); agentVolumeData.setAmount(amount);
			 * agentVolumeData.setDate(date); agentVolumeData.setTxnPresent(present);
			 * agentVolumeDataList.add(agentVolumeData); return agentVolumeDataList;
			 */
		}
		return agentVolumeDataList;
	}

	public void listAllUmTransactionDetailsbyAdmin(PaginationBean<ForSettlement> paginationBean,
			ArrayList<Criterion> props, String fromDate, String toDate, String status) {

		logger.info("inside listAllTransactionDetailsbyAdmin " + " from date: " + fromDate + "toDate: " + toDate
				+ "status: " + status);

		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())
				&& (!status.isEmpty() && status != null)) {
			logger.info("inside date and status criteria: " + "from date: " + fromDate + "toDate: " + toDate
					+ "status: " + status);

			sql = "select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.`STATUS` AS stat,  "
					+ "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
					+ "res.F270_ORN AS refer,res.TXN_TYPE  AS type1  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE res.`STATUS` =:status AND  res.H001_MTI in ('0290','0210') AND "
					+ "res.time_stamp BETWEEN :fromDate   and :toDate  " + "UNION "
					+ "select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
					+ "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID  AS refer,a.TXN_TYPE AS type1  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS =:status And a.TIME_STAMP between :fromDate  and :toDate  ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);

		}

		else if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			logger.info(
					"inside date criteria: " + "from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.`STATUS` AS stat,  "
					+ "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
					+ "res.F270_ORN AS refer,res.TXN_TYPE  AS type1  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE res.`STATUS` in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
					+ "res.time_stamp BETWEEN :fromDate   and :toDate " + "UNION ALL "
					+ "select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
					+ "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID  AS refer,a.TXN_TYPE AS type1  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P') And a.TIME_STAMP between :fromDate  and :toDate ";

			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			// sqlQuery.setString("status", status);
			sqlQuery.setString("fromDate", fromDate);
			sqlQuery.setString("toDate", toDate);
		}

		else {
			logger.info("from date: " + fromDate + "toDate: " + toDate + "status: " + status);

			sql = "select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.`STATUS` AS stat,  "
					+ "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
					+ "res.F270_ORN AS refer,res.TXN_TYPE  AS type1  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE res.`STATUS` in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
					+ "res.time_stamp BETWEEN '" + fromDateToSearch + "' and '" + toDateToSearch + "'  " + "UNION ALL "
					+ "select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
					+ "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID  AS refer,a.TXN_TYPE AS type1  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P') And a.TIME_STAMP BETWEEN '"
					+ fromDateToSearch + "' and '" + toDateToSearch + "'  ";

			// logger.info(sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);

		}

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// MID
				fs.setMid(rec[0].toString());
			}
			if (rec[1] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}

			if (rec[2] != null) {
				// TID
				fs.setTid(rec[2].toString());
			}

			if (rec[3] != null) {

				// STATUS

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[3].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[3].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
			}
			if (rec[4] != null) {
				fs.setAidResponse(rec[4].toString());
			} else {
				fs.setAidResponse("");
			}
			if (rec[5] != null) {
				fs.setRrn(rec[5].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[6] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[7] != null) {
				// merchant name
				fs.setNumOfSale(rec[7].toString());
			} else {
				fs.setNumOfSale("");
			}
			if (rec[8] != null) {
				// reference
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
			if (rec[9] != null) {
				// type
				fs.setTxnType(rec[9].toString());
			} else {
				fs.setTxnType("");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		// paginationBean.setTotalRowCount(fss.size());
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantInTxnSummary(StringBuffer listMid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		/*
		 * sql="select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
		 * +
		 * "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
		 * +
		 * "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
		 * +
		 * "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.ID IN ("
		 * +listMid +")  group by " +
		 * "month(a.time_stamp) having montha in ("+month+") order by a.time_stamp desc"
		 * ;
		 * 
		 */
		sql = "select month(a.TXN_DATE) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from TRANSACTION_SUMMARY a  " + "INNER JOIN MERCHANT f ON f.ID=a.MERCHANT_ID where a.TXN_DATE "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and f.ID IN (" + listMid + ")  group by "
				+ "month(a.TXN_DATE) having montha in (" + month + ") order by a.TXN_DATE desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);

		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());

		if (resultSet != null) {

			for (Object[] rec : resultSet) {

				AgentVolumeData agentVolumeData = new AgentVolumeData();
				agentVolumeData.setAgId(rec[3].toString());
				agentVolumeData.setMonth(rec[0].toString());
				agentVolumeData.setAgentName(rec[2].toString().toLowerCase());
				agentVolumeData.setAmount1(rec[1].toString());
				agentVolumeDataList.add(agentVolumeData);

			}

		}

		return agentVolumeDataList;

	}

	@Override
	public void listbizappSettlementByMerchant(PaginationBean<BizAppSettlement> paginationBean, Merchant merchant,
			String date) {

		logger.info("Inside listBoostSettlement : " + date);

		ArrayList<BizAppSettlement> fss = new ArrayList<BizAppSettlement>();
		String sql = null;

		String merchantId = merchant.getId().toString();
		sql = "select b.MOBI_MDR_AMT,b.HOST_MDR_AMT,b.DETECTIONAMT,b.GROSSAMT,b.NETAMT,b.BANKNAME,  "
				+ "b.REFERENCE,b.TRADENAME,b.`STATUS`,b.MERCHANTNAME,b.EMAIL,b.SETTLEMENTDATE,b.ACCOUNTNO "
				+ "from BIZAPP_SETTLEMENT b where b.SETTLEMENTDATE = '" + date + "' ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BizAppSettlement boostss = new BizAppSettlement();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setBankName(rec[5].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[6] != null) {
				boostss.setReference(rec[6].toString());
			} else {
				boostss.setReference("");
			}
			if (rec[7] != null) {
				boostss.setTradeName(rec[7].toString());
			} else {
				boostss.setTradeName("");
			}
			if (rec[8] != null) {
				boostss.setStatus(rec[8].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[9] != null) {
				boostss.setMerchantName(rec[9].toString());
			} else {
				boostss.setMerchantName("");
			}
			if (rec[10] != null) {
				boostss.setEmail(rec[10].toString());
			} else {
				boostss.setEmail("");
			}
			if (rec[11] != null) {
				boostss.setSettlementDate(rec[11].toString());
			} else {
				boostss.setSettlementDate("");
			}
			if (rec[12] != null) {
				boostss.setAccountNo(rec[12].toString());
			} else {
				boostss.setAccountNo("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public BizAppSettlement loadLatestbizappSettlement() {

//				date="2020-01-29";

		logger.info("loadLatestbizappSettlement : ");

		BizAppSettlement boostss = new BizAppSettlement();

		/*
		 * String sql2 =
		 * "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT)  "
		 * +
		 * "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE LIKE '"
		 * +date+"%' ";
		 */
		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),MAX(b.SETTLEMENTDATE)  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE = ( "
				+ "SELECT MAX(b.SETTLEMENTDATE) FROM BIZAPP_SETTLEMENT ) ";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setSettlementDate(rec[5].toString());
			} else {
				boostss.setSettlementDate("");
			}

		}

		return boostss;

	}

	@Override
	public void listLatestbizappSettlement(PaginationBean<BizAppSettlement> paginationBean) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listLatestbizappSettlement : ");

		ArrayList<BizAppSettlement> fss = new ArrayList<BizAppSettlement>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.DETECTIONAMT), sum(b.GROSSAMT), sum(b.NETAMT),b.MERCHANTNAME,b.SETTLEMENTDATE  "
				+ "from BIZAPP_SETTLEMENT b where b.`STATUS`='S' and  b.SETTLEMENTDATE = ( "
				+ "SELECT MAX(b.SETTLEMENTDATE) FROM BIZAPP_SETTLEMENT ) group by b.MERCHANTID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			BizAppSettlement boostss = new BizAppSettlement();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setDetectionAmt(rec[2].toString());
			} else {
				boostss.setDetectionAmt("");
			}

			if (rec[3] != null) {
				boostss.setGrossAmt(rec[3].toString());
			} else {
				boostss.setGrossAmt("");
			}

			if (rec[4] != null) {
				boostss.setNetAmt(rec[4].toString());
			} else {
				boostss.setNetAmt("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}

			if (rec[6] != null) {
				boostss.setSettlementDate(rec[6].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public SettlementMDR loadLatestSettlement() {

//				date="2020-01-29";

		logger.info("loadBoostSettlement : ");

		SettlementMDR boostss = new SettlementMDR();

		String sql2 = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),MAX(b.SETTLEMENTDATE)  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE = ( "
				+ "SELECT MAX(md.SETTLEMENTDATE) FROM SETTLEMENT_MDR md )";

		// System.out.println("query" + sql2);
		logger.info("Query : " + sql2);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql2);
//				sqlQuery.setParameter("date", date + "%");
		/* sqlQuery.setString("date", date + "%"); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		for (Object[] rec : resultSet) {
			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}
			if (rec[5] != null) {
				boostss.setDate(rec[5].toString());
			} else {
				boostss.setDate("");
			}

		}

		return boostss;

	}

	@Override
	public void listLatestSettlement(PaginationBean<SettlementMDR> paginationBean) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listLatestSettlement : ");

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

		sql = "select sum(b.MOBI_MDR_AMT) ,sum(b.HOST_MDR_AMT), sum(b.EXTRA_DEDUCT_AMT), sum(b.TXN_AMOUNT), sum(b.NET_AMOUNT),b.MERCHANTNAME,b.SETTLETYPE,b.SETTLEMENTDATE  "
				+ "from SETTLEMENT_MDR b where b.`STATUS`='S' and  b.SETTLEMENTDATE =( "
				+ "SELECT MAX(md.SETTLEMENTDATE) FROM SETTLEMENT_MDR md) group by b.MID ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		/* sqlQuery.setString("from", from); */
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			SettlementMDR boostss = new SettlementMDR();

			if (rec[0] != null) {
				boostss.setMobiMdrAmt(rec[0].toString());
			} else {
				boostss.setMobiMdrAmt("");
			}

			if (rec[1] != null) {
				boostss.setHostMdrAmt(rec[1].toString());
			} else {
				boostss.setHostMdrAmt("");
			}

			if (rec[2] != null) {
				boostss.setExtraDeductAmt(rec[2].toString());
			} else {
				boostss.setExtraDeductAmt("");
			}

			if (rec[3] != null) {
				boostss.setTxnAmount(rec[3].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[4] != null) {
				boostss.setNetAmount(rec[4].toString());
			} else {
				boostss.setNetAmount("");
			}

			if (rec[5] != null) {
				boostss.setMerchantName(rec[5].toString());
			} else {
				boostss.setMerchantName("");
			}
			if (rec[6] != null) {
				boostss.setSettleType(rec[6].toString());
			} else {
				boostss.setSettleType("");
			}

			if (rec[7] != null) {
				boostss.setSettlementDate(rec[7].toString());
			} else {
				boostss.setSettlementDate("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Override
	public void listUMEzywayTransactionByAgent(PaginationBean<UMEzyway> paginationBean,
			ArrayList<Criterion> criterionList, String date, String date1, StringBuffer strUm, String txnType) {
		// TODO Auto-generated method stub

		logger.info("Inside listUMEzywayTransactionByAgent : " + date + "     " + date1 + " " + txnType);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;

		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);

		logger.info("Inside UMEzyway ALL " + txnType);

		sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
				+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME,mt.ID,res.H002_VNO,res.TXN_TYPE from "
				+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
				+ "inner join mobiversa.MID as m on m.UM_EZYWAY_MID =  res.F001_MID "
				+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
				+ "where res.`STATUS` in ('S') and res.txn_type ='" + txnType + "' and " + "res.F001_MID IN (" + strUm
				+ ") and res.H001_MTI in ('0290','0210') and "
				+ "res.H002_VNO ='03' and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);
			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}

			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {
				fs.setMerchantId(rec[13].toString());
			}
			if (rec[15] != null) {

				fs.setTxnType(rec[15].toString());

			} else {
				fs.setTxnType("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantBymmId(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.AMOUNT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.MID or a.MID=m.MOTO_MID or a.MID=m.EZYREC_MID "
				+ "or a.MID=m.EZYPASS_MID or a.MID=m.EZYWAY_MID or a.MID=m.UM_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.MM_ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {
			logger.info("111111122 " + resultSet.size());
			

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("mmId", mid)).setMaxResults(1).uniqueResult();
			
			logger.info("merchant " +merchant);	
			
			agId = merchant.getId().toString();
			logger.info("agId " +agId);	
			agent = merchant.getBusinessName().toLowerCase();
			logger.info("agent " +agId);
			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			logger.info("1111111 " + resultSet.size());
			
			
			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Transactional(readOnly = true)
	public List<AgentVolumeData> getMerchantBymmId1(final String mid) {

		List<AgentVolumeData> agentVolumeDataList = new ArrayList<AgentVolumeData>();
		String sql = null;
		List<String> date = new ArrayList<String>();
		List<String> amount = new ArrayList<String>();
		String agId = null;
		String agent = null;
		String txnType = null;
		int cDate = 0;
		int count = 0;

		logger.info("Merchant MID: " + mid);
		Date dt = new Date();
		cDate = dt.getMonth() + 1;

		logger.info("cDate: " + cDate);

		List<Integer> listMonth = getAllMonth(cDate);

		logger.info("listMonth : " + listMonth);
		String month = "";
		for (Integer i : listMonth) {
			month = month + "," + i;
		}
		logger.info("listMonth : " + month);

		month = month.replaceFirst(",", "");
		logger.info("listMonth : " + month);

		sql = "select month(a.time_stamp) montha, sum(a.F007_TXNAMT)  TotalAmount , f.BUSINESS_NAME AS MerchantName ,f.Id "
				+ "from UM_ECOM_TXNRESPONSE a INNER JOIN MID m on a.F001_MID =m.UM_EZYPASS_MID or a.F001_MID =m.UM_EZYREC_MID or a.F001_MID =m.UM_EZYWAY_MID or "
				+ "a.F001_MID =m.UM_MID or a.F001_MID =m.UM_MOTO_MID INNER JOIN MERCHANT f ON f.MID_FK=m.ID where a.time_stamp "
				+ "between DATE_SUB(now(), INTERVAL 4 month) and now() and a.status='S' and f.MM_ID= :mid  group by "
				+ "month(a.time_stamp) having montha in (" + month + ") order by a.time_stamp desc";

		logger.info("Query : " + sql);

		// System.out.println("no records found:" +sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("mid", mid);
		// sqlQuery.setString("motoMid", motoMid);
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("resultSet Size : " + resultSet.size());
		logger.info("month Size : " + listMonth.size());
		if (resultSet.size() <= 0) {

			Merchant merchant = (Merchant) getSessionFactory().createCriteria(Merchant.class)
					.add(Restrictions.eq("mmId", mid)).setMaxResults(1).uniqueResult();
			agId = merchant.getId().toString();
			agent = merchant.getBusinessName().toLowerCase();

			for (int a : listMonth) {
				date.add(getMonth(a));
				amount.add("0.00");

			}

		} else {

			for (Object[] rec : resultSet) {

				// if(count <=3) {

				if (rec[0] != null) {
					int date1 = Integer.parseInt(rec[0].toString());

					logger.info("month  : " + date1 + " : " + listMonth.get(count).intValue());
					while (listMonth.get(count).intValue() != date1) {
						date.add(getMonth(listMonth.get(count).intValue()));
						amount.add("0.00");
						count++;

					}

					date.add(getMonth(date1));
				}
				if (rec[1] != null) {
					Double d = new Double(rec[1].toString());
					d = d / 100;

					String pattern = "###0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(d);

					amount.add(output);

				}
				if (rec[3] != null) {
					agId = rec[3].toString();
				}
				if (rec[2] != null) {
					agent = rec[2].toString();
				}
				/*
				 * if(rec[4]!=null){ txnType = rec[4].toString(); } else{ txnType ="CARD"; }
				 */
				// }
				count++;

			}
			while (count <= 3) {
				date.add(getMonth(listMonth.get(count).intValue()));
				amount.add("0.00");
				count++;
			}
		}

		AgentVolumeData agentVolumeData = new AgentVolumeData();
		agentVolumeData.setAgId(agId);
		agentVolumeData.setAgentName(agent.toLowerCase());
		agentVolumeData.setTxnType(txnType);
		agentVolumeData.setAmount(amount);
		agentVolumeData.setDate(date);
		agentVolumeDataList.add(agentVolumeData);
		return agentVolumeDataList;
	}

	@Override
	public void listMobiliteLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String tid) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMLink Transaction by merchant: " + date + "  " + date1 + "  " 
				+ tid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		
			
		

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME,mt.ID,res.GOODS_STATUS,res.UPDATED_DATE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MOBILITE_TERMINAL as m on res.MOBILITE_TID = m.TID "
					+ "inner join mobiversa.MOBILITE_MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0210') "
					+ "where res.`STATUS` in ('A','C') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.MOBILITE_TID=:tid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		
	
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("tid", tid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			if (rec[17] != null) {
				fs.setMerchantId(rec[17].toString());
			} else {
				fs.setMerchantId("");
			}
			
			if (rec[18] != null) {
				fs.setGoodsStatus(rec[18].toString());
			} else {
				fs.setGoodsStatus("NIL");
			}
			
			if (rec[19] != null) {
				fs.setUpdatedDate(rec[19].toString());
			} else {
				fs.setUpdatedDate("NIL");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}
	
	
	
	@Override
	public void exportMobiliteLinkTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String tid) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list UMMoto Transaction export: " + date + "  " + date1 + "  " + tid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		
			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F278_EMAILADDR,req.F279_HP from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MOBILITE_TERMINAL as m on res.MOBILITE_TID = m.TID "
					+ "inner join mobiversa.MOBILITE_MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0210') "
					+ "where res.`STATUS` in ('A','C') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000') and res.txn_type ='EZYMOTO' and res.MOBILITE_TID =:tid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("tid", tid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}

			if (rec[16] != null) {
				fs.setF278_EMAILADDR(rec[16].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}

			if (rec[17] != null) {
				fs.setF279_HP(rec[17].toString());
			} else {
				fs.setF279_HP("");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}
	
	
	public void listAllUmTransactionDetails(PaginationBean<ForSettlement> paginationBean,
			Merchant merchant, String fromDate, String toDate) {

		logger.info("inside listAllTransactionDetailsbyAdmin " );
		String umMid=null,umEzywayMid=null,umMotoMid=null, umEzyrecMid=null,umEzypassMid=null;
		
		if (merchant.getMid().getUmMid() != null) {
			umMid = merchant.getMid().getUmMid();
		}
		if (merchant.getMid().getUmEzywayMid() != null) {
			umEzywayMid = merchant.getMid().getUmEzywayMid();
		}
		if (merchant.getMid().getUmMotoMid() != null) {
			umMotoMid = merchant.getMid().getUmMotoMid() ;
		}
		if (merchant.getMid().getUmEzyrecMid()!= null) {
			umEzyrecMid = merchant.getMid().getUmEzyrecMid();
		}
		if (merchant.getMid().getUmEzypassMid()!= null) {
			umEzypassMid = merchant.getMid().getUmEzypassMid();
		}
		
		ArrayList<ForSettlement> fss = new ArrayList<ForSettlement>();
		String sql = null;
		Query sqlQuery = null;
		Date date = new Date();

		Calendar calendar = Calendar.getInstance();
		date = calendar.getTime();
		// Date date = new Date();

		int year = calendar.getWeekYear();
		// int year=2017;
		long mon = date.getMonth() + 1;
		int day = date.getDate() + 1;
		int daybefore = date.getDate();
		String fromDateToSearch = null;
		String toDateToSearch = null;
		String dateorg2 = day + "/" + mon + "/" + year;
		String dateorg1 = daybefore + "/" + mon + "/" + year;
		logger.info("date to find: " + dateorg1 + " " + dateorg2);
		try {
			toDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
			fromDateToSearch = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		logger.info("check date and year : " + fromDateToSearch + "  " + toDateToSearch);

		if ((fromDate != null && toDate != null) && (!fromDate.isEmpty() && !toDate.isEmpty())) {
			
			sql = "select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.`STATUS` AS stat,  "
					+ "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
					+ "res.F270_ORN AS refer,mt.AUTH_3DS as auth1,res.TXN_TYPE  AS type1  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
					+ "res.F001_MID = m.UM_EZYREC_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE res.`STATUS` in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
					+ "res.F001_MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) AND "
					+ "res.time_stamp BETWEEN '" + fromDate + "' and '" + toDate + "' UNION ALL "
					+ "select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
					+ "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID  AS refer,f.AUTH_3DS as auth1,a.TXN_TYPE AS type1  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P') AND "
					+ "a.MID IN (:umMid) And a.TIME_STAMP BETWEEN '"
					+ fromDate + "' and '" + toDate + "'  ";
			
		}
		
		else {
			sql = "select res.F001_MID AS mid1 ,res.F007_TXNAMT AS amt ,res.F354_TID AS tidf, res.`STATUS` AS stat,  "
					+ "res.F011_AUTHIDRESP AS appcode,res.F023_RRN AS rrn,res.TIME_STAMP as timeSt,mt.BUSINESS_NAME as mercname, "
					+ "res.F270_ORN AS refer,mt.AUTH_3DS as auth1,res.TXN_TYPE  AS type1  from mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_EZYWAY_MID OR res.F001_MID = m.UM_MOTO_MID OR "
					+ "res.F001_MID = m.UM_EZYREC_MID  "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "WHERE res.`STATUS` in ('A','S','C') AND  res.H001_MTI in ('0290','0210') AND "
					+ "res.F001_MID IN (:umMid,:umEzywayMid,:umMotoMid,:umEzyrecMid,:umEzypassMid) AND "
					+ "res.time_stamp BETWEEN '" + fromDateToSearch + "' and '" + toDateToSearch + "' UNION ALL "
					+ "select a.MID AS mid1,a.AMOUNT AS amt,a.TID AS tidf ,a.STATUS AS stat,a.AID_RESPONSE AS appcode, "
					+ "a.RRN AS rrn,a.TIME_STAMP as timeSt,f.BUSINESS_NAME as mercname,a.INVOICE_ID  AS refer,f.AUTH_3DS as auth1,a.TXN_TYPE AS type1  "
					+ "from FOR_SETTLEMENT a INNER JOIN MID m on a.MID=m.UM_MID "
					+ "INNER JOIN MERCHANT f ON f.MID_FK=m.ID "
					+ "WHERE f.MERCHANT_TYPE = 'U' and a.STATUS in ('A','S','P') AND "
					+ "a.MID IN (:umMid) And a.TIME_STAMP BETWEEN '"
					+ fromDateToSearch + "' and '" + toDateToSearch + "'  ";
		}
			// logger.info(sql);
			sqlQuery = super.getSessionFactory().createSQLQuery(sql);
			sqlQuery.setString("umMid", umMid);
			sqlQuery.setString("umEzywayMid", umEzywayMid);
			sqlQuery.setString("umMotoMid", umMotoMid);
			sqlQuery.setString("umEzyrecMid", umEzyrecMid);
			sqlQuery.setString("umEzypassMid", umEzypassMid);
			
		

		logger.info("Query : " + sql);

		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		for (Object[] rec : resultSet) {
			ForSettlement fs = new ForSettlement();
			if (rec[0] != null) {
				// MID
				fs.setMid(rec[0].toString());
			}
			if (rec[1] != null) {

				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setAmount(output);

			}

			if (rec[2] != null) {
				// TID
				fs.setTid(rec[2].toString());
			}

			if (rec[3] != null) {

				// STATUS

				if (rec[3].toString().equals("S")) {
					fs.setStatus("SETTLED");
				}
				if (rec[3].toString().equals("P")) {
					fs.setStatus("PENDING");
				}
				if (rec[3].toString().equals("A")) {
					fs.setStatus("NOT SETTLED");
				}
				if (rec[3].toString().equals("C")) {
					fs.setStatus("CANCELLED");
				}
			}
			if (rec[4] != null) {
				fs.setAidResponse(rec[4].toString());
			} else {
				fs.setAidResponse("");
			}
			if (rec[5] != null) {
				fs.setRrn(rec[5].toString());
			} else {
				fs.setRrn("");
			}
			if (rec[6] != null) {
				// a.time_stamp
				// fs.setTimeStamp(rec[1].toString());
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[6].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
			}
			if (rec[7] != null) {
				// merchant name
				fs.setNumOfSale(rec[7].toString());
			} else {
				fs.setNumOfSale("");
			}
			if (rec[8] != null) {
				// reference
				fs.setNumOfRefund(rec[8].toString());
			} else {
				fs.setNumOfRefund("");
			}
		
			
			
			if (rec[10] != null) {
				if(rec[9] != null) {
					
					//logger.info("auth3ds:++: " + rec[9].toString());
					//logger.info("setTxnType:++: " + rec[10].toString());
					if((rec[9].toString().equals("Yes")) && (rec[10].toString().equals("EZYMOTO"))) {
						
						logger.info("type:++: " + rec[10].toString());
						fs.setTxnType("EZYLINK");
					}
				}else {
					fs.setTxnType(rec[10].toString());
				}
				
				
			} else {
				fs.setTxnType("");
			}
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		
	}

	
	
	
	@Override
	public void listMerchantFPXSettlementByMid(PaginationBean<FpxTransaction> paginationBean, Merchant merchant,
			String from, String to) {

//				date="2020-01-29";

		// TODO Auto-generated method stub

		logger.info("Inside listBoostSettlement : " + from + "::" + to);
		MID midDetails = merchant.getMid();
		List<String> midList = new ArrayList<String>();
		if (midDetails != null) {
			if (midDetails.getMid() != null) {
				if (!midDetails.getMid().isEmpty()) {

					midList.add(midDetails.getMid());

				}

			}
			if (midDetails.getMotoMid() != null) {
				if (!midDetails.getMotoMid().isEmpty()) {

					midList.add(midDetails.getMotoMid());
				}

			}
			if (midDetails.getEzypassMid() != null) {
				if (!midDetails.getEzypassMid().isEmpty()) {

					midList.add(midDetails.getEzypassMid());
				}

			}

			if (midDetails.getEzywayMid() != null) {
				if (!midDetails.getEzywayMid().isEmpty()) {

					midList.add(midDetails.getEzywayMid());
				}

			}

			if (midDetails.getEzyrecMid() != null) {
				if (!midDetails.getEzyrecMid().isEmpty()) {

					midList.add(midDetails.getEzyrecMid());
				}

			}

			if (midDetails.getUmMid() != null) {
				if (!midDetails.getUmMid().isEmpty()) {

					midList.add(midDetails.getUmMid());
				}

			}

			if (midDetails.getUmMotoMid() != null) {
				if (!midDetails.getUmMotoMid().isEmpty()) {
					midList.add(midDetails.getUmMotoMid());
				}

			}
			if (midDetails.getUmEzywayMid() != null) {
				if (!midDetails.getUmEzywayMid().isEmpty()) {
					midList.add(midDetails.getUmEzywayMid());
				}

			}
		}
		int u = 0;
		StringBuffer str = new StringBuffer();
		for (String strMid : midList) {

			if (u == 0) {
				str.append("\"");
				str.append(strMid);
				str.append("\"");
				u++;
			} else {
				str.append(",\"");
				str.append(strMid);
				str.append("\"");
			}
		}
		logger.info("String of MIDs:  " + str);
		String merchantName = merchant.getBusinessName().replaceAll("[^a-zA-Z0-9\\s+]", "");
		logger.info("merchantName: " + merchantName);

		ArrayList<FpxTransaction> fss = new ArrayList<FpxTransaction>();
		String sql = null;

	

		sql = "select b.TX_DATE ,b.TX_TIME,b.TXNAMOUNT,b.TXNCURRENCY,b.BUYERBANKID,b.SELLEREXORDERNO,b.SELLERORDERNO,b.DEBITAUTHCODE, "
				+ "b.DEBITAUTHCODESTR,b.CREDITAUTHCODE,b.CREDITAUTHCODESTR,b.PAYABLEAMT,b.BUYERNAME,b.STATUS,b.BANK_NAME,b.FPXTXNID,b.MID,b.MDR_AMT from FPX_TRANSACTION b  "
				+ "where b.DEBITAUTHCODE = '00' AND b.CREDITAUTHCODE = '00' AND b.MID IN (" + str
				+ ") AND  b.TIME_STAMP BETWEEN :from AND :to ";

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			FpxTransaction boostss = new FpxTransaction();

			if (rec[0] != null) {
				boostss.setTxDate(rec[0].toString());
			} else {
				boostss.setTxDate("");
			}

			if (rec[1] != null) {
				boostss.setTxTime(rec[1].toString());

			} else {
				boostss.setTxTime("");
			}

			if (rec[2] != null) {
				boostss.setTxnAmount(rec[2].toString());
			} else {
				boostss.setTxnAmount("");
			}

			if (rec[3] != null) {
				boostss.setTxnCurrency(rec[3].toString());
			} else {
				boostss.setTxnCurrency("");
			}

			if (rec[4] != null) {
				boostss.setBuyerBankId(rec[4].toString());
			} else {
				boostss.setBuyerBankId("");
			}

			if (rec[5] != null) {
				boostss.setSellerExOrderNo(rec[5].toString());
			} else {
				boostss.setSellerExOrderNo("");
			}
			if (rec[6] != null) {
				boostss.setSellerOrderNo(rec[6].toString());
			} else {
				boostss.setSellerOrderNo("");
			}
			if (rec[7] != null) {
				boostss.setDebitAuthCode(rec[7].toString());
			} else {
				boostss.setDebitAuthCode("");
			}
			if (rec[8] != null) {
				boostss.setDebitAuthCodeStr(rec[8].toString());
			} else {
				boostss.setDebitAuthCodeStr("");
			}
			if (rec[9] != null) {
				boostss.setCreditAuthCode(rec[9].toString());
			} else {
				boostss.setCreditAuthCode("");
			}
			if (rec[10] != null) {
				boostss.setCreditAuthCodeStr(rec[10].toString());
			} else {
				boostss.setCreditAuthCodeStr("");
			}
			if (rec[11] != null) {
				boostss.setPayableAmt(rec[11].toString());
			} else {
				boostss.setPayableAmt("");
			}
			if (rec[12] != null) {
				boostss.setBuyerName(rec[12].toString());
			} else {
				boostss.setBuyerName("");
			}
			if (rec[13] != null) {
				boostss.setStatus(rec[13].toString());
			} else {
				boostss.setStatus("");
			}
			if (rec[14] != null) {
				boostss.setBankName(rec[14].toString());
			} else {
				boostss.setBankName("");
			}
			if (rec[15] != null) {
				boostss.setFpxTxnId(rec[15].toString());
			} else {
				boostss.setFpxTxnId("");
			}
			if (rec[16] != null) {
				boostss.setMid(rec[16].toString());
			} else {
				boostss.setMid("");
			}
			if (rec[17] != null) {
				boostss.setMdrAmt(rec[17].toString());
			} else {
				boostss.setMdrAmt("");
			}
			
			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(boostss);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	
	
	@Override
	public void listUMEzyLinkSSTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umSsMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info("Inside list UMSSLink Transaction by merchant: " + date + "  " + date1 + "  " + txnType + "  "
				+ umSsMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMLink ALL " + txnType);
		

			sql = "select res.F001_MID,res.F005_EXPDATE,res.F007_TXNAMT,res.F354_TID,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type ,req.F270_ORN,req.F268_CHNAME,res.GOODS_STATUS,res.UPDATED_DATE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_SS_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000')  and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 1000";

		}
		

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umSsMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				fs.setF005_EXPDATE(rec[1].toString());
			} else {
				fs.setF005_EXPDATE("");
			}

			if (rec[2] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[3] != null) {
				fs.setF354_TID(rec[3].toString());
			} else {
				fs.setF354_TID("");
			}

			if (rec[4] != null) {
				fs.setPAN(rec[4].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[5] != null) {
				if (rec[5].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[5].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[5].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[6] != null) {
				fs.setF263_MRN(rec[6].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[7] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[8] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[9] != null) {
				fs.setF011_AUTHIDRESP(rec[9].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[10] != null) {
				fs.setF023_RRN(rec[10].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[11] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[12] != null) {
				fs.setMerchantName(rec[12].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[14] != null) {

				logger.info("H002_VNO: " + rec[13].toString());

				logger.info("TXN_TYPE: " + rec[14].toString());

				if (rec[14].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[13].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[14].toString());
					} else if (rec[13].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[15] != null) {
				fs.setF270_ORN(rec[15].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[16] != null) {
				fs.setF268_CHNAME(rec[16].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			if (rec[17] != null) {
				fs.setGoodsStatus(rec[17].toString());
			} else {
				fs.setGoodsStatus("NIL");
			}
			
			if (rec[18] != null) {
				fs.setUpdatedDate(rec[18].toString());
			} else {
				fs.setUpdatedDate("NIL");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}

	
	
	@Override
	public void exportUMLinkSSTransaction(PaginationBean<UMEzyway> paginationBean, ArrayList<Criterion> criterionList,
			String date, String date1, String umSsMotoMid, String txnType) {

		// TODO Auto-generated method stub

		logger.info(
				"Inside list umSsMotoMid Transaction export: " + date + "  " + date1 + "  " + txnType + "  " + umSsMotoMid);
		String from = null;
		String to = null;
		String year1 = null;
		String year2 = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		if ((date == null || date1 == null) || (date.equals("") || date1.equals(""))) {

			Date dt = new Date();

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			from = dateFormat.format(dt);
			// logger.info("change date format:" + from);
			// from = from + "-01";
			String from1 = from.substring(0, from.length() - 2);
			from = from1 + String.format("%02d", -1 + Integer.valueOf(from.substring(8, 10)));
			logger.info("change date format:" + from);

			Date dt1 = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			to = dateFormat1.format(dt1);
			String to1 = to.substring(0, to.length() - 2);
			to = to1 + String.format("%02d", 1 + Integer.valueOf(to.substring(8, 10)));
			logger.info("date format:" + to);

		} else {

			from = date;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				from = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy").parse(from));
				logger.info("date format:" + date);
			} catch (ParseException e) {

				e.printStackTrace();
			}

			to = date1;
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				to = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy").parse(to));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}

		logger.info("checkd date: " + from + " : " + to);
		if (txnType.equals("ALL") || txnType.isEmpty() || txnType == null) {
			logger.info("Inside UMEzylink ALL " + txnType);
			

			sql = "select res.F001_MID,res.F007_TXNAMT,res.MASKED_PAN, res.`STATUS`, "
					+ "res.F263_MRN,res.H003_TDT,res.H004_TTM,res.F011_AUTHIDRESP,res.F023_RRN,res.TIME_STAMP,res.F350_CRDTYP,mt.BUSINESS_NAME, res.H002_VNO, res.txn_type,req.F270_ORN,req.F268_CHNAME,req.F279_HP,req.F278_EMAILADDR,res.GOODS_STATUS,res.UPDATED_DATE from "
					+ "mobiversa.UM_ECOM_TXNRESPONSE as res "
					+ "inner join mobiversa.UM_ECOM_TXNREQUEST req ON res.F263_MRN =req.F263_MRN "
					+ "inner join mobiversa.MID as m on res.F001_MID = m.UM_SS_MOTO_MID "
					+ "inner join mobiversa.MERCHANT as mt on m.MERCHANT_FK = mt.ID "
					+ "and res.H001_MTI in ('0290','0210') "
					+ "where res.`STATUS` in ('A','C','S') and res.H002_VNO ='03' and req.F003_PROCCODE in ('003000','303000') and res.txn_type ='EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc limit 2500";

		}

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		sqlQuery.setString("from", from);
		sqlQuery.setString("to", to);
		sqlQuery.setString("mid", umSsMotoMid);
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());

		for (Object[] rec : resultSet) {

			UMEzyway fs = new UMEzyway();

			if (rec[0] != null) {
				fs.setF001_MID(rec[0].toString());
			} else {
				fs.setF001_MID("");
			}

			if (rec[1] != null) {
				double amount = 0;
				amount = Double.parseDouble(rec[1].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				fs.setF007_TXNAMT(output);

			} else {
				fs.setF007_TXNAMT("");
			}

			if (rec[2] != null) {
				fs.setPAN(rec[2].toString());
			} else {
				fs.setPAN("");
			}

			if (rec[3] != null) {
				if (rec[3].toString().equals("A")) {
					fs.setSTATUS("NOT SETTLED");
				} else if (rec[3].toString().equals("C")) {
					fs.setSTATUS("VOIDED");
				} else if (rec[3].toString().equals("S")) {
					fs.setSTATUS("SETTLED");
				}
			} else {
				fs.setSTATUS("");
			}

			if (rec[4] != null) {
				fs.setF263_MRN(rec[4].toString());
			} else {
				fs.setF263_MRN("");
			}

			if (rec[5] != null) {
				String rd = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyyMMdd").parse(rec[5].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				fs.setH003_TDT(rd);

			} else {
				fs.setH003_TDT("");
			}

			if (rec[6] != null) {
				String rt = null;
				try {
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss").parse(rec[6].toString()));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				fs.setH004_TTM(rt);

			} else {
				fs.setH004_TTM("");
			}

			if (rec[7] != null) {
				fs.setF011_AUTHIDRESP(rec[7].toString());
			} else {
				fs.setF011_AUTHIDRESP("");
			}

			if (rec[8] != null) {
				fs.setF023_RRN(rec[8].toString());
			} else {
				fs.setF023_RRN("");
			}
			if (rec[9] != null) {
				String rd = null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[9].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);
				fs.setTime(rt);
			} else {
				fs.setDate("");
				fs.setTime("");
			}

			if (rec[10] != null) {
				fs.setCardType(rec[10].toString());
			} else {
				fs.setCardType("");
			}

			if (rec[11] != null) {
				fs.setMerchantName(rec[11].toString());
			} else {
				fs.setMerchantName("");
			}

			if (rec[13] != null) {

				logger.info("H002_VNO: " + rec[12].toString());

				logger.info("TXN_TYPE: " + rec[13].toString());

				if (rec[13].toString().equalsIgnoreCase("EZYMOTO")) {

					if (rec[12].toString().equalsIgnoreCase("05")) {
						logger.info("EZYMOTO");
						fs.setTxnType(rec[13].toString());
					} else if (rec[12].toString().equalsIgnoreCase("05v")) {
						logger.info("EZYMOTO VCC");
						fs.setTxnType("EZYMOTO VCC");
					} else {
						logger.info("EZYLINK");
						fs.setTxnType("EZYLINK");
					}

				}

			} else {
				fs.setTxnType("");
			}

			if (rec[14] != null) {
				fs.setF270_ORN(rec[14].toString());
			} else {
				fs.setF270_ORN("");
			}

			if (rec[15] != null) {
				fs.setF268_CHNAME(rec[15].toString());
			} else {
				fs.setF268_CHNAME("");
			}
			
			if (rec[16] != null) {
				fs.setF279_HP(rec[16].toString());
			} else {
				fs.setF279_HP("");
			}
			
			if (rec[17] != null) {
				fs.setF278_EMAILADDR(rec[17].toString());
			} else {
				fs.setF278_EMAILADDR("");
			}
			
			if (rec[18] != null) {
				fs.setGoodsStatus(rec[18].toString());
			} else {
				fs.setGoodsStatus("NIL");
			}
			
			if (rec[19] != null) {
				fs.setUpdatedDate(rec[19].toString());
			} else {
				fs.setUpdatedDate("NIL");
			}

			// logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: " + paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());

	}
	
	
	@Override
	@Transactional(readOnly = true)
	public void listSettlementMDRTransaction(final PaginationBean<SettlementMDR> paginationBean,
			final String date1, final String date2) {
		logger.info("Inside   listAllForsettlementTransaction : " + date1 + "     " + date2 );

		ArrayList<SettlementMDR> fss = new ArrayList<SettlementMDR>();
		String sql = null;

//		Date date = new Date();
//		Calendar calendar = Calendar.getInstance();
//		date = calendar.getTime();
//		// Date date = new Date();
//
//		int year = calendar.getWeekYear();
//		// int year=2017;
//		long mon = date.getMonth() + 1;
//		int day = date.getDate() + 1;
//		int daybefore = date.getDate() - 20;
//		String fromDate = null;
//		String toDate = null;
//		String dateorg2 = day + "/" + mon + "/" + year;
//		String dateorg1 = daybefore + "/" + mon + "/" + year;
//		logger.info("date to find: " + dateorg1 + " " + dateorg2);
//		try {
//			toDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg2));
//			fromDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd/MM/yyyy").parse(dateorg1));
//		} catch (ParseException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		
		//new date condition - 29/12/2020
		Date dt = new Date();
				
				String fromDate = null, toDate = null;

				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				fromDate = dateFormat.format(dt);
				// logger.info("change date format:" + from);
				// from = from + "-01";
				String from1 = fromDate.substring(0, fromDate.length() - 2);
				fromDate = from1 + String.format("%02d", -1 + Integer.valueOf(fromDate.substring(8, 10)));
				System.out.println("change date format:" + fromDate);

				Date dt1 = new Date();
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
				toDate = dateFormat1.format(dt1);
				String to1 = toDate.substring(0, toDate.length() - 2);
				toDate = to1 + String.format("%02d", 1 + Integer.valueOf(toDate.substring(8, 10)));
				System.out.println("date format:" + toDate);
		logger.info("check date and year : " + fromDate + "  " + toDate);

	if((date1 != null) && (date2 != null)) {
		sql = "SELECT s.SETTLEMENTDATE,  s.MERCHANTNAME ,s.MID,s.TID,s.TXN_TYPE,s.CARD_BRAND ,"
				+ "s.CARD_TYPE,s.MASKED_PAN,s.TXN_AMOUNT,s.HOST_MDR_AMT,s.MOBI_MDR_AMT,s.MDR_AMT,"
				+ "s.EXTRA_DEDUCT_AMT,s.NET_AMOUNT,s.INVOICE_ID,s.RRN,s.STATUS,s.SETTLETYPE,s.DATE FROM mobiversa.SETTLEMENT_MDR s "
				+ "WHERE s.DATE between'"+ date1 +"' AND '"+ date2 +"' ORDER by s.TIME_STAMP  DESC ";
		
	}else {
		sql = "SELECT s.SETTLEMENTDATE,  s.MERCHANTNAME ,s.MID,s.TID,s.TXN_TYPE,s.CARD_BRAND ,"
				+ "s.CARD_TYPE,s.MASKED_PAN,s.TXN_AMOUNT,s.HOST_MDR_AMT,s.MOBI_MDR_AMT,s.MDR_AMT,"
				+ "s.EXTRA_DEDUCT_AMT,s.NET_AMOUNT,s.INVOICE_ID,s.RRN,s.STATUS,s.SETTLETYPE,s.DATE FROM mobiversa.SETTLEMENT_MDR s "
				+ "WHERE s.DATE between'"+ fromDate +"' AND '"+ toDate +"' ORDER by s.TIME_STAMP  DESC ";
		
	}
		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);// .addEntity(ForSettlement.class);
		
		@SuppressWarnings("unchecked")
		List<Object[]> resultSet = sqlQuery.list();
		logger.info("Number of records in the List : " + resultSet.size());
		
		for (Object[] rec : resultSet) {
			
			SettlementMDR fs = new SettlementMDR();
			
			if(rec[0]!=null){
				fs.setSettlementDate(rec[0].toString());
			}else {
				fs.setSettlementDate("");
			}
			
			if(rec[1]!=null){
				fs.setMerchantName(rec[1].toString());
			}else {
				fs.setMerchantName("");
			}
			
			
			if(rec[2]!=null){
				/*double amount = 0;
				amount = Double.parseDouble(rec[2].toString()) / 100;
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);*/
				fs.setMid(rec[2].toString());
			}else {
				fs.setMid("");
			}
			
			
			if(rec[3]!=null){
				fs.setTid(rec[3].toString());
			}else {
				fs.setTid("");
			}
			
			if(rec[4]!=null){
				fs.setTxnType(rec[4].toString());
			}else {
				fs.setTxnType("");
			}
			
			if(rec[5]!=null){
//				if(rec[5].toString().equals("A")) {
//					fs.setSTATUS("NOT SETTLED");
//				}else if(rec[5].toString().equals("C")) {
//					fs.setSTATUS("VOIDED");
//				}else if(rec[5].toString().equals("S")){
//					fs.setSTATUS("SETTLED");
//				}
				fs.setCardBrand(rec[5].toString());
			}else {
				fs.setCardBrand("");
			}
			
			if(rec[6]!=null){
				fs.setCardType(rec[6].toString());
			}else {
				fs.setCardType("");
			}
			
			if(rec[7]!=null){
				/*String rd = null;
					try {
						rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyyMMdd").parse(rec[7].toString()));
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}*/
					
					fs.setMaskedPan(rec[7].toString());
				
			}else {
				fs.setMaskedPan("");
			}
			
			if(rec[8]!=null){
				/*String rt = null;
					try {
						rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(rec[8].toString()));

					} catch (ParseException e) {
						e.printStackTrace();
					}*/
					fs.setTxnAmount(rec[8].toString());
				
				
			}else {
				fs.setTxnAmount("");
			}
			
			
			if(rec[9]!=null){
				fs.setHostMdrAmt(rec[9].toString());
			}else {
				fs.setHostMdrAmt("");
			}
			
			if(rec[10]!=null){
				fs.setMobiMdrAmt(rec[10].toString());
			}else {
				fs.setMobiMdrAmt("");
			}
			
			if(rec[11]!=null){
				/*String rd=null;
				String rt = null;
				try {
					rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
					rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rec[11].toString()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				fs.setDate(rd);*/
				fs.setMdrAmt(rec[11].toString());
			}else {
//				fs.setDate("");
				fs.setMdrAmt("");
			}
			
			if(rec[12]!=null){
				fs.setExtraDeductAmt(rec[12].toString());
			}else {
				fs.setExtraDeductAmt("");
			}
			
			if(rec[13]!=null){
				fs.setNetAmount(rec[13].toString());
			}else {
				fs.setNetAmount("");
			}
			
			if(rec[14]!=null){
				fs.setInvoiceId(rec[14].toString());
			}else {
				fs.setInvoiceId("");
			}
			
			if(rec[15]!=null){
				fs.setRrn(rec[15].toString());
			}else {
				fs.setRrn("");
			}
			
			if(rec[16]!=null){
				fs.setStatus(rec[16].toString());
			}else {
				fs.setStatus("");
			}
			
			//settleperiod
			if(rec[17]!=null){
				fs.setSettleType(rec[17].toString());
			}else {
				fs.setSettleType("");
			}
			
			if(rec[18]!=null){
				fs.setDate(rec[18].toString());
			}else {
				fs.setDate("");
			}
			
			//logger.info("check activation date:" + fs.getNumOfRefund());
			fss.add(fs);
		}
		paginationBean.setItemList(fss);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		// paginationBean.setTotalRowCount(fss.size());
	
		

		
	}
	
	@Override
	public MobiMDR loadMobiMdr(String mid) {
		return (MobiMDR) sessionFactory.getCurrentSession().createCriteria(MobiMDR.class)
				.add(Restrictions.eq("mid", mid)).setMaxResults(1).uniqueResult();
	}
	
	@Override
	public String totalSettleAmount(String date, String date1, String Mid) {

		logger.info("Inside totalSettleAmount: " + date + "  " + date1 + "  " + Mid);
		String totalAmount = null;
		ArrayList<UMEzyway> fss = new ArrayList<UMEzyway>();
		String sql = null;

		logger.info("checkd date: " + date + " : " + date1);

		sql = "select SUM(res.F007_TXNAMT) from "
			 + "mobiversa.UM_ECOM_TXNRESPONSE as res "
			 + "where res.`STATUS` in ('A','S') and res.H002_VNO ='03' and res.txn_type = 'EZYMOTO' and res.F001_MID =:mid and res.time_stamp between :from  and :to order by res.time_stamp desc ";
		

		logger.info("Query : " + sql);
		Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		sqlQuery.setString("from", date);
		sqlQuery.setString("to", date1);
		sqlQuery.setString("mid", Mid);
		
		if(sqlQuery.list().get(0) != null) {
			totalAmount =  sqlQuery.list().get(0).toString();
		}else {
			totalAmount = "0.0";
		}
			
		logger.info("Total: " + totalAmount);
		
		return totalAmount;

	}

	
}
