package com.mobiversa.payment.connect;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Properties;

import org.apache.http.entity.StringEntity;
import org.apache.log4j.Logger;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.mobiversa.common.bo.UMEcomTxnRequest;
import com.mobiversa.payment.dto.MotoTxnDet;
import com.mobiversa.payment.dto.PreAuthTxnDet;
import com.mobiversa.payment.util.FileGenerate;
import com.mobiversa.payment.util.PropertyLoad;
import com.mobiversa.payment.util.ResponseDetails;

public class MotoPaymentCommunication {
	private static Logger logger = Logger.getLogger(MotoPaymentCommunication.class);
	
	public static String getFilePath(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					System.out.println("Path :"+prop.getProperty("VoidPaymentURL"));
					path=prop.getProperty("VoidPaymentURL");
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	public static String getauthDDPath(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					System.out.println("Path :"+prop.getProperty("AuthDDURL"));
					path=prop.getProperty("AuthDDURL");
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	public static String getUMAuthDDPath(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					System.out.println("Path :"+prop.getProperty("UM_AuthDDURL"));
					path=prop.getProperty("UM_AuthDDURL");
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	
	
	
	public static String getUMAuthPath(String service){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					if(service.equalsIgnoreCase("Sale")){
						path= prop.getProperty("UM_Auth_Sale_URL");
					}else {
						path=prop.getProperty("UM_Auth_Void_URL");
					}
					
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	public static String getUMAuthRevPath(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					path=prop.getProperty("UM_Auth_Sale_URL");
					
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	public static String getUMVoidPath(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					System.out.println("Path :"+prop.getProperty("UM_Void_URL"));
					path=prop.getProperty("UM_Void_URL");
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	public static String getFileRegenrate(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					System.out.println("Path :"+prop.getProperty("File_Regenerate"));
					path=prop.getProperty("File_Regenerate");
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	public static String getMotoVCPath(){
		//To get path
				Properties prop = new Properties();
				InputStream input = null;
				String path=null;
				
				try {
					
					ClassLoader loader = Thread.currentThread().getContextClassLoader();           
					input = loader.getResourceAsStream("/config.properties");
					prop.load(input);
					System.out.println("Path :"+prop.getProperty("MOTO_VC_URL"));
					path=prop.getProperty("MOTO_VC_URL");
					return path; 
				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (input != null) {
						try {
							input.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			
				return path; 
	}
	
	
	
	public static ResponseDetails motosubmitTrans(MotoTxnDet motoTrans) 
	{
		ResponseDetails rd=new ResponseDetails();
		logger.info("filepath "+getFilePath());
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				
				logger.info("Watsapp In: "+motoTrans.getWhatsapp());
				
				logger.info(getFilePath());
				url = new URL(getFilePath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		      
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();

				
				jsonParams.put("mid", motoTrans.getMotoMid());
				jsonParams.put("tid", motoTrans.getTid());
				jsonParams.put("amount",motoTrans.getAmount());
				jsonParams.put("invoiceId",motoTrans.getReferrence());
				jsonParams.put("service","MOTO_TXN_REQ");
				jsonParams.put("contactName", motoTrans.getContactName());
				jsonParams.put("longitude",motoTrans.getLongitude());
				jsonParams.put("latitude",motoTrans.getLatitude());
				jsonParams.put("mobileNo", motoTrans.getPhno());
				jsonParams.put("email", motoTrans.getEmail());
				jsonParams.put("expectedDate", motoTrans.getExpectedDate());
				jsonParams.put("reqMode", "WEB");
				jsonParams.put("hostType", motoTrans.getHostType());
				jsonParams.put("whatsApp", motoTrans.getWhatsapp());
				if(motoTrans.getMultiOption() != null) {
				jsonParams.put("multiOption ", motoTrans.getMultiOption());
				}
				
				logger.info("json: "+jsonParams.toString());
				
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();

				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(
			                        new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			rd.setResponseCode("0001");
			rd.setResponseMessage(e.getMessage());
			logger.info("exception: "+e.getMessage());
			//e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
		
		
	}
	
	
	public static ResponseDetails preAuthsubmitTrans(PreAuthTxnDet preAuthTxn) 
	{
		ResponseDetails rd=null;
		logger.info("filepath "+getFilePath());
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				logger.info(getFilePath());
				url = new URL(getFilePath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		      
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();

				
				jsonParams.put("mid", preAuthTxn.getMotoMid());
				jsonParams.put("tid", preAuthTxn.getTid());
				jsonParams.put("amount",preAuthTxn.getAmount());
				jsonParams.put("invoiceId",preAuthTxn.getReferrence());
				jsonParams.put("service","MOTO_PREAUTH_TXN_REQ");
				jsonParams.put("contactName", preAuthTxn.getContactName());
				jsonParams.put("longitude",preAuthTxn.getLongitude());
				jsonParams.put("latitude",preAuthTxn.getLatitude());
				jsonParams.put("mobileNo", preAuthTxn.getPhno());
				jsonParams.put("email", preAuthTxn.getEmail());
				jsonParams.put("expectedDate", preAuthTxn.getExpectedDate());
				jsonParams.put("hostType", preAuthTxn.getHostType());
				jsonParams.put("reqMode", "WEB");
				
				logger.info("json: "+jsonParams.toString());
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
		
		
	}
	
	
	public static ResponseDetails CancelPayment(MotoTxnDet motoTxnDet) 
	{
		ResponseDetails rd=null;
		logger.info("filepath "+getFilePath());
		Gson gson = new Gson();
		String error = "{\"responseCode\":\"0001\",\"responseMessage\":\"Failure\",\"responseDescription\":\"Void Transaction Failed\"}";
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				logger.info(getFilePath());
				url = new URL(getFilePath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		      
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();
				
				jsonParams.put("tid", motoTxnDet.getTid());
				jsonParams.put("sessionId", PropertyLoad.getFile().getProperty("EZYWAYVOID_SESSIONID"));
				jsonParams.put("trxId",motoTxnDet.getTrxId());
				jsonParams.put("service","VOID");
				jsonParams.put("merchantId", motoTxnDet.getMerchantId() );
				jsonParams.put("hostType", motoTxnDet.getHostType());
				
				logger.info("json: "+jsonParams.toString());
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				//JSONObject dataObj = new JSONObject(output);
				try {
					rd = gson.fromJson(output, ResponseDetails.class);
				}catch (JsonSyntaxException e) {
					logger.info(" JsonSyntaxException .... "+output);
					rd = gson.fromJson(error, ResponseDetails.class);
				}
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		/*finally{
			
		}*/
			
		return rd;
		
	}
	
	
	
	public static ResponseDetails UmCancelPayment(UMEcomTxnRequest TxnDet) 
	{
		ResponseDetails rd=null;
		logger.info("UM Void path "+getUMVoidPath());
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				logger.info(getUMVoidPath());
				url = new URL(getUMVoidPath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		      
		        StringEntity jsonEntity = null;
				
				/*JSONObject jsonParams = new JSONObject();
				jsonParams.put("f263_MRN", TxnDet.getF263_MRN());
				logger.info("json: "+jsonParams.toString());*/
				
				OutputStream os = conn.getOutputStream();
				/*os.write(jsonParams.toString().getBytes());*/
				
				String mrn ="f263_MRN="+TxnDet.getF263_MRN();
				
				logger.info("mrn to void"+mrn);
//				String mrn ="f263_MRN=";
//				String mrn ="f263_MRN="+"2018102200000000000928910003278050201";
				
				os.write(mrn.getBytes());
				
				os.flush();
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
	}
	
	public static ResponseDetails FileRegenerate(FileGenerate TxnDet) 
	{
		ResponseDetails rd=null;
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		String error = "{\"responseCode\":\"0001\",\"responseMessage\":\"Failure\",\"responseDescription\":\"File Regeneration Failed\"}";
		 URL url;
			try {
				logger.info("File Regeneration URL "+getFileRegenrate());
				url = new URL(getFileRegenrate());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		      
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();
				
				jsonParams.put("service", "REGEN_FILE");
				jsonParams.put("mid", TxnDet.getMid());
				jsonParams.put("date",TxnDet.getDate());
				jsonParams.put("merchantFile",TxnDet.getMerchantFile());
				jsonParams.put("mdrFile", TxnDet.getMdrFile());
				jsonParams.put("deductionFile", TxnDet.getDeductionFile());
				jsonParams.put("settleDay", TxnDet.getSettleType());
				jsonParams.put("csvFile", TxnDet.getCsvFile());
//				jsonParams.put("mailTo", TxnDet.getMailTo());
//				jsonParams.put("mailCC", TxnDet.getMailCC());
				
				
				logger.info("json: "+jsonParams.toString());
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				//JSONObject dataObj = new JSONObject(output);
				try {
					rd = gson.fromJson(output, ResponseDetails.class);
				}catch (JsonSyntaxException e) {
					logger.info(" JsonSyntaxException .... "+output);
					
					rd = gson.fromJson(error, ResponseDetails.class);
				}
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		/*finally{
			
		}*/
			
		return rd;
			
	}
	
	
	
	public static ResponseDetails UmAuthReverse(UMEcomTxnRequest TxnDet) 
	{
		ResponseDetails rd=null;
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
		 String Path=null;
		 logger.info("Auth Service :  "+TxnDet.getStatus());
		 
			try {
				
				logger.info("Auth Reverse Path :  "+getUMAuthRevPath());
				url = new URL(getUMAuthRevPath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		      
		        StringEntity jsonEntity = null;
				
				/*JSONObject jsonParams = new JSONObject();
				jsonParams.put("f263_MRN", TxnDet.getF263_MRN());
				logger.info("json: "+jsonParams.toString());*/
				
				OutputStream os = conn.getOutputStream();
				/*os.write(jsonParams.toString().getBytes());*/
				
				//String mrn ="f263_MRN="+TxnDet.getF263_MRN();
				//logger.info("MRN  to UM Payment :"+mrn);
				String Params = null;
				StringBuffer urlString = new StringBuffer();
				urlString.append("f263_MRN="+TxnDet.getF263_MRN());
				urlString.append("&service=" +"reverse");
				Params = urlString.toString();
				
				logger.info("URL String to UM Reverse "+Params);
//				String mrn ="f263_MRN=";
//				String mrn ="f263_MRN="+"2018102200000000000928910003278050201";
				
				//os.write(mrn.getBytes());
				os.write(Params.getBytes());
				
				os.flush();
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
	}
	
	
	public static ResponseDetails UmAuthPayment(UMEcomTxnRequest TxnDet) 
	{
		ResponseDetails rd=null;
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
		 String Path=null;
		 logger.info("Auth Service :  "+TxnDet.getStatus());
		 
			try {
				
				logger.info("Auth Path :  "+getUMAuthPath(TxnDet.getStatus()));
				url = new URL(getUMAuthPath(TxnDet.getStatus()));
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		      
		        StringEntity jsonEntity = null;
				
				/*JSONObject jsonParams = new JSONObject();
				jsonParams.put("f263_MRN", TxnDet.getF263_MRN());
				logger.info("json: "+jsonParams.toString());*/
				
				OutputStream os = conn.getOutputStream();
				/*os.write(jsonParams.toString().getBytes());*/
				
				/*String mrn ="f263_MRN="+TxnDet.getF263_MRN();
				logger.info("MRN  to UM Payment :"+mrn);*/
				String Params = null;
				StringBuffer urlString = new StringBuffer();
				urlString.append("f263_MRN="+TxnDet.getF263_MRN());
				urlString.append("&service=" +TxnDet.getStatus());
				urlString.append("&amount=" +TxnDet.getF007_TxnAmt());
				Params = urlString.toString();
				
				logger.info("URL String to UM Payment "+Params);;
//				String mrn ="f263_MRN=";
//				String mrn ="f263_MRN="+"2018102200000000000928910003278050201";
				
				//os.write(mrn.getBytes());
				os.write(Params.getBytes());
				
				os.flush();
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
	}
	
	public static ResponseDetails motoVC(String mid, String tid, String status) {

		ResponseDetails rd=null;
		logger.info("MotoVC Path "+getMotoVCPath());
		Gson gson = new Gson();
		String error = "{\"responseCode\":\"0001\",\"responseMessage\":\"Failure\",\"responseDescription\":\"Moto VC Transaction Failed\"}";
		String success = "{\"responseCode\":\"0000\",\"responseMessage\":\"Success\",\"responseDescription\":\"Moto VC Transaction Done\"}";
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				logger.info(getMotoVCPath());
				url = new URL(getMotoVCPath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		        
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();
				
				jsonParams.put("tid", tid);
				jsonParams.put("mid", mid);
				jsonParams.put("service","MOTO_VC_TXN");
				jsonParams.put("txnType",status);
				
				logger.info("Before json: "+jsonParams.toString());
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();
				
				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				//JSONObject dataObj = new JSONObject(output);
				try {
					rd = gson.fromJson(output, ResponseDetails.class);
				}catch (JsonSyntaxException e) {
					logger.info(" JsonSyntaxException .... "+output);
					rd = gson.fromJson(error, ResponseDetails.class);
				}
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		/*finally{
			
		}*/
			
		return rd;
		
	
	}
	
	
	public static ResponseDetails authDDRequest(MotoTxnDet motoTrans) 
	{
		ResponseDetails rd=new ResponseDetails();
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				
				
				if (motoTrans.getHostType().contains("U")) {
					logger.info("follow UMobile path:"+getUMAuthDDPath());
					url = new URL(getUMAuthDDPath());
				}else {
					logger.info("follow Paydee path:"+getauthDDPath());
					url = new URL(getauthDDPath());
				}
				
				
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		      
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();

				
				jsonParams.put("mid", motoTrans.getMotoMid());
				jsonParams.put("tid", motoTrans.getTid());
				jsonParams.put("amount",motoTrans.getAmount());
				jsonParams.put("invoiceId",motoTrans.getReferrence());
				jsonParams.put("service","PORTAL_PREAUTH_TXN_REQ");
				jsonParams.put("contactName", motoTrans.getContactName());
				jsonParams.put("longitude",motoTrans.getLongitude());
				jsonParams.put("latitude",motoTrans.getLatitude());
				jsonParams.put("mobileNo", motoTrans.getPhno());
				jsonParams.put("email", motoTrans.getEmail());
				jsonParams.put("expectedDate", motoTrans.getExpectedDate());
				jsonParams.put("reqMode", "WEB");
				jsonParams.put("hostType", motoTrans.getHostType());
				jsonParams.put("watsApp", motoTrans.getReceiptVia());
				jsonParams.put("nameOnCard", motoTrans.getcName());
				jsonParams.put("appVersionNum", "5.4");
				jsonParams.put("carddetails", motoTrans.getCardDetails());
				
				logger.info("json: "+jsonParams.toString());
				
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();

				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(
			                        new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			rd.setResponseCode("0001");
			rd.setResponseMessage(e.getMessage());
			logger.info("exception: "+e.getMessage());
			//e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
		
		
	}
	
	public static ResponseDetails UMAuthDDRequest(MotoTxnDet motoTrans) 
	{
		ResponseDetails rd=new ResponseDetails();
		logger.info("filepath "+getauthDDPath());
		Gson gson = new Gson();
		String inputLine=null;
		String output=null;
		 URL url;
			try {
				logger.info(getauthDDPath());
				url = new URL(getauthDDPath());
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setDoOutput(true);
		        conn.setRequestMethod("POST");
		        conn.setRequestProperty("Content-Type", "application/json");
		      
		        StringEntity jsonEntity = null;
				
				JSONObject jsonParams = new JSONObject();

				
				jsonParams.put("mid", motoTrans.getMotoMid());
				jsonParams.put("tid", motoTrans.getTid());
				jsonParams.put("amount",motoTrans.getAmount());
				jsonParams.put("invoiceId",motoTrans.getReferrence());
				jsonParams.put("service","PORTAL_PREAUTH_TXN_REQ");
				jsonParams.put("contactName", motoTrans.getContactName());
				jsonParams.put("longitude",motoTrans.getLongitude());
				jsonParams.put("latitude",motoTrans.getLatitude());
				jsonParams.put("mobileNo", motoTrans.getPhno());
				jsonParams.put("email", motoTrans.getEmail());
				jsonParams.put("expectedDate", motoTrans.getExpectedDate());
				jsonParams.put("reqMode", "WEB");
				jsonParams.put("hostType", motoTrans.getHostType());
				jsonParams.put("watsApp", motoTrans.getReceiptVia());
				jsonParams.put("nameOnCard", motoTrans.getcName());
				jsonParams.put("appVersionNum", "5.4");
				jsonParams.put("carddetails", motoTrans.getCardDetails());
				
				logger.info("json: "+jsonParams.toString());
				
				
				OutputStream os = conn.getOutputStream();
				os.write(jsonParams.toString().getBytes());
				os.flush();

				StringBuffer response = new StringBuffer();
				BufferedReader br = new BufferedReader(
			                        new InputStreamReader((conn.getInputStream())));
					
				while ((inputLine = br.readLine()) != null) {
			       	response.append(inputLine);
			    }

				output =response.toString();
				logger.info(" Output from Server .... "+output);
				
				JSONObject dataObj = new JSONObject(output);
				
				rd = gson.fromJson(output, ResponseDetails.class);
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			rd.setResponseCode("0001");
			rd.setResponseMessage(e.getMessage());
			logger.info("exception: "+e.getMessage());
			//e.printStackTrace();
		}	
		finally{
			
		}
			
		return rd;
			
		
		
	}
	
	
}
	