package com.mobiversa.payment.service;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.jms.JMSException;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.AuditTrail;
import com.mobiversa.common.bo.AuditTrailAction;
import com.mobiversa.common.bo.CommonOperationStatus;
import com.mobiversa.common.bo.CommonStatus;
import com.mobiversa.common.bo.EzyRecurringPayment;
import com.mobiversa.common.bo.FileUpload;
import com.mobiversa.common.bo.KeyManager;
import com.mobiversa.common.bo.MID;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.MerchantDetails;
import com.mobiversa.common.bo.MerchantStatusHistory;
import com.mobiversa.common.bo.MerchantUserRole;
import com.mobiversa.common.bo.MobiLiteMerchant;
import com.mobiversa.common.bo.MobiLiteTerminal;
import com.mobiversa.common.bo.MobileUser;
import com.mobiversa.common.bo.MotoTxnDetails;
import com.mobiversa.common.bo.SettlementMDR;
import com.mobiversa.common.bo.SubAgent;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.common.bo.TransactionRequest;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.dao.AgentDao;
import com.mobiversa.payment.dao.MerchantDao;
import com.mobiversa.payment.dao.SubAgentDao;
import com.mobiversa.payment.dto.MerchantGPVData;
import com.mobiversa.payment.dto.MerchtCustMail;
import com.mobiversa.payment.dto.RegAddMerchant;
import com.mobiversa.payment.util.MobiliteTrackDetails;
import com.mobiversa.payment.util.PropertyLoader;
import com.mobiversa.payment.util.RandomPassword;
import com.mobiversa.payment.util.SendSMSMessage;
import com.postmark.java.Attachment;
import com.postmark.java.EmailTemplet2;
import com.postmark.java.MerchantActivation;
import com.postmark.java.MsgDto;
import com.postmark.java.NameValuePair;
import com.postmark.java.PostmarkClient;
import com.postmark.java.PostmarkException;
import com.postmark.java.PostmarkMessage;
import com.postmark.java.PostmarkResponse;
import com.postmark.java.TempletFields;
import com.sun.mail.iap.ConnectionException;


@Service
public class MerchantService {// extends BaseDAOImpl {

	@Autowired
	protected SessionFactory sessionFactory;
	
	@Autowired
	private MerchantDao merchantDAO;
	
	@Autowired
	private AgentDao agentDAO;
	
	@Autowired
	private SubAgentDao subAgentDAO;

	@Autowired
	private PasswordEncoder encoder;
 
	  private static final Logger logger=Logger.getLogger(MerchantService.class.getName());
	
	/**
	 * Load a merchant based on Primary Key (PK)
	 * 
	 * @param id
	 *            merchant table's primary Key
	 */
	public Merchant loadMerchantByPk(final Long id) {
		Merchant merchant = merchantDAO.loadEntityByKey(Merchant.class, id);
		if (merchant == null) {
			throw new RuntimeException("Merchant Not found. ID:: " + id);
		}
		return merchant;
	}

	public Merchant loadMerchantBym_fk(Long id) {
		Merchant merchant = merchantDAO.loadEntityByKey(Merchant.class, id);
		if (merchant == null) {
			throw new RuntimeException("Merchant Not found. merchant fk_ID:: "
					+ id);
		}
		return merchant;

	}

	/**
	 * Load a merchantstatushistory based on Primary Key (PK)
	 * 
	 * @param id
	 *            merchant table's primary Key
	 */

	public MerchantStatusHistory loadMerchantStatusHistoryByPk(final Merchant merchant)

	{
		return merchantDAO.loadMerchantStatusHistoryID(merchant);
	}

	public void searchMerchant(final String businessName, final PaginationBean<Merchant> paginationBean) {
		merchantDAO.findByUserNames(businessName, paginationBean);
	}

	public Boolean updateMerchantByPk(final Long id, final Merchant merchant) {

		Boolean status = false;
		merchant.setId(id);
		try {
			Merchant modifiedMerchant = merchantDAO.saveOrUpdateEntity(merchant);
			status = true;
		} catch (HibernateException e) {
			status = false;
		}
		return status;
	}

	/**
	 * List all the bank users
	 * 
	 * @param paginationBean
	 * @param currentMerchant 
	 * @param toDate 
	 * @param fromDate 
	 */
	//@javax.transaction.Transactional
	public void listRecurringMerchant(final PaginationBean<EzyRecurringPayment> paginationBean, Merchant currentMerchant,
			String fromDate, String toDate) {
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
	//	logger.info("mid: "+currentMerchant.getMid().getMid()+" motoMid: "+currentMerchant.getMid().getMotoMid());
		//criterionList.add(Restrictions.ne("status",null));
		criterionList.add(Restrictions.or(Restrictions.ne("status",""), Restrictions.isNotNull("status")));
		criterionList.add(Restrictions.in("mid",new String[] {currentMerchant.getMid().getMid(),
				
		currentMerchant.getMid().getMotoMid(),currentMerchant.getMid().getEzyrecMid() }));
		
		if(fromDate!=null && toDate!=null){
			criterionList.add(Restrictions.between("timeStamp", fromDate, toDate));
		}
		//criterionList.add((Restrictions.eq("status", CommonStatus.CANCELLED)));
		

		
		merchantDAO.listRecurringMerchantUser(paginationBean, criterionList);
	}
	
	
	
	public void listMotoTxnReqMerchant(final PaginationBean<MotoTxnDetails> paginationBean,
			String fromDate, String toDate) {
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
	
		if(fromDate!=null && toDate!=null){
			criterionList.add(Restrictions.between("timestamp", fromDate, toDate));
		}
		//criterionList.add((Restrictions.eq("status", CommonStatus.CANCELLED)));
		

		
		merchantDAO.listMotoTxnReqMerchantUser(paginationBean, criterionList);
	}
	
	public void listMotoReqMerchant(final PaginationBean<MotoTxnDetails> paginationBean,String fromDate,String toDate,String status) {
	
		
		
		 merchantDAO.loadReqMotoData(paginationBean,fromDate, toDate, status);
	}
	
	
	public void merchantListRecurring(final PaginationBean<EzyRecurringPayment> paginationBean,
			String fromDate, String toDate) {
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
	//	logger.info("mid: "+currentMerchant.getMid().getMid()+" motoMid: "+currentMerchant.getMid().getMotoMid());
		//criterionList.add(Restrictions.ne("status",));
		
		
		criterionList.add(Restrictions.or(Restrictions.ne("status",""), Restrictions.isNotNull("status")));
		if(fromDate!=null && toDate!=null){
			criterionList.add(Restrictions.between("timeStamp", fromDate, toDate));
		}
		//criterionList.add((Restrictions.eq("status", CommonStatus.CANCELLED)));
		

		//merchantDAO.merchantListRecurring(paginationBean, criterionList);
		merchantDAO.listRecurringMerchantUser(paginationBean, criterionList);
	}
	
	
	
	public EzyRecurringPayment loadMerchantRecurring(final Long recId)
	{
		logger.info("login person serarching loadmerchant: "+recId);
		return merchantDAO.loadMerchantRecurring(recId);
	}
	
	
	
	
	/*public int UpdateRecurringStatus(final Long recId,String status)
	{
		logger.info("login person serarching loadmerchant: "+recId);
		return merchantDAO.UpdateRecurringStatus(status,recId);
	}*/
	
	public EzyRecurringPayment UpdateRecurringStatus(EzyRecurringPayment ezyrec)
	{
		logger.info("login person serarching loadmerchant: "+ezyrec.getId());
		//return merchantDAO.UpdateRecurringStatus(status,recId);
		return merchantDAO.saveOrUpdateEntity(ezyrec);
	}
	
	public void listMerchant(final PaginationBean<Merchant> paginationBean) {
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
		//criterionList.add(Restrictions.eq("status", CommonStatus.ACTIVE));
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.CANCELLED)));
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.PENDING)));
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.SUBMITTED)));
		criterionList.add(Restrictions.eq("role",MerchantUserRole.BANK_MERCHANT));
		
		//merchantDAO.listMerchantUser(paginationBean, criterionList);
		
		merchantDAO.listMerchantUserByMid(paginationBean);
	}
	
	

	public TransactionRequest listMerchantCardDetails(BigInteger TxnId) {
		

		
		return merchantDAO.listMerchantCardDetails(TxnId);
	}
	
	
	public void doSuspendMerchant(final Long id, final String reason, final String suspendDescription) {
		Merchant merchant = loadMerchantByPk(id);
		if (!CommonStatus.ACTIVE.equals(merchant.getStatus())) {
			// merchant status isn't active, then how do we suspend merchant?
			throw new RuntimeException("unable to suspend a non-active merchant");
		}

		CommonStatus status = CommonStatus.SUSPENDED;

		MerchantStatusHistory history = new MerchantStatusHistory();
		history.setMerchant(merchant);
		history.setCreatedDate(new Date());
		history.setReason(reason);
		history.setDescription(suspendDescription);
		history.setStatus(status);
		history.setUserId(merchant.getUsername());
		merchantDAO.updateMerchantStatus(id, status, history);
	}

	public void doUnSuspendMerchant(final Long id, final String reason, final String unSuspendDescription) {
		Merchant merchant = loadMerchantByPk(id);
		if (!CommonStatus.SUSPENDED.equals(merchant.getStatus())) {
			// merchant status isn't suspend, then how do we active merchant?
			throw new RuntimeException("unable to unsuspend a active merchant");
		}

		CommonStatus status = CommonStatus.ACTIVE;

		MerchantStatusHistory history = new MerchantStatusHistory();
		history.setMerchant(merchant);
		history.setCreatedDate(new Date());
		history.setReason(reason);
		history.setDescription(unSuspendDescription);
		history.setStatus(status);
		history.setId(id);
		merchantDAO.updateMerchantStatus(id, status, history);
	}
//add merchant methods
	public Merchant addMerchant(final Merchant entity)
	
	{  /*,final Agent entity1*/
	//new changes 09052016//
		/*System.out.println("agentname:" +entity1.getUsername());
		Agent agent = agentDAO.loadAgentbyMailId(entity1.getUsername());*/
		
		/*String sql = null;
		
		 sql="select id from agent where  ='"+ agentName +"'";
		 logger.info("Query : " + sql);
		 Query sqlQuery = super.getSessionFactory().createSQLQuery(sql);
		 @SuppressWarnings("unchecked")*/
		
		
		
		//System.out.println("entity" + entity.getAgID());
		String agentData=entity.getBusinessShortName();
		//String agentData = entity.getSignedPackage();
		String mailId  = null;
		//if(agentData != null || !(agentData.equals(""))){
		if(!(agentData.equals(""))){
			String agentmail[] = agentData.split("~");
			//System.out.println("Agent Data  "+agentmail);
			 mailId  = agentmail[1];
		}
		//System.out.println("Agent Mail : "+ mailId);
		Agent agent = agentDAO.loadAgentbyMailId(mailId);
		
		//System.out.println("Agent Data : "+ agent.getId());
		
		
	Merchant merchant = new Merchant();
		
	BigInteger bi = new BigInteger(agent.getId().toString());
	//System.out.println("Data   sfsfsfdf : "+ bi);
	entity.setAgID(bi);
	//entity.setSignedPackage("");
	entity.setBusinessShortName("");
	
	
	logger.info("merchant :"+entity.getFirstName());
	entity.setEnabled(true);
	logger.info("merchant :"+entity.getEmail());
	entity.setUsername(entity.getEmail());
	
	//logger.info("merchant :"+entity.getUsername());
	
	entity.setStatus(CommonStatus.ACTIVE);
/*	Date date = new Date();
	String activateDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	logger.info("merchant:" + entity.getActivateDate());*/
	entity.setActivateDate(new Date());
	//logger.info("merchant:" + entity.getActivateDate());
		String genPwd = new RandomPassword().generateRandomString();
	//logger.info("code1 :"+genPwd);
	//entity.setPassword("abc123");
	MID mm = new MID();
	String mid=entity.getNricAcc();
	//String mid = entity.getWaiverMonth();
	//BigInteger bi1 = new BigInteger(merchant.getId().toString());
	//logger.info("middd :"+mid);
	
	if(mid.length() < 15){
		for(int i =mid.length() ; i < 15 ; i++){
			mid = "0"+mid;
		}
	} 
	//logger.info("middd :"+mid);
	mm.setMid(mid);
	
	entity.setMid(mm);
	//logger.info("ddmid :"+mm.getMid());
	entity.setNricAcc("");
	//entity.setWaiverMonth("");
	entity.setPassword(encoder.encode(genPwd));
	//logger.info("code1 :"+entity.getPassword());
	entity.setRole(MerchantUserRole.BANK_MERCHANT);
	/*entity.setAgId(entity.());*/
	
	merchant =  merchantDAO.saveOrUpdateEntity(entity);
	
	logger.info("code1 :"+merchant.getId()+"  : "+merchant.getMid().getId());
	
	//logger.info("code1 :"+merchant.getId()+"  : "+merchant.getMid().getMerchant().getId());
	
	/*entity.getWaiverMonth();
	MID mm = new MID();
	mm.setMid(entity.getWaiverMonth());
    mm.*/
	
	//MID mid=merchantDAO.saveOrUpdateEntity(mm);
	//System.out.println(" Merchant id : "+merchant.getId());
	//String mid = entity.getWaiverMonth();
	//System.out.println(" Merchantttt id : "+mid);
	//BigInteger bi1 = new BigInteger(merchant.getId().toString());
	 int updt = merchantDAO.updateMIDData(merchant.getMid().getId(), merchant.getId());
	 
	
	//logger.info(" Data : "+ updt);
	
	
	TempletFields tempField = new TempletFields();
	
	tempField.setFirstName(entity.getFirstName());
	tempField.setLastName(entity.getLastName());
	tempField.setUserName(entity.getUsername());
	tempField.setPassword(genPwd);
	tempField.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
	
	
	List<NameValuePair> headers = new ArrayList<NameValuePair>();
	headers.add(new NameValuePair("HEADER", "test"));
    //EZYWIRE AS USERNAME & password mobiversa
	String fromAddress = "info@gomobi.io";
	//String apiKey = "c652b570-9500-4534-8eb6-96a78c10c8b8";
	String apiKey = PropertyLoader.getFile().getProperty("APIKEY");
	String toAddress = entity.getUsername();
	
	//String toAddress = "karthiga@mobiversa.com";
	/*String ccMail="ethan@mobiversa.com";
	String bccMail = "premkumar@mobiversa.com";*/
	
	String ccMail=PropertyLoader.getFile().getProperty(
			"MOBILEUSER_ADD_CCMAIL");
	 String bccMail = PropertyLoader.getFile().getProperty(
				"MOBILEUSER_ADD_BCCMAIL");
	
	//String subject = "Account Creation Mail";// set
	String subject = PropertyLoader.getFile().getProperty("WEBMAIL_SUBJECT");  
	
	String emailBody = EmailTemplet2.sentTempletContent(tempField);
	//String emailBody = MerchantCreation.sentEamil(tempField);
	/*Attachment logo = new Attachment(
			"mobiversa_logo1.jpg",
			"image/jpg",//"",
			"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"
			+ "",
			"cid:mobiversa_logo1");
	
	Attachment faceBook = new Attachment(
			"mobi_facebook.jpg",
			"image/jpg",
			"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmlJREFUeNrkWr1KA0EQ3hxpbBQEBbHwtAiWwVYhBgTTJUIKu1zhA+QBLFL4AMkbJL2S+AReXkBsBG3kYmMhKqc2VnEmmQvneZfcz+5lVweGwHGZ/b6dn/2ZywyHQ5ZUqqdX+/DjqA66EfDqANQCNVHPz4pm0rEzcQkQaAO0AroUc3wbtAfajksmMgEC3gAtML7SR7tRiYQmAMAxNJqgZSZWLkHrQMTiRgDAY5i0E4RKnNAygERv1otaCPA4690UwTMaq0tjx/cAGMBZr7H5Sgc8YUT2gCTgUWqEJTwBcp0M4N0kmqFCiBK2y+SUI29i/yBApfIm5YSNWp3y7hLrDaGmxOCd6tT09QCtsFc8R9vRl1n1YJPl9EW/PEtiuuis2FnXwwZP8CelHCvtrYvyRIM2juMQotnntrfZ3V4VCR6lQJgnOWDwtH58uJVGPhjuEKrwtLy2svDr2fXtC7swLXb/9M5rmBFmjVwhvPJwBj+qSIhdc5JBtLx+fokwmx6B5w9xBHSmrujZKQfw0AKLSuR3Ei5kjmxo85g2rEi8ZC4Ebh/e1CZw92hzs5XlYcQbz345wSnm5fAAbwIDhfEPkIClMAELCZgKEzDVJ0BHM1tB8DZid6pQT0ECPXcZbStIoD0hQGHUVwh837mV0ETdSgiWCVbvzRzGVVly8Jcw+5WgrURd8opkE0b/vRDdORoSEzC8rSfN5+SEYdSSEHzLr+UU2KGRqMGBEtil0aacYfEPHZnBzzwP0B9bcw6bqTn599usrsTOs3ETWnidZ+MuTKj92f/51CCACManWh97TCHjqM5S/NzmW4ABAKyPAl50Q17BAAAAAElFTkSuQmCC",
			"cid:mobi_facebook");
	
	
	Attachment twitter = new Attachment(
			"mobi_twitter.jpg",
			"image/jpg",
			"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA7FJREFUeNrcWktPE1EUPjOt0PKwSkJSI5GiJMYdkZ0LrSZucCGGH0AXxp0JS5ddumzduikLdxIgUVYay8YNUVwQQyKPQnglJmCRdiptrecMd5ph2mnvnRmGqV9yQmjnzv2+ex73ValSqYBdvPhyGMU/mkXQ+k0e3UDLoKXJXg5fTNvtW7IqgJGOoY2ihSz2n0WbQUtZFSMsgBGPo90DZzFP7xUVwi0AiVNoJNAew9liFm0ChWQcE4DkKUxSNkLFSmjFUMRMswdlDvI06tMukgfW1zTr27oH8AU06uNwvphET8SEPeAR8oRxxoVfAHOdF8jrRSS4Qogl7DR4E0+MiX1KACuV31xOWNHqNKQvscYQSniYvFadEnU9wGbYT9AauK/N2HoPxN3ouadNgg6f7dfET3lAdPSJQL7M31tfUIaRqwG4HvJXPytg+/ebCizsF6vCbnT5q//zekF7Y0xE/vNb3fBmNQdbyt+mzw52+eDpzc6azwM4CGMDQQj6JAgHfXC79wLMbRZEaBDntBZCo7ytiNDldglJdakj2wxjkY6G349cC6jkD/5UYEcpi4SXyllm4SNceWgEScTd3raGoUNieUDPPeoLiIRmiLjLbBdlCSSCRvDZYIfqmdrvJe537ebK8PpHTpRC1C8qgNxsBCUn2Vq2BIuYhKtHJdg/rgiRTy7nrIyhKiAi0oJc/HnvGO6E20yFaFXmoMAXD0rJ8r48IjfYgJvGdZgjeSm8rnTaL/hN0C9baaWv505gj6McW96RGUG1n0qek9hVyu4JIExl8o4KoKR3VcDKURmm1hVHPEGVS6RiOSKAMIDrFt5JqhEW+dc+pgI2rDT8sFeAQtn+6C/YE7BBAjJWWpLbaTVpR8TcdsGuAzMkIG21NY3eq++/4eP2sXA+UA5t2SifDGlbAvQI+iUh8jZDpypA29D84l2RPgwHTgjjJDvQ7ROabSnc3q7lYemw5AT5LG5oLmlT6gzvOdD6UREehNuFZ+OvP4vwblsR2sk1gXq8orFI8QqgOWBlJa9uAYd72rGcynXF0Gjv4AS1jJVmKVu0VetNkDKeSlAuOH3mf1aYx/CJnsuphEOI18zE7JxltgXIz+pvcYxLiQk4Ob7zKrKMY/21EDtzjHlYQMx49VSzmGOnv0kPkk/Wu3IyvaHx0AUHwfSWxnQ5zRpMepl80/0Aa5g857BpmJP//zWrLrGHXJonqI8hHvLcHjB4Iwqt+FMDEyEUn631Y48GYjSLgIs/t/knwACo4Jk88RURpAAAAABJRU5ErkJggg==",
			"cid:mobi_twitter");
	
	Attachment link = new Attachment(
			"mobiversa_link.jpg",
			"image/jpg",
			"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABAxJREFUeNrkWl1IFFEUPq7rT65pC66JYrtYbA8paVhUFCoUFEEp1EP44DzZS5SvBYEQve9GT/ayPvSSD7sGkhDhLkFFSRi5hZK1S1iZha6kYCHbPeO9w8w4s+6dnVmnOnDYv5k733fvOd89994tSKfTkKtdGLvTTl6Y+4h7dS5NEk8Qj6IPdVyO5vrsAqMEKGiBeCfxSoPPTxGPEA8ZJcNNgALvJ94G5loM2+UlkjUBAhxDI0D8HFhrw8T7CJGEaQQIeAyTUA6hYiS0BEIistmFjizAY6+H8wge6LPC9NnGR4A0gL3eA1trg2QkBO4RsAl4tB6KJXsCdOjsAF5OIpBVCNGEDYM9rUud2AoCVCon8pywvOrULJdYdQgFbAyeqVNAcwToDDuWDxQVhcWwtPYrlyY62IztlH3ZbyVov8sNXd6D0LrTL333bWURIh+ew6P597zN9dPCcX0ErO79k5490Nt4Svf3J7Nv4PZ0zNAosBwQ8gk+kfoKy79Xpc/H65rE6zhNkIdQp1UEuvd2KIDfnXoM08sLYh4Iu4+I4EUADYd5Q0nEXBhvq8LwuWQVgbc/PkKTexdGKwQnR0TwaKvpNXi3+AVO1DZCcaETXEWlMJR4wdN0Kbk+5mTJYJUh4Gvj92G7swhmV5cVv6ESza8sgKuyxmjz7ZYQOOquB2951foa8ud3eLrwSVM260pc4DMOXiLgM1MqrzaegeqyHYrve0nCDsRHRSLyuaBv32np8/jctJFH+hwZFuDcanPrUPcG8GiuohJo9TQowN/Yf1bR++HkSyOP9TqskEqUSNR2VB21zmuBH5gclZKb15xmg0fQgfhDKWExztl7PfAGZmJzCGiBv/n6gSJhrQSfE4HNwF/xt0F9uQdezc+IOXCstkl8NRO8YQKoNpnAX6xvkWZYLZk0CzwjkORVIqwqM4XNyOc4eLZVSCTk1ad8NjbBkkggwUtAXhJjwqonKfyMqhOaeQYNZLSYTSzNmT1nJpAALgwMbRNi76vLA5awNaUusactAC03sZyOGr3bU+YWwarBo9pcbzkv5orFFnXQpVmK5y6MZTbDYknMSCBgJpX4G5JQEzRzgY/YmQpFePaBcBnIVAgT9UC1X6wq1Ypzb2os17VvRhjyXYkQz50ogVgeyGsdNXgzpVLHQupdCe5kxskMV1LyAg6rSizMTJRKLYuR8GnX2pUY4x0J1ssmbJXw7kooN7ZoMg8bbTGP4IflpzjqcrqPV5HybCmKETQJ0D1HwcYEBPXR04YFDd39DdoQfFDryEn3hMZGBxxouqc0uktKesOgncFnJCAjEdzisMmYk//+MasssZtzmSd4dB7WT2Ei2Vz8//zVQIcIxuff9WePDGSY+yCPf7f5I8AA9ij5OQxvFDsAAAAASUVORK5CYII=",
			"cid:mobiversa_link");
	
	Attachment linkedIn = new Attachment(
			"mobi_linkedin.jpg",
			"image/jpg",
			"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAuNJREFUeNpi/P//PwOlQKRmpwOQgmEFIJbHofQhED8A4gMg/KbF/QCldjOS6wGooxOAOACI+cm0/yMQbwDiBeR6hmQPQB3eAMT2DNQFB0HmkuoRoj0AdDgoaUwAYn8G2oKNQFwA9MgDqnkA6HhQMllAQVIhJ2klAD2xgZBCJiIcDwr19XR0PAPUrvVQu8mPAaABoFCPZxhYsBAYEwkkx8AgcTwIxEPdQrwHoFE3GByP7IkJRCUhaIZdzzA4QSB6xkbxALSovEDnDEtq6WSAXMSiJ6EJg9jxsNJpAtYYgNaw+4kxJUVNnKEyWJuBn5uV4ePX3wzta68yzLn1kp4ecYTV2Mgx0ECsbpjjwUECpEF8OoMGlCQEDX2i2zYwx+Pi0wHYQ90Mj4EEknISMNng49MJJCB7IIAUnaA0D3M0LA8MAAC7mVG4egfRmXcQAkcmaC9qqAIHFnI8ACzCsDU/8MprNe1lSNeXZnDWk2DQURRAkVt16CHD1GP3Ga5++UmWBxToEVSrYo0xHA4DYXbyDO7GUgxxM08wHH33jRRjFZjwdMCpCnA5HrkoXpRuwSDGxkKKsfJMgylBgzwBSmakABZ6OQ5W3D779B3MN5YVZMj318AsGy1kGZpPPxx8HqhadpFh5cO3cP62F5/ANLon5MW5STKXbklo//OPGGJnH7+n2Fy6eeDVrz8YYmdIK3FweuDhQGVabJ4iETwEeeDBEK6JH4A8cGAIe+DA0PcAtGv2cQg6/iPI7bBSaMMQ9MAG5GJ0wRD0wAL0UYkDDNQf86cVOAhMPg5kj0oMAtCAURNDM/PGIeD4jcizOOhNiYJBXiJ9hLoRe1sIOuaYMIg9kIA+9cSEpb8LKp4mDkLHT8Q25YRzhmYQTXCAAM5ZGiY8Iw8gDQsHs+MJ9gegGicOcLLBmyeH/zQrUsY2oFM9AbLDgBjHEx0DaLHhwDAUlxrg8AgofQ6txR54PAPDCgx0XG4DEGAAJEwuWRxfuw0AAAAASUVORK5CYII=",
			"cid:mobi_linkedin"); */
	
	Attachment logo = new Attachment("mobiversa_logo1.jpg", "image/jpg",
			PropertyLoader.getFile().getProperty("NEW_LOGO"),"cid:mobiversa_logo1");

	Attachment faceBook = new Attachment("mobi_facebook.jpg", "image/jpg",
			PropertyLoader.getFile().getProperty("FACEBOOK"),"cid:mobi_facebook");

	Attachment twitter = new Attachment("mobi_twitter.jpg", "image/jpg",
			PropertyLoader.getFile().getProperty("TWITTER"),"cid:mobi_twitter");

	Attachment link = new Attachment("mobiversa_link.jpg", "image/jpg",
			PropertyLoader.getFile().getProperty("LINK"),"cid:mobiversa_link");

	Attachment linkedIn = new Attachment("mobi_linkedin.jpg", "image/jpg",
			PropertyLoader.getFile().getProperty("LINKEDIN"),"cid:mobi_linkedin");
	
	Attachment webLogo = new Attachment("webLogo.jpg", "image/jpg",
			PropertyLoader.getFile().getProperty("webLogo"),"cid:webLogo");
	
	List<Attachment> attachments = new ArrayList<Attachment>();
	attachments.add(logo);
	attachments.add(webLogo);
	attachments.add(faceBook);
	attachments.add(twitter);
	attachments.add(link);
	attachments.add(linkedIn);
	
	/*bccMail,*/
	PostmarkMessage message = new PostmarkMessage(fromAddress, toAddress,
			fromAddress, bccMail,ccMail, subject, emailBody, true, "test-email",
			null, attachments);
	PostmarkClient client = new PostmarkClient(apiKey);
	if(!(entity.getUsername() == null|| entity.getUsername().equals(""))){
	try {
		client.sendMessage(message);
		logger.info("Email Sent Successfully to"+entity.getUsername());
	} catch (PostmarkException pe) {
		logger.info("Invalid Signature Base64 String");
		
	}
	}
	
	return merchant;
}
	 public MerchantDetails loadMerchantDetails(Merchant currentMerchant)
	{
		return merchantDAO.loadMerchantPoints(currentMerchant);
		
	}
	
	public MerchantDetails uploadMerchantPdfTC(MerchtCustMail entity,Merchant merchant)

	{
		MerchantDetails merchantDetails = merchantDAO.loadMerchantPoints(merchant);
		if(merchantDetails!=null)
		{
		//merchantDetails.setMerchantId(entity.getMerchantId());
		merchantDetails.setMerchantName(merchantDetails.getMerchantName());
		entity.setMerchantName(merchantDetails.getMerchantName());
		//merchantDetails.setMid(merchantDetails.getMid());
		merchantDetails.setMid(entity.getMid());
		logger.info("mid: "+entity.getMid());
		logger.info("path: "+entity.getmFilepath());
		/*if(entity.getCustMailList()!=null)
				{
		merchantDetails.setCustMailList(entity.getCustMailList());}*/
		
		merchantDetails.setTermsCondsPath(entity.getmFilepath());

		merchantDetails = merchantDAO.saveOrUpdateEntity(merchantDetails);
		}
		
		return merchantDetails;

	}
	public void updateMerchant(final Merchant merchant) 
	{
		
		//logger.info("Service : about to list all merchant1");
		merchant.setStatus(CommonStatus.ACTIVE);
		//logger.info("Service : about to list all merchant2");
		merchantDAO.saveOrUpdateEntity(merchant);
		//return merchantDAO.saveOrUpdateEntity(merchant);

	}

	public Merchant loadMerchant(final String username)
	{
		//logger.info("login person serarching loadmerchant: "+username);
		return merchantDAO.loadMerchant(username);
	}
	
	
	/*
	 * public SettlementUser loadSettlementUser(final String username) {
	 * //logger.info("login person serarching loadmerchant: "+username); return
	 * merchantDAO.loadSettlementUser(username); }
	 */
	
	
	public MobiLiteMerchant loadMobiLiteMerchant(final String username)
	{
		//logger.info("login person serarching loadmerchant: "+username);
		return merchantDAO.loadMobiLiteMerchant(username);
	}
	
	
	public MobiLiteMerchant loadMobiliteMerchant(final String username)
	{
		//logger.info("login person serarching loadmerchant: "+username);
		return merchantDAO.loadMobiliteMerchant(username);
	}
	
	public KeyManager validateCaptcha(String captcha2) 
	{
		
		//logger.info("check captcha validation...");
		return merchantDAO.validatecaptcha(captcha2);
		
		
	}
	public boolean deleteCaptcha(String captcha2) 
	{
		
		//logger.info("check captcha delete...");
		return merchantDAO.deleteCaptcha(captcha2);
		
		
	}
	
	
	public Merchant loadmobileMerchant(final String mid)
	{
		//logger.info("loadmobilemerchant: "+mid);
		MID mid1 = merchantDAO.loadMidtoUpdateAudit(mid);
		
		return merchantDAO.loadmobileMerchant(mid1);
	}
	
	
	public Merchant loadMerchantByMid(final String mid){
		return merchantDAO.loadMerchant(mid);
	}
	public Merchant loadMerchantbymid(final String mid){
		logger.info("loadmobilemerchant: "+mid);
		MID mid1 = merchantDAO.loadMid(mid);
		
		return merchantDAO.loadMerchantbyid(mid1);
	}
	
	public Merchant loadMerchantbyid(final Long id){
		logger.info("loadmerchant: "+id);
		//MID mid1 = merchantDAO.loadMid(mid);
		
		return merchantDAO.loadMerchantbymerchantid(id);
	}
	
	
	
	public Merchant loadMidtoUpdateAudit(final String mid){
		logger.info("loadmobilemerchant: "+mid);
		MID mid1 = merchantDAO.loadMidtoUpdateAudit(mid);
		
		return merchantDAO.loadMerchantbyid(mid1);
	}
	
	public Merchant loadMerchantbyMotoMid(final String motoMid){
		//logger.info("loadmobilemerchant: "+motoMid);
		MID mid1 = merchantDAO.loadMotoMid(motoMid);
		return merchantDAO.loadMerchantbyid(mid1);
	}
	public Merchant loadMerchantbyEzyRecMid(final String ezyrecMid){
		logger.info("loadmobilemerchant: "+ezyrecMid);
		MID mid1 = merchantDAO.loadEzyrecMid(ezyrecMid);
		return merchantDAO.loadMerchantbyid(mid1);
	}
	public Merchant loadMerchantbyEzypassMid(final String ezypassMid){
		logger.info("loadmobilemerchant: "+ezypassMid);
		MID mid1 = merchantDAO.loadEzyPassMid(ezypassMid);
		return merchantDAO.loadMerchantbyid(mid1);
	}
	
	public Merchant loadMerchantbyumMotoMid(final String umMotoMid){
		logger.info("loadmobilemerchant: "+umMotoMid);
		MID mid1 = merchantDAO.loadumMotoMid(umMotoMid);
		return merchantDAO.loadMerchantbyid(mid1);
	}
	
	public Merchant loadMerchantbyumEzywayMid(final String umEzywayMid){
		logger.info("loadmobilemerchant: "+umEzywayMid);
		MID mid1 = merchantDAO.loadumMotoMid(umEzywayMid);
		return merchantDAO.loadMerchantbyid(mid1);
	}
	
	/*public String generatePassword() 
	{
		String newPassword=randomPassword.generateRandomString();
		
		
		return newPassword;
		
		
	}*/
	
	
	public int changeMerchantPassWord(String Username,String newPwd,String OldPwd)
	{

		//Merchant merchant = (Merchant) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		//boolean matches = encoder.matches(OldPwd, merchant.getPassword());
		
		Merchant merchant = merchantDAO.loadMerchant(Username);
		
		boolean matches = encoder.matches(OldPwd, merchant.getPassword());

		if (matches == true) {

			int n = merchantDAO.changeMerchantPassWord(Username, encoder.encode(newPwd), encoder.encode(OldPwd));
			return n;

		} else {
			return 0;
		}
	}
	
	public int changeMobiliteMerchantPassWord(String Username,String newPwd,String OldPwd)
	{

		MobiLiteMerchant merchant = merchantDAO.loadMobiliteMerchant(Username);
		
		boolean matches = encoder.matches(OldPwd, merchant.getPassword());

		if (matches == true) {

			int n = merchantDAO.changeMobiliteMerchantPassWord(Username, encoder.encode(newPwd), encoder.encode(OldPwd));
			return n;

		} else {
			return 0;
		}
	}
	
	
	
	public Merchant changeMerchantPassWordByAdminManualy(Merchant merchant)
	{
		//logger.info("merchant :" + merchant.getUsername()+": "+merchant.getPassword());
		//String newPwd = new RandomPassword().generateRandomString();
		//logger.info("encoded pwd: "+encoder.encode(merchant.getPassword()));
		//logger.info("decoded pwd: "+encoder.encode(arg0));
		// logger.info("merchant username: "+merchant.getUsername()+"  password :"+newPwd+"saluation: "+merchant.getSalutation());
		
		merchant.setPassword(encoder.encode(merchant.getPassword()));
		
		//int n = merchantDAO.changeMerchantPassWordByAdmin( merchant.getUsername(), encoder.encode(merchant.getPassword()));
		
		
		//System.out.println("encder Pwd: "+encoder.encode(merchant.getPassword())));
		//logger.info("status to check: "+n);
		return merchantDAO.saveOrUpdateEntity(merchant);
	}
	public MobileUser changeMobileuserPassWordByAdminManualy(MobileUser mobileUser)
	{
		//logger.info("mobileuser password "+mobileUser.getPassword()+" : "+mobileUser.getUsername());
		
		mobileUser.setPassword(encoder.encode(mobileUser.getPassword()));
        mobileUser.setFailedLoginAttempt(0);
        mobileUser.setSuspendDate(null);
        mobileUser.setStatus(CommonStatus.ACTIVE);
        
      //logger.info("encode Gen PWD : "+mobileUser.getPassword());
		//MobileUser mobileuser = merchantDAO.saveOrUpdateEntity(mobileUser);
		
		
		return merchantDAO.saveOrUpdateEntity(mobileUser);
	}
	public String changeMerchantPassWordByAdmin(Merchant merchant) throws JMSException{
	
		//Merchant merchant=merchantDAO.loadMerchant(Username);
		logger.info("merchant :"+merchant.getUsername());
		String newPwd =new RandomPassword().generateRandomString();
		
		//logger.info("merchant username: "+merchant.getUsername()+"  password :"+newPwd+"saluation: "+merchant.getSalutation());
		int n=	merchantDAO.changeMerchantPassWordByAdmin(merchant.getUsername(), encoder.encode(newPwd));
		
		//Eamil Generate
		
		/*TempletFields tempField = new TempletFields();
		
		tempField.setFirstName(merchant.getFirstName());
		tempField.setLastName(merchant.getLastName());
		
		tempField.setUserName(merchant.getUsername());
		tempField.setPassword(newPwd);
		
		
		logger.info("merchant password changed details:"+merchant.getUsername()+" "+merchant.getFirstName()+" "+newPwd);
		
		tempField.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
		*/
		MsgDto md=new MsgDto();
		md.setFirstName(merchant.getContactPersonName());
		md.setLastName(merchant.getLastName());
		md.setUserName(merchant.getUsername());
		md.setMerchantEmail(merchant.getEmail());
		md.setPassword(newPwd);
		md.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
		
		SendSMSMessage send=new SendSMSMessage();
		try {
			send.sendResetMerchantPasswordEmail(md);
		} catch (ConnectionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*List<NameValuePair> headers = new ArrayList<NameValuePair>();
		headers.add(new NameValuePair("HEADER", "test"));
	    //EZYWIRE AS USERNAME & password mobiversa
		String fromAddress = "info@gomobi.io";
		//String apiKey = "c652b570-9500-4534-8eb6-96a78c10c8b8";
		String apiKey = PropertyLoader.getFile().getProperty("APIKEY");
		String toAddress = merchant.getEmail();
		
		
		
		String ccMail=PropertyLoader.getFile().getProperty(
				"MOBILEUSER_ADD_CCMAIL");
		 String bccMail = PropertyLoader.getFile().getProperty(
					"MOBILEUSER_ADD_BCCMAIL");
		
		String subject = PropertyLoader.getFile().getProperty("MERCHANTPASS_SUBJECT");
		
		//String emailBody = MerchantResetTemplate.sentTempletContent(tempField);
		String emailBody = MerchantResetPwd.sentTempletContent(tempField);
		*/
		//old changes
		/*Attachment logo = new Attachment("mobiversa_logo1.jpg", "image/jpg",
				PropertyLoader.getFile().getProperty("NEW_LOGO"),"cid:mobiversa_logo1");
		Attachment logo = new Attachment("mobiversa_logo1.jpg", "image/jpg",
				PropertyLoader.getFile().getProperty("BANNER"),"cid:mobiversa_logo1");

		Attachment faceBook = new Attachment("mobi_facebook.jpg", "image/jpg",
				PropertyLoader.getFile().getProperty("FACEBOOK"),
				"cid:mobi_facebook");

		Attachment twitter = new Attachment("mobi_twitter.jpg", "image/jpg",
				PropertyLoader.getFile().getProperty("TWITTER"),
				"cid:mobi_twitter");

		Attachment link = new Attachment("mobiversa_link.jpg", "image/jpg",
				PropertyLoader.getFile().getProperty("LINK"),
				"cid:mobiversa_link");

		Attachment linkedIn = new Attachment("mobi_linkedin.jpg", "image/jpg",
				PropertyLoader.getFile().getProperty("LINKEDIN"),
				"cid:mobi_linkedin");*/

		//new changes
		/*List<Attachment> attachments = new ArrayList<Attachment>();
		Attachment activationBannerImg = new Attachment(
				"mobiLogo.png",
				"image/jpg",PropertyLoader.getFile().getProperty("ACTIVATIONBANNERIMG"),"cid:activationBannerImg");
		attachments.add(activationBannerImg);
		
		PostmarkMessage message = new PostmarkMessage(fromAddress, toAddress,
				fromAddress, ccMail, bccMail, subject, emailBody, true, "test-email",
				null, attachments);
		PostmarkClient client = new PostmarkClient(apiKey);

		try {
			client.sendMessage(message);
			logger.info("CCmail: "+ccMail+" BCCmail: "+bccMail);
			logger.info("Email Sent Successfully to: " + merchant.getEmail());
		} catch (PostmarkException pe) 
		{
			System.out.println("You must specify a valid 'To' email address.");

		}*/
		
		//new changes
		
		
		
		return newPwd;
		}
	
	
	//@javax.transaction.Transactional
	public Merchant loadMerchantbyEmail(String email){
		Merchant merchant = new Merchant();
		return merchantDAO.loadMerchantbyEmail(email);
		//return agent;
		
	}
     //new method
	//@javax.transaction.Transactional
	public List<Merchant> loadMerchant() {
		
		return merchantDAO.loadMerchant();
	}
	
	public List<Merchant> loadFpxMerchant() {
		
		return merchantDAO.loadFpxMerchant();
	}
	
	public List<Merchant> loadMerchantByNOB(String nob) {
		
		return merchantDAO.loadMerchantByNOB(nob);
	}
	
	public List<MID> loadMIDByNOB(List<Long> ids) {
		
		return merchantDAO.loadMIDByNOB(ids);
	}
	
	
	/*public List<MID> loadMIDByNOB(List<MID> ids) {
		
		return merchantDAO.loadMIDByNOB(ids);
	}*/
	
	
	public List<Merchant> loadMerchantByAdmin() {
		
		return merchantDAO.loadMerchantByAdmin();
	}
	
	public RegAddMerchant addMerchant1(final RegAddMerchant entity) {
		
		
		String agentData=entity.getAgentName();//getBusinessShortName();
		//String agentData = entity.getSignedPackage();
		String mailId  = null;
		String type= null;
		Agent agent = null;
		SubAgent subAgent = null;
		//if(agentData != null || !(agentData.equals(""))){
		if(!(agentData.equals(""))){
			String agentmail[] = agentData.split("~");
			//System.out.println("Agent Data  "+agentmail);
			type=agentmail[0];
			 mailId  = agentmail[2];
		}
		//System.out.println("Agent Mail : "+ mailId+" "+type);
		if(type.equals("AGENT")){
		 agent = agentDAO.loadAgentbyMailId(mailId);
		
		//System.out.println("Agent Data : "+ agent.getId());
		}
		if(type.equals("SUBAGENT")){
			subAgent = subAgentDAO.loadAgentbyMailId(mailId);
				
			//System.out.println("SubAgent Data : "+ subAgent.getId());
		}
		
		//new change for agent Name 24/05/2016
		
		
		
		
	Merchant merchant = new Merchant();
	//RandomPassword rpwd = new RandomPassword();
	BigInteger bi = null;
	if(agent != null){
		
	 bi = new BigInteger(agent.getId().toString());
	// System.out.println("Data   agent : "+ bi);
	}
	
	BigInteger subAgID = null;
	if(subAgent != null){
		subAgID = new BigInteger(subAgent.getId().toString());
		//System.out.println("Data   subagent : "+ subAgID);
	}
	
	//System.out.println("Data   sfsfsfdf : "+ bi);
	
	//Merchant merchant = new Merchant(); 
	
	merchant.setAgID(bi);
	merchant.setSubAgID(subAgID);
	//System.out.println("Data   merchant : "+ merchant.getAgID()+"  "+merchant.getSubAgID());
	//entity.setSignedPackage("");
	merchant.setBusinessName(entity.getBusinessName().toUpperCase());
	merchant.setBusinessShortName("");
	merchant.setEnabled(true);
	merchant.setContactPersonName(entity.getName());
	merchant.setSalutation(entity.getSalutation());
	merchant.setContactPersonPhoneNo(entity.getContactNo());
	merchant.setEmail(entity.getEmail());
	merchant.setBusinessAddress1(entity.getBusinessAddress());
	merchant.setStatus(CommonStatus.PENDING);
		
	merchant.setCreatedDate(new Date());
		//entity.setActivateDate(new Date());
		//entity.setPassword(encoder.encode(entity.getPassword()));

		Merchant merchant1 =  merchantDAO.saveOrUpdateEntity(merchant);
		
		
		//System.out.println("Agent Data : "+ entity.getFileId() +" MerchantId :"+merchant1.getId());
		
		
		if(entity.getFileId() != null){
			
			/*System.out.println(" Inside File Cond");
			String fileIds[] = null;
			if(entity.getFileId().contains("~")){
				fileIds = entity.getFileId().split("~");
			}else{
				System.out.println(" Inside File Cond else");
				fileIds[0]= entity.getFileId();
			}
			
			for(int i = 0; i < fileIds.length ; i++){*/
			
			FileUpload fileUpload = loadFileUpload(entity.getFileId());
				//System.out.println(" Inside File loop :"+fileIds[i]);
				//FileUpload fileUpload = loadFileUpload(fileIds[i]);
			
			fileUpload.setMerchantId(merchant1.getId().toString());
			
			FileUpload fileUpload1 = merchantDAO.updateFileById(fileUpload);
			
			//System.out.println("Merchant service MerchantId Data : "+fileUpload1.getFileId());
			//}
		}
		
		return entity;

	}
	//new method agent portal add merchant 17062016
	
	//@javax.transaction.Transactional
	public void listMerchant1(final PaginationBean<Merchant> paginationBean,final String agId) {
		BigInteger dfg = new BigInteger(agId.toString());
		
		//System.out.println("Inside  listAllTransaction:::::");
		//ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
		
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
		if(agId != null){		
			criterionList.add(Restrictions.eq("agID", dfg));
		}
	
		merchantDAO.listAgentMerchant(paginationBean,criterionList);
	}
	
	
	//new changes add merchant 21062016
	
  public RegAddMerchant addMerchant(final RegAddMerchant entity) throws JMSException  // return type need to change as RegAddMerchant
	
	{
	  
	    logger.info("Merchant Type : " + entity.getMerchantType());
		logger.info("VCC  : " + entity.getVcc());
		logger.info("Pre-Auth  : " + entity.getPreAuth());
		logger.info("Auto Settled  : " + entity.getAutoSettled());
		logger.info("OTP  : " + entity.getAuth3DS());

		logger.info("Paydee MID :" );
		logger.info("mid : " + entity.getMid());
		logger.info("ezymotomid : " + entity.getEzymotomid());
		logger.info("ezypassmid : " + entity.getEzypassmid());
		logger.info("ezywaymid  : " + entity.getEzywaymid());
		logger.info("ezyrecmid  : " + entity.getEzyrecmid());
		
		logger.info("UMobile MID :" );
		logger.info("umMid : " + entity.getUmMid());
		logger.info("umMotoMid : " + entity.getUmMotoMid());
		logger.info("umEzypassMid : " + entity.getUmEzypassMid());
		logger.info("umEzywayMid  : " + entity.getUmEzywayMid());
		logger.info("umEzyrecMid  : " + entity.getUmEzyrecMid());
	  
	    //Paydee
		String mid = entity.getMid();
		String ezymotomid = entity.getEzymotomid();
		String ezypassmid = entity.getEzypassmid();
		String ezywaymid = entity.getEzywaymid();
		String ezyrecmid = entity.getEzyrecmid();
		
		//UMobile
		String um_mid = entity.getUmMid();
		String um_motomid = entity.getUmMotoMid();
		String um_ezypassmid = entity.getUmEzypassMid();
		String um_ezywaymid = entity.getUmEzywayMid();
		String um_ezyrecmid = entity.getUmEzyrecMid();

		String agentData = entity.getAgentName();
		String agentMail[] = null;
		if (agentData.contains("~")) {
			agentMail = agentData.split("~");
		}
		String type = agentMail[0];
		String agEmail = agentMail[2];
		
		logger.info("Agent Type : " + type);
		logger.info("Mail : " + agEmail);
		
		Agent agent = null;
		SubAgent subAgent = null;
		if (type.equals("AGENT")) {
			agent = agentDAO.loadAgentbyMailId(agEmail);
		}
		if (type.equals("SUBAGENT")) {
			subAgent = subAgentDAO.loadAgentbyMailId(agEmail);
		}
		BigInteger AgID = null;
		if (agent != null) {
			AgID = new BigInteger(agent.getId().toString());
			logger.info("Agent ID : " + AgID);
		}
		BigInteger subAgID = null;
		if (subAgent != null) {
			subAgID = new BigInteger(subAgent.getId().toString());
			logger.info("Sub-Agent ID : " + subAgID);
		}
		
		
		Merchant merchant = new Merchant();
		merchant.setAgID(AgID);
		merchant.setSubAgID(subAgID);
		merchant.setBusinessShortName(entity.getRegisteredName());
		merchant.setBusinessName(entity.getBusinessName().toUpperCase());
		merchant.setBusinessRegistrationNumber(entity.getBusinessRegNo());
		merchant.setBusinessAddress1(entity.getRegisteredAddress());
		merchant.setBusinessAddress2(entity.getBusinessAddress());
		merchant.setBusinessAddress3(entity.getMailingAddress());
		merchant.setContactPersonName(entity.getName());
		merchant.setContactPersonPhoneNo(entity.getContactNo());
		merchant.setEmail(entity.getEmail());
		merchant.setSalutation(entity.getSalutation());
		merchant.setUsername(entity.getOfficeEmail());
		merchant.setWebsite(entity.getWebsite());
		merchant.setBusinessContactNumber(entity.getOfficeNo());
		merchant.setFaxNo(entity.getFaxNo());
		merchant.setBankName(entity.getBankName());
		merchant.setBankAcc(entity.getBankAccNo());
		merchant.setState(entity.getBusinessState());
		merchant.setCity(entity.getBusinessCity());
		merchant.setPostcode(entity.getBusinessPostCode());
		merchant.setReferralId(entity.getReferralId());
		merchant.setWaiverMonth(entity.getWavierMonth());
		merchant.setTradingName(entity.getTradingName());
		merchant.setYearIncorporated(entity.getYearIncorporated());
		merchant.setSignedPackage(entity.getSignedPackage());
		merchant.setReaderSerialNo(entity.getNoOfReaders());
		merchant.setResidentialAddress(entity.getRegisteredAddress());
		merchant.setBusinessType(entity.getBusinessType());
		merchant.setCompanyType(entity.getCompanyType());
		merchant.setNatureOfBusiness(entity.getNatureOfBusiness());
		merchant.setPermiseType(entity.getDocuments());
		merchant.setRemarks(entity.getStatusRemarks());
		merchant.setPreAuth(entity.getPreAuth());
		merchant.setAuth3DS(entity.getAuth3DS());
		merchant.setMdr(entity.getMdr());
		merchant.setAutoSettled(entity.getAutoSettled());
		merchant.setMerchantType(entity.getMerchantType());
		merchant.setEzyMotoVcc(entity.getVcc());
		merchant.setAccType(entity.getAccType());
		
		String ownerSalutation = "";
		String ownerName = "";
		String passportNo = "";
		String residentialAddress = "";
		String ownerContactNo = "";
		if (entity.getOwnerCount() == "2" || entity.getOwnerCount().equals("2")) {
			ownerSalutation = entity.getOwnerSalutation1() + "~" + entity.getOwnerSalutation2();
			ownerName = entity.getOwnerName1() + "~" + entity.getOwnerName2();
			passportNo = entity.getPassportNo1() + "~" + entity.getPassportNo2();
			ownerContactNo = entity.getOwnerContactNo1() + "~" + entity.getOwnerContactNo2();
			residentialAddress = entity.getResidentialAddress1() + "~" + entity.getResidentialAddress2();

		} else if (entity.getOwnerCount() == "3" || entity.getOwnerCount().equals("3")) {
			ownerSalutation = entity.getOwnerSalutation1() + "~" + entity.getOwnerSalutation2() + "~"
					+ entity.getOwnerSalutation3();
			ownerName = entity.getOwnerName1() + "~" + entity.getOwnerName2() + "~" + entity.getOwnerName3();
			passportNo = entity.getPassportNo1() + "~" + entity.getPassportNo2() + "~" + entity.getPassportNo3();
			ownerContactNo = entity.getOwnerContactNo1() + "~" + entity.getOwnerContactNo2() + "~"
					+ entity.getOwnerContactNo3();
			residentialAddress = entity.getResidentialAddress1() + "~" + entity.getResidentialAddress2() + "~"
					+ entity.getResidentialAddress3();

		} else if (entity.getOwnerCount() == "4" || entity.getOwnerCount().equals("4")) {
			ownerSalutation = entity.getOwnerSalutation1() + "~" + entity.getOwnerSalutation2() + "~"
					+ entity.getOwnerSalutation3() + "~" + entity.getOwnerSalutation4();
			ownerName = entity.getOwnerName1() + "~" + entity.getOwnerName2() + "~" + entity.getOwnerName3() + "~"
					+ entity.getOwnerName4();
			passportNo = entity.getPassportNo1() + "~" + entity.getPassportNo2() + "~" + entity.getPassportNo3() + "~"
					+ entity.getPassportNo4();
			ownerContactNo = entity.getOwnerContactNo1() + "~" + entity.getOwnerContactNo2() + "~"
					+ entity.getOwnerContactNo3() + "~" + entity.getOwnerContactNo4();
			residentialAddress = entity.getResidentialAddress1() + "~" + entity.getResidentialAddress2() + "~"
					+ entity.getResidentialAddress3() + "~" + entity.getResidentialAddress4();

		} else if (entity.getOwnerCount() == "5" || entity.getOwnerCount().equals("5")) {
			ownerSalutation = entity.getOwnerSalutation1() + "~" + entity.getOwnerSalutation2() + "~"
					+ entity.getOwnerSalutation3() + "~" + entity.getOwnerSalutation4() + "~"
					+ entity.getOwnerSalutation5();
			ownerName = entity.getOwnerName1() + "~" + entity.getOwnerName2() + "~" + entity.getOwnerName3() + "~"
					+ entity.getOwnerName4() + "~" + entity.getOwnerName5();
			passportNo = entity.getPassportNo1() + "~" + entity.getPassportNo2() + "~" + entity.getPassportNo3() + "~"
					+ entity.getPassportNo4() + "~" + entity.getPassportNo5();
			ownerContactNo = entity.getOwnerContactNo1() + "~" + entity.getOwnerContactNo2() + "~"
					+ entity.getOwnerContactNo3() + "~" + entity.getOwnerContactNo4() + "~"
					+ entity.getOwnerContactNo5();
			residentialAddress = entity.getResidentialAddress1() + "~" + entity.getResidentialAddress2() + "~"
					+ entity.getResidentialAddress3() + "~" + entity.getResidentialAddress4() + "~"
					+ entity.getResidentialAddress5();

		} else {
			ownerSalutation = entity.getOwnerSalutation1();
			ownerName = entity.getOwnerName1();
			passportNo = entity.getPassportNo1();
			ownerContactNo = entity.getOwnerContactNo1();
			residentialAddress = entity.getResidentialAddress1();

		}

		merchant.setOwnerSalutation(ownerSalutation);
		merchant.setOwnerName(ownerName);
		merchant.setOwnerPassportNo(passportNo);
		merchant.setOwnerContactNo(ownerContactNo);
		merchant.setResidentialAddress(residentialAddress);
		merchant.setEnabled(true);
		merchant.setUsername(entity.getOfficeEmail());
		merchant.setCreatedDate(new Date());
		merchant.setRole(MerchantUserRole.BANK_MERCHANT);

		//Setting MID details
		MID mm = new MID();
		
		//Paydee
		if (mid != null && !(mid.isEmpty())) {
			if (mid.length() < 15) {
				for (int i = mid.length(); i < 15; i++) {
					mid = "0" + mid;
				}
			}
		} else {
			mid = null;
		}
		if (ezymotomid != null && !(ezymotomid.isEmpty())) {
			if (ezymotomid.length() < 15) {
				for (int i = ezymotomid.length(); i < 15; i++) {
					ezymotomid = "0" + ezymotomid;
				}
			}
		} else {
			ezymotomid = null;
		}
		if (ezywaymid != null && !(ezywaymid.isEmpty())) {
			if (ezywaymid.length() < 15) {
				for (int i = ezywaymid.length(); i < 15; i++) {
					ezywaymid = "0" + ezywaymid;
				}
			}
		} else {
			ezywaymid = null;
		}
		if (ezyrecmid != null && !(ezyrecmid.isEmpty())) {
			if (ezyrecmid.length() < 15) {
				for (int i = ezyrecmid.length(); i < 15; i++) {
					ezyrecmid = "0" + ezyrecmid;
				}
			}
		} else {
			ezyrecmid = null;
		}
		if (ezypassmid != null && !(ezypassmid.isEmpty())) {
			if (ezypassmid.length() < 15) {
				for (int i = ezypassmid.length(); i < 15; i++) {
					ezypassmid = "0" + ezypassmid;
				}
			}
		} else {
			ezypassmid = null;
		}

		//UMobile
		if (um_mid != null && !(um_mid.isEmpty())) {
			if (um_mid.length() < 15) {
				for (int i = um_mid.length(); i < 15; i++) {
					um_mid = "0" + um_mid;
				}
			}
		} else {
			um_mid = null;
		}
		if (um_motomid != null && !(um_motomid.isEmpty())) {
			if (um_motomid.length() < 15) {
				for (int i = um_motomid.length(); i < 15; i++) {
					um_motomid = "0" + um_motomid;
				}
			}
		} else {
			um_motomid = null;
		}
		if (um_ezywaymid != null && !(um_ezywaymid.isEmpty())) {
			if (um_ezywaymid.length() < 15) {
				for (int i = um_ezywaymid.length(); i < 15; i++) {
					um_ezywaymid = "0" +um_ezywaymid;
				}
			}
		} else {
			um_ezywaymid = null;
		}
		if (um_ezyrecmid != null && !(um_ezyrecmid.isEmpty())) {
			if (um_ezyrecmid.length() < 15) {
				for (int i = um_ezyrecmid.length(); i < 15; i++) {
					um_ezyrecmid = "0" + um_ezyrecmid;
				}
			}
		} else {
			um_ezyrecmid = null;
		}
		if (um_ezypassmid != null && !(um_ezypassmid.isEmpty())) {
			if (um_ezypassmid.length() < 15) {
				for (int i = um_ezypassmid.length(); i < 15; i++) {
					um_ezypassmid = "0" + um_ezypassmid;
				}
			}
		} else {
			um_ezypassmid = null;
		}
		
		//Paydee
		mm.setMid(mid);
		mm.setMotoMid(ezymotomid);
		mm.setEzypassMid(ezypassmid);
		mm.setEzywayMid(ezywaymid);
		mm.setEzyrecMid(ezyrecmid);
		
		//UMobile
		mm.setUmMid(um_mid);
		mm.setUmMotoMid(um_motomid);
		mm.setUmEzypassMid(um_ezypassmid);
		mm.setUmEzywayMid(um_ezywaymid);
		mm.setUmEzyrecMid(um_ezyrecmid);

		merchant.setMid(mm);

		
		logger.info("Status : " + entity.getStatus());
		
		if (entity.getStatus().equalsIgnoreCase("PENDING")) {
			merchant.setStatus(CommonStatus.PENDING);
		} else if (entity.getStatus().equalsIgnoreCase("SUBMITTED")) {
			merchant.setStatus(CommonStatus.SUBMITTED);
		} else if (entity.getStatus().equalsIgnoreCase("REJECTED")) {
			merchant.setStatus(CommonStatus.REJECTED);
		} else if (entity.getStatus().equalsIgnoreCase("ACTIVE")) {
			
			logger.info("Status Marked ACTIVE " );
			logger.info("About to Send Credential to Merchant " );
			
			merchant.setStatus(CommonStatus.ACTIVE);
			merchant.setActivateDate(new Date());
			RandomPassword rpwd = new RandomPassword();
			String genPwd = rpwd.generateRandomString();
			merchant.setPassword(encoder.encode(genPwd));
			TempletFields tempField = new TempletFields();
			tempField.setSalutation(merchant.getSalutation());
			tempField.setFirstName(merchant.getContactPersonName());
			tempField.setUserName(merchant.getUsername());
			tempField.setPassword(genPwd);
			tempField.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));

			MsgDto md=new MsgDto();
			md.setFirstName(merchant.getContactPersonName());
			md.setUserName(merchant.getUsername());
			md.setPassword(genPwd);
			md.setDate(new SimpleDateFormat("dd-MMM-yyyy").format(new java.util.Date()));
			
			/*SendSMSMessage send=new SendSMSMessage();
			send.sendMerchantRegEmail(md);*/
			
			/*logger.info("Successfully Sent Credential to Merchant " );*/
			
			List<NameValuePair> headers = new ArrayList<NameValuePair>();
			headers.add(new NameValuePair("HEADER", "test"));
			
			String fromAddress = "info@gomobi.io";
			String apiKey = PropertyLoader.getFile().getProperty("APIKEY");
			String toAddress = merchant.getUsername();
			String ccMail = PropertyLoader.getFile().getProperty("MOBILEUSER_ADD_CCMAIL");
			String bccMail = PropertyLoader.getFile().getProperty("MOBILEUSER_ADD_BCCMAIL");
			String subject = PropertyLoader.getFile().getProperty("WEBMAIL_SUBJECT");
			
			String emailBody = MerchantActivation.sentTempletContent(tempField);
			
			//String emailBody = EmailTemplet10.sentTempletContent(tempField);
			/*Attachment logo = new Attachment("mobiversa_logo1.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("NEW_LOGO"), "cid:mobiversa_logo1");

			Attachment faceBook = new Attachment("mobi_facebook.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("FACEBOOK"), "cid:mobi_facebook");

			Attachment twitter = new Attachment("mobi_twitter.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TWITTER"), "cid:mobi_twitter");

			Attachment link = new Attachment("mobiversa_link.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("LINK"), "cid:mobiversa_link");

			Attachment linkedIn = new Attachment("mobi_linkedin.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("LINKEDIN"), "cid:mobi_linkedin");

			List<Attachment> attachments = new ArrayList<Attachment>();
			attachments.add(logo);
			attachments.add(faceBook);
			attachments.add(twitter);
			attachments.add(link);
			attachments.add(linkedIn);*/
			
			List<Attachment> attachments = new ArrayList<Attachment>();

			Attachment mobiImg = new Attachment("mobiImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("MOBIIMG"), "cid:mobiImg");

			Attachment fbImg = new Attachment("mobi_facebook.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("FBIMG"), "cid:fbImg");

			Attachment twitImg = new Attachment("twitImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TWITIMG"), "cid:twitImg");

			Attachment InstaImg = new Attachment("InstaImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("INSTAIMG"), "cid:InstaImg");

			Attachment linkedInImg = new Attachment("linkedInImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("LINKEDINIMG"), "cid:linkedInImg");

			Attachment emailImg = new Attachment("emailImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("EMAILIMG"), "cid:emailImg");

			Attachment tollfreeImg = new Attachment("tollfreeImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TOLLFREEIMG"), "cid:tollfreeImg");

			Attachment telephoneImg = new Attachment("telephoneImg.jpg", "image/jpg",
					PropertyLoader.getFile().getProperty("TELEPHONEIMG"), "cid:telephoneImg");

			Attachment  webImg= new Attachment(
					"webImg.png",
					"image/jpg",PropertyLoader.getFile().getProperty("WEBIMG"),
					"cid:webImg");
			Attachment activationBannerImg = new Attachment(
					"activationBannerImg.png",
					"image/jpg",PropertyLoader.getFile().getProperty("ACTIVATIONBANNERIMG"),
					"cid:activationBannerImg");
			
			attachments.add(activationBannerImg);
			attachments.add(webImg);
			attachments.add(mobiImg);
			attachments.add(fbImg);
			attachments.add(twitImg);
			attachments.add(InstaImg);
			attachments.add(linkedInImg);
			attachments.add(emailImg);
			attachments.add(tollfreeImg);
			attachments.add(telephoneImg);

			PostmarkMessage message = new PostmarkMessage(fromAddress, toAddress, fromAddress, ccMail, bccMail, subject,
					emailBody, true, "test-email", null, attachments);
			PostmarkClient client = new PostmarkClient(apiKey);

			try {
				PostmarkResponse mailSent= client.sendMessage(message);
				if(mailSent.getStatus().equals("SUCCESS")) {
					logger.info("Merchant Activation Email Sent Successfully to" + merchant.getEmail());
				}
			} catch (PostmarkException pe) {
				System.out.println("Invalid Signature Base64 String");
			}
		}

		logger.info("About to add Merchant " );
		merchant = merchantDAO.saveOrUpdateEntity(merchant);
		logger.info("Merchant Added Successfully" );
		
		
		MerchantDetails merchantDetails1 = new MerchantDetails();
		merchantDetails1.setMerchantId(merchant.getId().toString());
		merchantDetails1.setMerchantCategory(merchant.getNatureOfBusiness());
		
		
		if ((merchant.getMerchantType() != null) && (merchant.getMerchantType().equals("U"))) {
			
			if (um_mid != null && !um_mid.isEmpty()) {
					logger.info("Merchantdetails um_mid:"+ um_mid);
					merchantDetails1.setMid(um_mid);
				
			} else if (um_motomid != null && !um_motomid.isEmpty()) {
					logger.info("Merchantdetails um_motomid:"+ um_motomid);
					merchantDetails1.setMid(um_motomid);
				
			} else if (um_ezywaymid != null && !um_ezywaymid.isEmpty()) {
					logger.info("Merchantdetails um_ezywaymid:"+ um_ezywaymid);
					merchantDetails1.setMid(um_ezywaymid);
				
			}	else if (um_ezyrecmid != null && !um_ezyrecmid.isEmpty()) {
					logger.info("Merchantdetails um_ezyrecmid:"+ um_ezyrecmid);
					merchantDetails1.setMid(um_ezyrecmid);
				
			}   else {
					logger.info("Merchantdetails um_ezypassmid:"+ um_ezypassmid);
					merchantDetails1.setMid(um_ezypassmid);
			}
		
		}else if((merchant.getMerchantType() != null) && (merchant.getMerchantType().equals("P"))) {
			if (mid != null && !mid.isEmpty() ) {
					logger.info("Merchantdetails mid:"+ mid);
					merchantDetails1.setMid(mid);
			} else if (ezymotomid != null && !ezymotomid.isEmpty() ) {
					logger.info("Merchantdetails ezymotomid:"+ ezymotomid);
					merchantDetails1.setMid(ezymotomid);
			} else if (ezypassmid != null && !ezypassmid.isEmpty()) {
					logger.info("Merchantdetails ezypassmid:"+ ezypassmid);
					merchantDetails1.setMid(ezypassmid);
			} else if (ezywaymid != null && !ezywaymid.isEmpty()) {
					logger.info("Merchantdetails ezywaymid:"+ ezywaymid);
					merchantDetails1.setMid(ezywaymid);
			}   else {
					logger.info("Merchantdetails ezyrecmid:"+ ezyrecmid);
					merchantDetails1.setMid(ezyrecmid);
			}
		
		} else {
			if (mid != null && !mid.isEmpty()) {
				logger.info("Merchantdetails mid:" + mid);
				merchantDetails1.setMid(mid);
			} else if (ezymotomid != null && !ezymotomid.isEmpty()) {
				logger.info("Merchantdetails ezymotomid:" + ezymotomid);
				merchantDetails1.setMid(ezymotomid);
			} else if (ezypassmid != null && !ezypassmid.isEmpty()) {
				logger.info("Merchantdetails ezypassmid:" + ezypassmid);
				merchantDetails1.setMid(ezypassmid);
			} else if (ezywaymid != null && !ezywaymid.isEmpty()) {
				logger.info("Merchantdetails ezywaymid:" + ezywaymid);
				merchantDetails1.setMid(ezywaymid);
			} else {
				logger.info("Merchantdetails ezyrecmid:" + ezyrecmid);
				merchantDetails1.setMid(ezyrecmid);
			}

		}
	
		/*if (mid != null) {
			merchantDetails1.setMid(mid);
		} else if (ezymotomid != null) {
			merchantDetails1.setMid(ezymotomid);
		} else {
			merchantDetails1.setMid(ezypassmid);
		}*/
		merchantDetails1.setPoints("100");
		merchantDetails1.setMerchantName(merchant.getBusinessName());
		
		logger.info("About to add Merchant details " );
		merchantDetails1 = merchantDAO.saveOrUpdateEntity(merchantDetails1);
		logger.info("Merchant details  Added Successfully" );
		
		
		if (entity.getFileId() != null) {
			String fileIds[] = null;
			if (entity.getFileId().contains("~")) {
				fileIds = entity.getFileId().split("~");
				for (int i = 0; i < fileIds.length; i++) {
					FileUpload fileUpload = loadFileUpload(fileIds[i]);
					fileUpload.setMerchantId(merchant.getId().toString());
					FileUpload fileUpload1 = merchantDAO.updateFileById(fileUpload);
				}
			} else {
				FileUpload fileUpload = loadFileUpload(entity.getFileId());
				fileUpload.setMerchantId(merchant.getId().toString());
				FileUpload fileUpload1 = merchantDAO.updateFileById(fileUpload);
			}
		}
		int updt = merchantDAO.updateMIDData(merchant.getMid().getId(), merchant.getId());
		return entity;
	}
  
  
  
  
  
  
  
  
  //new method 24062016 mid already exist
  
 /* @javax.transaction.Transactional
	public MID loadMid(String mid){
		MID mid1 = new MID();
		return merchantDAO.loadMid(mid);
}*/
  
  //new method for pending merchant 24062016
  
  //@javax.transaction.Transactional
	public void listMerchant1(final PaginationBean<Merchant> paginationBean) {
		//System.out.println("Inside  listAllTransaction:::::");
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.ACTIVE)));
		merchantDAO.listMerchantUser1(paginationBean, criterionList);
	}
  
  //@javax.transaction.Transactional
	public Merchant updateMerchant(final RegAddMerchant regMerchant, Merchant merchant, String mailStatus) 
	{
		// Merchant merchant1=new Merchant();
		
		/*
		 * Agent agentOldDetail = agentDAO.loadAgentDetailsbyId(merchant.getAgID());
		 * 
		 * SecondaryAgent secAgentHistory = new SecondaryAgent();
		 * 
		 * secAgentHistory.setAgName(agentOldDetail.getFirstName());
		 * secAgentHistory.setPrimaryId(agentOldDetail.getId().toString());
		 * secAgentHistory.setChangedBy("EDIT MERCHANT");
		 * secAgentHistory.setCreatedBy("PORTAL");
		 * secAgentHistory.setReason("MERCHANT UPDATE"); secAgentHistory=
		 * merchantDAO.saveOrUpdateEntity(secAgentHistory);
		 */
		String agentData = regMerchant.getAgentName();
		agentData = agentData.replace(",", "");
		// String agentData = entity.getSignedPackage();
		
		logger.info("agentData:::::: " +agentData);
		logger.info("regMerchant.getId():::::: " +regMerchant.getId());
		String mailId = null;
		String type = null;
		Agent agent = null;
		SubAgent subAgent = null;
		// if(agentData != null || !(agentData.equals(""))){
		if (!(agentData.equals(""))) {
			String agentmail[] = agentData.split("~");
			// System.out.println("Agent Data "+agentmail);
			type = agentmail[0];
			mailId = agentmail[2];
		}
		merchant.setId(Long.parseLong(regMerchant.getId()));
		// System.out.println(" Data Id "+merchant.getId() + " "+merchant.getMid());

		logger.info("type:::::: " +type);
		
		// System.out.println("Agent Mail : "+ mailId+" "+type);
		if (type.equals("AGENT")) {
			agent = agentDAO.loadAgentbyMailId(mailId);
			
			logger.info("Agent Data : "+ agent.getId());

			// System.out.println("Agent Data : "+ agent.getId());
		}
		if (type.equals("SUBAGENT")) {
			subAgent = subAgentDAO.loadAgentbyMailId(mailId);
			
			logger.info("SubAgent Data : "+ subAgent.getId());

			// System.out.println("SubAgent Data : "+ subAgent.getId());
		}
		/* merchant1.getId(merchant.setId().toString()); */

		BigInteger bi = null;
		if (agent != null) {

			bi = new BigInteger(agent.getId().toString());
			
			logger.info("Data agent : "+ bi);
			
			// System.out.println("Data agent : "+ bi);
		}

		BigInteger subAgID = null;
		if (subAgent != null) {
			subAgID = new BigInteger(subAgent.getId().toString());
			
			logger.info("Data subagent : "+ subAgID);
			
			// System.out.println("Data subagent : "+ subAgID);
		}

		merchant.setAgID(bi);
		merchant.setSubAgID(subAgID);
		
		
		//umobile mid
		
		
		// }

		merchant.setBusinessName(regMerchant.getBusinessName().toUpperCase());
		merchant.setBusinessShortName(regMerchant.getRegisteredName());
		merchant.setBusinessRegistrationNumber(regMerchant.getBusinessRegNo());
		merchant.setBusinessAddress1(regMerchant.getRegisteredAddress());
		merchant.setBusinessAddress2(regMerchant.getBusinessAddress());
		merchant.setBusinessAddress3(regMerchant.getMailingAddress());
		merchant.setSalutation(regMerchant.getSalutation());
		merchant.setContactPersonName(regMerchant.getName());
		merchant.setContactPersonPhoneNo(regMerchant.getContactNo());
		merchant.setEmail(regMerchant.getEmail());
		merchant.setWebsite(regMerchant.getWebsite());
		merchant.setBusinessContactNumber(regMerchant.getOfficeNo());
		merchant.setFaxNo(regMerchant.getFaxNo());
		merchant.setBusinessType(regMerchant.getBusinessType());
		merchant.setCompanyType(regMerchant.getCompanyType());
		merchant.setNatureOfBusiness(regMerchant.getNatureOfBusiness());
		merchant.setPermiseType(regMerchant.getDocuments());
		merchant.setBankName(regMerchant.getBankName());
		merchant.setBankAcc(regMerchant.getBankAccNo());
		merchant.setState(regMerchant.getBusinessState());
		merchant.setCity(regMerchant.getBusinessCity());
		merchant.setPostcode(regMerchant.getBusinessPostCode());
		merchant.setReferralId(regMerchant.getReferralId());
		merchant.setWaiverMonth(regMerchant.getWavierMonth());
		merchant.setTradingName(regMerchant.getTradingName());
		merchant.setReaderSerialNo(regMerchant.getNoOfReaders());
		merchant.setYearIncorporated(regMerchant.getYearIncorporated());
		merchant.setSignedPackage(regMerchant.getSignedPackage());
		merchant.setRemarks(regMerchant.getStatusRemarks());
		merchant.setAccType(regMerchant.getAccType());

		String ownerSalutation = "";
		String ownerName = "";
		String passportNo = "";
		String residentialAddress = "";
		String ownerContactNo = "";

		// System.out.println(" Owner's Count :"+merchant.getOwnerCount());

		if (regMerchant.getOwnerCount() == "2" || regMerchant.getOwnerCount().equals("2")) {
			ownerSalutation = regMerchant.getOwnerSalutation1() + "~" + regMerchant.getOwnerSalutation2();
			ownerName = regMerchant.getOwnerName1() + "~" + regMerchant.getOwnerName2();
			passportNo = regMerchant.getPassportNo1() + "~" + regMerchant.getPassportNo2();
			ownerContactNo = regMerchant.getOwnerContactNo1() + "~" + regMerchant.getOwnerContactNo2();
			residentialAddress = regMerchant.getResidentialAddress1() + "~" + regMerchant.getResidentialAddress2();

		} else if (regMerchant.getOwnerCount() == "3" || regMerchant.getOwnerCount().equals("3")) {
			ownerSalutation = regMerchant.getOwnerSalutation1() + "~" + regMerchant.getOwnerSalutation2() + "~"
					+ regMerchant.getOwnerSalutation3();
			ownerName = regMerchant.getOwnerName1() + "~" + regMerchant.getOwnerName2() + "~" + regMerchant.getOwnerName3();
			passportNo = regMerchant.getPassportNo1() + "~" + regMerchant.getPassportNo2() + "~" + regMerchant.getPassportNo3();
			ownerContactNo = regMerchant.getOwnerContactNo1() + "~" + regMerchant.getOwnerContactNo2() + "~"
					+ regMerchant.getOwnerContactNo3();
			residentialAddress = regMerchant.getResidentialAddress1() + "~" + regMerchant.getResidentialAddress2() + "~"
					+ regMerchant.getResidentialAddress3();

		} else if (regMerchant.getOwnerCount() == "4" || regMerchant.getOwnerCount().equals("4")) {
			ownerSalutation = regMerchant.getOwnerSalutation1() + "~" + regMerchant.getOwnerSalutation2() + "~"
					+ regMerchant.getOwnerSalutation3() + "~" + regMerchant.getOwnerSalutation4();
			ownerName = regMerchant.getOwnerName1() + "~" + regMerchant.getOwnerName2() + "~" + regMerchant.getOwnerName3() + "~"
					+ regMerchant.getOwnerName4();
			passportNo = regMerchant.getPassportNo1() + "~" + regMerchant.getPassportNo2() + "~" + regMerchant.getPassportNo3()
					+ "~" + regMerchant.getPassportNo4();
			ownerContactNo = regMerchant.getOwnerContactNo1() + "~" + regMerchant.getOwnerContactNo2() + "~"
					+ regMerchant.getOwnerContactNo3() + "~" + regMerchant.getOwnerContactNo4();
			residentialAddress = regMerchant.getResidentialAddress1() + "~" + regMerchant.getResidentialAddress2() + "~"
					+ regMerchant.getResidentialAddress3() + "~" + regMerchant.getResidentialAddress4();

		} else if (regMerchant.getOwnerCount() == "5" || regMerchant.getOwnerCount().equals("5")) {
			ownerSalutation = regMerchant.getOwnerSalutation1() + "~" + regMerchant.getOwnerSalutation2() + "~"
					+ regMerchant.getOwnerSalutation3() + "~" + regMerchant.getOwnerSalutation4() + "~"
					+ regMerchant.getOwnerSalutation5();
			ownerName = regMerchant.getOwnerName1() + "~" + regMerchant.getOwnerName2() + "~" + regMerchant.getOwnerName3() + "~"
					+ regMerchant.getOwnerName4() + "~" + regMerchant.getOwnerName5();
			passportNo = regMerchant.getPassportNo1() + "~" + regMerchant.getPassportNo2() + "~" + regMerchant.getPassportNo3()
					+ "~" + regMerchant.getPassportNo4() + "~" + regMerchant.getPassportNo5();
			ownerContactNo = regMerchant.getOwnerContactNo1() + "~" + regMerchant.getOwnerContactNo2() + "~"
					+ regMerchant.getOwnerContactNo3() + "~" + regMerchant.getOwnerContactNo4() + "~"
					+ regMerchant.getOwnerContactNo5();
			residentialAddress = regMerchant.getResidentialAddress1() + "~" + regMerchant.getResidentialAddress2() + "~"
					+ regMerchant.getResidentialAddress3() + "~" + regMerchant.getResidentialAddress4() + "~"
					+ regMerchant.getResidentialAddress5();

		} else {
			ownerSalutation = regMerchant.getOwnerSalutation1();
			ownerName = regMerchant.getOwnerName1();
			passportNo = regMerchant.getPassportNo1();
			ownerContactNo = regMerchant.getOwnerContactNo1();
			residentialAddress =regMerchant.getResidentialAddress1();

		}

		merchant.setOwnerSalutation(ownerSalutation);
		merchant.setOwnerName(ownerName);
		merchant.setOwnerPassportNo(passportNo);
		merchant.setOwnerContactNo(ownerContactNo);
		merchant.setResidentialAddress(residentialAddress);

		merchant.setMdr(regMerchant.getMdr());
		merchant.setPreAuth(regMerchant.getPreAuth());
		merchant.setAuth3DS(regMerchant.getAuth3DS());
		merchant.setAutoSettled(regMerchant.getAutoSettled());
		
		logger.info("regMerchant.getStatus(): "+ regMerchant.getStatus());
		if (regMerchant.getStatus() != null) {
			if (regMerchant.getStatus().equalsIgnoreCase("ACTIVE")) {
				merchant.setActivateDate(new Date());
				merchant.setStatus(CommonStatus.ACTIVE);
				RandomPassword rpwd = new RandomPassword();
				String genPwd = rpwd.generateRandomString();
				merchant.setPassword(encoder.encode(genPwd));
			} else if (regMerchant.getStatus().equalsIgnoreCase("PENDING")) {
				merchant.setUsername(regMerchant.getOfficeEmail());
				merchant.setCreatedDate(new Date());
				merchant.setStatus(CommonStatus.PENDING);
			}else if (regMerchant.getStatus().equalsIgnoreCase("SUBMITTED")) {
				merchant.setUsername(regMerchant.getOfficeEmail());
				merchant.setModifiedDate(new Date());
				merchant.setStatus(CommonStatus.SUBMITTED);
			}else if (regMerchant.getStatus().equalsIgnoreCase("REJECTED")) {
				merchant.setUsername(regMerchant.getOfficeEmail());
				merchant.setModifiedDate(new Date());
				merchant.setStatus(CommonStatus.REJECTED);
			}
		}
		if (regMerchant.getFileId() != null) {
			
			logger.info("regMerchant.getFileId(): ");

			// System.out.println(" Inside File Cond");
			String fileIds[] = null;
			if (regMerchant.getFileId().contains("~")) {
				fileIds = regMerchant.getFileId().split("~");
				for (int i = 0; i < fileIds.length; i++) {

					// FileUpload fileUpload = loadFileUpload(entity.getFileId());
					// System.out.println(" Inside File loop :"+fileIds[i]);
					FileUpload fileUpload = loadFileUpload(fileIds[i]);

					fileUpload.setMerchantId(merchant.getId().toString());

					FileUpload fileUpload1 = merchantDAO.updateFileById(fileUpload);

					// System.out.println("Merchant service MerchantId Data :
					// "+fileUpload1.getFileId());
				}
			} else {
				// System.out.println(" Inside File Cond else");
				// fileIds[0]= merchant.getFileId();

				// FileUpload fileUpload = loadFileUpload(entity.getFileId());
				// System.out.println(" Inside File loop :"+merchant.getFileId());
				FileUpload fileUpload = loadFileUpload(regMerchant.getFileId());

				fileUpload.setMerchantId(merchant.getId().toString());

				FileUpload fileUpload1 = merchantDAO.updateFileById(fileUpload);

				// System.out.println("Merchant service MerchantId Data :
				// "+fileUpload1.getFileId());

			}

			
		}
		
		logger.info("gonna edit merch"+merchant.getId());
		
		merchantDAO.saveOrUpdateEntity1(merchant);
	
		String ezypassmid = null,mid = null,ezymotomid = null,ezywaymid = null,ezyrecmid = null;
		String um_ezypassmid = null,um_mid = null,um_ezymotomid = null,um_ezywaymid = null,um_ezyrecmid = null;
		
		MID midTab = null, motoMidTab = null,ezypassMidTab = null,ezyrecMidTab = null,ezywayMidTab = null;
		MID um_midTab = null, um_motoMidTab = null,um_ezypassMidTab = null,um_ezyrecMidTab = null,um_ezywayMidTab = null;
		MID mID=null;
	
		if(regMerchant.getMid() != null){
			if(!(regMerchant.getMid().isEmpty())){
			   mid = regMerchant.getMid();
				if(regMerchant.getMid().length() <= 15){
					for (int i = mid.length(); i < 15; i++) {
						mid = "0" + mid;
						
					}
					logger.info("mid: "+mid);
					
				}
				//midTab = merchantDAO.loadMidtoUpdateAudit(mid);
				
			}
		}
		
		if (regMerchant.getEzymotomid() != null) {
			if (!(regMerchant.getEzymotomid().isEmpty())) {
				ezymotomid = regMerchant.getEzymotomid();
				if (regMerchant.getEzymotomid().length() <= 15) {
					for (int i = ezymotomid.length(); i < 15; i++) {
						ezymotomid = "0" + ezymotomid;
					}
					logger.info("ezymotomid: " + ezymotomid);

				}
				//motoMidTab =  merchantDAO.loadMidtoUpdateAudit(ezymotomid);
				
			}
		}
		
		if(regMerchant.getEzypassmid() != null){
			if(!(regMerchant.getEzypassmid().isEmpty())){
				ezypassmid = regMerchant.getEzypassmid();
				if(regMerchant.getEzypassmid().length() <= 15){
					for (int i = ezypassmid.length(); i < 15; i++) {
						ezypassmid = "0" + ezypassmid;
						
					}
					logger.info("ezypassmid: "+ezypassmid);
					//ezypassMidTab =  merchantDAO.loadMidtoUpdateAudit(ezypassmid);
					
				}
			}
		}
		
		if(regMerchant.getEzyrecmid() != null){
			if(!(regMerchant.getEzyrecmid().isEmpty())){
				ezyrecmid = regMerchant.getEzyrecmid();
				if(regMerchant.getEzyrecmid().length() <= 15){
					for (int i = ezyrecmid.length(); i < 15; i++) {
						ezyrecmid = "0" + ezyrecmid;
						
					}
					logger.info("ezyrecmid: "+ezyrecmid);
					//ezyrecMidTab =  merchantDAO.loadMidtoUpdateAudit(ezyrecmid);
					
				}
			}
		}
		if(regMerchant.getEzywaymid() != null){
			if(!(regMerchant.getEzywaymid().isEmpty())){
				ezywaymid = regMerchant.getEzywaymid();
				if(regMerchant.getEzywaymid().length() <= 15){
					for (int i = ezywaymid.length(); i < 15; i++) {
						ezywaymid = "0" + ezywaymid;
					}
					logger.info("ezywaymid: "+ezywaymid);
					//ezywayMidTab =merchantDAO.loadMidtoUpdateAudit(ezywaymid);
					
				}
			}
		}
		
		
		//umobile 
		
		if(regMerchant.getUmMid() != null){
			if(!(regMerchant.getUmMid().isEmpty())){
			  um_mid = regMerchant.getUmMid();
				if(regMerchant.getUmMid().length() <= 15){
					for (int i = um_mid.length(); i < 15; i++) {
						um_mid = "0" + um_mid;
						
					}
					logger.info("um_mid: "+um_mid);
					
				}
				//midTab = merchantDAO.loadMidtoUpdateAudit(um_mid);
				
			}
		}
		
		if (regMerchant.getUmMotoMid() != null) {
			if (!(regMerchant.getUmMotoMid().isEmpty())) {
				um_ezymotomid = regMerchant.getUmMotoMid();
				if (regMerchant.getUmMotoMid().length() <= 15) {
					for (int i = um_ezymotomid.length(); i < 15; i++) {
						um_ezymotomid = "0" + um_ezymotomid;
					}
					logger.info("ezymotomid: " + um_ezymotomid);

				}
				//motoMidTab =  merchantDAO.loadMidtoUpdateAudit(um_ezymotomid);
				
			}
		}
		
		if(regMerchant.getUmEzypassMid() != null){
			if(!(regMerchant.getUmEzypassMid().isEmpty())){
				um_ezypassmid = regMerchant.getUmEzypassMid();
				if(regMerchant.getUmEzypassMid().length() <= 15){
					for (int i = um_ezypassmid.length(); i < 15; i++) {
						um_ezypassmid = "0" + um_ezypassmid;
						
					}
					logger.info("um_ezypassmid: "+ezypassmid);
					//ezypassMidTab =  merchantDAO.loadMidtoUpdateAudit(um_ezypassmid);
					
				}
			}
		}
		
		if(regMerchant.getUmEzyrecMid() != null){
			if(!(regMerchant.getUmEzyrecMid().isEmpty())){
				um_ezyrecmid = regMerchant.getUmEzyrecMid();
				if(regMerchant.getUmEzyrecMid().length() <= 15){
					for (int i = um_ezyrecmid.length(); i < 15; i++) {
						um_ezyrecmid = "0" + um_ezyrecmid;
						
					}
					logger.info("um_ezyrecmid: "+um_ezypassmid);
					//ezyrecMidTab =  merchantDAO.loadMidtoUpdateAudit(um_ezyrecmid);
					
				}
			}
		}
		if(regMerchant.getUmEzywayMid() != null){
			if(!(regMerchant.getUmEzywayMid().isEmpty())){
				um_ezywaymid = regMerchant.getUmEzywayMid();
				if(regMerchant.getUmEzywayMid().length() <= 15){
					for (int i = um_ezywaymid.length(); i < 15; i++) {
						um_ezywaymid = "0" + um_ezywaymid;
					}
					logger.info("um_ezywaymid: "+um_ezywaymid);
					//ezywayMidTab =merchantDAO.loadMidtoUpdateAudit(um_ezywaymid);
					
				}
			}
		}
		
		
		//uMobile changes
		
		logger.info("regMerchant.getMerchantType(): "+regMerchant.getMerchantType());
		if(regMerchant.getMerchantType()!=null) {
			if(regMerchant.getMerchantType().equals("P")) {
				if (merchant.getMid().getMid() != null) {
					mID = merchantDAO.loadMid(merchant.getMid().getMid());
				} else if (merchant.getMid().getMotoMid() != null) {
					mID = merchantDAO.loadMotoMid(merchant.getMid().getMotoMid());
				} else if (merchant.getMid().getEzypassMid() != null) {
					mID = merchantDAO.loadEzyPassMid(merchant.getMid().getEzypassMid());
				} else if (merchant.getMid().getEzyrecMid() != null) {
					mID = merchantDAO.loadEzyrecMid(merchant.getMid().getEzyrecMid());
				} else if (merchant.getMid().getEzywayMid() != null) {
					mID = merchantDAO.loadEzywayMid(merchant.getMid().getEzywayMid());
				}
			}else {
				if (merchant.getMid().getUmMid() != null) {
					mID = merchantDAO.loadUMMid(merchant.getMid().getUmMid());
				}else if (merchant.getMid().getUmEzypassMid() != null) {
					mID = merchantDAO.loadUMEzyPassMid(merchant.getMid().getUmEzypassMid());
				}else if (merchant.getMid().getUmEzyrecMid() != null) {
					mID = merchantDAO.loadUMEzyrecMid(merchant.getMid().getUmEzyrecMid());
				}else if (merchant.getMid().getUmEzywayMid() != null) {
					mID = merchantDAO.loadUMEzywayMid(merchant.getMid().getUmEzywayMid());
				}else if (merchant.getMid().getUmMotoMid() != null) {
					mID = merchantDAO.loadUMMotoMid(merchant.getMid().getUmMotoMid());
				}
			}
		}else {
			if (merchant.getMid().getMid() != null) {
				mID = merchantDAO.loadMid(merchant.getMid().getMid());
			} else if (merchant.getMid().getMotoMid() != null) {
				mID = merchantDAO.loadMotoMid(merchant.getMid().getMotoMid());
			} else if (merchant.getMid().getEzypassMid() != null) {
				mID = merchantDAO.loadEzyPassMid(merchant.getMid().getEzypassMid());
			} else if (merchant.getMid().getEzyrecMid() != null) {
				mID = merchantDAO.loadEzyrecMid(merchant.getMid().getEzyrecMid());
			} else if (merchant.getMid().getEzywayMid() != null) {
				mID = merchantDAO.loadEzywayMid(merchant.getMid().getEzywayMid());
			}
		
	}
		
		
		/*if(regMerchant.getMerchantType()==null) {
			if (merchant.getMid().getMid() != null) {
				mID = merchantDAO.loadMid(merchant.getMid().getMid());
			} else if (merchant.getMid().getMotoMid() != null) {
				mID = merchantDAO.loadMotoMid(merchant.getMid().getMotoMid());
			} else if (merchant.getMid().getEzypassMid() != null) {
				mID = merchantDAO.loadEzyPassMid(merchant.getMid().getEzypassMid());
			} else if (merchant.getMid().getEzyrecMid() != null) {
				mID = merchantDAO.loadEzyrecMid(merchant.getMid().getEzyrecMid());
			} else if (merchant.getMid().getEzywayMid() != null) {
				mID = merchantDAO.loadEzywayMid(merchant.getMid().getEzywayMid());
			}
		}else {
			if (merchant.getMid().getUmMid() != null) {
				mID = merchantDAO.loadUMMid(merchant.getMid().getUmMid());
			}else if (merchant.getMid().getUmEzypassMid() != null) {
				mID = merchantDAO.loadUMEzyPassMid(merchant.getMid().getUmEzypassMid());
			}else if (merchant.getMid().getUmEzyrecMid() != null) {
				mID = merchantDAO.loadUMEzyrecMid(merchant.getMid().getUmEzyrecMid());
			}else if (merchant.getMid().getUmEzywayMid() != null) {
				mID = merchantDAO.loadUMEzywayMid(merchant.getMid().getUmEzywayMid());
			}else if (merchant.getMid().getUmMotoMid() != null) {
				mID = merchantDAO.loadUMMotoMid(merchant.getMid().getUmMotoMid());
			}
			
		}*/
		
		if ((merchant.getMid().getMid() == null) && (mid!=null)){
			mID.setMid(mid);
		}
		if ((merchant.getMid().getMotoMid() == null) && (ezymotomid!=null)) {
			mID.setMotoMid(ezymotomid);
		}
		if ((merchant.getMid().getEzywayMid() == null) && (ezywaymid!=null)) {
			mID.setEzywayMid(ezywaymid);
		}
		if ((merchant.getMid().getEzyrecMid() == null) && (ezyrecmid!=null)) {
			mID.setEzyrecMid(ezyrecmid);
		}
		if ((merchant.getMid().getEzypassMid() == null) && (ezypassmid!=null)) {
			mID.setEzypassMid(ezypassmid);
		}
		logger.info("ummid:"+um_mid);
		if ((merchant.getMid().getUmMid() == null) && (um_mid!=null)) {
			mID.setUmMid(um_mid);
		}
		if ((merchant.getMid().getUmMotoMid() == null) && (um_ezymotomid!=null)) {
			mID.setUmMotoMid(um_ezymotomid);
		}
		if ((merchant.getMid().getUmEzywayMid() == null) && (um_ezywaymid!=null)) {
			logger.info("um_ezywaymid if:"+um_ezywaymid);
			logger.info("mID"+mID.getUmEzywayMid());
			mID.setUmEzywayMid(um_ezywaymid);
		}
		if ((merchant.getMid().getUmEzyrecMid() == null) && (um_ezyrecmid!=null)) {
			mID.setUmEzyrecMid(um_ezyrecmid);
		}
		if ((merchant.getMid().getUmEzypassMid() == null) && (um_ezypassmid!=null)) {
			mID.setUmEzypassMid(um_ezypassmid);
		}

		/*if (merchant.getMid().getMid() == null) {
			mID.setMid(mid);
		}
		if (merchant.getMid().getMotoMid() == null) {
			mID.setMotoMid(ezymotomid);
		}
		if (merchant.getMid().getEzywayMid() == null) {
			mID.setEzywayMid(ezywaymid);
		}
		if (merchant.getMid().getEzyrecMid() == null) {
			mID.setEzyrecMid(ezyrecmid);
		}
		if (merchant.getMid().getEzypassMid() == null) {
			mID.setEzypassMid(ezypassmid);
		}
		logger.info("ummid:"+um_mid);
		if (merchant.getMid().getUmMid() == null) {
			mID.setUmMid(um_mid);
		}
		if (merchant.getMid().getUmMotoMid() == null) {
			mID.setUmMotoMid(um_ezymotomid);
		}
		if (merchant.getMid().getUmEzywayMid() == null) {
			mID.setUmEzywayMid(um_ezywaymid);
		}
		if (merchant.getMid().getUmEzyrecMid() == null) {
			mID.setUmEzyrecMid(um_ezyrecmid);
		}
		if (merchant.getMid().getUmEzypassMid() == null) {
			mID.setUmEzypassMid(um_ezypassmid);
		}*/

		mID = merchantDAO.saveOrUpdateEntity(mID);

		//merchant.setMid(mID);
		
		
		return merchant;
		
	}
		//end update merchant usine pending merchant controller 03/07/2016 
	  
	  
	 // @javax.transaction.Transactional
	public MID loadMid(String mid) {

		return merchantDAO.loadMid(mid);
	}

	public MID checkExistMid(String mid) {

		return merchantDAO.loadMidtoUpdateAudit(mid);
	}
	  
		public MID loadMotoMid(String motomid){
			MID mid1 = new MID();
			return merchantDAO.loadMotoMid(motomid);
	}
		public MID loadEzyPassMid(String ezypassmid){
			MID mid1 = new MID();
			return merchantDAO.loadEzyPassMid(ezypassmid);
	}
	  //new method for pending merchant 24062016
	  
	 /* @javax.transaction.Transactional
		public void listMerchant1(final PaginationBean<Merchant> paginationBean) {
			System.out.println("Inside  listAllTransaction:::::");
			ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
			criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.ACTIVE)));
			merchantDAO.listMerchantUser1(paginationBean, criterionList);
		}*/
	  
	  
	  //@javax.transaction.Transactional
	 	public FileUpload storeFileUpload(FileUpload fileUpload){
	 		
	 		return merchantDAO.saveOrUpdateEntity(fileUpload);
	 }
	  
	  
	  //@javax.transaction.Transactional
		public FileUpload loadFileUpload(String fileId){
		  
		  //BigInteger bi = new BigInteger(fileId);
			
			return merchantDAO.loadFileById(fileId);
	}

 //@javax.transaction.Transactional
 	public List<FileUpload> loadFileDet(String merchantId){
 	  
 	  //BigInteger bi = new BigInteger(fileId);
 		
 		return merchantDAO.loadFileByMerchantId(merchantId);
   }
  //new method for merchant summary search condition 16062017
 	
 	
 	public void listMerchantSearch(final PaginationBean<Merchant> paginationBean,final String date,final String date1,String type) {
		ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
		//logger.info("check activateDate42323:" + type);
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.CANCELLED)));
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.PENDING)));
		criterionList.add(Restrictions.not(Restrictions.eq("status", CommonStatus.SUBMITTED)));
		if(type != null && !type.isEmpty()){
			if(type.equals("MERCHANT")){
				//logger.info("check activateDate42323:" + MerchantUserRole.BANK_MERCHANT.toString());
				criterionList.add(Restrictions.eq("role", MerchantUserRole.BANK_MERCHANT));
			}else{
				//logger.info("check activateDate42323:" + MerchantUserRole.NON_MERCHANT.toString());
				criterionList.add(Restrictions.eq("role", MerchantUserRole.NON_MERCHANT));
			}
		}
		
		//Date dat = null;
		//Date dat1 = null;
		if(date!= null)
		{
			//criterionList.add(Restrictions.eq("activateDate", data));
		//logger.info("check activateDate42323:" + date);
		String dat =date;
		
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		
		try {
			dat = format.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat));
			Timestamp ts = Timestamp.valueOf(dat);
			logger.info("From Date: " + ts);
			criterionList.add(Restrictions.ge("activateDate", ts));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		
		 if(date1!= null)
		{
			String dat1 =date1;
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
			try {
				dat1 = format.format(new SimpleDateFormat("dd/MM/yyyy").parse(dat1));
				Timestamp ts = Timestamp.valueOf(dat1);
				logger.info("To Date: " + ts);
				criterionList.add(Restrictions.lt("activateDate", ts));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			//criterionList.add(Restrictions.lt("activateDate", dat1));
			//logger.info("check activateDate to date121212:" + date1);
		}
		merchantDAO.listMerchantSearch(paginationBean, criterionList);
	}
	
//new changes for email preview for approved status 10072017
 	
 	
 		public Merchant getMerchantByMid(String mid){
 			MID mid1 = merchantDAO.loadMid(mid);
 			Merchant merchant = merchantDAO.loadMerchant(mid1);
 			return merchant;
 		}
 	
 		
 		public List<Merchant> merchantSummaryExport(final String date,final String date1) {
			System.out.println("Inside  monthly Transaction Export");
			ArrayList<Criterion> criterionList = new ArrayList<Criterion>();
			 return merchantDAO.listMerchantSummary(criterionList,date, date1);
	}
 		
 		
 		

 		
	public AuditTrail updateAuditTrailByMerchant(String userName,
			String merchantName, String auditTrailAction)
	{

		AuditTrail auditTrail = new AuditTrail();
		auditTrail.setCreatedBy(null);
		auditTrail.setCreatedDate(null);
		auditTrail.setModifiedBy(merchantName);
		auditTrail.setModifiedDate(new Date());
		auditTrail.setStatus(CommonOperationStatus.SUCCESS);
		auditTrail.setUsername(userName);

		switch (auditTrailAction) 
		{
		//completed
		case "loginByEzyRec":
			auditTrail.setDescription("Logged in through EzyRec App");
			auditTrail.setAction(AuditTrailAction.LOGIN);
			auditTrail.setUserType("MERCHANT");
			break;
		case "logoutByEzyRec":
			auditTrail.setDescription("Logged out through EzyRec App");
			auditTrail.setAction(AuditTrailAction.LOGOUT);
			auditTrail.setUserType("MERCHANT");
			break;
		case "forgotPassword":
			auditTrail.setDescription("Password Changed through EzyRec App");
			auditTrail.setAction(AuditTrailAction.MERCHANT_CHANGE_PASSWORD);
			auditTrail.setUserType("MERCHANT");
			break;
		case "RecurringStatusUpdate":
			auditTrail.setDescription("Recurr Status Updated by Admin");
			auditTrail.setAction(AuditTrailAction.ADMIN_RECUR_STATUS_UPDATE);
			auditTrail.setUserType("MERCHANT");
			break;
		case "editMobileUserLogin":
			auditTrail.setDescription("MobileUser Login Details Edited by Merchant");
			auditTrail.setUserType("MOBILEUSER");
			auditTrail.setAction(AuditTrailAction.MERCHANT_EDIT_MOBILEUSER);
			break;
			//completed
		case "editEzyAds":
			auditTrail.setDescription("EZYAds Edited by Merchant");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_EDIT_EZYADS);
			break;
			
			//completed
		case "mailUpload":
			//logger.info("audittrail action: "+auditTrailAction);
			auditTrail.setDescription("EZYAds CustomerMail Uploaded by Merchant");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_MAILUPLOAD);
			break;
			
		case "addEzyAds":
			auditTrail.setDescription("EZYAds Added by Merchant");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_ADD_EZYADS);
			break;
			
			//completed
		case "editReader":
			auditTrail.setDescription("Reader Details Edited by Merchant");
			auditTrail.setUserType("READER");
			auditTrail.setAction(AuditTrailAction.MERCHANT_EDIT_READER);
			break;
			//completed
		case "changePassword":
			auditTrail.setDescription("Merchant Password ReChanged by Merchant");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_CHANGE_PASSWORD);
			break;
			//completed
		case "login":
			auditTrail.setDescription("Logged in by Merchant");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_LOGIN);
			break;
			
		case "viewByAdmin":
			auditTrail.setDescription("Merchant Portal Viewed by Admin");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_LOGIN);
			break;
			
		case "logout":
			auditTrail.setDescription("Logged out by Merchant");
			auditTrail.setUserType("MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_LOGOUT);
			break;
			
		default:
			auditTrail.setDescription(null);
			auditTrail.setUserType(null);
			auditTrail.setAction(null);
			break;
		}
		
	return merchantDAO.saveOrUpdateEntity(auditTrail);

	}

	public AuditTrail updateAuditTrailByNonMerchant(String userName,
			String merchantName, String auditTrailAction)
	{

		AuditTrail auditTrail = new AuditTrail();
		auditTrail.setCreatedBy(null);
		auditTrail.setCreatedDate(null);
		auditTrail.setModifiedBy(merchantName);
		auditTrail.setModifiedDate(new Date());
		auditTrail.setStatus(CommonOperationStatus.SUCCESS);
		auditTrail.setUsername(userName);

		switch (auditTrailAction) 
		{
		//completed
		case "editMobileUserLogin":
			auditTrail.setDescription("MobileUser Login Details Edited by Merchant");
			auditTrail.setUserType("MOBILEUSER");
			auditTrail.setAction(AuditTrailAction.MERCHANT_EDIT_MOBILEUSER);
			break;
			//completed
		case "editEzyAds":
			auditTrail.setDescription("EZYAds Edited by Merchant");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_EDIT_EZYADS);
			break;
			
			//completed
		case "mailUpload":
			//logger.info("audittrail action: "+auditTrailAction);
			auditTrail.setDescription("EZYAds CustomerMail Uploaded by Merchant");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_MAILUPLOAD);
			break;
			
		case "addEzyAds":
			auditTrail.setDescription("EZYAds Added by Merchant");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_ADD_EZYADS);
			break;
			
			//completed
		case "editReader":
			auditTrail.setDescription("Reader Details Edited by Merchant");
			auditTrail.setUserType("READER");
			auditTrail.setAction(AuditTrailAction.MERCHANT_EDIT_READER);
			break;
			//completed
		case "changePassword":
			auditTrail.setDescription("Merchant Password ReChanged by Merchant");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_CHANGE_PASSWORD);
			break;
			//completed
		case "login":
			auditTrail.setDescription("Logged in by Merchant");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_LOGIN);
			break;
			
		case "viewByAdmin":
			auditTrail.setDescription("Merchant Portal Viewed by Admin");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_LOGIN);
			break;
			
		case "logout":
			auditTrail.setDescription("Logged out by Merchant");
			auditTrail.setUserType("NON_MERCHANT");
			auditTrail.setAction(AuditTrailAction.MERCHANT_LOGOUT);
			break;
			
		default:
			auditTrail.setDescription(null);
			auditTrail.setUserType(null);
			auditTrail.setAction(null);
			break;
		}
		
	return merchantDAO.saveOrUpdateEntity(auditTrail);

	}

	public KeyManager saveGeneratedCaptcha(String captcha)
	{
		KeyManager captchaGenerate=new KeyManager();
			
			captchaGenerate.setTid(captcha);
			return merchantDAO.saveOrUpdateEntity(captchaGenerate);

	}
	protected Session getSessionFactory() {
		return sessionFactory.getCurrentSession();
	}

	public List<Merchant> loadMerchantData()
	{
		ArrayList<Merchant> transactionList=new ArrayList<Merchant>();
		
			String sql1 = "select m.MERCHANT_ID,m.BUSINESS_NAME from merchant m ";

			logger.info("query: "+sql1);
			Query sqlQuery =  this.getSessionFactory().createSQLQuery(sql1)
					.addEntity(Merchant.class);// .setParameter("mid",
													// mid);

			List<Object[]> resultSet = sqlQuery.list();
			logger.info("Number of records in the List : " + resultSet.size());
			for (Object[] rec : resultSet) {
				Merchant fs = new Merchant();
				if(rec[0]!=null)
				{
				fs.setBusinessName(rec[0].toString());
				}
				if(rec[1]!=null)
				{
					fs.setMdr(rec[1].toString());
				}
				transactionList.add(fs);

			}
			
		
		return transactionList;
	}

	public MID loadMerchantbyid(Merchant merchant) {
		/*logger.info("MerchantDaoImpl:loadMerchant MID");*/
		// TODO Auto-generated method stub
		return (MID) getSessionFactory().createCriteria(MID.class).add(Restrictions.eq("merchant", merchant))
				.setMaxResults(1).uniqueResult();
	}
	
	
	
	public MID loadMidByMerchant_PK(String id) {

		return merchantDAO.loadMidByMerchant_PK(id);
	}
	
	
	public TerminalDetails loadTerminalDetailsByMid(String mid) {
		
		return merchantDAO.loadTerminalDetailsByMid(mid);
		
	}
	
	
	public MobiLiteTerminal loadMobiliteTerminalDetailsByMid(Long mid) {
		
		return merchantDAO.loadMobiliteTerminalDetailsByMid(mid);
		
	}
	
	public void loadTerminalDetails(StringBuffer midStr, PaginationBean<TerminalDetails> paginationBean) {
		
		 merchantDAO.loadTerminalDetails(midStr,paginationBean);
		
	}

	
	public void loadCurrentTxnDetails(Merchant merchant, PaginationBean<TerminalDetails> paginationBean, String agentName) {
		
		 merchantDAO.loadCurrentTxnDetails(merchant,paginationBean,agentName);
		
	}
	
	public void searchTxnDetails(Merchant merchant, PaginationBean<TerminalDetails> paginationBean,
			String period,String productType,String year) {
		
		 merchantDAO.searchTxnDetails(merchant,paginationBean,period,productType,year);
		
	}
	
	public List<String> getProductDetails(StringBuffer midStr) {
		
		 return merchantDAO.getProductDetails(midStr);
		
	}

	public List<Merchant> loadUMMerchant() {
		return merchantDAO.loadUMMerchant();
	}

	
	public String getMerchantCurrentMonthTxnByNOB(StringBuffer str, StringBuffer strUm) {
		
		
		return merchantDAO.getMerchantCurrentMonthTxnByNOB(str,strUm);
	}
	
	public String getMerchantDailyTxnByNOB(StringBuffer str, StringBuffer strUm) {
		
		
		return merchantDAO.getMerchantDailyTxnByNOB(str,strUm);
	}
	
	public String getMerchantWeeklyTxnByNOB(StringBuffer str, StringBuffer strUm) {
		
		
		return merchantDAO.getMerchantWeeklyTxnByNOB(str,strUm);
	}
	
    public List<Merchant> loadMerchantByAgID(Long id) {
		
		BigInteger agid= BigInteger.valueOf(id);
		return merchantDAO.loadMerchantByAgID(agid);
	}
	

		public void listPayLaterMerchants(final PaginationBean<Merchant> paginationBean) {
			ArrayList<Criterion> criterionList = new ArrayList<Criterion>();			
			merchantDAO.listPayLaterMerchants(paginationBean);
		}
		
		public void searchPayLaterMerchants(final PaginationBean<Merchant> paginationBean,String date,String date1) {
			ArrayList<Criterion> criterionList = new ArrayList<Criterion>();			
			merchantDAO.searchPayLaterMerchants(paginationBean,date,date1);
		}
		
		public void listMerchantDetails(final PaginationBean<Merchant> paginationBean) {
			
			merchantDAO.listMerchantDetails(paginationBean);
		}
		
		public void listMerchantGPVDetails(final PaginationBean<Merchant> paginationBean) {
			
			merchantDAO.listMerchantGPVDetails(paginationBean);
		}
		
		public List<MerchantGPVData> listMerchantGPVDetailsByAgent(String agId ) {
			
			return merchantDAO.listMerchantGPVDetailsByAgent(agId);
		}
		
			public List<MerchantGPVData> listMerchantGPVDetailsBySuperAgent() {
			
			return merchantDAO.listMerchantGPVDetailsBySuperAgent();
			}
			
			public List<MerchantGPVData> exportMerchantGPVDetailsBySuperAgent() {
				
				return merchantDAO.listMerchantGPVDetailsBySuperAgent();
			}
		
		public void getMerchantGPV(StringBuffer str, final PaginationBean<Merchant> paginationBean) {
			
			merchantDAO.getMerchantGPV(str,paginationBean);
		}
		
		
		public Merchant validateMerchantEmailId(String emailId) {
			
			
			return merchantDAO.validateMerchantEmailId(emailId);
		}


		
		 public int updateTrackDetails(MobiliteTrackDetails det) {
				
				
				return merchantDAO.updateTrackDetails(det);
			}
		 
		 
		 public int updateStatusDetails(SettlementMDR det) {
				
				
				return merchantDAO.updateStatusDetails(det);
			}
		 
		 
		 public int updateEzylinkssTrackDetails(MobiliteTrackDetails det) {
				
				
				return merchantDAO.updateEzylinkssTrackDetails(det);
		 }

}
