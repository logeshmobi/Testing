package com.mobiversa.payment.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.mobiversa.common.bo.Agent;
import com.mobiversa.common.bo.AuditTrail;
import com.mobiversa.common.bo.BankUser;
import com.mobiversa.common.bo.MID;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.MobileUser;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.payment.controller.bean.PageBean;
import com.mobiversa.payment.controller.bean.PageBean.Module;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.dto.DashBoardData;
import com.mobiversa.payment.dto.RegAddMerchant;
import com.mobiversa.payment.dto.SixMonthTxnData;
import com.mobiversa.payment.dto.ThreeMonthTxnData;
import com.mobiversa.payment.service.AdminService;
import com.mobiversa.payment.service.AgentService;
import com.mobiversa.payment.service.DashBoardService;
import com.mobiversa.payment.service.MerchantService;
import com.mobiversa.payment.service.MobileUserService;
import com.mobiversa.payment.service.NonMerchantService;
import com.mobiversa.payment.util.DashboardAmount;
import com.mobiversa.payment.util.PropertyLoad;

@Controller
@RequestMapping()
public class HomeController extends BaseController {
	
	@Autowired
	private AdminService adminService;
	
	@Autowired
	private MobileUserService mobileUser;
	
	@Autowired
	private AgentService agentService;
	
	@Autowired
	private DashBoardService dashBoardService;
	
	@Autowired
	private MerchantService merchantService;
	
	@Autowired
	private NonMerchantService nonmerchantService;

	@RequestMapping(value = { "", "/" }, method = RequestMethod.GET)
	public String rootPage() {
		return "redirect:/auth/login";
	}

	@RequestMapping(value = { "/bank/user", "/bank/user*", "/bank/user**" }, method = RequestMethod.GET)
	public String defaultPage(final Model model ,final java.security.Principal principal ,HttpServletRequest request) {
		logger.info("@@@@@ WELCOME TO MOBIVERSA ADMIN PORTAL !!! @@@@@");
		PageBean pageBean = new PageBean("Dash Board", "dashboard/dashbrd",
				Module.ADMIN, "admin/sideMenuBankUser");
	
		HttpSession session = request.getSession();
	//	logger.info("check dashboard details:");
	
		/*logger.info("redirecting user to login screen from:"
				+ request.getRequestURI());
		
		logger.info("current session id: in /login \n"+session.getId());
		*/
		
//		String captcha1 = null;
		
		
		String captcha1 = (String) session.getAttribute("txtCompare1");
		String captcha2 = (String) session.getAttribute("txtCompare2");
		
		logger.info("txtCompare1 :::::::::login:::::::::"+ captcha1);
		logger.info("txtCompare2 :::::::::login:::::::::"+ captcha2);
		
		if ((captcha1 != null && captcha2 != null) && (!captcha1.isEmpty() && !captcha2.isEmpty()))

		{
			logger.info("if test 01:::::::::");
			
			if (captcha1.equals(captcha2)) {	
				
				session.removeAttribute("txtCompare1");
				session.removeAttribute("txtCompare2");
				
				logger.info("in test 02:::::::::equal");

			}else {
				logger.info("in test 02:::::::::not equal");
				
				
				session.removeAttribute("txtCompare1");
				session.removeAttribute("txtCompare2");
				
				return "redirect:/auth/login/error";
			}
			
		}else {
			logger.info("else test 01:::::::::");
			
			
			session.removeAttribute("txtCompare1");
			session.removeAttribute("txtCompare2");
			
			return "redirect:/auth/login/error";
		}
		
		session.removeAttribute("txtCompare1");
		session.removeAttribute("txtCompare2");
		
		
		model.addAttribute("pageBean", pageBean);
		
		//Total Device
		
		int totalDevice = dashBoardService.getTotalDevice();
		
		model.addAttribute("totalDevice", totalDevice);
		// logger.info("check total device:" + totalDevice );
		//Total transaction Current month
		
		String totalTxn = dashBoardService.getCurrentMonthTxn();
		 logger.info("check total amount:" + totalTxn );
		 model.addAttribute("totalTxn", totalTxn);
		 /*totalTxn = "1,234,300.00";
		 logger.info("check total amount:" + totalTxn );*/
		//logger.info("check dashboard details:");
		
		
		PaginationBean<DashBoardData> paginationBean = new PaginationBean<DashBoardData>();
		logger.info(" check 5 recent txn Amount Data ");
		dashBoardService.getLastFiveTxn(paginationBean);
		
		logger.info(" received 5 recent  txn Amount Data ");
		model.addAttribute("fiveTxnList", paginationBean);
		
		
		
		
		//Total Merchant
		String totalMerchant = dashBoardService.getTotalMerchant();
		//logger.info("check totalmerchant:" + totalMerchant);
        model.addAttribute("totalMerchant", totalMerchant);
      //  logger.info("check dashboard details:");
        List<ThreeMonthTxnData> data = new ArrayList<ThreeMonthTxnData>();
		//new changes for bar chart 05072017
		//List<ThreeMonthTxnData> txnCountData = new ArrayList<ThreeMonthTxnData>();
		PaginationBean<ThreeMonthTxnData> paginationBean1 = new PaginationBean<ThreeMonthTxnData>();
		//paginationBean1.setCurrPage(currPage);
		//logger.info("check dashboard details787878:");
		List<ThreeMonthTxnData> txnListData = new ArrayList<ThreeMonthTxnData>();
		txnListData= dashBoardService.getThreeMonthTxn(); 
		//logger.info("check dashboard details457454:");
		
		//logger.info("check dashboard txn details:" + txnListData.size());
		//for(ThreeMonthTxnData txnMonthData: txnCountData){
		/*if(txnListData.size()<=0)
		{
			
			
		}*/
		for(ThreeMonthTxnData txnMonthData: txnListData){
			
			//logger.info("check monthly count:" + txnMonthData );
			
			//logger.info("Controller agentDet : "+txnMonthData.getCount());
			//logger.info("Controller amount : "+txnMonthData.getAmount());
			//logger.info("Controller date : "+txnMonthData.getDate1());
			String a3="\"";
			for(String a1:txnMonthData.getDate1()){
				a3=a3+a1;
    			a3=a3+"\",\"";
	    	}
	    	//System.out.println("Data : "+a3);
	    	a3=a3+"\"";
	    	//System.out.println("Data : "+a3);
	    	a3=a3.replace(",\"\"", "");
	    //	System.out.println("Data : "+a3);
	    	txnMonthData.setMonth(a3);
	    	
	    	String b3="";
			for(String b1:txnMonthData.getAmount()){
				b3=b3+b1;
    			b3=b3+",";
	    	}
	    	//System.out.println("Data : "+b3);
	    	b3=b3+",";
	    	//System.out.println("Data : "+b3);
	    	b3=b3.replace(",,", "");
	    	//System.out.println("Data : "+b3);
	    	txnMonthData.setAmountData(b3);
	    	
	    	String c3="";
			for(String c1:txnMonthData.getCount()){
				c3=c3+c1;
    			c3=c3+",";
	    	}
	    	//System.out.println("Data : "+c3);
	    	c3=c3+",";
	    	//System.out.println("Data : "+c3);
	    	c3=c3.replace(",,", "");
	    	//System.out.println("Data : "+c3);
	    	txnMonthData.setCountData(c3);
	    	
			 model.addAttribute("threeMonthTxn", txnMonthData);
			 
			
			data.add(txnMonthData);
		
		}
		//End Agent 

		String a1=null,a2=null,a3=null;
		 Float min = 0.0f,max=0.0f;
		for(ThreeMonthTxnData t: txnListData) {
    		logger.info(" check= Amount Data "+t.getAmountData());
    		String[] amt=t.getAmountData().split(",");
    		a1=amt[0];
    		a2=amt[1];
    		a3=amt[2];
    		Float[] a= {Float.valueOf(a1),Float.valueOf(a2),Float.valueOf(a3)};
    		Arrays.sort(a);
    		
    		 min = a[0]; //  assume first elements as smallest number
    		 max = a[0]; //  assume first elements as largest number
    		 for (int i = 1; i < a.length; i++)  // iterate for loop from arrays 1st index (second element)
    			{
    				if (a[i] > max) 
    				{
    					max = a[i];
    				}
    				if (a[i] < min) 
    				{
    					min = a[i];
    				}
    			}
    		 
    		
    	}
		
		 logger.info("min: "+max +" max: "+min);
		
		
		//Math.round(1004/1000)*1000
		int rounded=DashboardAmount.roundNum(Math.round(max));
		logger.info("rounded value : "+rounded );
		model.addAttribute("stepsize",  rounded/10);
		model.addAttribute("max", rounded);
		paginationBean1.setItemList(data);
	
		
		model.addAttribute("paginationBean", paginationBean1);
		AuditTrail auditTrail = adminService.updateAuditTrailByAdmin(
				principal.getName(), principal.getName(), "login");

		if (auditTrail != null) {
			logger.info("Logged in by Admin : " + principal.getName());
		}

		// String threeMonthTxn = dashBoardService.getThreeMonthTxn();

		// model.addAttribute("month",threeMonthTxn);
		// model.addAttribute("", arg1)

		String[] accessibleUsers=PropertyLoad.getFile().getProperty("ACCESSIBLE_USERS").split(",");
		
		for(int i=0;i<accessibleUsers.length;i++)
		{
			//logger.info("usernames: "+userName[i].toString());
		}
		List<String> accessibleUsersList=Arrays.asList(accessibleUsers);
		
		/*String[] Users= userNameList.toArray(new String[userNameList.size()]);
		
		for(int i=0;i<Users.length;i++)
		{
			logger.info("Users: "+Users[i].toString());
		}
		
		logger.info(userNameList.contains("adminuser"));
		
		*/
		
		
		BankUser bankUser = adminService.loadBankUser(principal.getName());
	//	session.setAttribute("adminName",  bankUser.getFirstName());
		session.setAttribute("adminUserName",  bankUser.getUsername());
		session.setAttribute("userName",  bankUser.getUsername());
		session.setAttribute("userRole",  "BANK_ADMIN");
		session.setAttribute("accessibleUsersList", accessibleUsersList);
		request.setAttribute("adminusernamelogout", bankUser.getUsername());
		return TEMPLATE_DEFAULT;
		/*PageBean pageBean = new PageBean("BANK HOME", "home/home", Module.HOME);
		model.addAttribute("pageBean", pageBean);
		return TEMPLATE_DEFAULT;*/
	}

	@RequestMapping(value = { "/merchant/merchantweb", "/merchant/merchantweb*", "/merchant/merchantweb**" }, method = RequestMethod.GET)
	public String defaultPageMerchantWeb(final Model model,final java.security.Principal principal,HttpServletRequest request,
			RegAddMerchant regAddMerchant ) {
		logger.info("@@@@@ WELCOME TO MERCHANTWEB PORTAL !!! @@@@@ Login Person :" +principal.getName());
	
		
		//dashboard/dashbrd
		//PageBean pageBean = new PageBean("HOME MERCHANTWEB", "home/merchantwebHome", Module.HOME_WEB);
		//PageBean pageBean = new PageBean("HOME MERCHANTWEB", "dashboard/merchantdashbrd", Module.HOME_WEB);
		PageBean pageBean = new PageBean("HOME MERCHANTWEB", "dashboard/merchantdashbrd", Module.HOME_WEB);
		//System.out.println("display merchant web");
		model.addAttribute("pageBean", pageBean);
		 HttpSession session = request.getSession();
		   // String username = (String)request.getAttribute("un");
		 //Merchant merchant = me
		    Merchant merchant = merchantService.loadMerchant(principal.getName());
		    String EzypodCheck = "NO";
		    MID mid = merchantService.loadMidByMerchant_PK((merchant.getId()).toString());
		    //String ezyPodSumCheck = null;
		    if(mid.getEzyrecMid() != null) {
		    	
		    	TerminalDetails termDetails = merchantService.loadTerminalDetailsByMid(mid.getEzyrecMid());
		    	
		    	if((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
		    		EzypodCheck= "YES";
		    		session.setAttribute("ezyPodCheck",  "Yes");
		    		//ezyPodSumCheck = "YES";
		    	}else if((termDetails.getDeviceType() == "EZYREC")||(termDetails.getDeviceType().equals("EZYREC"))) {
		    		
		    		session.setAttribute("ezyPodCheck",  "No");
		    		//ezyPodSumCheck = "NO";
		    	}else {
		    		
		    		session.setAttribute("ezyPodCheck",  "No");
		    		//ezyPodSumCheck = "NO";
		    	}
		    	
		    }
		    
		   
		  //  logger.info("id: "+merchant.getId());
		    if(merchant.getPreAuth() != null){
		    	session.setAttribute("preAuth",  merchant.getPreAuth());
		    }else{
		    	session.setAttribute("preAuth",  "No");
		    }
		    logger.info("merchant id: "+merchant.getId());
		    
		    String ezyLinkCheck ="NO";
		    if(merchant.getAuth3DS()!= null) {
		    	
		    	if(merchant.getAuth3DS().equalsIgnoreCase("Yes")){
		    		ezyLinkCheck = "YES";
		    	}else {
		    		ezyLinkCheck ="NO";
		    		
		    	}
		    	
		    }
		    
		    List<MobileUser> mobileuser=mobileUser.loadMobileUserByFk(merchant.getId());
		    
		    
		    String eblBoost = "No";
		    for (MobileUser mu : mobileuser) 
		    {
		    	
		    	if (mu.getEnableBoost() != null) {
		    		//logger.info("enableBoost check: "+mu.getEnableBoost());
		    		if (mu.getEnableBoost().equalsIgnoreCase("Yes")) {
		    			eblBoost = "Yes";
		    			//logger.info("enableBoost: " + eblBoost);
		    		}
		    		//logger.info("enableBoost: "+eblBoost);
		    	}
		    }
		    if(eblBoost.equalsIgnoreCase("Yes"))
			{
				
				session.setAttribute("enableBoost",  "Yes");
				//logger.info("enableBoost: "+eblBoost);
		    }
			else{
				session.setAttribute("enableBoost",  "No");
				//logger.info("enableBoost: "+eblBoost);
		    }
		    
		    String eblMoto = "No";
		    for (MobileUser mu : mobileuser) {
			if (mu.getEnableMoto() != null) {
				//logger.info("enableMoto check: " + mu.getEnableMoto());
				if (mu.getEnableMoto().equalsIgnoreCase("Yes")) {
					eblMoto = "Yes";
					//logger.info("enableMoto: " + eblMoto);
				}
				//logger.info("enableMoto: " + eblMoto);
			}
		    }
		    
		    if(eblMoto.equalsIgnoreCase("Yes")) {
		    	session.setAttribute("enableMoto",  "Yes");
		    	//logger.info("enableMoto: " + eblMoto);
		    }else{
		    	session.setAttribute("enableMoto",  "No");
		    	//logger.info("enableMoto: " + eblMoto);
		    }	
		  
		    //logger.info("moto Mid to check ezyAuth: "+merchant.getMid().getMotoMid());
		    if(merchant.getPreAuth()==null){
		    	merchant.setPreAuth("No");
		    }
		    String ezyAuthEnable = "No";
		   
		    if((merchant.getMid().getMotoMid()!=null && merchant.getPreAuth().equals("Yes"))){
		    	ezyAuthEnable = "Yes";
		    }
		    if(ezyAuthEnable.equalsIgnoreCase("Yes")){
				session.setAttribute("ezyAuthEnable",  "Yes");
				//logger.info("ezyAuthEnable: "+ezyAuthEnable);
		    }
			else{
				session.setAttribute("ezyAuthEnable",  "No");
				//logger.info("ezyAuthEnable: "+ezyAuthEnable);
		    }
		  logger.info("ezyAuthEnable: "+ezyAuthEnable);
		 // logger.info("check merchant logo:" + regAddMerchant.getMerchantLogo());  
		    session.setAttribute("merchantUserName",  merchant.getBusinessName());
		   // session.setAttribute("merchantLogo", regAddMerchant.getMerchantLogo());
		    
		    
		    
		    //System.out.println("display merchant web "+ merchant.getMid().getMid());
		    //System.out.println("Pre Auth merchant web "+ merchant.getPreAuth());
		    
		   /* logger.info("enableBoost: "+ mobileuser.getEnableBoost());
		    logger.info("enableMoto: "+ mobileuser.getEnableMoto());*/
		   
		    
		    int totalDevice = dashBoardService.getMerchantTotalDevice(merchant.getMid().getMid());
		    
		    model.addAttribute("currentMerchant" , merchant.getBusinessName());
		    
		    model.addAttribute("totalDevice", totalDevice);
		    
		    String totalTxn = dashBoardService.getMerchantCurrentMonthTxn(merchant);
		    logger.info("total txn:  "+totalTxn);
			
			model.addAttribute("totalTxn", totalTxn);
			
			String dailytxn = dashBoardService.getMerchantDailyTxn(merchant);
			
			logger.info("dailytxn:  "+dailytxn);
			model.addAttribute("dailytxn", dailytxn);
			
			
			String weeklytxn = dashBoardService.getMerchantWeeklyTxn(merchant);
			
			logger.info("weeklytxn:  "+weeklytxn);
			model.addAttribute("weeklytxn", weeklytxn);
		
			PaginationBean<DashBoardData> paginationBean = new PaginationBean<DashBoardData>();
			logger.info(" check 5 recent txn Amount Data ");
			dashBoardService.getMerchantLastFiveTxn(paginationBean,merchant,EzypodCheck,ezyLinkCheck);
			
			
			
			
			logger.info(" received 5 recent  txn Amount Data ");
			model.addAttribute("fiveTxnList", paginationBean);
			List<SixMonthTxnData> sixMonData = new ArrayList<SixMonthTxnData>();
			 sixMonData= dashBoardService.getMerchantSixMonTxn(merchant); 
			 
			 
		int totalDeviceCount = dashBoardService.getMerchantTotalDeviceCount(merchant);

		logger.info("totaldevice count: " + totalDeviceCount);

		model.addAttribute("deviceCount", totalDeviceCount);
		session.setAttribute("deviceCount", totalDeviceCount);
			//logger.info("check dashboard details:");
           
		//new changes for bar chart 05072017
		//List<ThreeMonthTxnData> txnCountData = new ArrayList<ThreeMonthTxnData>();
		
		
		/*PaginationBean<ThreeMonthTxnData> paginationBean1 = new PaginationBean<ThreeMonthTxnData>();
		
		List<ThreeMonthTxnData> txnListData = new ArrayList<ThreeMonthTxnData>();
		
		txnListData= dashBoardService.getMerchantTxnCount(merchant); 

		List<ThreeMonthTxnData> data = new ArrayList<ThreeMonthTxnData>();
		 for(ThreeMonthTxnData txnMonthData: txnListData){
			
			//logger.info("check monthly count12333:" + txnMonthData );
			
			//logger.info("Controller agentDet123333 : "+txnMonthData.getCount());
			//logger.info("Controller amount23333 : "+txnMonthData.getAmount());
			//logger.info("Controller date33333 : "+txnMonthData.getDate1());
			String a3="\"";
			for(String a1:txnMonthData.getDate1()){
				a3=a3+a1;
   			a3=a3+"\",\"";
	    	}
	    	//System.out.println("Data : "+a3);
	    	a3=a3+"\"";
	    	//System.out.println("Data : "+a3);
	    	a3=a3.replace(",\"\"", "");
	    	//System.out.println("Data : "+a3);
	    	txnMonthData.setMonth(a3);
	    	
	    	String b3="";
			for(String b1:txnMonthData.getAmount()){
				b3=b3+b1;
   			b3=b3+",";
	    	}
	    	//System.out.println("Data : "+b3);
	    	b3=b3+",";
	    	//System.out.println("Data : "+b3);
	    	b3=b3.replace(",,", "");
	    	//System.out.println("Data : "+b3);
	    	txnMonthData.setAmountData(b3);
	    	
	    	String c3="";
			for(String c1:txnMonthData.getCount()){
				c3=c3+c1;
   			c3=c3+",";
	    	}
	    	//System.out.println("Data : "+c3);
	    	c3=c3+",";
	    	//System.out.println("Data : "+c3);
	    	c3=c3.replace(",,", "");
	    	//System.out.println("Data : "+c3);
	    	txnMonthData.setCountData(c3); 
			
			
			
			model.addAttribute("threeMonthTxn", txnMonthData);
			 
			
			data.add(txnMonthData);
		
		}
		//End Agent 

		String a1=null,a2=null,a3=null;
		 Float min = 0.0f,max=0.0f;
		for(ThreeMonthTxnData t: txnListData) {
   		logger.info(" check= Amount Data "+t.getAmountData());
   		String[] amt=t.getAmountData().split(",");
   		a1=amt[0];
   		a2=amt[1];
   		a3=amt[2];
   		Float[] a= {Float.valueOf(a1),Float.valueOf(a2),Float.valueOf(a3)};
   		Arrays.sort(a);
   		
   		 min = a[0]; //  assume first elements as smallest number
   		 max = a[0]; //  assume first elements as largest number
   		 for (int i = 1; i < a.length; i++)  // iterate for loop from arrays 1st index (second element)
   			{
   				if (a[i] > max) 
   				{
   					max = a[i];
   				}
   				if (a[i] < min) 
   				{
   					min = a[i];
   				}
   			}
   		 
   		
   	}
		
		 logger.info("min: "+max +" max: "+min);
		
		
		//Math.round(1004/1000)*1000
		int rounded=DashboardAmount.roundNum(Math.round(max));
		logger.info("rounded value : "+rounded );
		model.addAttribute("stepsize",  rounded/10);
		model.addAttribute("max", rounded);
		paginationBean1.setItemList(data);*/
		
		
		PaginationBean<SixMonthTxnData> paginationBean1 = new PaginationBean<SixMonthTxnData>();
		List<SixMonthTxnData> data = new ArrayList<SixMonthTxnData>();
			for(SixMonthTxnData txnMonthData: sixMonData){
			
			//logger.info("check monthly count12333:" + txnMonthData );
			
			//logger.info("Controller agentDet123333 : "+txnMonthData.getCount());
			//logger.info("Controller amount23333 : "+txnMonthData.getAmount());
			//logger.info("Controller date33333 : "+txnMonthData.getDate1());
			String a3="\"";
			for(String a1:txnMonthData.getDate1()){
				a3=a3+a1;
   			a3=a3+"\",\"";
	    	}
	    	//System.out.println("Data : "+a3);
	    	a3=a3+"\"";
	    	//System.out.println("Data : "+a3);
	    	a3=a3.replace(",\"\"", "");
	    	//System.out.println("Data : "+a3);
	    	txnMonthData.setMonth(a3);
	    	
	    	String b3="";
			for(String b1:txnMonthData.getAmount()){
				b3=b3+b1;
   			b3=b3+",";
	    	}
	    	//System.out.println("Data : "+b3);
	    	b3=b3+",";
	    	//System.out.println("Data : "+b3);
	    	b3=b3.replace(",,", "");
	    	//System.out.println("Data : "+b3);
	    	txnMonthData.setAmountData(b3);
	    	
	    	
	    	
	    	String c3="";
			for(String c1:txnMonthData.getCount()){
				c3=c3+c1;
   			c3=c3+",";
	    	}
	    	//System.out.println("Data : "+c3);
	    	c3=c3+",";
	    	//System.out.println("Data : "+c3);
	    	c3=c3.replace(",,", "");
	    	//System.out.println("Data : "+c3);
	    	txnMonthData.setCountData(c3); 
			
			
			
			model.addAttribute("threeMonthTxn", txnMonthData);
			 
			
			data.add(txnMonthData);
		
		}
		//End Agent 

		String a1=null,a2=null,a3=null,a4=null,a5=null,a6=null;
		 Float min = 0.0f,max=0.0f;
		for(SixMonthTxnData t: sixMonData) {
   		logger.info(" check= Amount Data "+t.getAmountData());
   		String[] amt=t.getAmountData().split(",");
   		a1=amt[0];
   		a2=amt[1];
   		a3=amt[2];
   		a4=amt[3];
   		a5=amt[4];
   		a6=amt[5];
   		Float[] a= {Float.valueOf(a1),Float.valueOf(a2),Float.valueOf(a3)
   				,Float.valueOf(a4),Float.valueOf(a5),Float.valueOf(a6)};

   		Arrays.sort(a);
   		
   		 min = a[0]; //  assume first elements as smallest number
   		 max = a[0]; //  assume first elements as largest number
   		 for (int i = 1; i < a.length; i++)  // iterate for loop from arrays 1st index (second element)
   			{
   				if (a[i] > max) 
   				{
   					max = a[i];
   				}
   				if (a[i] < min) 
   				{
   					min = a[i];
   				}
   			}
   		 
   		
   	}
		
		 logger.info("min: "+max +" max: "+min);
		
		
		//Math.round(1004/1000)*1000
		int rounded=DashboardAmount.roundNum(Math.round(max));
		logger.info("rounded value : "+rounded );
		model.addAttribute("stepsize",  rounded/10);
		model.addAttribute("max", rounded);
		paginationBean1.setItemList(data);

		AuditTrail auditTrail = merchantService.updateAuditTrailByMerchant(
				principal.getName(), principal.getName(), "login");

		if (auditTrail != null) {
			logger.info("Logged in by Merchant : " + principal.getName());
		}
		logger.info("ezypodchk"+EzypodCheck);
		logger.info("getEzyrecMid"+merchant.getMid().getEzyrecMid());
		model.addAttribute("paginationBean", paginationBean1);
		model.addAttribute("merchant", merchant);
		//logger.info("in homecontroller dashboard: ");
		model.addAttribute("checkDeviceStatus", "YES");	
		
		model.addAttribute("deviceCheck", "YES");
		//model.addAttribute("ezyPodCheck", ezyPodSumCheck);
		session.setAttribute("userName",  merchant.getUsername()); 
		session.setAttribute("merchant", merchant); 
		
		//session.setAttribute("ezyPodCheck", ezyPodSumCheck); 
		
		session.setAttribute("userRole",  "BANK_MERCHANT");
		//request.setAttribute("userName", principal.getName());
		return TEMPLATE_MERCHANT;
	}
	
	
	@RequestMapping(value = { "/merchants/merchantsweb"}, method = RequestMethod.GET)
	public String viewPageMerchantWeb(final Model model,final java.security.Principal principal,HttpServletRequest request,
			RegAddMerchant regAddMerchant,
			@RequestParam("username") String userName,@RequestParam("id") Long id) {
		logger.info("@@@@@ VIEW MERCHANTWEB PORTAL  by Admin !!! @@@@@ Login Person :"
			+principal.getName()+" Merchant: "+userName);
		/*logger.info("redirecting user to login screen from:"
				+ request.getRequestURI());*/
		HttpSession session = request.getSession(true);
		logger.info("current session id: in merchant \n"+session.getId());
		
		
		session.setAttribute("MerchantProfile", "Yes");
		session.setAttribute("userRole",  "BANK_MERCHANT");
		String userName1 = (String) session.getAttribute("userName");
		String userRole1 = (String) session.getAttribute("userRole");
		int totalDevice;
		
	//	logger.info("username: "+userName1+" userRole: "+userRole1);
	//	logger.info("Current expiring session id: /loginexpired: \n" + session.getId() );
		//logger.info("session expired check:1" + session.getId());
		// logger.info("logout time "+new Date(session.getCreationTime())+new
		// Date(session.getLastAccessedTime()));


		//dashboard/dashbrd
		//PageBean pageBean = new PageBean("HOME MERCHANTWEB", "home/merchantwebHome", Module.HOME_WEB);
		//PageBean pageBean = new PageBean("HOME MERCHANTWEB", "dashboard/merchantdashbrd", Module.HOME_WEB);
		PageBean pageBean = new PageBean("HOME MERCHANTWEB", "dashboard/merchantdashbrd", Module.HOME_WEB);
		//System.out.println("display merchant web");
		model.addAttribute("pageBean", pageBean);
		 //HttpSession session = request.getSession();
		   // String username = (String)request.getAttribute("un");
		 //Merchant merchant = me
		    Merchant merchant = merchantService.loadMerchantbyid(id);
		    
		    String ezyPodSumCheck= null;
		    String EzypodCheck= "NO";
		    
		    MID mid = merchantService.loadMidByMerchant_PK(String.valueOf(merchant.getId()));
		    //String ezyPodSumCheck = null;
		    if(mid.getEzyrecMid() != null) {
		    	
		    	TerminalDetails termDetails = merchantService.loadTerminalDetailsByMid(mid.getEzyrecMid());
		    	
		    	if((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
		    		EzypodCheck= "YES";
		    		
		    		session.setAttribute("ezyPodCheck",  "Yes");
		    		//ezyPodSumCheck = "YES";
		    	}else if((termDetails.getDeviceType() == "EZYREC")||(termDetails.getDeviceType().equals("EZYREC"))) {
		    		
		    		session.setAttribute("ezyPodCheck",  "No");
		    		//ezyPodSumCheck = "NO";
		    	}else {
		    		
		    		session.setAttribute("ezyPodCheck",  "No");
		    		//ezyPodSumCheck = "NO";
		    	}
		    	
		    }
		   
		    logger.info("id: "+merchant.getId());
		    if(merchant.getPreAuth() != null){
		    	session.setAttribute("preAuth",  merchant.getPreAuth());
		    }else{
		    	session.setAttribute("preAuth",  "No");
		    }
		    logger.info("merchant id: "+merchant.getId());
		    List<MobileUser> mobileuser=mobileUser.loadMobileUserByFk(merchant.getId());
		    
		    
		    String eblBoost = "No";
		    for (MobileUser mu : mobileuser)  {
		    	if (mu.getEnableBoost() != null) {
		    		if (mu.getEnableBoost().equalsIgnoreCase("Yes")) {
		    			eblBoost = "Yes";
		    		}
		    	}
		    }
		    if(eblBoost.equalsIgnoreCase("Yes")){
				
				session.setAttribute("enableBoost",  "Yes");
				//logger.info("enableBoost: "+eblBoost);
		    }else{
				session.setAttribute("enableBoost",  "No");
				//logger.info("enableBoost: "+eblBoost);
		    }
		    
		    String eblMoto = "No";
		    for (MobileUser mu : mobileuser) {
			if (mu.getEnableMoto() != null) {
				//logger.info("enableMoto check: " + mu.getEnableMoto());
				if (mu.getEnableMoto().equalsIgnoreCase("Yes")) {
					eblMoto = "Yes";
					//logger.info("enableMoto: " + eblMoto);
				}
				//logger.info("enableMoto: " + eblMoto);
			}
		    }
		    
		    if(eblMoto.equalsIgnoreCase("Yes")) {
		    	session.setAttribute("enableMoto",  "Yes");
		    	//logger.info("enableMoto: " + eblMoto);
		    }else{
		    	session.setAttribute("enableMoto",  "No");
		    	//logger.info("enableMoto: " + eblMoto);
		    }	
		  
		   // logger.info("moto Mid to check ezyAuth: "+merchant.getMid().getMotoMid());
		    if(merchant.getPreAuth()==null){
		    	merchant.setPreAuth("No");
		    }
		    String ezyAuthEnable = "No";
		   
		    if(merchant.getMid().getMotoMid()!=null && (merchant.getPreAuth().equals("Yes") || merchant.getPreAuth()=="Yes")){
		    	ezyAuthEnable = "Yes";
		    }
		    if(ezyAuthEnable.equalsIgnoreCase("Yes")){
				
				session.setAttribute("ezyAuthEnable",  "Yes");
				//logger.info("ezyAuthEnable: "+ezyAuthEnable);
		    }else{
				session.setAttribute("ezyAuthEnable",  "No");
				//logger.info("ezyAuthEnable: "+ezyAuthEnable);
		    }
		    
		    String ezyLinkCheck ="NO";
		    if(merchant.getAuth3DS()!= null) {
		    	
		    	if(merchant.getAuth3DS().equalsIgnoreCase("Yes")){
		    		ezyLinkCheck = "YES";
		    	}else {
		    		ezyLinkCheck ="NO";
		    		
		    	}
		    	
		    }
			
			
		 // logger.info("check merchant logo:" + regAddMerchant.getMerchantLogo());  
		    session.setAttribute("merchantUserName",  merchant.getBusinessName());
		   // session.setAttribute("merchantLogo", regAddMerchant.getMerchantLogo());
		    
		    
		    
		    //System.out.println("display merchant web "+ merchant.getMid().getMid());
		    //System.out.println("Pre Auth merchant web "+ merchant.getPreAuth());
		    
		   /* logger.info("enableBoost: "+ mobileuser.getEnableBoost());
		    logger.info("enableMoto: "+ mobileuser.getEnableMoto());*/
		   /* if(merchant.getMid().getMid() != null) {
		     totalDevice = dashBoardService.getMerchantTotalDevice(merchant.getMid().getMid());
		    }else {
		     totalDevice = dashBoardService.getMerchantTotalDevice(merchant.getMid().getUmMid());
		    }*/
		    
		    totalDevice = dashBoardService.getMerchantTotalDevice(merchant.getMid().getMid());
		    
		    model.addAttribute("currentMerchant" , merchant.getBusinessName());
		    
		    model.addAttribute("totalDevice", totalDevice);
		    
		    String totalTxn = dashBoardService.getMerchantCurrentMonthTxn(merchant);
		    logger.info("total txn:  "+totalTxn);
			
			model.addAttribute("totalTxn", totalTxn);
			
			String dailytxn = dashBoardService.getMerchantDailyTxn(merchant);
			
			logger.info("dailytxn:  "+dailytxn);
			model.addAttribute("dailytxn", dailytxn);
			
			
			String weeklytxn = dashBoardService.getMerchantWeeklyTxn(merchant);
			
			logger.info("weeklytxn:  "+weeklytxn);
			model.addAttribute("weeklytxn", weeklytxn);
		
			PaginationBean<DashBoardData> paginationBean = new PaginationBean<DashBoardData>();
			logger.info(" check 5 recent txn Amount Data ");
			dashBoardService.getMerchantLastFiveTxn(paginationBean,merchant,EzypodCheck,ezyLinkCheck);
			
			logger.info(" received 5 recent  txn Amount Data ");
			model.addAttribute("fiveTxnList", paginationBean);
			
			 List<SixMonthTxnData> sixMonData = new ArrayList<SixMonthTxnData>();
			 sixMonData= dashBoardService.getMerchantSixMonTxn(merchant); 
			 
			 
		int totalDeviceCount = dashBoardService.getMerchantTotalDeviceCount(merchant);

		logger.info("totaldevice count: " + totalDeviceCount);

		model.addAttribute("deviceCount", totalDeviceCount);
		session.setAttribute("deviceCount", totalDeviceCount);
			//logger.info("check dashboard details:");

		PaginationBean<SixMonthTxnData> paginationBean1 = new PaginationBean<SixMonthTxnData>();
		List<SixMonthTxnData> data = new ArrayList<SixMonthTxnData>();
			for(SixMonthTxnData txnMonthData: sixMonData){
			
			String a3="\"";
			for(String a1:txnMonthData.getDate1()){
				a3=a3+a1;
    			a3=a3+"\",\"";
	    	}
	    	//System.out.println("Data : "+a3);
	    	a3=a3+"\"";
	    	//System.out.println("Data : "+a3);
	    	a3=a3.replace(",\"\"", "");
	    	//System.out.println("Data : "+a3);
	    	txnMonthData.setMonth(a3);
	    	
	    	String b3="";
			for(String b1:txnMonthData.getAmount()){
				b3=b3+b1;
    			b3=b3+",";
	    	}
	    	//System.out.println("Data : "+b3);
	    	b3=b3+",";
	    	//System.out.println("Data : "+b3);
	    	b3=b3.replace(",,", "");
	    	//System.out.println("Data : "+b3);
	    	txnMonthData.setAmountData(b3);
	    	
	    	String c3="";
			for(String c1:txnMonthData.getCount()){
				c3=c3+c1;
    			c3=c3+",";
	    	}
	    	//System.out.println("Data : "+c3);
	    	c3=c3+",";
	    	//System.out.println("Data : "+c3);
	    	c3=c3.replace(",,", "");
	    	//System.out.println("Data : "+c3);
	    	txnMonthData.setCountData(c3); 
			
			
			
			model.addAttribute("threeMonthTxn", txnMonthData);
			 
			
			data.add(txnMonthData);
		
		}
		//End Agent 

		String a1=null,a2=null,a3=null,a4=null,a5=null,a6=null;
		 Float min = 0.0f,max=0.0f;
		for(SixMonthTxnData t: sixMonData) {
    		logger.info(" check= Amount Data "+t.getAmountData());
    		String[] amt=t.getAmountData().split(",");
    		a1=amt[0];
    		a2=amt[1];
    		a3=amt[2];
    		a4=amt[3];
    		a5=amt[4];
    		a6=amt[5];
    		Float[] a= {Float.valueOf(a1),Float.valueOf(a2),Float.valueOf(a3)
    				,Float.valueOf(a4),Float.valueOf(a5),Float.valueOf(a6)};
    		Arrays.sort(a);
    		
    		 min = a[0]; //  assume first elements as smallest number
    		 max = a[0]; //  assume first elements as largest number
    		 for (int i = 1; i < a.length; i++)  // iterate for loop from arrays 1st index (second element)
    			{
    				if (a[i] > max) 
    				{
    					max = a[i];
    				}
    				if (a[i] < min) 
    				{
    					min = a[i];
    				}
    			}
    		 
    		
    	}
		
		 logger.info("min: "+max +" max: "+min);
		
		
		//Math.round(1004/1000)*1000
		int rounded=DashboardAmount.roundNum(Math.round(max));
		logger.info("rounded value : "+rounded );
		model.addAttribute("stepsize",  rounded/10);
		model.addAttribute("max", rounded);
		paginationBean1.setItemList(data);
		
		

		AuditTrail auditTrail = merchantService.updateAuditTrailByMerchant(
				principal.getName(), principal.getName(), "viewByAdmin");

		if (auditTrail != null) {
			logger.info("Merchant Portal Viewed by Admin : " + principal.getName());
		}
		//model.addAttribute("paginationBean", paginationBean1);
		logger.info("ezypodchk"+EzypodCheck);
		logger.info("getEzyrecMid"+merchant.getMid().getEzyrecMid());
		model.addAttribute("merchant", merchant);
		logger.info("in homecontroller dashboard: ");
		
		model.addAttribute("checkDeviceStatus", "YES");	
		//model.addAttribute("ezyPodCheck", ezyPodSumCheck);
		model.addAttribute("deviceCheck", "YES");
		session.setAttribute("userName",  merchant.getUsername()); 
		session.setAttribute("merchant", merchant); 
		//session.setAttribute("ezyPodCheck", ezyPodSumCheck);
		session.setAttribute("userRole",  "BANK_MERCHANT");
		//request.setAttribute("userName", principal.getName());
		return TEMPLATE_MERCHANT;
	}
	
	
	
	// Non-Merchant Web
	// non_merchant/non_merchantweb
	@RequestMapping(value = { "/nonmerchant/nonmerchantweb",
			"/nonmerchant/nonmerchantweb*", "/nonmerchant/nonmerchantweb**" }, method = RequestMethod.GET)
	public String defaultPageNonMerchantWeb(final Model model,
			final java.security.Principal principal,
			HttpServletRequest request, RegAddMerchant regAddMerchant) {
		logger.info("@@@@@ WELCOME TO NON_MERCHANTWEB PORTAL !!! @@@@@ Login Person :" + principal.getName());
		
		
		PageBean pageBean = new PageBean("HOME NON_MERCHANT",
				"dashboard/nonmerchantdashbrd", Module.HOME_WEB);
		// System.out.println("display merchant web");
		model.addAttribute("pageBean", pageBean);
		HttpSession session = request.getSession();
		// String username = (String)request.getAttribute("un");
		// Merchant merchant = me
		Merchant nonmerchant = nonmerchantService.loadnonMerchant(principal
				.getName());
		//logger.info("non merchant username :" + nonmerchant.getUsername());
		//logger.info("non merchant non merchnat id :" + nonmerchant.getId());
		session.setAttribute("nonmerchantUserName", nonmerchant.getUsername());

		// if(nonmerchant.getPreAuth() != null){
		// session.setAttribute("preAuth", nonmerchant.getPreAuth());
		// }else{
		// session.setAttribute("preAuth", "No");
		// }

		// int totalDevice =
		// dashBoardService.getMerchantTotalDevice(nonmerchant.getMid().getMid());

		model.addAttribute("currentMerchant", nonmerchant.getBusinessName());
		// no device
		// model.addAttribute("totalDevice", totalDevice);
		//
		String totalTxn = dashBoardService.getnonMerchantCurrentMonthTxn(nonmerchant
				.getMid().getMid());
		//
		
		logger.info("transaction total: "+totalTxn);
		
		//

		//logger.info("check dashboard details:in homecontroller");
		List<ThreeMonthTxnData> data = new ArrayList<ThreeMonthTxnData>();
		// new changes for bar chart 05072017
		// List<ThreeMonthTxnData> txnCountData = new
		// ArrayList<ThreeMonthTxnData>();

		PaginationBean<ThreeMonthTxnData> paginationBean1 = new PaginationBean<ThreeMonthTxnData>();
		// paginationBean1.setCurrPage(currPage);
		// logger.info("check dashboard details787878:");
		List<ThreeMonthTxnData> txnListData = new ArrayList<ThreeMonthTxnData>();
		// logger.info("check mid details:" + merchant.getMid().getMid() );
	
		
		txnListData=dashBoardService.getnonMerchantTxnCount(nonmerchant.getMid().getMid());
		
		// txnListData.size());
		
		for (ThreeMonthTxnData txnMonthData : txnListData) {

			// logger.info("check monthly count12333:" + txnMonthData );

			// logger.info("Controller agentDet123333 : "+txnMonthData.getCount());
			// logger.info("Controller amount23333 : "+txnMonthData.getAmount());
			// logger.info("Controller date33333 : "+txnMonthData.getDate1());
			String a3 = "\"";
			for (String a1 : txnMonthData.getDate1()) {
				a3 = a3 + a1;
				a3 = a3 + "\",\"";
			}
			// System.out.println("Data : "+a3);
			a3 = a3 + "\"";
			// System.out.println("Data : "+a3);
			a3 = a3.replace(",\"\"", "");
			// System.out.println("Data : "+a3);
			txnMonthData.setMonth(a3);

			String b3 = "";
			for (String b1 : txnMonthData.getAmount()) {
				b3 = b3 + b1;
				b3 = b3 + ",";
			}
			// System.out.println("Data : "+b3);
			b3 = b3 + ",";
			// System.out.println("Data : "+b3);
			b3 = b3.replace(",,", "");
			// System.out.println("Data : "+b3);
			txnMonthData.setAmountData(b3);

			String c3 = "";
			for (String c1 : txnMonthData.getCount()) {
				c3 = c3 + c1;
				c3 = c3 + ",";
			}
			// System.out.println("Data : "+c3);
			c3 = c3 + ",";
			// System.out.println("Data : "+c3);
			c3 = c3.replace(",,", "");
			// System.out.println("Data : "+c3);
			txnMonthData.setCountData(c3);
			 model.addAttribute("totalTxn", totalTxn);
			model.addAttribute("threeMonthTxn", txnMonthData);

			data.add(txnMonthData);

		}
		// End Agent

		String a1=null,a2=null,a3=null;
		 Float min = 0.0f,max=0.0f;
		for(ThreeMonthTxnData t: txnListData) {
    		logger.info(" check= Amount Data "+t.getAmountData());
    		String[] amt=t.getAmountData().split(",");
    		a1=amt[0];
    		a2=amt[1];
    		a3=amt[2];
    		Float[] a= {Float.valueOf(a1),Float.valueOf(a2),Float.valueOf(a3)};
    		Arrays.sort(a);
    		
    		 min = a[0]; //  assume first elements as smallest number
    		 max = a[0]; //  assume first elements as largest number
    		 for (int i = 1; i < a.length; i++)  // iterate for loop from arrays 1st index (second element)
    			{
    				if (a[i] > max) 
    				{
    					max = a[i];
    				}
    				if (a[i] < min) 
    				{
    					min = a[i];
    				}
    			}
    		 
    		
    	}
		
		 logger.info("min: "+max +" max: "+min);
		
		
		//Math.round(1004/1000)*1000
		int rounded=DashboardAmount.roundNum(Math.round(max));
		logger.info("rounded value : "+rounded );
		model.addAttribute("stepsize",  rounded/10);
		model.addAttribute("max", rounded);
		paginationBean1.setItemList(data);
		AuditTrail auditTrail = merchantService.updateAuditTrailByNonMerchant(
				principal.getName(), principal.getName(), "login");

		if (auditTrail != null) {
			logger.info("NonMerchant Portal Login : " + principal.getName());
		}

		model.addAttribute("paginationBean", paginationBean1);
		session.setAttribute("userName",  nonmerchant.getUsername());
		session.setAttribute("userRole",  nonmerchant.getRole());
		
		session.setAttribute("userRole",  "NON_MERCHANT");
		// request.setAttribute("userName", principal.getName());

		return TEMPLATE_NONMERCHANT;
	}
	@RequestMapping(value = { "/agent/agentweb", "/agent/agentweb*", "/agent/agentweb**" }, method = RequestMethod.GET)
	public String defaultPageAgentWeb(final Model model,final java.security.Principal principal,HttpServletRequest request) {
		logger.info("@@@@@ WELCOME TO AGENTWEB PORTAL !!! @@@@@ Login Person :"+principal.getName());
		
		PageBean pageBean = new PageBean("HOME AGENT_WEB", "dashboard/agentdashbrd", Module.HOME_WEB);
		//System.out.println("display agent web : " + principal.getName() );
		model.addAttribute("pageBean", pageBean);
		 HttpSession session = request.getSession();
		 
		 Agent agent = agentService.loadAgent(principal.getName());
		   session.setAttribute("agentUserName",  agent.getUsername());
		 
		   logger.info("check agent username:" + agent.getUsername());
		 
		   
			 int totalDevice = dashBoardService.getAgentTotalDevice(agent.getId());
			    
			    model.addAttribute("totalDevice", totalDevice);
			    
			    
				
				String totalMerchant = dashBoardService.getAgentTotalMerchant(agent.getId());
				
				model.addAttribute("totalMerchant", totalMerchant);
				
				PaginationBean<DashBoardData> paginationBean = new PaginationBean<DashBoardData>();
				logger.info(" check 5 recent txn Amount Data ");
				List<Merchant> merchant1 = merchantService.loadMerchantByAgID(agent.getId());
				
				List<MID> ids = new ArrayList<MID>();
			    for(Merchant t: merchant1) {
			    	ids.add(t.getMid());
			    }
			    
			    logger.info("ids:  "+ids);
			    
				StringBuffer str = new StringBuffer();
			    StringBuffer strUm = new StringBuffer();
			    List<String> midList = new ArrayList<String>();
			    List<String> ummidList = new ArrayList<String>();
			    for(MID mi : ids) {
			    	
			    	if(mi.getMid() != null) {
			    		if(!mi.getMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMid());
			    			str.append("\",");*/
			    			midList.add(mi.getMid());
			    			
			    		}
			    		
			    	}
			    	if(mi.getMotoMid() != null) {
			    		if(!mi.getMotoMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getMotoMid());
			    		}
			    		
			    	}
			    	if(mi.getEzypassMid() != null) {
			    		if(!mi.getEzypassMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getEzypassMid());
			    		}
			    		
			    	}
			    	
			    	if(mi.getEzywayMid() != null) {
			    		if(!mi.getEzywayMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getEzywayMid());
			    		}
			    		
			    	}
			    	
			    	if(mi.getEzyrecMid() != null) {
			    		if(!mi.getEzyrecMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getEzyrecMid());
			    		}
			    		
			    	}
			    	
			    	if(mi.getUmMid() != null) {
			    		if(!mi.getUmMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getUmMid());
			    		}
			    		
			    	}
			    	
			    	if(mi.getUmMotoMid() != null) {
			    		if(!mi.getUmMotoMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getUmMotoMid());
			    		}
			    		
			    	}
			    	if(mi.getUmEzywayMid() != null) {
			    		if(!mi.getUmEzywayMid().isEmpty()) {
			    			/*str.append("\"");
			    			str.append(mi.getMotoMid());
			    			str.append("\",");*/
			    			midList.add(mi.getUmEzywayMid());
			    		}
			    		
			    	}
			    	
			    }
			    int u =0;
			    for(String strMid : midList) {
			    	
			    	if(u == 0) {
			    		str.append("\"");
		    			str.append(strMid);
		    			str.append("\"");
		    			u++;
			    	}else {		    	
				    	str.append(",\"");
		    			str.append(strMid);
		    			str.append("\"");
			    	}
			    }
			    logger.info("String of MIDs:  "+str);
			    
				dashBoardService.getAgentLastFiveTxn(paginationBean,str);
				
				logger.info(" received 5 recent  txn Amount Data ");
				model.addAttribute("fiveTxnList", paginationBean);
				
				//String totalTxn = dashBoardService.getAgentCurrentMonthTxn(agent.getId());
				
				String totalTxn = dashBoardService.getAgentMerchantMonthTxn(str);
				
				model.addAttribute("totalTxn", totalTxn);
			
		    
			session.setAttribute("userName",  agent.getUsername()); 
			
			session.setAttribute("userRole",  "AGENT_USER");
		//request.setAttribute("userName", principal.getName());
		return TEMPLATE_AGENT;
	}
 
 
 
 
 
	 //for 403 access denied page
	@RequestMapping(value = "/403", method = RequestMethod.GET)
	public ModelAndView accesssDenied() {
		logger.error("access denied");
		ModelAndView model = new ModelAndView();

		// check if user is login
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			model.addObject("username", userDetail.getUsername());
		}

		model.setViewName("403");
		return model;
	}
	
	
//new changes for superAgent login 18-04-2017 
	@RequestMapping(value = { "/superagent/agentlogin", "/superagent/agentlogin*", "/superagent/agentlogin**" }, method = RequestMethod.GET)
	public String defaultPageSuperAgentWeb(final Model model,final java.security.Principal principal,HttpServletRequest request) {
		logger.info("@@@@@ WELCOME TO SUPERAGENTWEB PORTAL !!! @@@@@");
		logger.info("Login Person :"+principal.getName());
		PageBean pageBean = new PageBean("HOME AGENT_WEB", "SuperAgent/dashbrd", Module.HOME_WEB);
		//System.out.println("display agent web : " + principal.getName() );
		model.addAttribute("pageBean", pageBean);
		
				//Total Device
				
				int totalDevice = dashBoardService.getTotalDevice();
				
				model.addAttribute("totalDevice", totalDevice);
				
				//Total transaction Current month
				
				String totalTxn = dashBoardService.getCurrentMonthTxn();
				
				model.addAttribute("totalTxn", totalTxn);
				
				//Total Merchant
				
				String totalMerchant = dashBoardService.getTotalMerchant();
				
				model.addAttribute("totalMerchant", totalMerchant);

			PaginationBean<DashBoardData> paginationBean = new PaginationBean<DashBoardData>();
			logger.info(" check 5 recent txn Amount Data ");
			dashBoardService.getLastFiveTxn(paginationBean);
			
			logger.info(" received 5 recent  txn Amount Data ");
			model.addAttribute("fiveTxnList", paginationBean);	
	
		 return TEMPLATE_SUPER_AGENT;
//end	 
}
	
	
	@RequestMapping(value = { "/superagent/hotelMerchantlogin", "/superagent/hotelMerchantlogin*", "/superagent/hotelMerchantlogin**" }, method = RequestMethod.GET)
	public String defaultPageHotelMerchantsWeb(final Model model,final java.security.Principal principal,HttpServletRequest request) {
		logger.info("@@@@@ WELCOME TO HOTELMERCHANTWEB PORTAL !!! @@@@@");
		logger.info("Login Person :"+principal.getName());
		PageBean pageBean = new PageBean("HOME AGENT_WEB", "hotelMerchants/dashboard", Module.HOME_WEB);
		//System.out.println("display agent web : " + principal.getName() );
		model.addAttribute("pageBean", pageBean);
		 HttpSession session = request.getSession();
		 
		 Agent agent = agentService.loadAgent(principal.getName());
		 
		    session.setAttribute("userName", agent.getUsername());
		 
		    
		   // int totalDevice = dashBoardService.getTotalDevice();
			
		    int totalDevice = dashBoardService.getAgentTotalDevice(agent.getId());
			model.addAttribute("totalDevice", totalDevice);
			
			/* String totalTxn = dashBoardService.getAgentCurrentMonthTxn(agent.getId());*/
		    
		    String totalTxn = dashBoardService.getAgentCurrentMonthTxnByAgID(agent.getId());
			
		    
		    logger.info("totalTxn: " + totalTxn);
			model.addAttribute("totalTxn", totalTxn);
			
			String totalMerchant = dashBoardService.getAgentTotalMerchant(agent.getId());
			
			model.addAttribute("totalMerchant", totalMerchant);
			logger.info("totalMerchant: " + totalMerchant);
			
			PaginationBean<DashBoardData> paginationBean = new PaginationBean<DashBoardData>();
			logger.info(" check 5 recent txn Amount Data ");
			List<Merchant> merchant1 = merchantService.loadMerchantByAgID(agent.getId());
			
			List<MID> ids = new ArrayList<MID>();
		    for(Merchant t: merchant1) {
		    	ids.add(t.getMid());
		    }
		    
		    logger.info("ids:  "+ids);
		    
			StringBuffer str = new StringBuffer();
		    StringBuffer strUm = new StringBuffer();
		    List<String> midList = new ArrayList<String>();
		    List<String> ummidList = new ArrayList<String>();
		    for(MID mi : ids) {
		    	
		    	if(mi.getMid() != null) {
		    		if(!mi.getMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMid());
		    			str.append("\",");*/
		    			midList.add(mi.getMid());
		    			
		    		}
		    		
		    	}
		    	if(mi.getMotoMid() != null) {
		    		if(!mi.getMotoMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			midList.add(mi.getMotoMid());
		    		}
		    		
		    	}
		    	if(mi.getEzypassMid() != null) {
		    		if(!mi.getEzypassMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			midList.add(mi.getEzypassMid());
		    		}
		    		
		    	}
		    	
		    	if(mi.getEzywayMid() != null) {
		    		if(!mi.getEzywayMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			midList.add(mi.getEzywayMid());
		    		}
		    		
		    	}
		    	
		    	if(mi.getEzyrecMid() != null) {
		    		if(!mi.getEzyrecMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			midList.add(mi.getEzyrecMid());
		    		}
		    		
		    	}
		    	
		    	if(mi.getUmMid() != null) {
		    		if(!mi.getUmMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			midList.add(mi.getUmMid());
		    		}
		    		
		    	}
		    	
		    	if(mi.getUmMotoMid() != null) {
		    		if(!mi.getUmMotoMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			ummidList.add(mi.getUmMotoMid());
		    		}
		    		
		    	}
		    	if(mi.getUmEzywayMid() != null) {
		    		if(!mi.getUmEzywayMid().isEmpty()) {
		    			/*str.append("\"");
		    			str.append(mi.getMotoMid());
		    			str.append("\",");*/
		    			ummidList.add(mi.getUmEzywayMid());
		    		}
		    		
		    	}
		    	
		    }
		    int u =0;
		    for(String strMid : midList) {
		    	
		    	if(u == 0) {
		    		str.append("\"");
	    			str.append(strMid);
	    			str.append("\"");
	    			u++;
		    	}else {		    	
			    	str.append(",\"");
	    			str.append(strMid);
	    			str.append("\"");
		    	}
		    }
		    logger.info("String of MIDs:  "+str);
		    
		    
		    int v=0;
		    for(String strMid : ummidList) {

		    	if(v == 0) {
		    		strUm.append("\"");
		    		strUm.append(strMid);
		    		strUm.append("\"");
	    			v++;
		    	}else {		    	
		    		strUm.append(",\"");
		    		strUm.append(strMid);
		    		strUm.append("\"");
		    	}
		    
		    }
		    
		    logger.info("String of UMMIDs:  "+strUm);
			
		    
		    dashBoardService.getHotelMerchantFiveTxn(paginationBean,str,strUm);
			
			logger.info(" received 5 recent  txn Amount Data ");
			model.addAttribute("fiveTxnList", paginationBean);
			
			
			List<SixMonthTxnData> sixMonData = new ArrayList<SixMonthTxnData>(); 
			 sixMonData= dashBoardService.getHotelMerchantSixMonTxn(agent.getId(),strUm); 
			
			
			 PaginationBean<SixMonthTxnData> paginationBean1 = new PaginationBean<SixMonthTxnData>();
				List<SixMonthTxnData> data = new ArrayList<SixMonthTxnData>();
					for(SixMonthTxnData txnMonthData: sixMonData){
					
					//logger.info("check monthly count12333:" + txnMonthData );
					
					//logger.info("Controller agentDet123333 : "+txnMonthData.getCount());
					//logger.info("Controller amount23333 : "+txnMonthData.getAmount());
					//logger.info("Controller date33333 : "+txnMonthData.getDate1());
					String a3="\"";
					for(String a1:txnMonthData.getDate1()){
						a3=a3+a1;
		   			a3=a3+"\",\"";
			    	}
			    	//System.out.println("Data : "+a3);
			    	a3=a3+"\"";
			    	//System.out.println("Data : "+a3);
			    	a3=a3.replace(",\"\"", "");
			    	//System.out.println("Data : "+a3);
			    	txnMonthData.setMonth(a3);
			    	
			    	String b3="";
					for(String b1:txnMonthData.getAmount()){
						b3=b3+b1;
		   			b3=b3+",";
			    	}
			    	//System.out.println("Data : "+b3);
			    	b3=b3+",";
			    	//System.out.println("Data : "+b3);
			    	b3=b3.replace(",,", "");
			    	//System.out.println("Data : "+b3);
			    	txnMonthData.setAmountData(b3);
			    	
			    	
			    	
			    	String c3="";
					for(String c1:txnMonthData.getCount()){
						c3=c3+c1;
		   			c3=c3+",";
			    	}
			    	//System.out.println("Data : "+c3);
			    	c3=c3+",";
			    	//System.out.println("Data : "+c3);
			    	c3=c3.replace(",,", "");
			    	//System.out.println("Data : "+c3);
			    	txnMonthData.setCountData(c3); 
					
					
					
					model.addAttribute("threeMonthTxn", txnMonthData);
					 
					
					data.add(txnMonthData);
				
				}
				//End Agent 

				String a1=null,a2=null,a3=null,a4=null,a5=null,a6=null;
				 Float min = 0.0f,max=0.0f;
				for(SixMonthTxnData t: sixMonData) {
		   		logger.info(" check= Amount Data "+t.getAmountData());
		   		String[] amt=t.getAmountData().split(",");
		   		a1=amt[0];
		   		a2=amt[1];
		   		a3=amt[2];
		   		a4=amt[3];
		   		a5=amt[4];
		   		a6=amt[5];
		   		Float[] a= {Float.valueOf(a1),Float.valueOf(a2),Float.valueOf(a3)
		   				,Float.valueOf(a4),Float.valueOf(a5),Float.valueOf(a6)};

		   		Arrays.sort(a);
		   		
		   		 min = a[0]; //  assume first elements as smallest number
		   		 max = a[0]; //  assume first elements as largest number
		   		 for (int i = 1; i < a.length; i++)  // iterate for loop from arrays 1st index (second element)
		   			{
		   				if (a[i] > max) 
		   				{
		   					max = a[i];
		   				}
		   				if (a[i] < min) 
		   				{
		   					min = a[i];
		   				}
		   			}
		   		 
		   		
		   	}
				
				 logger.info("min: "+max +" max: "+min);
				
				
				//Math.round(1004/1000)*1000
				int rounded=DashboardAmount.roundNum(Math.round(max));
				logger.info("rounded value : "+rounded );
				model.addAttribute("stepsize",  rounded/10);
				model.addAttribute("max", rounded);
				paginationBean1.setItemList(data);

				AuditTrail auditTrail = agentService.updateAuditTrailByAgent(
						principal.getName(), principal.getName(), "login");

				if (auditTrail != null) {
					logger.info("Logged in by Hotel Merchant Agent : " + principal.getName());
				}
		
		model.addAttribute("paginationBean", paginationBean1);
		session.setAttribute("userName",  agent.getUsername()); 
		
		session.setAttribute("userRole",  "SUPERAGENT_USER");
		// }
		 return TEMPLATE_HOTELMERCHANT;
//end	 
}
	
public String getMonth(int m){
		
		//System.out.println(" Data :"+m);
		String mon ="";
		switch(m){
		case 1:
			mon="JAN";
			break;
		case 2:
			mon="FEB";
			break;
		case 3:
			mon="MAR";
			break;
		case 4:
			mon="APR";
			break;
		case 5:
			mon="MAY";
			break;
		case 6:
			mon="JUN";
			break;
		case 7:
			mon="JUL";
			break;
		case 8:
			mon="AUG";
			break;
		case 9:
			mon="SEP";
			break;
		case 10:
			mon="OCT";
			break;
		case 11:
			mon="NOV";
			break;
		case 12:
		  mon="DEC";
		break;
		
		
		default:
			 mon="";
				break;	
		}
	
		return mon;
		
	}
public int roundNum(int max) {
	// max=934234240;
	int len=String.valueOf(max).length();
	int rounded = 0;
	
	if(len==9) {
		rounded = ((Math.round(max)+99999999) / 100000000 ) * 100000000;
	}else if(len==8) {
		rounded = ((Math.round(max)+9999999) / 10000000 ) * 10000000;
	}else if(len==7) {
		rounded = ((Math.round(max)+999999) / 1000000 ) * 1000000;
	}else if(len==6) {
		rounded = ((Math.round(max)+99999) / 100000 ) * 100000;
	}else if(len == 5) {
		rounded = ((Math.round(max)+9999) / 10000 ) * 10000;
	}else if(len == 4) {
		rounded = ((Math.round(max)+999) / 1000 ) * 1000;
	}else if(len == 3) {
		rounded = ((Math.round(max)+99) / 100 ) * 100;
	}
	String data=String.valueOf(rounded);
	String d=data.replaceFirst(Pattern.quote(data.substring(0,1)), "10");
	
	
	return Integer.parseInt(d);
	
}
}