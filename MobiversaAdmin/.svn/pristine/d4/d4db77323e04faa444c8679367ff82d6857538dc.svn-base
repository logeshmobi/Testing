package com.mobiversa.payment.controller;

import java.io.IOException;
import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Principal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.mobiversa.common.bo.CountryCurPhone;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.MobileUser;
import com.mobiversa.common.bo.PreAuthorization;
import com.mobiversa.common.bo.Receipt;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.common.bo.TransactionRequest;
import com.mobiversa.common.bo.TransactionResponse;
import com.mobiversa.payment.controller.bean.PageBean;
import com.mobiversa.payment.controller.bean.PageBean.Module;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.dto.Country;
import com.mobiversa.payment.dto.DataTransferObject;
import com.mobiversa.payment.dto.PreAuthTxnDet;
import com.mobiversa.payment.service.MerchantService;
import com.mobiversa.payment.service.MotoWebService;
import com.mobiversa.payment.service.TransactionService;
import com.mobiversa.payment.util.CardType;
import com.mobiversa.payment.util.ResponseDetails;

@Controller
@RequestMapping(value = MerchantPreAuthController.URL_BASE)
public class MerchantPreAuthController extends BaseController {
	
	@Autowired
	private MerchantService merchantService;
	@Autowired
	private TransactionService transactionService;
	private MotoWebService motoWebService;

	public static final String URL_BASE = "/merchantpreauth";
	private static final Logger logger=Logger.getLogger(MerchantPreAuthController.class);
	@RequestMapping(value = { "", "/", "/**/*" }, method = RequestMethod.GET)
	public String defaultPage() {
		//logger.info("Test1");
		return "redirect:" + URL_BASE + "/list/1";
	}

	@RequestMapping(value = { "/list/{currPage}" }, method = RequestMethod.GET)
	public String displayTransactionSummary(final Model model, final java.security.Principal principal,
			HttpServletRequest request,
			@PathVariable final int currPage) {
		logger.info("PreAuth transaction");
		PageBean pageBean = new PageBean("transactions list", "merchantweb/EZYAUTH/transactionList",
				Module.TRANSACTION_WEB, "merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		
		//Merchant currentMerchant = merchantService.loadMerchant(principal.getName());
		
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		model.addAttribute("pageBean", pageBean);
		
		PaginationBean<PreAuthorization> paginationBean = new PaginationBean<PreAuthorization>();
		
		paginationBean.setCurrPage(currPage);
		transactionService.getPreAuthTxn(paginationBean, currentMerchant);
		//logger.info("currently logged in as"+ paginationBean.getItemList() );
	
		for(PreAuthorization forSettlement:paginationBean.getItemList()){
			
			if(forSettlement.getAmount()!=null){
				double amount=0;
				amount=Double.parseDouble(forSettlement.getAmount())/100;
				forSettlement.setAmount(amount+"0");
			}
			if (forSettlement.getTxnType()==null) {
				/*if () {
					forSettlement.setStatus("SETTLED");
				}*/
				if (forSettlement.getStatus().equals("P") || forSettlement.getStatus().equals("A") || forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("PREAUTH SALE");
				}
				
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("PREAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D") || forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("PRE-AUTHORIZATION");
				}
				
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}
			} else {

				/*if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}*/
				if (forSettlement.getStatus().equals("P") || forSettlement.getStatus().equals("A") || forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("EZYAUTH SALE");
				}
				
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("EZYAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D") || forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("EZYAUTH");
				}
				
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}

			}
			if(forSettlement.getDate()!=null && forSettlement.getTime()!=null){
				try {
					
					String rd = new SimpleDateFormat("dd-MMM-yyyy").format(
							new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(forSettlement.getTimeStamp()));
					
					String rt = new SimpleDateFormat("HH:mm:ss").format(
							new SimpleDateFormat("HHmmss").parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {}

			}
			
			logger.info("loadTxnDetailsByID: "+forSettlement.getTrxId());
			TransactionRequest txReq =  transactionService.loadTxnDetailsByID(forSettlement.getTrxId());
			forSettlement.setNumOfSale(txReq.getMaskedPan());//maskedpan
			logger.info("NumOfSale: "+forSettlement.getNumOfSale());
		}

		model.addAttribute("paginationBean", paginationBean);
		//TODO to get tid and device id
		
		logger.info("mid: "+ currentMerchant.getMid().getMid());
		List<TerminalDetails> terminalDetails=transactionService.getTerminalDetails(currentMerchant.getMid().getMid(),
				currentMerchant.getMid().getMotoMid(),currentMerchant.getMid().getEzyrecMid());
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			//tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetails) {
	    //	String did = t.getDeviceId();
			String did = t.getDeviceId().toString();
			dIdSet.add(did.toString());

		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		return TEMPLATE_MERCHANT;
	}

	
	@RequestMapping(value = { "/search" }, method = RequestMethod.GET)
	public String displayTransactionSearchByTid(final Model model, final java.security.Principal principal,	HttpServletRequest request,
			@RequestParam (required = false )final String tid,
			@RequestParam (required = false ) String fromDate,
			@RequestParam (required = false ) String toDate,
			@RequestParam (required = false )String status,
		//	@RequestParam (required = false )String txnType,
		
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		String fromDate1 = null;
		String toDate1 = null;
		PageBean pageBean = null;
		/*logger.info("fromDate & toDate & Tid :" + fromDate + ": & :" + toDate
				+ ": & :" + tid + ": & :" + txnType);*/
		logger.info("fromDate & toDate & Tid :" + fromDate + ": & :" + toDate
				+ ": & :" + tid);
		if (fromDate != null && toDate != null) {
			try {
				fromDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(fromDate));
				toDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		logger.info("fromDate & toDate & Tid :" + fromDate1 + ": & :" + toDate1
				+ ": & :" + tid );
		
		PaginationBean<PreAuthorization> paginationBean = new PaginationBean<PreAuthorization>();
		paginationBean.setCurrPage(currPage);
		
		transactionService.searchPreAuth(fromDate1, toDate1, tid, status,
				paginationBean);

		model.addAttribute("fromDate", fromDate1);

		model.addAttribute("toDate", toDate1);

		model.addAttribute("tid", tid);

		model.addAttribute("status", status);

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		logger.info("test data " + paginationBean.getItemList());
		for (PreAuthorization forSettlement : paginationBean.getItemList()) {
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				forSettlement.setAmount(amount + "0");
			}
			if (forSettlement.getTxnType()==null) {
				/*if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}*/
				if (forSettlement.getStatus().equals("P") || forSettlement.getStatus().equals("A") || forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("PREAUTH SALE");
				}
				
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("PREAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D") || forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("PRE-AUTHORIZATION");
				}
				
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}
			} else {

				/*if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}*/
				if (forSettlement.getStatus().equals("P") || forSettlement.getStatus().equals("A") || forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("EZYAUTH SALE");
				}
				
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("EZYAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D") || forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("EZYAUTH");
				}
				
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}

			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {

					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(forSettlement.getTimeStamp()));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
			
			logger.info("loadTxnDetailsByID: "+forSettlement.getTrxId());
			TransactionRequest txReq =  transactionService.loadTxnDetailsByID(forSettlement.getTrxId());
			forSettlement.setNumOfSale(txReq.getMaskedPan());//maskedpan
			logger.info("NumOfSale: "+forSettlement.getNumOfSale());
		}
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info("currently logged in as " +"currently logged in as " );
		List<TerminalDetails> terminalDetails = null;

		/*if (!txnType.equals("MOTO")) {
			pageBean = new PageBean("transactions list",
					"merchantweb/preauth/transactionList",
					Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			terminalDetails = transactionService
					.getTerminalDetails(currentMerchant.getMid().getMid());

		} else {*/
			pageBean = new PageBean("transactions list",
					"merchantweb/EZYAUTH/transactionList",
					Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			terminalDetails = transactionService
					.getTerminalDetails(currentMerchant.getMid().getMid(),currentMerchant.getMid().getMotoMid()
							,currentMerchant.getMid().getEzyrecMid());

		//}

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {

			String mtid = t.getTid();

			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId().toString();
			dIdSet.add(did.toString());
		}

		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}


	
	@RequestMapping(value = { "/details/{id}" }, method = RequestMethod.GET)
	public String displayTransactionDetails(final Model model, @PathVariable final String id,
			HttpServletRequest request,HttpServletResponse response,Principal principal) throws InvalidKeyException, NoSuchAlgorithmException, IOException, URISyntaxException 
 {
		logger.info("in Transaction details");
		
		HttpSession session = request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");

		/*PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/CardReceiptNew", null);*/
		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/receipt_v0.2", null);
		logger.info("Transaction Id :" + id);
		TransactionRequest trRequest = transactionService
				.loadTransactionRequest(id);
		TransactionResponse trResponse = transactionService
				.loadTransactionResponse(id);
		// Merchant merchant =
		// merchantService.loadMerchant(principal.getName());
		Merchant merchant = merchantService.loadMerchant(myName);
		PreAuthorization settle = transactionService.getPreAuthTxn(id);
		Receipt a = transactionService.getReceiptSignature(id);

		DataTransferObject dt = new DataTransferObject();
		if (a != null) {
			if (a.getSignature() != null) {
				String signdata = new String(a.getSignature());
				// System.out.println(" String sign :"+signdata);
				dt.setSign(signdata);
			}
		}

		String txn = settle.getStatus();
		String pinEntry = settle.getPinEntry();
		dt.setPinEntry(pinEntry);
		if (settle.getTxnType()==null) {
			if (txn.equals("D") || txn.equals("E")) {
				dt.setTxnType("PRE-AUTHORIZATION");

			} else if (txn.equals("P") || txn.equals("A") || txn.equals("S")) {
				dt.setTxnType("PREAUTH SALE");

			} else {
				dt.setTxnType("PREAUTH CANCEL");

			}
		} else  {

			if (txn.equals("D") || txn.equals("E")) {
				dt.setTxnType("EZYAUTH");

			} else if (txn.equals("P") || txn.equals("A") || txn.equals("S")) {
				dt.setTxnType("EZYAUTH SALE");

			} else {
				dt.setTxnType("EZYAUTH CANCEL");

			}

		}

		dt.setMerchantName(merchant.getBusinessName());
		dt.setMerchantAddr1(merchant.getBusinessAddress1());
		dt.setMerchantAddr2(merchant.getBusinessAddress2());
		dt.setMerchantCity(merchant.getCity());
		dt.setMerchantPostCode(merchant.getPostcode());
		dt.setMerchantContNo(merchant.getBusinessContactNumber());
		dt.setMerchantState(merchant.getState());

		dt.setLatitude(trRequest.getLatitude());
		dt.setLongitude(trRequest.getLongitude());
		//dt.setMapUrl(UrlSigner.GenerateMapImage(dt.getLatitude(), dt.getLongitude()));
		// new changes for receipt
		dt.setBatchNo(settle.getBatchNo());
		logger.info("get batchno:" + dt.getBatchNo());

		if (settle.getInvoiceId() != null) {

			dt.setRefNo(settle.getInvoiceId());
			logger.info("invoice id:" + dt.getRefNo());
		} else {
			dt.setRefNo("");
		}

		// dt.setTxnType(trRequest.getTxnType());
		dt.setTid(trRequest.getTid());
		dt.setMid(trRequest.getMid());
		dt.setAmount(trRequest.getAmount());
		dt.setAdditionAmount(trRequest.getAdditionalAmount());
		// String rrn=HexatoAscii.hexaToAscii(trResponse.getRrn(), true);
		// dt.setRrn(rrn);
		dt.setAid(trRequest.getAid());
		dt.setStan(trRequest.getStan());
		dt.setMaskedPan(trRequest.getMaskedPan());
		/*
		 * if(trRequest.getAid()!=null&&trRequest.getCardHolderName()!=null){
		 * //dt.setCardType(CardType.getCardType(trRequest.getAid()));
		 * dt.setCardHolderName(trRequest.getCardHolderName()); }
		 */
		// new changes for receipt 23082017
		

		if (trRequest.getCardHolderName() != null) {
			dt.setCardHolderName(trRequest.getCardHolderName());

		} else {
			dt.setCardHolderName("");
		}
		if (trRequest.getCardScheme() != null
				&& trRequest.getCardType() != null) {

			dt.setCardType(trRequest.getCardScheme() + " "
					+ trRequest.getCardType());

			logger.info("Card Type from Txn Request Card Scheme and Card Type : "
					+ dt.getCardType());

		} else if (trRequest.getApplicationLabel() != null) {
			dt.setCardType(trRequest.getApplicationLabel());
		} else if (trRequest.getApplicationLabel() == null
				&& trRequest.getAid() != null) {
			dt.setCardType(CardType.getCardType(trRequest.getAid()));
			// mJson.setCardHolderName(trRequest.getCardHolderName());
		} else {
			dt.setCardType(" ");
		}
		// end
		/*dt.setDate(trResponse.getLocalDate());
		dt.setTime(trResponse.getLocalTime());*/


		// String
		// resposecode=HexatoAscii.hexaToAscii(trResponse.getAidResponse(),
		// true);
		// dt.setResponseCode(resposecode);

		/*String sd = trResponse.getLocalDate()
				+ new SimpleDateFormat("y").format(new java.util.Date());*/
		try {

			String rd = new SimpleDateFormat("dd-MMM-yyyy")
					.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
			String rt = new SimpleDateFormat("HH:mm:ss")
					.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
			dt.setDate(rd);
			dt.setTime(rt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		String cardNum = null;
		if (trRequest.getMaskedPan() == null
				|| trRequest.getMaskedPan().length() < 4) {
			cardNum = trRequest.getMaskedPan();
		} else {
			cardNum = trRequest.getMaskedPan().substring(
					trRequest.getMaskedPan().length() - 4);
		}
		String finalNum = String.format("XXXX %s", cardNum);
		dt.setCardNo(finalNum);
		double amount = 0;
		logger.info("Amount For receipt :" + trRequest.getAmount());
		if (trRequest.getAmount() != null) {
			amount = Double.parseDouble(trRequest.getAmount()) / 100;
		}
		double tips = 0;
		double total = amount;
		if (trRequest.getAdditionalAmount() != null) {
			tips = Double.parseDouble(trRequest.getAdditionalAmount()) / 100;
			amount = amount - tips;
			total = amount + tips;

		}
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		String output1 = myFormatter.format(tips);
		String output2 = myFormatter.format(total);
		// System.out.println(" Amount :"+output);
		// forSettlement.setAmount(output);
		dt.setAdditionAmount(output1);
		dt.setAmount(output);
		dt.setTotal(output2);
		dt.setCardHolderName(trRequest.getCardHolderName());
		dt.setAid(trRequest.getAid());
		// dt.setCardType(CardType.getCardType(trRequest.getAid()));
		// dt.setBatchNo(trRequest.getBatchNo());
		dt.setTraceNo(trRequest.getStan());
		dt.setRrn(hexaToAscii(trResponse.getRrn(), true));
		dt.setTC(trRequest.getStan() + trRequest.getTid());
		dt.setAid(trResponse.getAidResponse());
		if (settle != null) {
			dt.setBatchNo(settle.getBatchNo());
		}
		String resposecode = hexaToAscii(trResponse.getAidResponse(), true);

		dt.setApprCode(resposecode);
		/*
		 * Merchant merchant = merchantService.loadMerchantByPk(id); Transaction
		 * transaction = transactionService.loadTransactionByPk(id); MobileUser
		 * mobileUser = mobileUserService.loadMobileUserByPk(id);
		 * model.addAttribute("transaction", transaction);
		 * model.addAttribute("mobileUser", mobileUser);
		 * model.addAttribute("merchant", merchant);
		 */
		// model.addAttribute("dto", dt);
		request.setAttribute("dto", dt);
		model.addAttribute("pageBean", pageBean);
		// return "merchantweb/preauth/receipt";
		return "merchantweb/transaction/receipt_v0.2";
		// return "redirect:/transactionweb/list/1";
	}
	
	
	@RequestMapping(value = { "/ezyAuthlist/{currPage}" }, method = RequestMethod.GET)
	public String displayEzyAtuhTransactionSummary(final Model model, final java.security.Principal principal,
			HttpServletRequest request,
			@PathVariable final int currPage) {
		//logger.info("about to list all  transaction");
		PageBean pageBean = new PageBean("transactions list", "merchantweb/EZYAUTH/transactionList",
				Module.TRANSACTION_WEB, "merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		
		//Merchant currentMerchant = merchantService.loadMerchant(principal.getName());
		
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		model.addAttribute("pageBean", pageBean);
		
		PaginationBean<PreAuthorization> paginationBean = new PaginationBean<PreAuthorization>();
		
		paginationBean.setCurrPage(currPage);
		transactionService.getPreAuthTxn(paginationBean, currentMerchant);
		//logger.info("currently logged in as"+ paginationBean.getItemList() );
		for(PreAuthorization forSettlement:paginationBean.getItemList()){
			if(forSettlement.getAmount()!=null){
				double amount=0;
				amount=Double.parseDouble(forSettlement.getAmount())/100;
				forSettlement.setAmount(amount+"0");
			}
			if (forSettlement.getTxnType().equals("MOTO")) {
				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("P")) {
					forSettlement.setStatus("EZYAUTH SALE");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("EZYAUTH SALE");
				}
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("EZYAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D")) {
					forSettlement.setStatus("EZYAUTH");
				}
				if (forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("EZYAUTH");
				}
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}
			}else {
				if(forSettlement.getStatus().equals("S")){
					forSettlement.setStatus("SETTLED");
				}if(forSettlement.getStatus().equals("P")){
					forSettlement.setStatus("PREAUTH SALE");
				}
				if(forSettlement.getStatus().equals("A")){
					forSettlement.setStatus("PREAUTH SALE");
				}
				if(forSettlement.getStatus().equals("C")){
					forSettlement.setStatus("PREAUTH CANCEL");
				}
				if(forSettlement.getStatus().equals("D")){
					forSettlement.setStatus("PRE-AUTHORIZATION");
				}
				if(forSettlement.getStatus().equals("E")){
					forSettlement.setStatus("PRE-AUTHORIZATION");
				}
				if(forSettlement.getStatus().equals("R")){
					forSettlement.setStatus("REVERSAL");
				}
			}
			
			if(forSettlement.getDate()!=null && forSettlement.getTime()!=null){
				try {
					
					String rd = new SimpleDateFormat("dd-MMM-yyyy").format(
							new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(forSettlement.getTimeStamp()));
					
					String rt = new SimpleDateFormat("HH:mm:ss").format(
							new SimpleDateFormat("HHmmss").parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {}

			}
		}

		model.addAttribute("paginationBean", paginationBean);
		//TODO to get tid and device id
		
		logger.info("Motomid: "+ currentMerchant.getMid().getMotoMid());
		List<TerminalDetails> terminalDetails=transactionService.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			if(t.getTid()!=null){
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			//tidSet.add(t.getDeviceId());
			}
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetails) {
	    //	String did = t.getDeviceId();
			if(t.getDeviceId()!=null){
			String did = t.getDeviceId().toString();
			dIdSet.add(did.toString());
			}

		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		return TEMPLATE_MERCHANT;
	}

	
	
	
	@RequestMapping(value = { "/preAuthTransaction" }, method = RequestMethod.GET)
	public String preAuthTransaction(final Model model,@ModelAttribute("preAuthTxnDet") PreAuthTxnDet preAuthTxnDet,
			final java.security.Principal principal, HttpServletRequest request) {

		HttpSession session = request.getSession();
		String myName = (String) session.getAttribute("userName");
		logger.info("preAuth transaction currently logged : " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/preauth/PreAuthTransaction",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");

		List<CountryCurPhone> listCountry = transactionService
				.loadCountryCurrency();

		List<Country> countryList = new ArrayList<Country>();

		for (CountryCurPhone ccp : listCountry) {
			Country cty = new Country();
			cty.setCountryCode(ccp.getCountryIso3());
			cty.setCountryIso(ccp.getCountryIso2());
			cty.setCountryName(ccp.getCountryName());
			cty.setPhoneCode("+" + ccp.getCountryPhone());
			countryList.add(cty);
		}

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		List<MobileUser> mobileuser1 = new ArrayList<MobileUser>();

		for (TerminalDetails t : terminalDetails) {
			if (t.getTid() != null) {
				//logger.info("moto tid: " + t.getTid());
				
				MobileUser m = transactionService
						.getMobileUserByMotoTid(t.getTid());
				
				
				
				if (m!=null) {
					m.setFailedLoginAttempt(0);
					logger.info("moto tid mmm: " + m.getMotoTid()+" expiry date: "+t.getSuspendedDate());
					boolean status=validateExpiryDate(t.getSuspendedDate().toString());
					if(status){
						
						m.setFailedLoginAttempt(1);
					}
					logger.info("status: "+m.getFailedLoginAttempt());
					if (m.getMotoTid() != null) {

						
						logger.info("mobile username: " + m.getUsername()
								+ m.getMotoTid());
						mobileuser1.add(m);

					}

				}
			}
		}
		model.addAttribute("mobileuser", mobileuser1);
		model.addAttribute("listCountry", countryList);
		model.addAttribute("merchant", currentMerchant);
		model.addAttribute("pageBean", pageBean);
		return TEMPLATE_MERCHANT;

	}

	
	
	@RequestMapping(value = { "/preAuthSubmit" }, method = RequestMethod.POST)
	public String preAuthSubmitTransaction(final Model model,
			@ModelAttribute("preAuthTxnDet") PreAuthTxnDet preAuthTxnDet,
			final java.security.Principal principal,
			HttpServletRequest request, HttpServletResponse response) {
		String amount=preAuthTxnDet.getAmount();
		
		preAuthTxnDet.setPhno(preAuthTxnDet.getPhno().replaceAll(" ", ""));

		logger.info("actual motoAmt: " + preAuthTxnDet.getAmount());

		logger.info(preAuthTxnDet.getAmount());
		if (preAuthTxnDet.getAmount().contains(".")) {

			preAuthTxnDet.setAmount(String.format("%012d", (long) Double
					.parseDouble(preAuthTxnDet.getAmount().replace(".", ""))));
			logger.info(preAuthTxnDet.getAmount());
		}

		else {
			preAuthTxnDet
					.setAmount(String.format("%012d", (long) Double
							.parseDouble(preAuthTxnDet.getAmount()) * 100));
			logger.info(preAuthTxnDet.getAmount());
		}
		logger.info("PreAuth amout: " + preAuthTxnDet.getAmount());
		HttpSession session = request.getSession();
		String myName = (String) session.getAttribute("userName");
		logger.info("PreAuth trans currently logged as: " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		logger.info("hostType: " + currentMerchant.getMerchantType());
		
		if(currentMerchant.getMerchantType() == null) {
			preAuthTxnDet.setHostType("P");
			
		}else {
			logger.info("hostType: " + currentMerchant.getMerchantType());
		    preAuthTxnDet.setHostType(currentMerchant.getMerchantType());
		}
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/preauth/PreAuthSuccess", Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");

		ResponseDetails rd = null;
		try {
			 rd = motoWebService.preAuthRequest(preAuthTxnDet);
			if (rd != null) {
				preAuthTxnDet.setAmount(new DecimalFormat("#,##0.00")
					.format(Double.parseDouble(preAuthTxnDet.getAmount())/100));
				Date date1;
				/*try {
					DateFormat fromFormatter = new SimpleDateFormat("dd/MM/yyyy");
			        Date date = (Date) fromFormatter.parse(preAuthTxnDet.getExpectedDate());

			        DateFormat toformatter = new SimpleDateFormat("dd-MMM-yyyy");
			       
					preAuthTxnDet.setExpectedDate(toformatter.format(date));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}  */
		      

		        
		        logger.info("Response Data.."
						+ rd.getResponseData().getInvoiceId());
				request.setAttribute("responseData", rd.getResponseData()
						.getInvoiceId());
				request.setAttribute("responseData1", rd.getResponseData()
						.getOpt());
				request.setAttribute("responseSuccess", rd.getResponseMessage());
			}
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		model.addAttribute("preAuthTxnDet", preAuthTxnDet);
		model.addAttribute("pageBean", pageBean);
		request.setAttribute("responseData", rd.getResponseData().getInvoiceId());
		return TEMPLATE_MERCHANT;

	}
	
	
	
	public static String hexaToAscii(String s, boolean toString) {

		String retString = "";
		String tempString = "";
		int offset = 0;
		if (toString) {
			for (int i = 0; i < s.length() / 2; i++) {

				tempString = s.substring(offset, offset + 2);
				retString += tempString.equalsIgnoreCase("1c") ? "[1C]"
						: decodeHexString(tempString);
				offset += 2;
			} // end for
		} else {

			for (int i = 0; i < s.length(); i++) {

				tempString = s.substring(offset, offset + 1);
				retString += encodeHexString(tempString);
				offset += 1;
			} // end for
		}
		return retString;
	} // end hexaToAscii
	
	public static String decodeHexString(String hexText) {

		String decodedText = null;
		String chunk = null;

		if (hexText != null && hexText.length() > 0) {
			int numBytes = hexText.length() / 2;

			byte[] rawToByte = new byte[numBytes];
			int offset = 0;
			for (int i = 0; i < numBytes; i++) {
				chunk = hexText.substring(offset, offset + 2);
				offset += 2;
				rawToByte[i] = (byte) (Integer.parseInt(chunk, 16) & 0x000000FF);
			}
			// System.out.println(rawToByte.toString());
			decodedText = new String(rawToByte);
		}
		return decodedText;
	}
	
	public static String encodeHexString(String sourceText) {
		byte[] rawData = sourceText.getBytes();
		StringBuffer hexText = new StringBuffer();
		String initialHex = null;
		int initHexLength = 0;

		for (int i = 0; i < rawData.length; i++) {
			// System.out.println("raw "+rawData[i]);
			int positiveValue = rawData[i] & 0x000000FF;
			initialHex = Integer.toHexString(positiveValue);
			initHexLength = initialHex.length();
			while (initHexLength++ < 2) {
				hexText.append("0");
			}
			hexText.append(initialHex);
		}
		return hexText.toString().toUpperCase();
	}

	public boolean validateExpiryDate(String expDate){
		boolean validate=false;
		


		Date now = new Date();

		logger.info("Today : " + now + " : " + expDate);

		String resDate = null;
		try {

			resDate = new SimpleDateFormat("yyyy-MM-dd")
					.format(new SimpleDateFormat("yyyy-MM-dd")
							.parse(expDate));

			String resTime = new SimpleDateFormat("HH:mm:ss")
					.format(new SimpleDateFormat("HH:mm:ss")
							.parse(expDate.substring(11)));
			logger.info("After Date : " + resDate + " : " + resTime);

		} catch (ParseException e) {

			e.printStackTrace();
		}

		LocalDate date1 = LocalDate.parse(resDate);
		LocalDate date2 = LocalDate.now();

		int days = Days.daysBetween(date2, date1).getDays();
		logger.info(" Days : " + days);

		if (days > 0) {

			
		
				validate = true;
			
		} else{
			logger.info(" Day Expired ");
			validate=false;
		}
		logger.info("status: "+validate);
		return validate;
		
	}
	
	
	@RequestMapping(value = { "/export" }, method = RequestMethod.GET)
	public ModelAndView displayExportTransactionSearchByTid(final Model model, final java.security.Principal principal,	HttpServletRequest request,
			@RequestParam (required = false )final String tid,
			@RequestParam (required = false ) String fromDate,
			@RequestParam (required = false ) String toDate,
			@RequestParam (required = false )String status,
			@RequestParam (required = false )String export,
		
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		String fromDate1 = null;
		String toDate1 = null;
		PageBean pageBean = null;
		/*logger.info("fromDate & toDate & Tid :" + fromDate + ": & :" + toDate
				+ ": & :" + tid + ": & :" + txnType);*/
		logger.info("fromDate & toDate & Tid :" + fromDate + ": & :" + toDate
				+ ": & :" + tid);
		if (fromDate != null && toDate != null) {
			try {
				fromDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(fromDate));
				toDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
		logger.info("fromDate & toDate & Tid :" + fromDate1 + ": & :" + toDate1
				+ ": & :" + tid );
		
		PaginationBean<PreAuthorization> paginationBean = new PaginationBean<PreAuthorization>();
		paginationBean.setCurrPage(currPage);
		
		transactionService.searchPreAuth(fromDate1, toDate1, tid, status,
				paginationBean);

		

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}
		
		
		logger.info("test data " + paginationBean.getItemList());
		for (PreAuthorization forSettlement : paginationBean.getItemList()) {
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				forSettlement.setAmount(amount + "0");
			}
			if (forSettlement.getTxnType()==null) {
				/*if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}*/
				if (forSettlement.getStatus().equals("P") || forSettlement.getStatus().equals("A") || forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("PREAUTH SALE");
				}
				
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("PREAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D") || forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("PRE-AUTHORIZATION");
				}
				
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}
			} else {

				/*if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}*/
				if (forSettlement.getStatus().equals("P") || forSettlement.getStatus().equals("A") || forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("EZYAUTH SALE");
				}
				
				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("EZYAUTH CANCEL");
				}
				if (forSettlement.getStatus().equals("D") || forSettlement.getStatus().equals("E")) {
					forSettlement.setStatus("EZYAUTH");
				}
				
				if (forSettlement.getStatus().equals("R")) {
					forSettlement.setStatus("REVERSAL");
				}

			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {

					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(forSettlement.getTimeStamp()));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
			
			logger.info("loadTxnDetailsByID: "+forSettlement.getTrxId());
			TransactionRequest txReq =  transactionService.loadTxnDetailsByID(forSettlement.getTrxId());
			forSettlement.setNumOfSale(txReq.getMaskedPan());//maskedpan
			logger.info("NumOfSale: "+forSettlement.getNumOfSale());
		}
		List<PreAuthorization> list = paginationBean.getItemList();
		
		if (!(export.equals("PDF"))) {

			return new ModelAndView("preauthMerTxnExcel", "txnList", list);

		} else {
			return new ModelAndView("preauthMerTxnPdf", "txnList", list);
		}

		
	}


}
