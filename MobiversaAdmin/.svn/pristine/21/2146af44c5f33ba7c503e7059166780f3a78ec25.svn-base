package com.mobiversa.payment.controller;

import java.security.Principal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.mobiversa.common.bo.BizAppSettlement;
import com.mobiversa.common.bo.ForSettlement;
import com.mobiversa.common.bo.FpxTransaction;
import com.mobiversa.common.bo.Merchant;
import com.mobiversa.common.bo.MobileUser;
import com.mobiversa.common.bo.Receipt;
import com.mobiversa.common.bo.TerminalDetails;
import com.mobiversa.common.bo.TransactionRequest;
import com.mobiversa.common.bo.TransactionResponse;
import com.mobiversa.payment.connect.MotoPaymentCommunication;
import com.mobiversa.payment.controller.bean.PageBean;
import com.mobiversa.payment.controller.bean.PageBean.Module;
import com.mobiversa.payment.controller.bean.PaginationBean;
import com.mobiversa.payment.dto.DataTransferObject;
import com.mobiversa.payment.dto.MotoTxnDet;
import com.mobiversa.payment.service.MerchantService;
import com.mobiversa.payment.service.MobileUserService;
import com.mobiversa.payment.service.SettlementWebService;
import com.mobiversa.payment.service.TransactionService;
import com.mobiversa.payment.util.CardType;
import com.mobiversa.payment.util.ResponseDetails;

@Controller
@RequestMapping(value = MerchantWebTransactionController.URL_BASE)
public class MerchantWebTransactionController extends BaseController {

	@Autowired
	private MobileUserService mobileUserService;
	@Autowired
	private MerchantService merchantService;
	@Autowired
	private TransactionService transactionService;

	@Autowired
	private SettlementWebService settlementWebService;

	public static final String URL_BASE = "/transactionweb";
	private static final Logger logger = Logger
			.getLogger(MerchantWebTransactionController.class);

	@RequestMapping(value = { "", "/", "/**/*" }, method = RequestMethod.GET)
	public String defaultPage() {
		//logger.info("Test1 defaultpage");
		return "redirect:" + URL_BASE + "/list/1";
	}

	@RequestMapping(value = { "/list/{currPage}" }, method = RequestMethod.GET)
	public String displayTransactionSummary(final Model model,
			final java.security.Principal principal,
			HttpServletRequest request, @PathVariable final int currPage) {
		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");
		// String myName = principal.getName();
		logger.info("All transaction currently logged by: " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);

		PageBean pageBean = new PageBean("transactions list", "merchantweb/transaction/transactionList",
				Module.TRANSACTION_WEB, "merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);

		transactionService.getForSettlement(paginationBean, currentMerchant);

		ArrayList<String> dIdSet = new ArrayList<String>();
		List<TerminalDetails> terminalDetails = transactionService.getTerminalDetails(currentMerchant);
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}

		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}

		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);

		if (paginationBean.getItemList().size() > 0) {

			model.addAttribute("paginationBean", paginationBean);

			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			model.addAttribute("devIdList", dIdSet);
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	@RequestMapping(value = { "/listcash" }, method = RequestMethod.GET)
	public String displayCashTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();

		Merchant currentMerchant = merchantService.loadMerchant(myName);
		logger.info(" for test merchant id :"
				+ currentMerchant.getMid().getMid());
		logger.info("cash list transaction: " + currentMerchant);

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cashTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");

		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		System.out.println("list of items from db1:");
		/*transactionService.getCashTransForSettlement(paginationBean,
				currentMerchant);*/
		transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"CASH");
		// System.out.println("list of items from db2:"+paginationBean.getItemList().size());
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
		/*model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);*/
		if (paginationBean.getItemList().size() > 0) {

			for (ForSettlement forSettlement : paginationBean.getItemList()) {
				if(forSettlement.getTid()!=null) {
				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				//System.out.println(forSettlement.getStatus());
				if (forSettlement.getStatus().equals("CT")) {
					forSettlement.setStatus("CASH SALE");
				}
				if (forSettlement.getStatus().equals("CV")) {
					forSettlement.setStatus("CASH CANCELLED");
				}

				if (forSettlement.getDate() != null
						&& forSettlement.getTime() != null) {
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}
			}

			model.addAttribute("paginationBean", paginationBean);

			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);

			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	@RequestMapping(value = { "/listcard" }, method = RequestMethod.GET)
	public String displayCardTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cardTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		ArrayList<String> dIdSet = new ArrayList<String>();
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,null);
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant,"EZYWIRE",null,null,null);
		List<TerminalDetails> terminalDetailsList = transactionService
				.getEzywireTerminalDetails(currentMerchant);
		
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		if (paginationBean.getItemList().size() > 0) {
		model.addAttribute("paginationBean", paginationBean);
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			model.addAttribute("terminalDetailsList", terminalDetailsList);
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	@RequestMapping(value = { "/boostlist" }, method = RequestMethod.GET)
	public String displayboostTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,
			HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /boostlist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/boostTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		/*transactionService.getBoostTransForSettlement(paginationBean,
				currentMerchant);*/
		transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"BOOST");
		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "BOOST",null,null,null);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		/*model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		if (paginationBean.getItemList().size() > 0) {

			for (ForSettlement forSettlement : paginationBean.getItemList()) {
				

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("BPS")) {
					forSettlement.setStatus("BOOST SETTLED");
				}
				if (forSettlement.getStatus().equals("BP")) {
					forSettlement.setStatus("BOOST PENDING");
				}
				if (forSettlement.getStatus().equals("BPA")) {
					forSettlement.setStatus("BOOST PAYMENT");
				}
				if (forSettlement.getStatus().equals("BPC")) {
					forSettlement.setStatus("BOOST CANCELLED");
				}

				if (forSettlement.getTimeStamp() != null) {
					
					try {

						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(forSettlement.getTimeStamp()));

						forSettlement.setDate(rd);

						String rt1 = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
								.parse(forSettlement.getTimeStamp().toString()));
						forSettlement.setTime(rt1);

					} catch (ParseException e) {
					}

				}
				

			}

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	@RequestMapping(value = { "/listgrabpay" }, method = RequestMethod.GET)
	public String displayGrabPayTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,
			HttpServletRequest request) {

		logger.info("/grabpay");
		
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");

		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		PageBean pageBean = new PageBean("transactions list","merchantweb/transaction/grabPayTransactionList",
				Module.TRANSACTION_WEB,"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		
		List<String> terminalDetailsList = transactionService.getGpayTidbymerchantFK(currentMerchant);
		
		transactionService.getGrabTransactionForSettlement(paginationBean,terminalDetailsList, null, null);
		
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
		if (paginationBean.getItemList().size() > 0) {

			for (ForSettlement forSettlement : paginationBean.getItemList()) {
				/*TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}*/
				
				MobileUser terminalDetails = transactionService
						.getMobileUserByGpayTid(forSettlement.getTid()
								.toString());
				
				
				if (terminalDetails != null) {
					
					forSettlement.setMerchantName(terminalDetails
							.getMerchant().getBusinessName());
				}
				
				
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}
				
				if (forSettlement.getStatus().equals("GPS")) {
					forSettlement.setStatus("GRABPAY COMPLETED");
				}else if (forSettlement.getStatus().equals("GPP")) {
					forSettlement.setStatus("GRABPAY PENDING");
				}else if (forSettlement.getStatus().equals("GRF")) {
					forSettlement.setStatus("GRABPAY REFUND");
				}else if (forSettlement.getStatus().equals("GPC")) {
					forSettlement.setStatus("GRABPAY CANCELLED");
				}else if (forSettlement.getStatus().equals("GPT")) {
					forSettlement.setStatus("GRABPAY SETTLED");
				}
				
				/*else if (forSettlement.getStatus().equals("GBC")) {
					forSettlement.setStatus("GRABPAY CANCELLED");
				}*/

				if (forSettlement.getTimeStamp() != null) {
					
					try {

						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(forSettlement.getTimeStamp()));

						forSettlement.setDate(rd);

						String rt1 = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
								.parse(forSettlement.getTimeStamp().toString()));
						forSettlement.setTime(rt1);

					} catch (ParseException e) {
					}

				}
				

			}

			model.addAttribute("paginationBean", paginationBean);
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}

	@RequestMapping(value = { "/motolist" }, method = RequestMethod.GET)
	public String displayMotoTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /motolist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("moto list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/MotoTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("MotoMid: " + currentMerchant.getMid().getMotoMid());
		paginationBean.setCurrPage(currPage);
		/*transactionService.getMotoTransForSettlement(paginationBean,
				currentMerchant);*/
		
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"MOTO");*/
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"EZYMOTO");
		
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"MOTO",null,null,null);*/
		
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				
				TransactionRequest tr=transactionService.loadTransactionRequest(forSettlement.getTrxId().toString());
				if(tr!=null) {
					forSettlement.setPan(tr.getMaskedPan());
					String pan = forSettlement.getPan().substring(forSettlement.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						forSettlement.setPan(pan);
					} else {
						forSettlement.setPan(pan);
					}
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				
				if (forSettlement.getTime() != null) {
					
					try {
						
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	
	@RequestMapping(value = { "/motoLinklist" }, method = RequestMethod.GET)
	public String displayMotoLinkTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /motoLinklist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("moto list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/MotoLinkTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("MotoMid: " + currentMerchant.getMid().getMotoMid());
		paginationBean.setCurrPage(currPage);
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"EZYLINK");
		
		
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	

	@RequestMapping(value = { "/ezywaylist" }, method = RequestMethod.GET)
	public String displayEzyWayTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /Ezywaylist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("ezyway list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyWayTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("Ezyway Mid: " + currentMerchant.getMid().getEzywayMid());
		paginationBean.setCurrPage(currPage);
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"EZYWAY");*/
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"EZYWAY");
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYWAY",null,null,null);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzywayMid());
		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {
			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				TransactionRequest tr=transactionService.loadTransactionRequest(forSettlement.getTrxId().toString());
				if(tr!=null) {
					forSettlement.setPan(tr.getMaskedPan());
					String pan = forSettlement.getPan().substring(forSettlement.getPan().length() - 8);
					if (pan.contains("f")) {
						pan = pan.replaceAll("f", "X");
						forSettlement.setPan(pan);
					} else {
						forSettlement.setPan(pan);
					}
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				// logger.info("date and time boost: " +
				// forSettlement.getTime());
				
				 * if (forSettlement.getDate() != null &&
				 * forSettlement.getTime() != null) {
				 
				//logger.info("stan moto: "+forSettlement.getStan());
				//logger.info("location moto: "+forSettlement.getLocation());
				if (forSettlement.getTime() != null) {
					//logger.info("time moto: " + forSettlement.getTime());
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						// logger.info(" Date : " + rd + " : " + sd);
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	@RequestMapping(value = { "/cancelPaymentRecplus/{id}" }, method = RequestMethod.GET)
	public String cancelTransactionDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/voidpayment/RecplusCancelPaymentConfirm", null);

		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");

		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName" + ":" + merchant.getBusinessName() + ":"
				+ "Merchant void logged by" + ":" + principal.getName() + ":");
		ForSettlement fs = transactionService.getForSettlement(id);
		TransactionRequest tr = transactionService.loadTransactionRequest(id);

		MotoTxnDet txnDet = new MotoTxnDet();
		txnDet.setTid(fs.getTid());
		txnDet.setMid(fs.getMid());
		txnDet.setTrxId(id);
		txnDet.setContactName(tr.getCardHolderName());
		txnDet.setApprCode(fs.getAidResponse());
		if(merchant.getMerchantType() != null) {
		txnDet.setHostType(merchant.getMerchantType());
		}else {
		txnDet.setHostType("P");
		}
		String rd = null;
		if (fs.getDate() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fs.getTimeStamp()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (fs.getTime() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(fs.getTime()));

			} catch (ParseException e) {
			}
		}
		txnDet.setExpectedDate(rd + " " + rt);
		double amount = 0;
		amount = Double.parseDouble(fs.getAmount()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		txnDet.setAmount(output);

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				txnDet.setPan(pan);
			} else {
				txnDet.setPan(pan);
			}

		} else {
			txnDet.setPan("NA");
		}

		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", txnDet);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/cancelRecplusPaymentByMerchant" }, method = RequestMethod.POST)
	public String motoSubmitTransactionRecplus(final Model model,
			@ModelAttribute("txnDet") MotoTxnDet motoTxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		
		
		ResponseDetails data=MotoPaymentCommunication.CancelPayment(motoTxnDet);
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/RecplusCancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/RecplusVoidDone", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/RecplusCancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}

	
	@RequestMapping(value = { "/cancelPayment/{id}" }, method = RequestMethod.GET)
	public String cancelPaymentTransactionDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/voidpayment/CancelPaymentConfirm", null);

		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");

		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName" + ":" + merchant.getBusinessName() + ":"
				+ "Merchant void logged by" + ":" + principal.getName() + ":");
		ForSettlement fs = transactionService.getForSettlement(id);
		TransactionRequest tr = transactionService.loadTransactionRequest(id);

		MotoTxnDet txnDet = new MotoTxnDet();
		txnDet.setTid(fs.getTid());
		txnDet.setMid(fs.getMid());
		txnDet.setTrxId(id);
		txnDet.setContactName(tr.getCardHolderName());
		txnDet.setApprCode(fs.getAidResponse());
		if(merchant.getMerchantType() != null) {
			txnDet.setHostType(merchant.getMerchantType());
			}else {
			txnDet.setHostType("P");
			}
		String rd = null;
		if (fs.getDate() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fs.getTimeStamp()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (fs.getTime() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(fs.getTime()));

			} catch (ParseException e) {
			}
		}
		txnDet.setExpectedDate(rd + " " + rt);
		double amount = 0;
		amount = Double.parseDouble(fs.getAmount()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		txnDet.setAmount(output);

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				txnDet.setPan(pan);
			} else {
				txnDet.setPan(pan);
			}

		} else {
			txnDet.setPan("NA");
		}

		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", txnDet);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/motoCancelPayment/{id}" }, method = RequestMethod.GET)
	public String motoCancelPayment(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/voidpayment/MotoCancelPaymentConfirm", null);

		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");

		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName" + ":" + merchant.getBusinessName() + ":"
				+ "Merchant void logged by" + ":" + principal.getName() + ":");
		ForSettlement fs = transactionService.getForSettlement(id);
		TransactionRequest tr = transactionService.loadTransactionRequest(id);

		MotoTxnDet txnDet = new MotoTxnDet();
		txnDet.setTid(fs.getTid());
		txnDet.setMid(fs.getMid());
		txnDet.setTrxId(id);
		txnDet.setContactName(tr.getCardHolderName());
		txnDet.setApprCode(fs.getAidResponse());
		String rd = null;
		if (fs.getDate() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fs.getTimeStamp()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (fs.getTime() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(fs.getTime()));

			} catch (ParseException e) {
			}
		}
		txnDet.setExpectedDate(rd + " " + rt);
		double amount = 0;
		amount = Double.parseDouble(fs.getAmount()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		txnDet.setAmount(output);

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				txnDet.setPan(pan);
			} else {
				txnDet.setPan(pan);
			}

		} else {
			txnDet.setPan("NA");
		}

		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", txnDet);

		return TEMPLATE_MERCHANT;
	}
	
	@RequestMapping(value = { "/ezylinkCancelPayment/{id}" }, method = RequestMethod.GET)
	public String ezylinkCancelPayment(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/voidpayment/MotoCancelPaymentConfirm", null);

		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");

		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName" + ":" + merchant.getBusinessName() + ":"
				+ "Merchant void logged by" + ":" + principal.getName() + ":");
		ForSettlement fs = transactionService.getForSettlement(id);
		TransactionRequest tr = transactionService.loadTransactionRequest(id);

		MotoTxnDet txnDet = new MotoTxnDet();
		txnDet.setTid(fs.getTid());
		txnDet.setMid(fs.getMid());
		txnDet.setTrxId(id);
		txnDet.setContactName(tr.getCardHolderName());
		txnDet.setApprCode(fs.getAidResponse());
		String rd = null;
		if (fs.getDate() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fs.getTimeStamp()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (fs.getTime() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(fs.getTime()));

			} catch (ParseException e) {
			}
		}
		txnDet.setExpectedDate(rd + " " + rt);
		double amount = 0;
		amount = Double.parseDouble(fs.getAmount()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		txnDet.setAmount(output);

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				txnDet.setPan(pan);
			} else {
				txnDet.setPan(pan);
			}

		} else {
			txnDet.setPan("NA");
		}

		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", txnDet);

		return TEMPLATE_MERCHANT;
	}
	
	
	@RequestMapping(value = { "/cancelPaymentByMerchant" }, method = RequestMethod.POST)
	public String motoSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") MotoTxnDet motoTxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		
		
		ResponseDetails data=MotoPaymentCommunication.CancelPayment(motoTxnDet);
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/CancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/voidPaymentDone", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/CancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	@RequestMapping(value = { "/MotoCancelPaymentByMerchant" }, method = RequestMethod.POST)
	public String MotoCancelPaymentByMerchant(final Model model,
			@ModelAttribute("txnDet") MotoTxnDet motoTxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		
		
		ResponseDetails data=MotoPaymentCommunication.CancelPayment(motoTxnDet);
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/MotoCancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/MotoVoidPaymentDone", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/MotoCancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	@RequestMapping(value = { "/EzylinkCancelPaymentByMerchant" }, method = RequestMethod.POST)
	public String EzylinkCancelPaymentByMerchant(final Model model,
			@ModelAttribute("txnDet") MotoTxnDet motoTxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		
		
		ResponseDetails data=MotoPaymentCommunication.CancelPayment(motoTxnDet);
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/EzylinkCancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/EzylinkVoidPaymentDone", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/EzylinkCancelPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	
	
	@RequestMapping(value = { "/cancelPaymentEzyPOD/{id}" }, method = RequestMethod.GET)
	public String cancelPaymentEzyPODTransactionDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {

		PageBean pageBean = new PageBean("Transactions Details",
				"merchantweb/transaction/voidpayment/CancelEzypodPaymentConfirm", null);

		HttpSession session = request.getSession();

		String myName = (String) session.getAttribute("userName");

		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Mid" + ":" + merchant.getMid().getMid() + "MerchantName" + ":" + merchant.getBusinessName() + ":"
				+ "Merchant void logged by" + ":" + principal.getName() + ":");
		ForSettlement fs = transactionService.getForSettlement(id);
		TransactionRequest tr = transactionService.loadTransactionRequest(id);

		MotoTxnDet txnDet = new MotoTxnDet();
		txnDet.setTid(fs.getTid());
		txnDet.setMid(fs.getMid());
		txnDet.setTrxId(id);
		txnDet.setContactName(tr.getCardHolderName());
		txnDet.setApprCode(fs.getAidResponse());
		if(merchant.getMerchantType() != null) {
			txnDet.setHostType(merchant.getMerchantType());
			}else {
			txnDet.setHostType("P");
			}
		String rd = null;
		if (fs.getDate() != null) {

			try {
				rd = new SimpleDateFormat("dd-MMM-yyyy")
						.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fs.getTimeStamp()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		String rt = null;
		if (fs.getTime() != null) {
			try {
				rt = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("HHmmss").parse(fs.getTime()));

			} catch (ParseException e) {
			}
		}
		txnDet.setExpectedDate(rd + " " + rt);
		double amount = 0;
		amount = Double.parseDouble(fs.getAmount()) / 100;
		String pattern = "#,##0.00";
		DecimalFormat myFormatter = new DecimalFormat(pattern);
		String output = myFormatter.format(amount);
		txnDet.setAmount(output);

		if (tr.getMaskedPan() != null) {
			String pan = tr.getMaskedPan().substring(tr.getMaskedPan().length() - 8);
			if (pan.contains("f")) {
				pan = pan.replaceAll("f", "X");
				txnDet.setPan(pan);
			} else {
				txnDet.setPan(pan);
			}

		} else {
			txnDet.setPan("NA");
		}

		txnDet.setMerchantId(merchant.getId());
		model.addAttribute("pageBean", pageBean);
		model.addAttribute("txnDet", txnDet);

		return TEMPLATE_MERCHANT;
	}
	@RequestMapping(value = { "/cancelEzypodPaymentByMerchant" }, method = RequestMethod.POST)
	public String ezypodSubmitTransaction(final Model model,
			@ModelAttribute("txnDet") MotoTxnDet motoTxnDet, HttpServletRequest request,
			HttpServletResponse response,
			final java.security.Principal principal) {
		
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		
		
		ResponseDetails data=MotoPaymentCommunication.CancelPayment(motoTxnDet);
		if(data!=null) {
		if(data.getResponseCode().equals("0001")) {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/CancelEzypodPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/EzypodVoidDone", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("responseData", data.getResponseDescription());
		}
		}else {
			PageBean pageBean = new PageBean("Transactions Details",
					  "merchantweb/transaction/voidpayment/CancelEzypodPaymentConfirm", null);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("txnDet", motoTxnDet);
			model.addAttribute("responseData", data.getResponseDescription()+"...  Try Again..");
		}
		
		return TEMPLATE_MERCHANT;	  
	}
	

	
	@RequestMapping(value = { "/ezyreclist" }, method = RequestMethod.GET)
	public String displayEzyRecTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /Ezyreclist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("ezyrec list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyRecTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("EZYREC Mid: " + currentMerchant.getMid().getEzyrecMid());
		
		paginationBean.setCurrPage(currPage);
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"EZYREC");*/
		
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant,"EZYREC");
		
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYREC",null,null,null);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());
		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
			// tidSet.add(t.getDeviceId());
		}
		ArrayList<String> dIdSet = new ArrayList<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());

		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("tidList", tidSet);
		*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				// logger.info("date and time boost: " +
				// forSettlement.getTime());
				
				 * if (forSettlement.getDate() != null &&
				 * forSettlement.getTime() != null) {
				 
				//logger.info("stan moto: "+forSettlement.getStan());
				//logger.info("location moto: "+forSettlement.getLocation());
				if (forSettlement.getTime() != null) {
					//logger.info("time moto: " + forSettlement.getTime());
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						// logger.info(" Date : " + rd + " : " + sd);
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	@RequestMapping(value = { "/ezypodlist" }, method = RequestMethod.GET)
	public String displayEzyPODTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		 String mid_ezyPOD=null;
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /EzyPODlist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("ezypod list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyPODTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("EZYREC Mid for ezypod: " + currentMerchant.getMid().getEzyrecMid());
		
		paginationBean.setCurrPage(currPage);
		
		 TerminalDetails termDetails = merchantService.loadTerminalDetailsByMid(currentMerchant.getMid().getEzyrecMid());
		 
		 if((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
			 
			 mid_ezyPOD = currentMerchant.getMid().getEzyrecMid();
			
		 }else {
			 mid_ezyPOD = currentMerchant.getMid().getEzyrecMid();
		 }
		 
		 transactionService.getCardTransForSettlement(paginationBean,
					currentMerchant,"EZYREC");
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(mid_ezyPOD);
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {
			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	@RequestMapping(value = { "/ezyrecpluslist" }, method = RequestMethod.GET)
	public String displayEzyRecPlusTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		// logger.info("currently logged in as " + myName);
		logger.info("transaction type checking /Ezyrecpluslist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		logger.info("ezyrec list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyRecPlusTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("EZYREC Mid: " + currentMerchant.getMid().getEzyrecMid());
		
		paginationBean.setCurrPage(currPage);
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"RECPLUS");*/
				
		transactionService.getCardTransForSettlement(paginationBean,
						currentMerchant,"RECPLUS");
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYREC",null,null,null);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());
		
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

		

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	@RequestMapping(value = { "/ezypasslist" }, method = RequestMethod.GET)
	public String displayEzypassTransactionSummary(
			final Model model,
			final java.security.Principal principal,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		HttpSession session=request.getSession();
		
		String myName = (String) session.getAttribute("userName");
		
		logger.info("transaction type checking /ezypasslist");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("EZYPASS list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzypassTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		logger.info("ezypass mid: " + currentMerchant.getMid().getEzypassMid());
		paginationBean.setCurrPage(currPage);
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzypassMid());
		
		for(TerminalDetails t:terminalDetailsList) {
			logger.info(t.getTid()+" "+t.getMerchantId());
		}
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		/*transactionService.getEzypassTransForSettlement(paginationBean,
				currentMerchant);*/
		/*transactionService.getTransactionForSettlement(paginationBean,
				currentMerchant,"EZYPASS");*/
		transactionService.getCardTransForSettlement(paginationBean,
				currentMerchant, "EZYPASS");
		
		/*transactionService.getCardTransactionForSettlement(paginationBean,
				currentMerchant,"EZYPASS",null,null,null);*/
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().size() > 0) {

			/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
				// logger.info("boost status    " + forSettlement.getStatus());

				// logger.info("tid details:" +
				// forSettlement.getTid().toString());

				TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					// logger.info("terminal details contact Name:" +
					// terminalDetails.getContactName());
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}

				if (forSettlement.getStatus().equals("S")) {
					forSettlement.setStatus("SETTLED");
				}
				if (forSettlement.getStatus().equals("A")) {
					forSettlement.setStatus("NOT SETTLED");
				}

				if (forSettlement.getStatus().equals("C")) {
					forSettlement.setStatus("CANCELLED");
				}

				// logger.info("date and time boost: " +
				// forSettlement.getTime());
				
				 * if (forSettlement.getDate() != null &&
				 * forSettlement.getTime() != null) {
				 
				//logger.info("stan moto: "+forSettlement.getStan());
				//logger.info("location moto: "+forSettlement.getLocation());
				if (forSettlement.getTime() != null) {
					//logger.info("time moto: " + forSettlement.getTime());
					try {
						// String sd=forSettlement.getDate()+new
						// SimpleDateFormat("y").format(new java.util.Date());
						String sd = forSettlement.getTimeStamp();
						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd")
										.parse(sd));

						// logger.info(" Date : " + rd + " : " + sd);
						String rt = new SimpleDateFormat("HH:mm:ss")
								.format(new SimpleDateFormat("HHmmss")
										.parse(forSettlement.getTime()));

						
						 * String rt = new SimpleDateFormat("HH:mm:ss")
						 * .format(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss")
						 * .parse(forSettlement.getTime()));
						 
						//logger.info("time moto: " + rt);
						forSettlement.setDate(rd);
						forSettlement.setTime(rt);
					} catch (ParseException e) {
					}

				}

			}*/

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			List<TerminalDetails> terminalDetails = transactionService
					.getTerminalDetails(currentMerchant.getMid().getMid());
			Set<String> tidSet = new HashSet<String>();
			for (TerminalDetails t : terminalDetails) {
				String mtid = t.getTid();
				tidSet.add(mtid.toString());
				// tidSet.add(t.getDeviceId());
			}
			ArrayList<String> dIdSet = new ArrayList<String>();
			for (TerminalDetails t : terminalDetails) {
				String did = t.getDeviceId();
				dIdSet.add(did.toString());

			}
			model.addAttribute("devIdList", dIdSet);
			model.addAttribute("tidList", tidSet);
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	// transactionService.searchMobileUserTransactions(i, paginationBean);

	// model.addAttribute("tidSet", tidSet);
	// model.addAttribute("paginationBean", paginationBean);

	/*
	 * return TEMPLATE_MERCHANT; }
	 */
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public String displayTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			HttpServletRequest request,

			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		

		HttpSession session=request.getSession();
		
		String myName =(String)session.getAttribute("userName");
		logger.info("Search All Transaction By Merchant " + myName);
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String fromDate1 = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String toDate1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+fromDate1+" to date:"+toDate1);
		
		
		
		/*String fromDate1 = null;
		String toDate1 = null;
		if ((fromDate != null || !fromDate.isEmpty())
				&& (toDate != null || !toDate.isEmpty())) {
			try {
				fromDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(fromDate));
				toDate1 = new SimpleDateFormat("yyyy-MM-dd")
						.format(new SimpleDateFormat("dd/MM/yyyy")
								.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
		}*/
		
		
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");

		transactionService.searchForSettlement(fromDate1, toDate1, tid, status,
				paginationBean, currentMerchant);

		// logger.info("from date:" + dat);
		// logger.info("to date:" + dat1);
		model.addAttribute("fromDate", fromDate1);

		model.addAttribute("toDate", toDate1);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		/*
		 * logger.info("test transaction :::" + devId);
		 * model.addAttribute("devId", devId);
		 */
		// logger.info("test transaction :::"+ paginationBean.getItemList()
		// ==null);
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		// logger.info("test data "+ paginationBean.getItemList());
		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 * 
		 * if (forSettlement.getStatus().equals("CT")) {
		 * forSettlement.setStatus("CASH SALE"); } if
		 * (forSettlement.getStatus().equals("CV")) {
		 * forSettlement.setStatus("CASH CANCELLED"); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED"); } if
		 * (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); }
		 * 
		 * if(forSettlement.getStatus()=="BOOST PAYMENT" ||
		 * forSettlement.getStatus()=="BOOST SETTLED" ||
		 * forSettlement.getStatus()=="BOOST CANCELLED" ||
		 * forSettlement.getStatus().equals("BOOST PAYMENT") ||
		 * forSettlement.getStatus().equals("BOOST CANCELLED") ||
		 * forSettlement.getStatus().equals("BOOST SETTLED")) {
		 * logger.info("inside check boost status"); if
		 * (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); }
		 * 
		 * if (forSettlement.getDate() != null && forSettlement.getTime() !=
		 * null) { try { // String sd=forSettlement.getDate()+new //
		 * SimpleDateFormat("y").format(new java.util.Date()); String sd =
		 * forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new
		 * SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * }
		 * 
		 * } else { if (forSettlement.getAmount() != null) { double amount = 0;
		 * amount = Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output);
		 * 
		 * } if (forSettlement.getDate() != null && forSettlement.getTime() !=
		 * null) { try { // String sd=forSettlement.getDate()+new //
		 * SimpleDateFormat("y").format(new java.util.Date()); String sd =
		 * forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * }
		 */

		/*
		 * String myName = principal.getName();
		 * logger.info("currently logged in as " + myName); Merchant
		 * currentMerchant = merchantService.loadMerchant(myName);
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant);
				
		List<TerminalDetails> terminalDetailsList = transactionService
				.getAllTid(currentMerchant);

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchcashtrans", method = RequestMethod.POST)
	public String displayCashTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+dat1);
		
		/*String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
		}*/
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cashTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		transactionService.searchForSettlementcash(dat, dat1, paginationBean,
				currentMerchant);
		/*transactionService.searchTransactionForSettlement(dat, dat1, paginationBean,
				currentMerchant,"CASH");*/
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		for (ForSettlement forSettlement : paginationBean.getItemList()) {
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {

				forSettlement.setMerchantName(terminalDetails.getContactName());
			}
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;

				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);

				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("CT")) {
				forSettlement.setStatus("CASH SALE");
			}
			if (forSettlement.getStatus().equals("CV")) {
				forSettlement.setStatus("CASH CANCELLED");
			}

			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {

					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchcardtrans", method = RequestMethod.POST)
	public String displaycardTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {
		
		
		logger.info("tid to search : "+ tid);
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal.getName());*/
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+dat1);
		
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
		}*/
		

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/cardTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchCardForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYWIRE", fromDate, toDate,status);
		model.addAttribute("fromDate", fromDate);
		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);
		model.addAttribute("status", status);
		
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		logger.info("No of Records "+ paginationBean.getItemList().size());
		/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {
				// logger.info("terminal details contact Name:" +
				// terminalDetails.getContactName());
				forSettlement.setMerchantName(terminalDetails.getContactName());
			}
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("S")) {
				forSettlement.setStatus("SETTLED");
			}
			if (forSettlement.getStatus().equals("P")) {
				forSettlement.setStatus("PENDING");
			}
			if (forSettlement.getStatus().equals("A")) {
				forSettlement.setStatus("NOT SETTLED");
			}
			if (forSettlement.getStatus().equals("C")) {
				forSettlement.setStatus("CANCELLED");
			}
			if (forSettlement.getStatus().equals("R")) {
				forSettlement.setStatus("REVERSAL");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null && forSettlement.getTimeStamp()!= null ) {
				try {
					// String sd=forSettlement.getDate()+new
					// SimpleDateFormat("y").format(new java.util.Date());
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}*/
		/*
		 * String myName = principal.getName();
		 * logger.info("currently logged in as " + myName); Merchant
		 * currentMerchant = merchantService.loadMerchant(myName);
		 */
		List<TerminalDetails> terminalDetailsList = transactionService
				.getEzywireTerminalDetails(currentMerchant);

		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}*/
		model.addAttribute("terminalDetailsList", terminalDetailsList);

		//model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchboost", method = RequestMethod.POST)
	public String displayboostTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		logger.info("current username: "+myName);
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/
		
		logger.info("current merchant MID: "+currentMerchant.getMid().getMid());
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+dat1);
		
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
*/
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/boostTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementBoost(dat, dat1, tid, status,
				paginationBean, currentMerchant);

	//	transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "BOOST", fromDate, toDate,status);
		
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchmoto", method = RequestMethod.POST)
	public String displayMotoTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		/*String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}*/

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/MotoTransactionList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		transactionService.searchForSettlementMoto(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "MOTO", fromDate, toDate,status);
		
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table response

		} else {
			model.addAttribute("responseData", null);
		}
		
				
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);
		
		return TEMPLATE_MERCHANT;
	}
	
	
	
	@RequestMapping(value = "/searchLinkmoto", method = RequestMethod.POST)
	public String displayMotoLinkTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		
		/*String dat = null;
		String dat1 = null;
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}*/

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/MotoLinkTransactionList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMotoMid());
		transactionService.searchForSettlementMoto(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "MOTO", fromDate, toDate,status);
		
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table response

		} else {
			model.addAttribute("responseData", null);
		}
		
				
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);
		
		return TEMPLATE_MERCHANT;
	}
	
	

//	//search grab pay 
	@RequestMapping(value = "/searchgrabpay", method = RequestMethod.GET)
	public String displaygrabTransactionSearch(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		logger.info("/displaygrabTransactionSearch");
		
		HttpSession session=request.getSession();
		String myName = (String) session.getAttribute("userName");

		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		PageBean pageBean = new PageBean("transactions list","merchantweb/transaction/grabPayTransactionList",
				Module.TRANSACTION_WEB,"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);

		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();

		paginationBean.setCurrPage(currPage);
		
		List<String> terminalDetailsList = transactionService.getGpayTidbymerchantFK(currentMerchant);
		
		transactionService.getGrabTransactionForSettlement(paginationBean,terminalDetailsList, fromDate, toDate);
		
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
		if (paginationBean.getItemList().size() > 0) {

			for (ForSettlement forSettlement : paginationBean.getItemList()) {
				/*TerminalDetails terminalDetails = transactionService
						.getTerminalDetailsByTid(forSettlement.getTid()
								.toString());
				if (terminalDetails != null) {
					
					forSettlement.setMerchantName(terminalDetails
							.getContactName());
				}*/
				
				MobileUser terminalDetails = transactionService
						.getMobileUserByGpayTid(forSettlement.getTid()
								.toString());
				
				
				if (terminalDetails != null) {
					
					forSettlement.setMerchantName(terminalDetails
							.getMerchant().getBusinessName());
				}
				
				if (forSettlement.getAmount() != null) {
					double amount = 0;
					amount = Double.parseDouble(forSettlement.getAmount()) / 100;
					// forSettlement.setAmount(amount+"0");
					String pattern = "#,##0.00";
					DecimalFormat myFormatter = new DecimalFormat(pattern);
					String output = myFormatter.format(amount);
					// System.out.println(" Amount :"+output);
					forSettlement.setAmount(output);
				}
				
				if (forSettlement.getStatus().equals("GPS")) {
					forSettlement.setStatus("GRABPAY COMPLETED");
				}else if (forSettlement.getStatus().equals("GPP")) {
					forSettlement.setStatus("GRABPAY PENDING");
				}else if (forSettlement.getStatus().equals("GRF")) {
					forSettlement.setStatus("GRABPAY REFUND");
				}else if (forSettlement.getStatus().equals("GPC")) {
					forSettlement.setStatus("GRABPAY CANCELLED");
				}else if (forSettlement.getStatus().equals("GPT")) {
					forSettlement.setStatus("GRABPAY SETTLED");
				}

				if (forSettlement.getTimeStamp() != null) {
					
					try {

						String rd = new SimpleDateFormat("dd-MMM-yyyy")
								.format(new SimpleDateFormat("yyyy-MM-dd").parse(forSettlement.getTimeStamp()));

						forSettlement.setDate(rd);

						String rt1 = new SimpleDateFormat("HH:mm:ss").format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
								.parse(forSettlement.getTimeStamp().toString()));
						forSettlement.setTime(rt1);

					} catch (ParseException e) {
					}

				}
				

			}

			model.addAttribute("paginationBean", paginationBean);
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	

	
	@RequestMapping(value = "/searchezyway", method = RequestMethod.POST)
	public String searchEzyWayTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		
		logger.info("tid for search"+tid);
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/
		
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		/*String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}*/

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyWayTransactionList",Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyWay(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYWAY", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzywayMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetailsList) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		
		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}

	@RequestMapping(value = "/searchezyrec", method = RequestMethod.POST)
	public String searchEzyrecTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		
		/*String dat = null;
		String dat1 = null;

		//String txn_Type = "MOTO";
		//logger.info("status: " + status + " txn_type: " + txn_Type);

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
*/
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyRecTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyRec(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYREC", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		

		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);*/
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	
	@RequestMapping(value = "/searchezypod", method = RequestMethod.POST)
	public String searchEzypodTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		/*String dat = null;
		String dat1 = null;

		//String txn_Type = "MOTO";
		//logger.info("status: " + status + " txn_type: " + txn_Type);

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}*/

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyPODTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyRec(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYREC", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		

		/*Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);*/
		
		TerminalDetails termDetails = merchantService.loadTerminalDetailsByMid(currentMerchant.getMid().getEzyrecMid());
		 String mid_ezyPOD;
		 if((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
			 
			 mid_ezyPOD = currentMerchant.getMid().getEzyrecMid();
			
		 }else {
			 mid_ezyPOD = currentMerchant.getMid().getEzyrecMid();
		 }
		 
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(mid_ezyPOD);
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	@RequestMapping(value = "/searchezyrecplus", method = RequestMethod.POST)
	public String searchEzyrecplusTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		logger.info("searchezyrecplus" + fromDate +toDate);
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		/*String dat = null;
		String dat1 = null;
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}
*/
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzyRecPlusTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		logger.info("searchForSettlementEzyRecplus");
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyRecplus(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		
		List<TerminalDetails> terminalDetailsList = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());
		
		model.addAttribute("terminalDetailsList", terminalDetailsList);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	@RequestMapping(value = "/searchezypass", method = RequestMethod.POST)
	public String searchEzyPassTransactionSearchByTid(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName=(String)session.getAttribute("userName");
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		/*Merchant currentMerchant = merchantService.loadMerchant(principal
				.getName());*/
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);

		/*String dat = null;
		String dat1 = null;

		//String txn_Type = "MOTO";
		//logger.info("status: " + status + " txn_type: " + txn_Type);

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

		}*/

		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/EzypassTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		logger.info("test transaction " + fromDate);
		transactionService.searchForSettlementEzyPass(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		//transactionService.getCardTransactionForSettlement(paginationBean, currentMerchant, "EZYPASS", fromDate, toDate,status);
		
		model.addAttribute("fromDate", fromDate);

		model.addAttribute("toDate", toDate);
		model.addAttribute("tid", tid);

		model.addAttribute("status", status);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) {
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName());
		 * forSettlement.setMerchantName(terminalDetails.getContactName()); }
		 */
		/*
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()); //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("BPS")) {
		 * forSettlement.setStatus("BOOST SETTLED"); } if
		 * (forSettlement.getStatus().equals("BP")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPA")) {
		 * forSettlement.setStatus("BOOST PAYMENT"); } if
		 * (forSettlement.getStatus().equals("BPC")) {
		 * forSettlement.setStatus("BOOST CANCELLED"); }
		 * 
		 * if ( forSettlement.getTime() != null) { try {
		 * 
		 * String sd = forSettlement.getTimeStamp(); String rd = new
		 * SimpleDateFormat("dd-MMM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzypassMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		model.addAttribute("devIdList", dIdSet);

		model.addAttribute("tidList", tidSet);
		model.addAttribute("paginationBean", paginationBean);

		return TEMPLATE_MERCHANT;

	}
	
	
	@RequestMapping(value = { "/details/{id}" }, method = RequestMethod.GET)
	public String displayTransactionDetails(final Model model,
			@PathVariable final String id, HttpServletRequest request,
			HttpServletResponse response, Principal principal) {
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//Merchant merchant = merchantService.loadMerchant(principal.getName());
		Merchant merchant = merchantService.loadMerchant(myName);

		logger.info("Merchant Receipt logged by" + ":" + principal.getName());
		logger.info("trxID: "+id);
		ForSettlement settle = transactionService.getForSettlement(id);
		if (settle.getTxnType() == null) {
			settle.setTxnType("CARD");
		}
		logger.info(" Txn Type : " + settle.getTxnType());
		if (settle.getTxnType().equals("CASH")) {

			/*PageBean pageBean = new PageBean("Transactions Details",
					"merchantweb/transaction/cashreceipt", null);*/

			
			  PageBean pageBean = new PageBean("Transactions Details",
			  "merchantweb/transaction/CashReceiptNew", null);
			 
			logger.info("Transaction Id :" + id);
			DataTransferObject dt = new DataTransferObject();

			String txn = settle.getStatus();
			if (txn.equals("CT")) {
				dt.setTxnType("CASH SALE");
			} else {
				dt.setTxnType("CASH CANCELLED");
			}
			try {
				dt.setMerchantName(merchant.getBusinessName());
				dt.setMerchantAddr1(merchant.getBusinessAddress1());
				dt.setMerchantAddr2(merchant.getBusinessAddress2());
				dt.setMerchantCity(merchant.getCity());
				dt.setMerchantPostCode(merchant.getPostcode());
				dt.setMerchantContNo(merchant.getBusinessContactNumber());
				if ((settle.getLatitude() != null)) {
					dt.setLatitude(settle.getLatitude());
					logger.info("Latitude id:" + dt.getLatitude());
				}
				if ((settle.getLongitude() != null)) {
					dt.setLongitude(settle.getLongitude());
					logger.info("Longitude id:" + dt.getLatitude());
				}
				
				//dt.setMapUrl(UrlSigner.GenerateMapImage(dt.getLatitude(), dt.getLongitude()));
				//logger.info("Generated Map Image URL: "+dt.getMapUrl());
				// new changes for receipt
				if (settle.getInvoiceId() != null) {
					dt.setRefNo(settle.getInvoiceId());
					logger.info("invoice id:" + dt.getRefNo());
				} else {
					dt.setRefNo("");
				}
				if (settle.getTid() != null) {
					dt.setTid(settle.getTid());
				}
				dt.setMid(settle.getMid());
				dt.setAmount(settle.getAmount());
				dt.setAdditionAmount(settle.getAdditionAmount());
				String st = settle.getTime();
				String sd = settle.getTimeStamp();
				String pinEntry = settle.getPinEntry();
				dt.setPinEntry(pinEntry);
				try {

					/*String rd = new SimpleDateFormat("dd MMMM yyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm")
							.format(new SimpleDateFormat("HHmmss").parse(st));*/
					
					
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					dt.setDate(rd);
					dt.setTime(rt);
					//dt.setDate(rd.toUpperCase());
					
				} catch (ParseException e) {
					e.printStackTrace();
				}
				double amount = 0;
				logger.info("Amount For receipt :" + settle.getAmount());
				if (settle.getAmount() != null) {
					amount = Double.parseDouble(settle.getAmount()) / 100;
				}
				double tips = 0;
				double total = amount;
				if (settle.getAdditionAmount() != null) {
					tips = Double.parseDouble(settle.getAdditionAmount()) / 100;
					amount = amount - tips;
					total = amount + tips;

				}
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				String output1 = myFormatter.format(tips);
				String output2 = myFormatter.format(total);
				// System.out.println(" Amount :"+output);
				// forSettlement.setAmount(output);
				dt.setAdditionAmount(output1);
				dt.setAmount(output);
				dt.setTotal(output2);
				dt.setTraceNo(settle.getStan());
				if (settle.getInvoiceId() != null) {
					dt.setInvoiceNo(settle.getInvoiceId());
				} else {
					dt.setInvoiceNo("");
				}

			} catch (Exception e) {
				System.out.println("Record not Found..!");
				request.setAttribute("errMsg",
						"Data not Available for this Transaction ID...!");
			}
			
			request.setAttribute("dto", dt);
			model.addAttribute("pageBean", pageBean);
			//return "merchantweb/transaction/CashReceiptNew";

			//return "merchantweb/transaction/cashreceipt";
			return "merchantweb/transaction/CashReceipt_v0.2";
			

		} else {
			
			PageBean pageBean = new PageBean("Transactions Details",
					"merchantweb/transaction/receipt", null);
			//logger.info("Transaction Id3333333333 :" + id);
			TransactionRequest trRequest = transactionService
					.loadTransactionRequest(id);
			TransactionResponse trResponse = transactionService
					.loadTransactionResponse(id);
			TerminalDetails termDetails =merchantService.loadTerminalDetailsByMid(merchant.getMid().getEzyrecMid());
			Receipt a = transactionService.getReceiptSignature(id);

			DataTransferObject dt = new DataTransferObject();
			
			dt.setHostType(settle.getHostType());
			if (a != null) {
				if (a.getSignature() != null) {
					String signdata = new String(a.getSignature());
					
					dt.setSign(signdata);
				}
			}

			String txn = settle.getStatus();
			String pinEntry = settle.getPinEntry();
			dt.setPinEntry(pinEntry);
		
			if(settle.getHostType()!=null) {
				if (txn.equals("S") || txn.equals("A")) 
				{
					logger.info("txntype: " + settle.getTxnType());
					if (settle.getTxnType().equals("MOTO")) {
						dt.setTxnType("UMOBILE EZYMOTO SALE");
					} else if (settle.getTxnType().equals("EZYWAY")) {
						dt.setTxnType("UMOBILE EZYWAY SALE");
					} else if (settle.getTxnType().equals("EZYREC") || settle.getTxnType().equals("RECURRING")) {
						dt.setTxnType("UMOBILE EZYREC SALE");
					} else if (settle.getTxnType().equals("EZYPASS")) {
						dt.setTxnType("UMOBILE EZYPASS SALE");
					} else {
						dt.setTxnType("UMOBILE SALE");
					}

				} else {

					if (settle.getTxnType().equals("MOTO")) {
						dt.setTxnType("UMOBILE EZYMOTO VOID");
					} else if (settle.getTxnType().equals("EZYWAY")) {
						dt.setTxnType("UMOBILE EZYWAY VOID");
					} else if (settle.getTxnType().equals("EZYREC") || settle.getTxnType().equals("RECURRING")) {
						dt.setTxnType("UMOBILE EZYREC VOID");
					} else if (settle.getTxnType().equals("EZYPASS")) {
						dt.setTxnType("UMOBILE EZYPASS VOID");
					} else {
						dt.setTxnType("UMOBILE VOID");
					}

				}
			}else {
				if (txn.equals("S") || txn.equals("A")) 
				{
					logger.info("txntype: " + settle.getTxnType());
					if (settle.getTxnType().equals("MOTO")) {
						dt.setTxnType("EZYMOTO SALE");
					}else if (settle.getTxnType().equals("EZYLINK")) {
						dt.setTxnType("EZYLINK SALE");
					}else if (settle.getTxnType().equals("EZYWAY")) {
						dt.setTxnType("EZYWAY SALE");
					} else if (settle.getTxnType().equals("EZYREC") && ((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD")))) {
						dt.setTxnType("EZYPOD SALE");
					} else if (settle.getTxnType().equals("EZYREC") || settle.getTxnType().equals("RECURRING")) {
						dt.setTxnType("EZYREC SALE");
					} else if (settle.getTxnType().equals("EZYPASS")) {
						dt.setTxnType("EZYPASS SALE");
				}else if( settle.getTxnType().equals("RECPLUS") )
				{
					dt.setTxnType("EZYREC+ SALE");
				}else if( settle.getTxnType().equals("GRABPAY") )
				{
					dt.setTxnType("GRABPAY SALE");
					} else {
						dt.setTxnType("SALE");
					}

				} else {

					if (settle.getTxnType().equals("MOTO")) {
						dt.setTxnType("EZYMOTO VOID");
					}else if (settle.getTxnType().equals("EZYLINK")) {
						dt.setTxnType("EZYLINK VOID");
					} else if (settle.getTxnType().equals("EZYWAY")) {
						dt.setTxnType("EZYWAY VOID");
					} else if (settle.getTxnType().equals("EZYREC") && ((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD")))) {
						dt.setTxnType("EZYPOD VOID");
					} else if (settle.getTxnType().equals("EZYREC") || settle.getTxnType().equals("RECURRING")) {
						dt.setTxnType("EZYREC VOID");
					} else if (settle.getTxnType().equals("EZYPASS")) {
						dt.setTxnType("EZYPASS VOID");
					} else if (settle.getTxnType().equals("RECPLUS")){
						dt.setTxnType("EZYREC+ VOID");
					}else if( settle.getTxnType().equals("GRABPAY") ){
						dt.setTxnType("GRABPAY VOID");
					} else {
						dt.setTxnType("VOID");
					}

				}
			}
			try {
				dt.setMerchantName(merchant.getBusinessName());
				dt.setMerchantAddr1(merchant.getBusinessAddress1());
				dt.setMerchantAddr2(merchant.getBusinessAddress2());
				dt.setMerchantCity(merchant.getCity());
				dt.setMerchantPostCode(merchant.getPostcode());
				dt.setMerchantContNo(merchant.getBusinessContactNumber());

				if ((trRequest.getLatitude() != null)) {
					dt.setLatitude(trRequest.getLatitude());
					logger.info("Latitude id:" + dt.getLatitude());

				}
				if ((trRequest.getLongitude() != null)) {
					dt.setLongitude(trRequest.getLongitude());
					logger.info("Longitude id:" + dt.getLatitude());

				}
				
				//dt.setMapUrl(UrlSigner.GenerateMapImage(dt.getLatitude(), dt.getLongitude()));
				//logger.info("Generated Map Image URL: "+dt.getMapUrl());
				// new changes for receipt
				dt.setBatchNo(settle.getBatchNo());
				logger.info("get batchno:" + dt.getBatchNo());

				if (settle.getInvoiceId() != null) {

					dt.setRefNo(settle.getInvoiceId());
					logger.info("invoice id:" + dt.getRefNo());
				} else {
					dt.setRefNo("");
				}
				if (trRequest.getTid() != null) {
					dt.setTid(trRequest.getTid());
				}
				dt.setMid(trRequest.getMid());
				//dt.setAmount(trRequest.getAmount());
				dt.setAmount(settle.getAmount());
				dt.setAdditionAmount(trRequest.getAdditionalAmount());
				// String rrn=HexatoAscii.hexaToAscii(trResponse.getRrn(),
				// true);
				// dt.setRrn(rrn);
				dt.setAid(trRequest.getAid());
				dt.setStan(trRequest.getStan());
				dt.setMaskedPan(trRequest.getMaskedPan());
				if (trRequest.getAid() != null
						&& trRequest.getCardHolderName() != null) {
					// dt.setCardType(CardType.getCardType(trRequest.getAid()));
					dt.setCardHolderName(trRequest.getCardHolderName());
				}
				/*dt.setDate(trResponse.getLocalDate());
				dt.setTime(trResponse.getLocalTime());*/
				// String
				// resposecode=HexatoAscii.hexaToAscii(trResponse.getAidResponse(),
				// true);
				// dt.setResponseCode(resposecode);
				String st = trResponse.getLocalTime();
				// String sd=trResponse.getLocalDate()+new
				// SimpleDateFormat("y").format(new java.util.Date());
				String sd = trResponse.getTimeStamp();
				try {

					/*String rd = new SimpleDateFormat("dd MMMM yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm")
							.format(new SimpleDateFormat("HHmmss").parse(st));*/
					String rd = new SimpleDateFormat("dd-MMM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(settle.getTimeStamp()));
					//dt.setDate(rd.toUpperCase());
					dt.setDate(rd);
					dt.setTime(rt);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				String cardNum = null;
				if (trRequest.getMaskedPan() == null
						|| trRequest.getMaskedPan().length() < 4) {
					cardNum = trRequest.getMaskedPan();
				} else {
					cardNum = trRequest.getMaskedPan().substring(
							trRequest.getMaskedPan().length() - 4);
				}
				String finalNum = String.format("XXXX %s", cardNum);
				dt.setCardNo(finalNum);
				double amount = 0;
				logger.info("Amount For receipt :" + settle.getAmount());
				if (settle.getAmount() != null) {
					amount = Double.parseDouble(settle.getAmount()) / 100;
				}
				double tips = 0;
				double total = amount;
				/*if (trRequest.getAdditionalAmount() != null) {
					tips = Double.parseDouble(trRequest.getAdditionalAmount()) / 100;
					amount = amount - tips;
					total = amount + tips;

				}*/
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				String output1 = myFormatter.format(tips);
				String output2 = myFormatter.format(total);
				// System.out.println(" Amount :"+output);
				// forSettlement.setAmount(output);
				dt.setAdditionAmount(output1);
				dt.setAmount(output);
				dt.setTotal(output2);
				dt.setCardHolderName(trRequest.getCardHolderName());
				
				dt.setAid(trRequest.getAid());
				/*if (trRequest.getAid() != null) {
					dt.setCardType(CardType.getCardType(trRequest.getAid()));
				} else {
					dt.setCardType("");
				}*/
				
				if(trRequest.getCardScheme() != null && trRequest.getCardType() != null){
	                dt.setCardType(trRequest.getCardScheme()+" "+trRequest.getCardType());
	                logger.info("Card Type from Txn Request Card Scheme and Card Type : "+dt.getCardType());
	            }else if(trRequest.getApplicationLabel() != null){
	               
	                dt.setCardType(trRequest.getApplicationLabel());
	                logger.info("Card Type from Txn Request : "+dt.getCardType());
	            }else if(trRequest.getApplicationLabel() == null && trRequest.getAid() != null){
	                dt.setCardType(CardType.getCardType(trRequest.getAid()));
	                logger.info("Card Type from AID : "+dt.getCardType());
	            }else{
	                dt.setCardType(" ");
	            }
				
				dt.setBatchNo(trRequest.getBatchNo());
				dt.setTraceNo(trRequest.getStan());
				dt.setRrn(hexaToAscii(trResponse.getRrn(), true));
				dt.setTC(trRequest.getStan() + trRequest.getTid());
				dt.setAid(trResponse.getAidResponse());
				if (settle.getBatchNo() != null) {
					dt.setBatchNo(settle.getBatchNo());
				} else {
					dt.setBatchNo("");
				}
				if (settle.getInvoiceId() != null) {
					dt.setInvoiceNo(settle.getInvoiceId());
				} else {
					dt.setInvoiceNo("");
				}

				String resposecode = hexaToAscii(trResponse.getAidResponse(),
						true);

				dt.setApprCode(resposecode);
			} catch (Exception e) {
				System.out.println("Record not Found..!");
				request.setAttribute("errMsg",
						"Data not Available for this Transaction ID...!");
			}
			/*
			 * Merchant merchant = merchantService.loadMerchantByPk(id);
			 * Transaction transaction =
			 * transactionService.loadTransactionByPk(id); MobileUser mobileUser
			 * = mobileUserService.loadMobileUserByPk(id);
			 * model.addAttribute("transaction", transaction);
			 * model.addAttribute("mobileUser", mobileUser);
			 * model.addAttribute("merchant", merchant);
			 */
			// model.addAttribute("dto", dt);
			request.setAttribute("dto", dt);
			model.addAttribute("pageBean", pageBean);
			 //return "merchantweb/transaction/CardReceiptNew";
			//return "merchantweb/transaction/receipt";
			return "merchantweb/transaction/receipt_v0.2";
		}
		// return "redirect:/transactionweb/list/1";
	}


	public static String hexaToAscii(String s, boolean toString) {

		String retString = "";
		String tempString = "";
		int offset = 0;
		if (toString) {
			for (int i = 0; i < s.length() / 2; i++) {

				tempString = s.substring(offset, offset + 2);
				retString += tempString.equalsIgnoreCase("1c") ? "[1C]"
						: decodeHexString(tempString);
				offset += 2;
			} // end for
		} else {

			for (int i = 0; i < s.length(); i++) {

				tempString = s.substring(offset, offset + 1);
				retString += encodeHexString(tempString);
				offset += 1;
			} // end for
		}
		return retString;
	} // end hexaToAscii

	public static String decodeHexString(String hexText) {

		String decodedText = null;
		String chunk = null;

		if (hexText != null && hexText.length() > 0) {
			int numBytes = hexText.length() / 2;

			byte[] rawToByte = new byte[numBytes];
			int offset = 0;
			for (int i = 0; i < numBytes; i++) {
				chunk = hexText.substring(offset, offset + 2);
				offset += 2;
				rawToByte[i] = (byte) (Integer.parseInt(chunk, 16) & 0x000000FF);
			}
			// System.out.println(rawToByte.toString());
			decodedText = new String(rawToByte);
		}
		return decodedText;
	}

	public static String encodeHexString(String sourceText) {
		byte[] rawData = sourceText.getBytes();
		StringBuffer hexText = new StringBuffer();
		String initialHex = null;
		int initHexLength = 0;

		for (int i = 0; i < rawData.length; i++) {
			// System.out.println("raw "+rawData[i]);
			int positiveValue = rawData[i] & 0x000000FF;
			initialHex = Integer.toHexString(positiveValue);
			initHexLength = initialHex.length();
			while (initHexLength++ < 2) {
				hexText.append("0");
			}
			hexText.append(initialHex);
		}
		return hexText.toString().toUpperCase();
	}

	@RequestMapping(value = "/boostExport", method = RequestMethod.POST)
	public ModelAndView getExportBoost(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		logger.info("from date:"+dat+dat1);

		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		/*transactionService.searchForSettlementBoost(dat, dat1, tid, status,
				paginationBean, currentMerchant);*/
		/*transactionService.searchBoostForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);*/
		transactionService.searchForSettlementBoost(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		
		  /*for (ForSettlement forSettlement : paginationBean.getItemList()) { 
		 
			  logger.info("tid details:" + forSettlement.getTid().toString());
		  TerminalDetails terminalDetails = transactionService.getTerminalDetailsByTid(forSettlement.getTid().toString()); 
		  if(terminalDetails != null) { //
			  logger.info("terminal details contact Name:" + //
					  terminalDetails.getContactName()); 
			  if(terminalDetails.getContactName() != null) {
				  forSettlement.setMerchantName(terminalDetails
						  .getContactName().toUpperCase()); } else {
							  forSettlement.setMerchantName(""); } }
		  
		  	logger.info("test data "+ paginationBean.getItemList());*/
		
		
		/*for (ForSettlement forSettlement : paginationBean.getItemList()) {

			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100; //
				forSettlement.setAmount(amount + "0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);

				String output = myFormatter.format(amount); //
				System.out.println(" Amount :" + output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("S")) {
				forSettlement.setStatus("SETTLED");

			}
			if (forSettlement.getStatus().equals("P")) {
				forSettlement.setStatus("PENDING");
			}
			if (forSettlement.getStatus().equals("A")) {
				forSettlement.setStatus("NOT SETTLED");
			}
			if (forSettlement.getStatus().equals("C")) {
				forSettlement.setStatus("CANCELLED");
			}
			if (forSettlement.getStatus().equals("R")) {
				forSettlement.setStatus("REVERSAL");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {
					
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}
*/
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/motoExport", method = RequestMethod.POST)
	public ModelAndView getExportMoto(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);

		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementMoto(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnMerchantMotoExcel", "txnList", list1);
		} else {
			return new ModelAndView("txnMerchantMotoPdf", "txnList", list1);
		}

	}

	
	@RequestMapping(value = "/ezywayExport", method = RequestMethod.POST)
	public ModelAndView getExportEzyway(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getEzywayMid());
		
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyWay(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzywayMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	@RequestMapping(value = "/ezypassExport", method = RequestMethod.POST)
	public ModelAndView getExportEzypass(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getEzypassMid());
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);

		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyPass(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzypassMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/ezyrecExport", method = RequestMethod.POST)
	public ModelAndView getExportEzyrec(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());
		
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyRec(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	
	@RequestMapping(value = "/ezypodExport", method = RequestMethod.POST)
	public ModelAndView getExportEzypod(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			 * sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyRec(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		
		TerminalDetails termDetails = merchantService.loadTerminalDetailsByMid(currentMerchant.getMid().getEzyrecMid());
		 String mid_ezyPOD;
		 if((termDetails.getDeviceType() == "EZYPOD")||(termDetails.getDeviceType().equals("EZYPOD"))) {
			 
			 mid_ezyPOD = currentMerchant.getMid().getEzyrecMid();
			
		 }else {
			 mid_ezyPOD = currentMerchant.getMid().getEzyrecMid();
		 }

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(mid_ezyPOD);

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/ezyrecplusExport", method = RequestMethod.POST)
	public ModelAndView getExportEzyrecplus(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);

		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlementEzyRecplus(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

	

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		
		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	
	//grabpay export
	@RequestMapping(value = "/grabpayExport", method = RequestMethod.POST)
	public ModelAndView getExportGrabpay(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("current Merchant: " + currentMerchant.getMid().getMid());
		
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);

		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForGrabpay(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		logger.info("No of Records: "+paginationBean.getItemList().size());
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

	

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getEzyrecMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		
		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	@RequestMapping(value = "/exportCardTrans", method = RequestMethod.POST)
	public ModelAndView getExportCardTrans(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+dat1);
		
		/*String dat = null;
		String dat1 = null;
		
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
		}*/
		
		

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		/*if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			  dat = fromDate; String sub[] = dat.split("/"); dat = sub[0] +
			  sub[1];
			 
			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			  dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			  sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchCardForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);
		/*
		 * transactionService.searchForSettlement(dat, dat1, paginationBean,
		 * currentMerchant);
		 */

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*for (ForSettlement forSettlement : paginationBean.getItemList()) {
			// logger.info("tid details:" + forSettlement.getTid().toString());	
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {
				// logger.info("terminal details contact Name:" +
				// terminalDetails.getContactName());
				if (terminalDetails.getContactName() != null) {
					forSettlement.setMerchantName(terminalDetails
							.getContactName().toUpperCase());
				} else {
					forSettlement.setMerchantName("");
				}
			}
			
			 * logger.info("test data "+ paginationBean.getItemList());
			 * for(ForSettlement forSettlement:paginationBean.getItemList()){
			 
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("S")) {
				forSettlement.setStatus("SETTLED");

			}
			if (forSettlement.getStatus().equals("P")) {
				forSettlement.setStatus("PENDING");
			}
			if (forSettlement.getStatus().equals("A")) {
				forSettlement.setStatus("NOT SETTLED");
			}
			if (forSettlement.getStatus().equals("C")) {
				forSettlement.setStatus("CANCELLED");
			}
			if (forSettlement.getStatus().equals("R")) {
				forSettlement.setStatus("REVERSAL");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {
					// String sd=forSettlement.getDate()+new
					// SimpleDateFormat("y").format(new java.util.Date());
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}*/

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/exportCashTrans", method = RequestMethod.POST)
	public ModelAndView getExportCashTrans(
			final Model model,
			final java.security.Principal principal,

			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,

			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);

		logger.info("the merchant obj based on currently logged in user is: "
				+ currentMerchant);
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+dat1);
		
		/*String dat = null;
		String dat1 = null;

		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}

			logger.info("check from date:" + fromDate);
			logger.info("check from date:" + dat);

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		transactionService.searchForSettlementcash(dat, dat1, paginationBean,
				currentMerchant);

		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		for (ForSettlement forSettlement : paginationBean.getItemList()) {
			// logger.info("tid details:" + forSettlement.getTid().toString());
			TerminalDetails terminalDetails = transactionService
					.getTerminalDetailsByTid(forSettlement.getTid().toString());
			if (terminalDetails != null) {
				// logger.info("terminal details contact Name:" +
				// terminalDetails.getContactName());
				if (terminalDetails.getContactName() != null) {
					forSettlement.setMerchantName(terminalDetails
							.getContactName().toUpperCase());
				} else {
					forSettlement.setMerchantName("");
				}
			}
			/*
			 * logger.info("test data "+ paginationBean.getItemList());
			 * for(ForSettlement forSettlement:paginationBean.getItemList()){
			 */
			if (forSettlement.getAmount() != null) {
				double amount = 0;
				amount = Double.parseDouble(forSettlement.getAmount()) / 100;
				// forSettlement.setAmount(amount+"0");
				String pattern = "#,##0.00";
				DecimalFormat myFormatter = new DecimalFormat(pattern);
				String output = myFormatter.format(amount);
				// System.out.println(" Amount :"+output);
				forSettlement.setAmount(output);
			}
			if (forSettlement.getStatus().equals("CT")) {
				forSettlement.setStatus("CASH SALE");

			}
			if (forSettlement.getStatus().equals("CV")) {
				forSettlement.setStatus("CASH CANCELLED");
			}
			if (forSettlement.getDate() != null
					&& forSettlement.getTime() != null) {
				try {
					// String sd=forSettlement.getDate()+new
					// SimpleDateFormat("y").format(new java.util.Date());
					String sd = forSettlement.getTimeStamp();
					String rd = new SimpleDateFormat("dd-MM-yyyy")
							.format(new SimpleDateFormat("yyyy-MM-dd")
									.parse(sd));
					String rt = new SimpleDateFormat("HH:mm:ss")
							.format(new SimpleDateFormat("HHmmss")
									.parse(forSettlement.getTime()));
					forSettlement.setDate(rd);
					forSettlement.setTime(rt);
				} catch (ParseException e) {
				}

			}
		}

		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}

		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}

		List<ForSettlement> list1 = paginationBean.getItemList();

		/*
		 * if (!(export.equals("PDF"))) { return new
		 * ModelAndView("txnListExcelcash", "txnList", list1); } else { return
		 * new ModelAndView("txnListPdfcash", "txnList", list1); }
		 */

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}

	@RequestMapping(value = "/export", method = RequestMethod.POST)
	public ModelAndView getExport(
			final Model model,
			final java.security.Principal principal,
			@RequestParam("tid") final String tid,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate,
			@RequestParam("status") String status,
			@RequestParam("devId") String devId,
			@RequestParam("export") String export,HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") final int currPage) {

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+":"+status);
		// PageBean pageBean=new PageBean("Transactions Details",
		// "transaction/receipt", null);
		HttpSession session=request.getSession();
		String myName =(String)session.getAttribute("userName");
		//String myName = principal.getName();
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		
		Date frdate = new Date(fromDate);
		int fromday = frdate.getDate();
		int frommon = frdate.getMonth() + 1;
		int fromyear = frdate.getYear();
		int currentFrYear=fromyear+1900;  
		String frmon=String.format("%02d", frommon);   
		String frday= String.format("%02d", fromday);  
		//String fromdateString = frday + '/' + frmon + '/' + String.valueOf(currentFrYear);
		String dat = String.valueOf(currentFrYear)+'-'+frmon+'-'+frday;
		
		Date todate = new Date(toDate);
		int today = todate.getDate();
		int tomon = todate.getMonth() + 1;
		int toyear = todate.getYear();
		int currentToYear=toyear+1900;  
		String tmon=String.format("%02d", tomon);   
		String tday= String.format("%02d", today);  
		//String todateString = tday + '/' + tmon + '/' + String.valueOf(currentToYear);
		String dat1 = String.valueOf(currentToYear)+'-'+tmon+'-'+tday;
		
		logger.info("from date:"+dat+" to date:"+dat1);
		
		/*String dat = null;
		String dat1 = null;

		// logger.info("fromDate & toDate & Tid :"+fromDate+": & :"+toDate+": & :"+tid+": & :"+status);
		if (!(fromDate == null || fromDate.equals(""))
				&& !(toDate == null || toDate.equals(""))) {

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat = dateFormat.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(fromDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			logger.info("check from date:" + fromDate+" check from date:" + dat);

			// logger.info("DD sub : " + dat);
			// System.out.println("DD sub : " + dat);
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			try {
				dat1 = dateFormat1.format(new SimpleDateFormat("dd/MM/yyyy")
						.parse(toDate));
			} catch (ParseException e) {

				e.printStackTrace();
			}
			
			 * dat1 = toDate; String sub1[] = dat1.split("/"); dat1 = sub1[0] +
			 * sub1[1];
			 
			System.out.println("dat1:" + dat1);
		}*/
		PaginationBean<ForSettlement> paginationBean = new PaginationBean<ForSettlement>();
		paginationBean.setCurrPage(currPage);
		// logger.info("test transaction :::");
		transactionService.searchForSettlement(dat, dat1, tid, status,
				paginationBean, currentMerchant);

		
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response

		} else {
			model.addAttribute("responseData", null);
		}

		/*
		 * for (ForSettlement forSettlement : paginationBean.getItemList()) { //
		 * logger.info("tid details:" + forSettlement.getTid().toString());
		 * TerminalDetails terminalDetails = transactionService
		 * .getTerminalDetailsByTid(forSettlement.getTid().toString()); if
		 * (terminalDetails != null) { //
		 * logger.info("terminal details contact Name:" + //
		 * terminalDetails.getContactName()); if
		 * (terminalDetails.getContactName() != null) {
		 * forSettlement.setMerchantName(terminalDetails
		 * .getContactName().toUpperCase()); } else {
		 * forSettlement.setMerchantName(""); } }
		 * 
		 * logger.info("test data "+ paginationBean.getItemList());
		 * for(ForSettlement forSettlement:paginationBean.getItemList()){
		 * 
		 * if (forSettlement.getAmount() != null) { double amount = 0; amount =
		 * Double.parseDouble(forSettlement.getAmount()) / 100; //
		 * forSettlement.setAmount(amount+"0"); String pattern = "#,##0.00";
		 * DecimalFormat myFormatter = new DecimalFormat(pattern); String output
		 * = myFormatter.format(amount); //
		 * System.out.println(" Amount :"+output);
		 * forSettlement.setAmount(output); } if
		 * (forSettlement.getStatus().equals("CT")) {
		 * forSettlement.setStatus("CASH SALE");
		 * 
		 * } if (forSettlement.getStatus().equals("CV")) {
		 * forSettlement.setStatus("CASH CANCELLED"); } if
		 * (forSettlement.getStatus().equals("S")) {
		 * forSettlement.setStatus("SETTLED");
		 * 
		 * } if (forSettlement.getStatus().equals("P")) {
		 * forSettlement.setStatus("PENDING"); } if
		 * (forSettlement.getStatus().equals("A")) {
		 * forSettlement.setStatus("NOT SETTLED"); } if
		 * (forSettlement.getStatus().equals("C")) {
		 * forSettlement.setStatus("CANCELLED"); } if
		 * (forSettlement.getStatus().equals("R")) {
		 * forSettlement.setStatus("REVERSAL"); } if (forSettlement.getDate() !=
		 * null && forSettlement.getTime() != null) { try { // String
		 * sd=forSettlement.getDate()+new // SimpleDateFormat("y").format(new
		 * java.util.Date()); String sd = forSettlement.getTimeStamp(); String
		 * rd = new SimpleDateFormat("dd-MM-yyyy") .format(new
		 * SimpleDateFormat("yyyy-MM-dd") .parse(sd)); String rt = new
		 * SimpleDateFormat("HH:mm:ss") .format(new SimpleDateFormat("HHmmss")
		 * .parse(forSettlement.getTime())); forSettlement.setDate(rd);
		 * forSettlement.setTime(rt); } catch (ParseException e) { }
		 * 
		 * } }
		 */
		/*
		 * String myName = principal.getName();
		 * logger.info("currently logged in as " + myName); Merchant
		 * currentMerchant = merchantService.loadMerchant(myName);
		 */
		List<TerminalDetails> terminalDetails = transactionService
				.getTerminalDetails(currentMerchant.getMid().getMid());

		Set<String> tidSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String mtid = t.getTid();
			// tidSet.add(mtid.toString());
		}
		/*
		 * if (tid.equalsIgnoreCase(mtid)) { midTransationList.add(t); }
		 */
		Set<String> dIdSet = new HashSet<String>();
		for (TerminalDetails t : terminalDetails) {
			String did = t.getDeviceId();
			dIdSet.add(did.toString());
		}
		/*
		 * model.addAttribute("devIdList", dIdSet);
		 * 
		 * model.addAttribute("tidList", tidSet);
		 * model.addAttribute("paginationBean", paginationBean);
		 * 
		 * return TEMPLATE_MERCHANT;
		 */

		List<ForSettlement> list1 = paginationBean.getItemList();

		// System.out.println("display list:" + list1);
		// System.out.println("Export Type:" + export);

		if (!(export.equals("PDF"))) {
			return new ModelAndView("txnListExcel1", "txnList", list1);
		} else {
			return new ModelAndView("txnListPdf", "txnList", list1);
		}

	}
	
	
	@RequestMapping(value = { "/listFpxTxn" }, method = RequestMethod.GET)
	public String displayFpxTransactionSummary(
			final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/FpxTransactionList",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		PaginationBean<FpxTransaction> paginationBean = new PaginationBean<FpxTransaction>();
		paginationBean.setCurrPage(currPage);
		transactionService.listMerchantFPXTransactionByMid(paginationBean,
				currentMerchant,null,null);
				
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
	
		if (paginationBean.getItemList().size() > 0) {

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}

	}
	
	
	@RequestMapping(value = { "/searchFpxTxnSummary" }, method = RequestMethod.GET)
	public String searchFpxTxnSummary(final Model model,
	@RequestParam final String fromDate,
	@RequestParam final String toDate,
	HttpServletRequest request,
	@RequestParam(required = false, defaultValue = "1") final int currPage,
	final java.security.Principal principal) {
		logger.info("searchFpxTxnSummary admin" + fromDate +"::"+toDate);
		
		// logger.info("about to list all  transaction");
			HttpSession session=request.getSession();
			// logger.info("about to list all  transaction");
			String myName = (String) session.getAttribute("userName");
			//String myName = principal.getName();
			logger.info("currently logged in as " + myName);
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("card list transaction: " + currentMerchant);
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/FpxTransactionList",
					Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
		logger.info("Transaction Summary:" + principal.getName());
		PaginationBean<FpxTransaction> paginationBean = new PaginationBean<FpxTransaction>();
		paginationBean.setCurrPage(currPage);

		
		transactionService.listMerchantFPXTransactionByMid(paginationBean,
				currentMerchant,fromDate,toDate);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
		if (paginationBean.getItemList().size() > 0) {

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			
			logger.info("No Data");
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}
		
	}
	
	
	@RequestMapping(value = { "/exportFpxTxnSummary" }, method = RequestMethod.GET)
	public ModelAndView exportFpxTxnSummary(final Model model,
	@RequestParam final String fromDate,
	@RequestParam final String toDate,
	@RequestParam(required = false, defaultValue = "1") final int currPage,
	@RequestParam(required = false) String export,
	HttpServletRequest request,
	final java.security.Principal principal) {
		logger.info("searchFpxTxnSummary admin" + fromDate +"::"+toDate);
		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		logger.info("Transaction Summary:" + principal.getName());
		PaginationBean<FpxTransaction> paginationBean = new PaginationBean<FpxTransaction>();
		paginationBean.setCurrPage(currPage);
		
	
		transactionService.listMerchantFPXTransactionByMid(paginationBean,
				currentMerchant,fromDate,toDate);
		
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		
		List<FpxTransaction> list = paginationBean.getItemList();
		
		if (!(export.equals("PDF"))) {

			return new ModelAndView("fpxMerchantTxnExcel", "txnList", list);

		} else {
			return new ModelAndView("fpxMerchantTxnPdf", "txnList", list);
		}

	
	}
	
	@RequestMapping(value = { "/bizappSettlementSummary" }, method = RequestMethod.GET)
	public String bizappSettlement(final Model model,
			final java.security.Principal principal,
			@RequestParam(required = false, defaultValue = "1") final int currPage,HttpServletRequest request) {

		
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		PageBean pageBean = new PageBean("transactions list",
				"merchantweb/transaction/transactionBizappSettSummary",
				Module.TRANSACTION_WEB,
				"merchantweb/transaction/sideMenuTransaction");
		model.addAttribute("pageBean", pageBean);
		
		
		
		PaginationBean<BizAppSettlement> paginationBean = new PaginationBean<BizAppSettlement>();
		paginationBean.setCurrPage(currPage);
		
		
		transactionService.listbizappSettlementByMerchant(paginationBean,
				currentMerchant,null);
				
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
	
		if (paginationBean.getItemList().size() > 0) {

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}
		

	}
	@RequestMapping(value = { "/searchBizappSettlementSummary" }, method = RequestMethod.GET)
	public String searchBizappTxnSummary(final Model model,
	@RequestParam final String settlementDate,
	HttpServletRequest request,
	@RequestParam(required = false, defaultValue = "1") final int currPage,
	final java.security.Principal principal) {
		logger.info("searchBizappTxnSummary admin" + settlementDate);
		
		// logger.info("about to list all  transaction");
			HttpSession session=request.getSession();
			// logger.info("about to list all  transaction");
			String myName = (String) session.getAttribute("userName");
			//String myName = principal.getName();
			logger.info("currently logged in as " + myName);
			Merchant currentMerchant = merchantService.loadMerchant(myName);
			// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
			logger.info("card list transaction: " + currentMerchant);
			PageBean pageBean = new PageBean("transactions list",
					"merchantweb/transaction/transactionBizappSettSummary",
					Module.TRANSACTION_WEB,
					"merchantweb/transaction/sideMenuTransaction");
			model.addAttribute("pageBean", pageBean);
		logger.info("Transaction Summary:" + principal.getName());
		PaginationBean<BizAppSettlement> paginationBean = new PaginationBean<BizAppSettlement>();
		paginationBean.setCurrPage(currPage);

		transactionService.listbizappSettlementByMerchant(paginationBean,
				currentMerchant,settlementDate);
		
		logger.info("No of Records: "+paginationBean.getItemList().size());
		
		if (paginationBean.getItemList().size() > 0) {

			model.addAttribute("paginationBean", paginationBean);
			// TODO to get tid and device id
			
			return TEMPLATE_MERCHANT;
		} else {
			
			logger.info("No Data");
			model.addAttribute("paginationBean", paginationBean);
			/* model.addAttribute("devIdList", dIdSet); */
			model.addAttribute("responseData", "No Record found");
			return TEMPLATE_MERCHANT;
		}
		
	}
	
	@RequestMapping(value = { "/exportBizappTxnSummary" }, method = RequestMethod.GET)
	public ModelAndView exportBizappTxnSummary(final Model model,
	@RequestParam final String settledDate,
	@RequestParam(required = false, defaultValue = "1") final int currPage,
	@RequestParam(required = false) String export,
	HttpServletRequest request,
	final java.security.Principal principal) {
		logger.info("exportBizappTxnSummary admin" + settledDate );
		// logger.info("about to list all  transaction");
		HttpSession session=request.getSession();
		// logger.info("about to list all  transaction");
		String myName = (String) session.getAttribute("userName");
		//String myName = principal.getName();
		logger.info("currently logged in as " + myName);
		Merchant currentMerchant = merchantService.loadMerchant(myName);
		// logger.info(" for test merchant id :"+currentMerchant.getMid().getMid());
		logger.info("card list transaction: " + currentMerchant);
		logger.info("Transaction Summary:" + principal.getName());
		PaginationBean<BizAppSettlement> paginationBean = new PaginationBean<BizAppSettlement>();
		paginationBean.setCurrPage(currPage);
		
		
		transactionService.listbizappSettlementByMerchant(paginationBean,
				currentMerchant,settledDate);
		
		if (paginationBean.getItemList().isEmpty()
				|| paginationBean.getItemList() == null
				|| paginationBean.getItemList().size() == 0) {
			model.addAttribute("responseData", "No Records found"); // table
																	// response
		} else {
			model.addAttribute("responseData", null);
		}
		
		List<BizAppSettlement> list = paginationBean.getItemList();
		
		if (!(export.equals("PDF"))) {

			return new ModelAndView("bizappMerchantTxnExcel", "txnList", list);

		} else {
			return new ModelAndView("bizappMerchantTxnPdf", "txnList", list);
		}

	
	}

	
	
}
